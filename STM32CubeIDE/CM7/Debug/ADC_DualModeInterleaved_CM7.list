
ADC_DualModeInterleaved_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800da94  0800da94  0001da94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db74  0800db74  0001db74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db7c  0800db7c  0001db7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db80  0800db80  0001db80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800db84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000540  24000080  0800dbf0  00020080  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240005c0  0800dbf0  000205c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ea98  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003544  00000000  00000000  0003eb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001790  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001260  00000000  00000000  00043850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cfa0  00000000  00000000  00044ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f2db  00000000  00000000  00081a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001995f8  00000000  00000000  000a0d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b10  00000000  00000000  0023a324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  00240e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da7c 	.word	0x0800da7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800da7c 	.word	0x0800da7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d009      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d006      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d003      	beq.n	80006b4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006ac:	f06f 0301 	mvn.w	r3, #1
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b2:	e055      	b.n	8000760 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10f      	bne.n	80006da <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <BSP_LED_Init+0xe0>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <BSP_LED_Init+0xe0>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <BSP_LED_Init+0xe0>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	e021      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10f      	bne.n	8000700 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <BSP_LED_Init+0xe0>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <BSP_LED_Init+0xe0>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <BSP_LED_Init+0xe0>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	e00e      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <BSP_LED_Init+0xe0>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <BSP_LED_Init+0xe0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <BSP_LED_Init+0xe0>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <BSP_LED_Init+0xe4>)
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <BSP_LED_Init+0xe8>)
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	f107 0218 	add.w	r2, r7, #24
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fa42 	bl	8005bcc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <BSP_LED_Init+0xe8>)
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <BSP_LED_Init+0xe4>)
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fcf0 	bl	8006140 <HAL_GPIO_WritePin>
  }

  return ret;
 8000760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000762:	4618      	mov	r0, r3
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	0800daf4 	.word	0x0800daf4
 8000774:	24000000 	.word	0x24000000

08000778 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d009      	beq.n	80007a0 <BSP_LED_On+0x28>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d006      	beq.n	80007a0 <BSP_LED_On+0x28>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d003      	beq.n	80007a0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000798:	f06f 0301 	mvn.w	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e00b      	b.n	80007b8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <BSP_LED_On+0x4c>)
 80007a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <BSP_LED_On+0x50>)
 80007ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f005 fcc4 	bl	8006140 <HAL_GPIO_WritePin>
  }

  return ret;
 80007b8:	68fb      	ldr	r3, [r7, #12]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000000 	.word	0x24000000
 80007c8:	0800daf4 	.word	0x0800daf4

080007cc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d009      	beq.n	80007f4 <BSP_LED_Off+0x28>
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d006      	beq.n	80007f4 <BSP_LED_Off+0x28>
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d003      	beq.n	80007f4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80007ec:	f06f 0301 	mvn.w	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e00b      	b.n	800080c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <BSP_LED_Off+0x4c>)
 80007f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <BSP_LED_Off+0x50>)
 8000800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	f005 fc9a 	bl	8006140 <HAL_GPIO_WritePin>
  }

  return ret;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000000 	.word	0x24000000
 800081c:	0800daf4 	.word	0x0800daf4

08000820 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d009      	beq.n	8000848 <BSP_LED_Toggle+0x28>
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d006      	beq.n	8000848 <BSP_LED_Toggle+0x28>
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000840:	f06f 0301 	mvn.w	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e00b      	b.n	8000860 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <BSP_LED_Toggle+0x4c>)
 800084c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4907      	ldr	r1, [pc, #28]	; (8000870 <BSP_LED_Toggle+0x50>)
 8000854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f005 fc89 	bl	8006172 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000860:	68fb      	ldr	r3, [r7, #12]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000000 	.word	0x24000000
 8000870:	0800daf4 	.word	0x0800daf4

08000874 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <SystemInit+0xcc>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a30      	ldr	r2, [pc, #192]	; (8000940 <SystemInit+0xcc>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <SystemInit+0xcc>)
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <SystemInit+0xcc>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SystemInit+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <SystemInit+0xd0>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemInit+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemInit+0xd0>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4926      	ldr	r1, [pc, #152]	; (8000944 <SystemInit+0xd0>)
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <SystemInit+0xd4>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemInit+0xd0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemInit+0xd0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <SystemInit+0xd0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemInit+0xd0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemInit+0xd0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <SystemInit+0xd0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <SystemInit+0xd0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <SystemInit+0xd0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <SystemInit+0xd0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <SystemInit+0xd0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <SystemInit+0xd0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <SystemInit+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a12      	ldr	r2, [pc, #72]	; (8000944 <SystemInit+0xd0>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <SystemInit+0xd0>)
 8000902:	2200      	movs	r2, #0
 8000904:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <SystemInit+0xd8>)
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <SystemInit+0xd8>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <SystemInit+0xdc>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <SystemInit+0xe0>)
 8000918:	4013      	ands	r3, r2
 800091a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800091e:	d202      	bcs.n	8000926 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <SystemInit+0xe4>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemInit+0xe8>)
 8000928:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800092c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0xcc>)
 8000930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000934:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	58024400 	.word	0x58024400
 8000948:	eaf6ed7f 	.word	0xeaf6ed7f
 800094c:	580000c0 	.word	0x580000c0
 8000950:	5c001000 	.word	0x5c001000
 8000954:	ffff0000 	.word	0xffff0000
 8000958:	51008108 	.word	0x51008108
 800095c:	52004000 	.word	0x52004000

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000966:	2003      	movs	r0, #3
 8000968:	f002 fa78 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800096c:	f006 faaa 	bl	8006ec4 <HAL_RCC_GetSysClockFreq>
 8000970:	4602      	mov	r2, r0
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_Init+0x68>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	4913      	ldr	r1, [pc, #76]	; (80009cc <HAL_Init+0x6c>)
 800097e:	5ccb      	ldrb	r3, [r1, r3]
 8000980:	f003 031f 	and.w	r3, r3, #31
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_Init+0x68>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_Init+0x6c>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <HAL_Init+0x70>)
 80009a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <HAL_Init+0x74>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f81c 	bl	80009e8 <HAL_InitTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e002      	b.n	80009c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ba:	f000 f80d 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58024400 	.word	0x58024400
 80009cc:	0800dafc 	.word	0x0800dafc
 80009d0:	24000010 	.word	0x24000010
 80009d4:	2400000c 	.word	0x2400000c

080009d8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_InitTick+0x60>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e021      	b.n	8000a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_InitTick+0x64>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fa63 	bl	8002ede <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f002 fa1f 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x68>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000018 	.word	0x24000018
 8000a4c:	2400000c 	.word	0x2400000c
 8000a50:	24000014 	.word	0x24000014

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	24000018 	.word	0x24000018
 8000a78:	2400009c 	.word	0x2400009c

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2400009c 	.word	0x2400009c

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000018 	.word	0x24000018

08000adc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetREVID+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0c1b      	lsrs	r3, r3, #16
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	5c001000 	.word	0x5c001000

08000af4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3360      	adds	r3, #96	; 0x60
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3360      	adds	r3, #96	; 0x60
 8000bde:	461a      	mov	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	601a      	str	r2, [r3, #0]
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b087      	sub	sp, #28
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	211f      	movs	r1, #31
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0e9b      	lsrs	r3, r3, #26
 8000c62:	f003 011f 	and.w	r1, r3, #31
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c76:	bf00      	nop
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3314      	adds	r3, #20
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0e5b      	lsrs	r3, r3, #25
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	4413      	add	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	0d1b      	lsrs	r3, r3, #20
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	0d1b      	lsrs	r3, r3, #20
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0318 	and.w	r3, r3, #24
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	400b      	ands	r3, r1
 8000d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	000fffff 	.word	0x000fffff

08000d48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 031f 	and.w	r3, r3, #31
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6093      	str	r3, [r2, #8]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	5fffffc0 	.word	0x5fffffc0

08000da4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000db8:	d101      	bne.n	8000dbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	6fffffc0 	.word	0x6fffffc0

08000df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e08:	d101      	bne.n	8000e0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LL_ADC_Enable+0x24>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	7fffffc0 	.word	0x7fffffc0

08000e44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <LL_ADC_Disable+0x24>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	f043 0202 	orr.w	r2, r3, #2
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	7fffffc0 	.word	0x7fffffc0

08000e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <LL_ADC_IsEnabled+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_ADC_IsEnabled+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d101      	bne.n	8000eaa <LL_ADC_IsDisableOngoing+0x18>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <LL_ADC_IsDisableOngoing+0x1a>
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <LL_ADC_REG_StopConversion+0x24>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0210 	orr.w	r2, r3, #16
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	7fffffc0 	.word	0x7fffffc0

08000ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d101      	bne.n	8000ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <LL_ADC_INJ_StopConversion+0x24>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	f043 0220 	orr.w	r2, r3, #32
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	7fffffc0 	.word	0x7fffffc0

08000f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d101      	bne.n	8000f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e18f      	b.n	8001292 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f00b fe3b 	bl	800cbfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff03 	bl	8000da4 <LL_ADC_IsDeepPowerDownEnabled>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fee9 	bl	8000d80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff1e 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d114      	bne.n	8000fe8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff02 	bl	8000dcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fc8:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <HAL_ADC_Init+0x290>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	4a87      	ldr	r2, [pc, #540]	; (80011ec <HAL_ADC_Init+0x294>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	099b      	lsrs	r3, r3, #6
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fda:	e002      	b.n	8000fe2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f9      	bne.n	8000fdc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff01 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffc:	f043 0210 	orr.w	r2, r3, #16
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff61 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 800101e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 8129 	bne.w	8001280 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 8125 	bne.w	8001280 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800103e:	f043 0202 	orr.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff0e 	bl	8000e6c <LL_ADC_IsEnabled>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d136      	bne.n	80010c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a65      	ldr	r2, [pc, #404]	; (80011f0 <HAL_ADC_Init+0x298>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d004      	beq.n	800106a <HAL_ADC_Init+0x112>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a63      	ldr	r2, [pc, #396]	; (80011f4 <HAL_ADC_Init+0x29c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10e      	bne.n	8001088 <HAL_ADC_Init+0x130>
 800106a:	4861      	ldr	r0, [pc, #388]	; (80011f0 <HAL_ADC_Init+0x298>)
 800106c:	f7ff fefe 	bl	8000e6c <LL_ADC_IsEnabled>
 8001070:	4604      	mov	r4, r0
 8001072:	4860      	ldr	r0, [pc, #384]	; (80011f4 <HAL_ADC_Init+0x29c>)
 8001074:	f7ff fefa 	bl	8000e6c <LL_ADC_IsEnabled>
 8001078:	4603      	mov	r3, r0
 800107a:	4323      	orrs	r3, r4
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	e008      	b.n	800109a <HAL_ADC_Init+0x142>
 8001088:	485b      	ldr	r0, [pc, #364]	; (80011f8 <HAL_ADC_Init+0x2a0>)
 800108a:	f7ff feef 	bl	8000e6c <LL_ADC_IsEnabled>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_ADC_Init+0x298>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x15a>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <HAL_ADC_Init+0x29c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_Init+0x15e>
 80010b2:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_ADC_Init+0x2a4>)
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_Init+0x160>
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_ADC_Init+0x2a8>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f7ff fd18 	bl	8000af4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80010c4:	f7ff fd0a 	bl	8000adc <HAL_GetREVID>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d914      	bls.n	80010fc <HAL_ADC_Init+0x1a4>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d110      	bne.n	80010fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80010ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7f1b      	ldrb	r3, [r3, #28]
 80010f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80010f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010f4:	f043 030c 	orr.w	r3, r3, #12
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	e00d      	b.n	8001118 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7d5b      	ldrb	r3, [r3, #21]
 8001100:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001106:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800110c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7f1b      	ldrb	r3, [r3, #28]
 8001112:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7f1b      	ldrb	r3, [r3, #28]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	3b01      	subs	r3, #1
 8001126:	045b      	lsls	r3, r3, #17
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_ADC_Init+0x2ac>)
 8001152:	4013      	ands	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	69b9      	ldr	r1, [r7, #24]
 800115a:	430b      	orrs	r3, r1
 800115c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff febc 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001168:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fede 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001174:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15f      	bne.n	800123c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d15c      	bne.n	800123c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7d1b      	ldrb	r3, [r3, #20]
 8001186:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_ADC_Init+0x2b0>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d130      	bne.n	8001210 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_ADC_Init+0x2b4>)
 80011bc:	4013      	ands	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011c2:	3a01      	subs	r2, #1
 80011c4:	0411      	lsls	r1, r2, #16
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011ca:	4311      	orrs	r1, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011d0:	4311      	orrs	r1, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011d6:	430a      	orrs	r2, r1
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	e01c      	b.n	8001220 <HAL_ADC_Init+0x2c8>
 80011e6:	bf00      	nop
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	053e2d63 	.word	0x053e2d63
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022100 	.word	0x40022100
 80011f8:	58026000 	.word	0x58026000
 80011fc:	40022300 	.word	0x40022300
 8001200:	58026300 	.word	0x58026300
 8001204:	fff0c003 	.word	0xfff0c003
 8001208:	ffffbffc 	.word	0xffffbffc
 800120c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 f97e 	bl	8002538 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10c      	bne.n	800125e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f023 010f 	bic.w	r1, r3, #15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 020f 	bic.w	r2, r2, #15
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f023 0303 	bic.w	r3, r3, #3
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
 800127e:	e007      	b.n	8001290 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001290:	7ffb      	ldrb	r3, [r7, #31]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop

0800129c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e16e      	b.n	800158c <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80012ba:	2103      	movs	r1, #3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 ff01 	bl	80020c4 <ADC_ConversionStop>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80012d4:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f001 f837 	bl	8002350 <ADC_Disable>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_ADC_DeInit+0x294>)
 80012fe:	400b      	ands	r3, r1
 8001300:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800130a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 800131a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800132a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 800133a:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800134a:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6919      	ldr	r1, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_ADC_DeInit+0x298>)
 8001358:	400b      	ands	r3, r1
 800135a:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800136a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 800137a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800138a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_ADC_DeInit+0x29c>)
 80013f8:	400b      	ands	r3, r1
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_ADC_DeInit+0x2a0>)
 8001408:	400b      	ands	r3, r1
 800140a:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_ADC_DeInit+0x2a0>)
 8001418:	400b      	ands	r3, r1
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_ADC_DeInit+0x2a4>)
 8001428:	400b      	ands	r3, r1
 800142a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	661a      	str	r2, [r3, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	665a      	str	r2, [r3, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	669a      	str	r2, [r3, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 8001472:	400b      	ands	r3, r1
 8001474:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 8001486:	400b      	ands	r3, r1
 8001488:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 800149a:	400b      	ands	r3, r1
 800149c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f002 22f8 	and.w	r2, r2, #4160813056	; 0xf800f800
 80014b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d004      	beq.n	80014c8 <HAL_ADC_DeInit+0x22c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10e      	bne.n	80014e6 <HAL_ADC_DeInit+0x24a>
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 80014ca:	f7ff fccf 	bl	8000e6c <LL_ADC_IsEnabled>
 80014ce:	4604      	mov	r4, r0
 80014d0:	481e      	ldr	r0, [pc, #120]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 80014d2:	f7ff fccb 	bl	8000e6c <LL_ADC_IsEnabled>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4323      	orrs	r3, r4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	e008      	b.n	80014f8 <HAL_ADC_DeInit+0x25c>
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <HAL_ADC_DeInit+0x2b4>)
 80014e8:	f7ff fcc0 	bl	8000e6c <LL_ADC_IsEnabled>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d036      	beq.n	800156a <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d004      	beq.n	8001510 <HAL_ADC_DeInit+0x274>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_ADC_DeInit+0x278>
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_ADC_DeInit+0x2b8>)
 8001512:	e000      	b.n	8001516 <HAL_ADC_DeInit+0x27a>
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_ADC_DeInit+0x2bc>)
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_ADC_DeInit+0x290>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d117      	bne.n	800155c <HAL_ADC_DeInit+0x2c0>
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_DeInit+0x2b8>)
 800152e:	e016      	b.n	800155e <HAL_ADC_DeInit+0x2c2>
 8001530:	fffff800 	.word	0xfffff800
 8001534:	fc00f81c 	.word	0xfc00f81c
 8001538:	e0820830 	.word	0xe0820830
 800153c:	e0820820 	.word	0xe0820820
 8001540:	fffff820 	.word	0xfffff820
 8001544:	fff00000 	.word	0xfff00000
 8001548:	40022000 	.word	0x40022000
 800154c:	40022100 	.word	0x40022100
 8001550:	58026000 	.word	0x58026000
 8001554:	40022300 	.word	0x40022300
 8001558:	58026300 	.word	0x58026300
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_ADC_DeInit+0x2f8>)
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_ADC_DeInit+0x2fc>)
 8001560:	400b      	ands	r3, r1
 8001562:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f00b fbdd 	bl	800cd24 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	58026300 	.word	0x58026300
 8001598:	fe0030e0 	.word	0xfe0030e0

0800159c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_IRQHandler+0x30>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a86      	ldr	r2, [pc, #536]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x34>
 80015cc:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_ADC_IRQHandler+0x248>)
 80015ce:	e000      	b.n	80015d2 <HAL_ADC_IRQHandler+0x36>
 80015d0:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_ADC_IRQHandler+0x24c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbb8 	bl	8000d48 <LL_ADC_GetMultimode>
 80015d8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_ADC_IRQHandler+0x78>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 fa4c 	bl	8002aa4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_ADC_IRQHandler+0x8c>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8083 	beq.w	800173a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07d      	beq.n	800173a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fad2 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d062      	beq.n	800172c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5d      	ldr	r2, [pc, #372]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d002      	beq.n	8001676 <HAL_ADC_IRQHandler+0xda>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e000      	b.n	8001678 <HAL_ADC_IRQHandler+0xdc>
 8001676:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	d008      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d002      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d104      	bne.n	800169c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	e00c      	b.n	80016b6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d002      	beq.n	80016ac <HAL_ADC_IRQHandler+0x110>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	e000      	b.n	80016ae <HAL_ADC_IRQHandler+0x112>
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80016ae:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d135      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d12e      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc04 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11a      	bne.n	8001714 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020c 	bic.w	r2, r2, #12
 80016ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d112      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
 8001712:	e00b      	b.n	800172c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f00b f885 	bl	800c83c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_ADC_IRQHandler+0x1b2>
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10b      	bne.n	8001766 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a0 	beq.w	800189a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 809a 	beq.w	800189a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa7d 	bl	8000c82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001788:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa38 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001794:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d002      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x20a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_IRQHandler+0x20c>
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d008      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d104      	bne.n	80017cc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	e014      	b.n	80017f6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00a      	beq.n	80017ec <HAL_ADC_IRQHandler+0x250>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e008      	b.n	80017ee <HAL_ADC_IRQHandler+0x252>
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40022100 	.word	0x40022100
 80017e4:	40022300 	.word	0x40022300
 80017e8:	58026300 	.word	0x58026300
 80017ec:	4b84      	ldr	r3, [pc, #528]	; (8001a00 <HAL_ADC_IRQHandler+0x464>)
 80017ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d047      	beq.n	800188c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ADC_IRQHandler+0x27a>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03f      	beq.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d13a      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d133      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12e      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb7c 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800184c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d112      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
 8001872:	e00b      	b.n	800188c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f043 0210 	orr.w	r2, r3, #16
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 f8e1 	bl	8002a54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2260      	movs	r2, #96	; 0x60
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d011      	beq.n	80018c8 <HAL_ADC_IRQHandler+0x32c>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8a8 	bl	8001a10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d012      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x35c>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f001 f8c7 	bl	8002a7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <HAL_ADC_IRQHandler+0x38c>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00d      	beq.n	8001928 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 f8b9 	bl	8002a90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d043      	beq.n	80019ba <HAL_ADC_IRQHandler+0x41e>
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03e      	beq.n	80019ba <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	e021      	b.n	800198e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <HAL_ADC_IRQHandler+0x464>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_ADC_IRQHandler+0x3c8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_ADC_IRQHandler+0x468>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_ADC_IRQHandler+0x3cc>
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_ADC_IRQHandler+0x46c>)
 8001966:	e000      	b.n	800196a <HAL_ADC_IRQHandler+0x3ce>
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_ADC_IRQHandler+0x470>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f9fa 	bl	8000d64 <LL_ADC_GetMultiDMATransfer>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e008      	b.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10e      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f043 0202 	orr.w	r2, r3, #2
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f00b f805 	bl	800c9bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d018      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x45a>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f001 f839 	bl	8002a68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40022100 	.word	0x40022100
 8001a08:	40022300 	.word	0x40022300
 8001a0c:	58026300 	.word	0x58026300

08001a10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b0a1      	sub	sp, #132	; 0x84
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a9d      	ldr	r2, [pc, #628]	; (8001cb4 <HAL_ADC_ConfigChannel+0x290>)
 8001a3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x2a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e321      	b.n	8002092 <HAL_ADC_ConfigChannel+0x66e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa40 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8306 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d108      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x62>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2201      	movs	r2, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	e016      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e003      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	69d1      	ldr	r1, [r2, #28]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7ff f8ab 	bl	8000c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa01 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001ade:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa23 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001aea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80b3 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80af 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f7ff f8cd 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_ADC_ConfigChannel+0x294>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	e01d      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x14c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x136>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	e00a      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x14c>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d027      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b88:	f7fe ffe8 	bl	8000b5c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7e5b      	ldrb	r3, [r3, #25]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x17e>
 8001b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x180>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f7ff f812 	bl	8000bce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	7e1b      	ldrb	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x19c>
 8001bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x19e>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7fe ffea 	bl	8000b9c <LL_ADC_SetDataRightShift>
 8001bc8:	e047      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d107      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bec:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c10:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	069b      	lsls	r3, r3, #26
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d107      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c34:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d107      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c58:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f904 	bl	8000e6c <LL_ADC_IsEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 820d 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f7ff f841 	bl	8000d00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_ADC_ConfigChannel+0x290>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f040 8133 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d110      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x298>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	bf94      	ite	ls
 8001caa:	2301      	movls	r3, #1
 8001cac:	2300      	movhi	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e01e      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x2cc>
 8001cb2:	bf00      	nop
 8001cb4:	47ff0000 	.word	0x47ff0000
 8001cb8:	5c001000 	.word	0x5c001000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e003      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	bf94      	ite	ls
 8001cea:	2301      	movls	r3, #1
 8001cec:	2300      	movhi	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d079      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2ec>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	3301      	adds	r3, #1
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	e015      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x318>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e003      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x338>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	e017      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x368>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	ea42 0103 	orr.w	r1, r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x38e>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	051b      	lsls	r3, r3, #20
 8001db0:	e018      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x3c0>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e003      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de4:	430b      	orrs	r3, r1
 8001de6:	e07e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x3e0>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	069b      	lsls	r3, r3, #26
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	e015      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x40c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x42c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	e017      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x45c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x488>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	051b      	lsls	r3, r3, #20
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	e01b      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x4c0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
  return result;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f003 021f 	and.w	r2, r3, #31
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	051b      	lsls	r3, r3, #20
 8001ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	6892      	ldr	r2, [r2, #8]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fedc 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f280 80c6 	bge.w	8002086 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a67      	ldr	r2, [pc, #412]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x4ea>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x4ee>
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x4f0>
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fe13 	bl	8000b40 <LL_ADC_GetCommonPathInternalCh>
 8001f1a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5e      	ldr	r2, [pc, #376]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x50c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10e      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x52a>
 8001f30:	485a      	ldr	r0, [pc, #360]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f32:	f7fe ff9b 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f36:	4604      	mov	r4, r0
 8001f38:	4859      	ldr	r0, [pc, #356]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f3a:	f7fe ff97 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4323      	orrs	r3, r4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e008      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x53c>
 8001f4e:	4857      	ldr	r0, [pc, #348]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001f50:	f7fe ff8c 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d07d      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_ADC_ConfigChannel+0x68c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5ac>
 8001f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d12b      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 8081 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a44      	ldr	r2, [pc, #272]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_ConfigChannel+0x574>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x578>
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x57a>
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8001f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7fe fdb7 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_ADC_ConfigChannel+0x690>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_ADC_ConfigChannel+0x694>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fc0:	e002      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f9      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fce:	e05a      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <HAL_ADC_ConfigChannel+0x698>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11e      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x5f4>
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d119      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d14b      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x5de>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x5e2>
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8002004:	e000      	b.n	8002008 <HAL_ADC_ConfigChannel+0x5e4>
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7fe fd82 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002016:	e036      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_ADC_ConfigChannel+0x69c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d131      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12c      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d127      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_ADC_ConfigChannel+0x626>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x62a>
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 800204c:	e000      	b.n	8002050 <HAL_ADC_ConfigChannel+0x62c>
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8002050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe fd5e 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
 800205e:	e012      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002072:	e008      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800208e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002092:	4618      	mov	r0, r3
 8002094:	3784      	adds	r7, #132	; 0x84
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022100 	.word	0x40022100
 80020a4:	40022300 	.word	0x40022300
 80020a8:	58026300 	.word	0x58026300
 80020ac:	58026000 	.word	0x58026000
 80020b0:	cb840000 	.word	0xcb840000
 80020b4:	2400000c 	.word	0x2400000c
 80020b8:	053e2d63 	.word	0x053e2d63
 80020bc:	c7520000 	.word	0xc7520000
 80020c0:	cfb80000 	.word	0xcfb80000

080020c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ff00 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 80020e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe ff22 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 80020ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8098 	beq.w	800222c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7d5b      	ldrb	r3, [r3, #21]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d126      	bne.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7d1b      	ldrb	r3, [r3, #20]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d122      	bne.n	8002160 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800211e:	e014      	b.n	800214a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4a45      	ldr	r2, [pc, #276]	; (8002238 <ADC_ConversionStop+0x174>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90d      	bls.n	8002144 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e074      	b.n	800222e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d1e3      	bne.n	8002120 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d014      	beq.n	8002190 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe feb8 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fe89 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fe94 	bl	8000eb8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d014      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fec8 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fe71 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fea4 	bl	8000f08 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d005      	beq.n	80021d2 <ADC_ConversionStop+0x10e>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d105      	bne.n	80021d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021cc:	230c      	movs	r3, #12
 80021ce:	617b      	str	r3, [r7, #20]
        break;
 80021d0:	e005      	b.n	80021de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021d2:	2308      	movs	r3, #8
 80021d4:	617b      	str	r3, [r7, #20]
        break;
 80021d6:	e002      	b.n	80021de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021d8:	2304      	movs	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
        break;
 80021dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021de:	f7fe fc4d 	bl	8000a7c <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e4:	e01b      	b.n	800221e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e6:	f7fe fc49 	bl	8000a7c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d914      	bls.n	800221e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1dc      	bne.n	80021e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	000cdbff 	.word	0x000cdbff

0800223c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fe0f 	bl	8000e6c <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d16e      	bne.n	8002332 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <ADC_Enable+0x100>)
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e05a      	b.n	8002334 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fdca 	bl	8000e1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002288:	f7fe fbf8 	bl	8000a7c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <ADC_Enable+0x104>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <ADC_Enable+0x66>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <ADC_Enable+0x108>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <ADC_Enable+0x6a>
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <ADC_Enable+0x10c>)
 80022a4:	e000      	b.n	80022a8 <ADC_Enable+0x6c>
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <ADC_Enable+0x110>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fd4d 	bl	8000d48 <LL_ADC_GetMultimode>
 80022ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <ADC_Enable+0x108>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d002      	beq.n	80022c0 <ADC_Enable+0x84>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e000      	b.n	80022c2 <ADC_Enable+0x86>
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <ADC_Enable+0x104>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d130      	bne.n	8002332 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	e028      	b.n	8002324 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fdc8 	bl	8000e6c <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd98 	bl	8000e1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ec:	f7fe fbc6 	bl	8000a7c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d914      	bls.n	8002324 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d00d      	beq.n	8002324 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d1cf      	bne.n	80022d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	8000003f 	.word	0x8000003f
 8002340:	40022000 	.word	0x40022000
 8002344:	40022100 	.word	0x40022100
 8002348:	40022300 	.word	0x40022300
 800234c:	58026300 	.word	0x58026300

08002350 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd98 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 8002362:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fd7f 	bl	8000e6c <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d047      	beq.n	8002404 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d144      	bne.n	8002404 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030d 	and.w	r3, r3, #13
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10c      	bne.n	80023a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fd59 	bl	8000e44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2203      	movs	r2, #3
 8002398:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800239a:	f7fe fb6f 	bl	8000a7c <HAL_GetTick>
 800239e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023a0:	e029      	b.n	80023f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e023      	b.n	8002406 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023be:	f7fe fb5d 	bl	8000a7c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d914      	bls.n	80023f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1dc      	bne.n	80023be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002424:	2b00      	cmp	r3, #0
 8002426:	d14b      	bne.n	80024c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d021      	beq.n	8002486 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fbdc 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d032      	beq.n	80024b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12b      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11f      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
 8002484:	e018      	b.n	80024b8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f00a f9bf 	bl	800c83c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024be:	e00e      	b.n	80024de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f00a fa75 	bl	800c9bc <HAL_ADC_ErrorCallback>
}
 80024d2:	e004      	b.n	80024de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f00a fa05 	bl	800c904 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f00a fa47 	bl	800c9bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <ADC_ConfigureBoostMode+0x1f8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <ADC_ConfigureBoostMode+0x1c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a79      	ldr	r2, [pc, #484]	; (8002734 <ADC_ConfigureBoostMode+0x1fc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d109      	bne.n	8002568 <ADC_ConfigureBoostMode+0x30>
 8002554:	4b78      	ldr	r3, [pc, #480]	; (8002738 <ADC_ConfigureBoostMode+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e008      	b.n	800257a <ADC_ConfigureBoostMode+0x42>
 8002568:	4b74      	ldr	r3, [pc, #464]	; (800273c <ADC_ConfigureBoostMode+0x204>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800257e:	f004 fe1b 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 8002582:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800258c:	d010      	beq.n	80025b0 <ADC_ConfigureBoostMode+0x78>
 800258e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002592:	d873      	bhi.n	800267c <ADC_ConfigureBoostMode+0x144>
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d002      	beq.n	80025a0 <ADC_ConfigureBoostMode+0x68>
 800259a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800259e:	d16d      	bne.n	800267c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	60fb      	str	r3, [r7, #12]
        break;
 80025ae:	e068      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	60fb      	str	r3, [r7, #12]
        break;
 80025b6:	e064      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	f006 f8a2 	bl	8008708 <HAL_RCCEx_GetPeriphCLKFreq>
 80025c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025ce:	d051      	beq.n	8002674 <ADC_ConfigureBoostMode+0x13c>
 80025d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025d4:	d854      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025da:	d047      	beq.n	800266c <ADC_ConfigureBoostMode+0x134>
 80025dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025e0:	d84e      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025e6:	d03d      	beq.n	8002664 <ADC_ConfigureBoostMode+0x12c>
 80025e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025ec:	d848      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f2:	d033      	beq.n	800265c <ADC_ConfigureBoostMode+0x124>
 80025f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f8:	d842      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025fe:	d029      	beq.n	8002654 <ADC_ConfigureBoostMode+0x11c>
 8002600:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002604:	d83c      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002606:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800260a:	d01a      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 800260c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002610:	d836      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002612:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002616:	d014      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002618:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800261c:	d830      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002622:	d00e      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002628:	d82a      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 800262a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800262e:	d008      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002630:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002634:	d824      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800263a:	d002      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 800263c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002640:	d11e      	bne.n	8002680 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	60fb      	str	r3, [r7, #12]
        break;
 8002652:	e016      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	60fb      	str	r3, [r7, #12]
        break;
 800265a:	e012      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	60fb      	str	r3, [r7, #12]
        break;
 8002662:	e00e      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	60fb      	str	r3, [r7, #12]
        break;
 800266a:	e00a      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	09db      	lsrs	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
        break;
 8002672:	e006      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	60fb      	str	r3, [r7, #12]
        break;
 800267a:	e002      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
        break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002680:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002682:	f7fe fa2b 	bl	8000adc <HAL_GetREVID>
 8002686:	4603      	mov	r3, r0
 8002688:	f241 0203 	movw	r2, #4099	; 0x1003
 800268c:	4293      	cmp	r3, r2
 800268e:	d815      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <ADC_ConfigureBoostMode+0x208>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d908      	bls.n	80026aa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026a8:	e03e      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	e035      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <ADC_ConfigureBoostMode+0x20c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d808      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d8:	609a      	str	r2, [r3, #8]
}
 80026da:	e025      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <ADC_ConfigureBoostMode+0x210>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d80a      	bhi.n	80026fa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	e016      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <ADC_ConfigureBoostMode+0x214>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d80a      	bhi.n	8002718 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	e007      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	40022100 	.word	0x40022100
 8002738:	40022300 	.word	0x40022300
 800273c:	58026300 	.word	0x58026300
 8002740:	01312d00 	.word	0x01312d00
 8002744:	005f5e10 	.word	0x005f5e10
 8002748:	00bebc20 	.word	0x00bebc20
 800274c:	017d7840 	.word	0x017d7840

08002750 <LL_ADC_IsEnabled>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <LL_ADC_IsEnabled+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_ADC_IsEnabled+0x1a>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <LL_ADC_StartCalibration>:
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <LL_ADC_StartCalibration+0x38>)
 800278a:	4013      	ands	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002798:	430a      	orrs	r2, r1
 800279a:	4313      	orrs	r3, r2
 800279c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	3ffeffc0 	.word	0x3ffeffc0

080027b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c8:	d101      	bne.n	80027ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_REG_StartConversion>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <LL_ADC_REG_StartConversion+0x24>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	7fffffc0 	.word	0x7fffffc0

08002804 <LL_ADC_REG_IsConversionOngoing>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d101      	bne.n	800281c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADCEx_Calibration_Start+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e04c      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff fd7c 	bl	8002350 <ADC_Disable>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d135      	bne.n	80028ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8002868:	4013      	ands	r3, r2
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff7c 	bl	8002778 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002880:	e014      	b.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3301      	adds	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d30d      	bcc.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f023 0312 	bic.w	r3, r3, #18
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01b      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff7f 	bl	80027b4 <LL_ADC_IsCalibrationOnGoing>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e2      	bne.n	8002882 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
 80028cc:	e005      	b.n	80028da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	ffffeefd 	.word	0xffffeefd
 80028f0:	25c3f800 	.word	0x25c3f800

080028f4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0a0      	sub	sp, #128	; 0x80
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff7d 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	e08a      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800291e:	2302      	movs	r3, #2
 8002920:	e083      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e001      	b.n	8002946 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e062      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fc69 	bl	800223c <ADC_Enable>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002970:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fc5d 	bl	800223c <ADC_Enable>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800298c:	2b00      	cmp	r3, #0
 800298e:	d146      	bne.n	8002a1e <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002996:	4013      	ands	r3, r2
 8002998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80029d4:	e000      	b.n	80029d8 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	221c      	movs	r2, #28
 80029e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a00:	330c      	adds	r3, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f001 fb64 	bl	80040d4 <HAL_DMA_Start_IT>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fee0 	bl	80027dc <LL_ADC_REG_StartConversion>
 8002a1c:	e003      	b.n	8002a26 <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002a26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3780      	adds	r7, #128	; 0x80
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40022100 	.word	0x40022100
 8002a3c:	fffff0fe 	.word	0xfffff0fe
 8002a40:	0800240f 	.word	0x0800240f
 8002a44:	080024e7 	.word	0x080024e7
 8002a48:	08002503 	.word	0x08002503
 8002a4c:	40022300 	.word	0x40022300
 8002a50:	58026300 	.word	0x58026300

08002a54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b09f      	sub	sp, #124	; 0x7c
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0be      	b.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5c      	ldr	r2, [pc, #368]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002af0:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	e001      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e09d      	b.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe72 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 8002b20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe6c 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d17f      	bne.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d17c      	bne.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b4e:	e000      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d039      	beq.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10e      	bne.n	8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b82:	4836      	ldr	r0, [pc, #216]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b84:	f7ff fde4 	bl	8002750 <LL_ADC_IsEnabled>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4835      	ldr	r0, [pc, #212]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b8c:	f7ff fde0 	bl	8002750 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ba0:	4832      	ldr	r0, [pc, #200]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ba2:	f7ff fdd5 	bl	8002750 <LL_ADC_IsEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d047      	beq.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bce:	e03a      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10e      	bne.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002bf0:	481a      	ldr	r0, [pc, #104]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bf2:	f7ff fdad 	bl	8002750 <LL_ADC_IsEnabled>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4819      	ldr	r0, [pc, #100]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bfa:	f7ff fda9 	bl	8002750 <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4323      	orrs	r3, r4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e008      	b.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c0e:	4817      	ldr	r0, [pc, #92]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c10:	f7ff fd9e 	bl	8002750 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	e009      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c44:	e000      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	377c      	adds	r7, #124	; 0x7c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40022100 	.word	0x40022100
 8002c64:	40022300 	.word	0x40022300
 8002c68:	58026300 	.word	0x58026300
 8002c6c:	58026000 	.word	0x58026000
 8002c70:	fffff0e0 	.word	0xfffff0e0

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	05fa0000 	.word	0x05fa0000

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db0b      	blt.n	8002d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <__NVIC_EnableIRQ+0x38>)
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db12      	blt.n	8002d4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	490a      	ldr	r1, [pc, #40]	; (8002d58 <__NVIC_DisableIRQ+0x44>)
 8002d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d40:	f3bf 8f4f 	dsb	sy
}
 8002d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d46:	f3bf 8f6f 	isb	sy
}
 8002d4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff05 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff1c 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff90 	bl	8002db0 <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5f 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff0f 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff1f 	bl	8002d14 <__NVIC_DisableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff96 	bl	8002e18 <SysTick_Config>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002efc:	f3bf 8f5f 	dmb	sy
}
 8002f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_MPU_Disable+0x28>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_MPU_Disable+0x28>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_MPU_Disable+0x2c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	e000ed90 	.word	0xe000ed90

08002f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <HAL_MPU_Enable+0x38>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f46:	f3bf 8f4f 	dsb	sy
}
 8002f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f4c:	f3bf 8f6f 	isb	sy
}
 8002f50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed90 	.word	0xe000ed90
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	785a      	ldrb	r2, [r3, #1]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f76:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d029      	beq.n	8002fd4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002f80:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7adb      	ldrb	r3, [r3, #11]
 8002f92:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7a9b      	ldrb	r3, [r3, #10]
 8002f9a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b5b      	ldrb	r3, [r3, #13]
 8002fa2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7b9b      	ldrb	r3, [r3, #14]
 8002faa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7bdb      	ldrb	r3, [r3, #15]
 8002fb2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7a5b      	ldrb	r3, [r3, #9]
 8002fba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7a1b      	ldrb	r3, [r3, #8]
 8002fc2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fc4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fd0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002fd2:	e005      	b.n	8002fe0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed90 	.word	0xe000ed90

08002ff0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e014      	b.n	800302c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f009 fef0 	bl	800cdf8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f009 ff5b 	bl	800cf08 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	795b      	ldrb	r3, [r3, #5]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_DAC_Start_DMA+0x1e>
 800308a:	2302      	movs	r3, #2
 800308c:	e0ab      	b.n	80031e6 <HAL_DAC_Start_DMA+0x176>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2202      	movs	r2, #2
 8003098:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d12f      	bne.n	8003100 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_DAC_Start_DMA+0x180>)
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a51      	ldr	r2, [pc, #324]	; (80031f4 <HAL_DAC_Start_DMA+0x184>)
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_DAC_Start_DMA+0x188>)
 80030b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d013      	beq.n	80030f6 <HAL_DAC_Start_DMA+0x86>
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d845      	bhi.n	8003160 <HAL_DAC_Start_DMA+0xf0>
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_DAC_Start_DMA+0x72>
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d005      	beq.n	80030ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80030e0:	e03e      	b.n	8003160 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	613b      	str	r3, [r7, #16]
        break;
 80030ea:	e03c      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	613b      	str	r3, [r7, #16]
        break;
 80030f4:	e037      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3310      	adds	r3, #16
 80030fc:	613b      	str	r3, [r7, #16]
        break;
 80030fe:	e032      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <HAL_DAC_Start_DMA+0x18c>)
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <HAL_DAC_Start_DMA+0x190>)
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_DAC_Start_DMA+0x194>)
 8003116:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003126:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b08      	cmp	r3, #8
 800312c:	d013      	beq.n	8003156 <HAL_DAC_Start_DMA+0xe6>
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d817      	bhi.n	8003164 <HAL_DAC_Start_DMA+0xf4>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_DAC_Start_DMA+0xd2>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d005      	beq.n	800314c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003140:	e010      	b.n	8003164 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	613b      	str	r3, [r7, #16]
        break;
 800314a:	e00c      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3318      	adds	r3, #24
 8003152:	613b      	str	r3, [r7, #16]
        break;
 8003154:	e007      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	331c      	adds	r3, #28
 800315c:	613b      	str	r3, [r7, #16]
        break;
 800315e:	e002      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003164:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6898      	ldr	r0, [r3, #8]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	f000 ffa5 	bl	80040d4 <HAL_DMA_Start_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]
 800318e:	e010      	b.n	80031b2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800319e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68d8      	ldr	r0, [r3, #12]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	f000 ff93 	bl	80040d4 <HAL_DMA_Start_IT>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2201      	movs	r2, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e005      	b.n	80031e4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08003589 	.word	0x08003589
 80031f4:	080035ab 	.word	0x080035ab
 80031f8:	080035c7 	.word	0x080035c7
 80031fc:	08003645 	.word	0x08003645
 8003200:	08003667 	.word	0x08003667
 8003204:	08003683 	.word	0x08003683

08003208 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321e:	d120      	bne.n	8003262 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	d118      	bne.n	8003262 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800324a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800325a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f84b 	bl	80032f8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003270:	d120      	bne.n	80032b4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d118      	bne.n	80032b4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f043 0202 	orr.w	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9be 	bl	8003630 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_DAC_ConfigChannel+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e12a      	b.n	800357a <HAL_DAC_ConfigChannel+0x26e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2202      	movs	r2, #2
 800332e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b04      	cmp	r3, #4
 8003336:	f040 8081 	bne.w	800343c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800333a:	f7fd fb9f 	bl	8000a7c <HAL_GetTick>
 800333e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d140      	bne.n	80033c8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003346:	e018      	b.n	800337a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003348:	f7fd fb98 	bl	8000a7c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d911      	bls.n	800337a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335c:	4b89      	ldr	r3, [pc, #548]	; (8003584 <HAL_DAC_ConfigChannel+0x278>)
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f043 0208 	orr.w	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2203      	movs	r2, #3
 8003374:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0ff      	b.n	800357a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003380:	4b80      	ldr	r3, [pc, #512]	; (8003584 <HAL_DAC_ConfigChannel+0x278>)
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1df      	bne.n	8003348 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003388:	2001      	movs	r0, #1
 800338a:	f7fd fb83 	bl	8000a94 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	6992      	ldr	r2, [r2, #24]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
 8003398:	e023      	b.n	80033e2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800339a:	f7fd fb6f 	bl	8000a7c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d90f      	bls.n	80033c8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da0a      	bge.n	80033c8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2203      	movs	r2, #3
 80033c2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0d8      	b.n	800357a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dbe3      	blt.n	800339a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f7fd fb5e 	bl	8000a94 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	6992      	ldr	r2, [r2, #24]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	ea02 0103 	and.w	r1, r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	21ff      	movs	r1, #255	; 0xff
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	ea02 0103 	and.w	r1, r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11d      	bne.n	8003480 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	221f      	movs	r2, #31
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	e00f      	b.n	80034ca <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d102      	bne.n	80034b8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e008      	b.n	80034ca <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034c0:	2301      	movs	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e001      	b.n	80034ca <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	22c0      	movs	r2, #192	; 0xc0
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20008000 	.word	0x20008000

08003588 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff fe90 	bl	80032bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	711a      	strb	r2, [r3, #4]
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fe89 	bl	80032d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff fe7f 	bl	80032e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	711a      	strb	r2, [r3, #4]
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff ffce 	bl	80035f4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	711a      	strb	r2, [r3, #4]
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ffc7 	bl	8003608 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ffbd 	bl	800361c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	711a      	strb	r2, [r3, #4]
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7fd f9e0 	bl	8000a7c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e316      	b.n	8003cf6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a66      	ldr	r2, [pc, #408]	; (8003868 <HAL_DMA_Init+0x1b8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d04a      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_DMA_Init+0x1bc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d045      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_DMA_Init+0x1c0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d040      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a62      	ldr	r2, [pc, #392]	; (8003874 <HAL_DMA_Init+0x1c4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d03b      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_DMA_Init+0x1c8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d036      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5f      	ldr	r2, [pc, #380]	; (800387c <HAL_DMA_Init+0x1cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d031      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <HAL_DMA_Init+0x1d0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02c      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <HAL_DMA_Init+0x1d4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d027      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <HAL_DMA_Init+0x1d8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d022      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a59      	ldr	r2, [pc, #356]	; (800388c <HAL_DMA_Init+0x1dc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d01d      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a57      	ldr	r2, [pc, #348]	; (8003890 <HAL_DMA_Init+0x1e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d018      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_DMA_Init+0x1e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a54      	ldr	r2, [pc, #336]	; (8003898 <HAL_DMA_Init+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a53      	ldr	r2, [pc, #332]	; (800389c <HAL_DMA_Init+0x1ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_DMA_Init+0x1f0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a50      	ldr	r2, [pc, #320]	; (80038a4 <HAL_DMA_Init+0x1f4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_DMA_Init+0xbc>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_DMA_Init+0xbe>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 813b 	beq.w	80039ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a37      	ldr	r2, [pc, #220]	; (8003868 <HAL_DMA_Init+0x1b8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d04a      	beq.n	8003824 <HAL_DMA_Init+0x174>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a36      	ldr	r2, [pc, #216]	; (800386c <HAL_DMA_Init+0x1bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d045      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_DMA_Init+0x1c0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d040      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a33      	ldr	r2, [pc, #204]	; (8003874 <HAL_DMA_Init+0x1c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d03b      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a31      	ldr	r2, [pc, #196]	; (8003878 <HAL_DMA_Init+0x1c8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d036      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a30      	ldr	r2, [pc, #192]	; (800387c <HAL_DMA_Init+0x1cc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d031      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_DMA_Init+0x1d0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02c      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2d      	ldr	r2, [pc, #180]	; (8003884 <HAL_DMA_Init+0x1d4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d027      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_DMA_Init+0x1d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d022      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_DMA_Init+0x1dc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d01d      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_DMA_Init+0x1e0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d018      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_DMA_Init+0x1e4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_DMA_Init+0x1e8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00e      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a24      	ldr	r2, [pc, #144]	; (800389c <HAL_DMA_Init+0x1ec>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_DMA_Init+0x1f0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_DMA_Init+0x174>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_DMA_Init+0x1f4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <HAL_DMA_Init+0x186>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e007      	b.n	8003846 <HAL_DMA_Init+0x196>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003846:	e02f      	b.n	80038a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003848:	f7fd f918 	bl	8000a7c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b05      	cmp	r3, #5
 8003854:	d928      	bls.n	80038a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2203      	movs	r2, #3
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e246      	b.n	8003cf6 <HAL_DMA_Init+0x646>
 8003868:	40020010 	.word	0x40020010
 800386c:	40020028 	.word	0x40020028
 8003870:	40020040 	.word	0x40020040
 8003874:	40020058 	.word	0x40020058
 8003878:	40020070 	.word	0x40020070
 800387c:	40020088 	.word	0x40020088
 8003880:	400200a0 	.word	0x400200a0
 8003884:	400200b8 	.word	0x400200b8
 8003888:	40020410 	.word	0x40020410
 800388c:	40020428 	.word	0x40020428
 8003890:	40020440 	.word	0x40020440
 8003894:	40020458 	.word	0x40020458
 8003898:	40020470 	.word	0x40020470
 800389c:	40020488 	.word	0x40020488
 80038a0:	400204a0 	.word	0x400204a0
 80038a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1c8      	bne.n	8003848 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_DMA_Init+0x420>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	4313      	orrs	r3, r2
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800390c:	4b71      	ldr	r3, [pc, #452]	; (8003ad4 <HAL_DMA_Init+0x424>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b71      	ldr	r3, [pc, #452]	; (8003ad8 <HAL_DMA_Init+0x428>)
 8003912:	4013      	ands	r3, r2
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003918:	d328      	bcc.n	800396c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b28      	cmp	r3, #40	; 0x28
 8003920:	d903      	bls.n	800392a <HAL_DMA_Init+0x27a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b2e      	cmp	r3, #46	; 0x2e
 8003928:	d917      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b3e      	cmp	r3, #62	; 0x3e
 8003930:	d903      	bls.n	800393a <HAL_DMA_Init+0x28a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b42      	cmp	r3, #66	; 0x42
 8003938:	d90f      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b46      	cmp	r3, #70	; 0x46
 8003940:	d903      	bls.n	800394a <HAL_DMA_Init+0x29a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b48      	cmp	r3, #72	; 0x48
 8003948:	d907      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b4e      	cmp	r3, #78	; 0x4e
 8003950:	d905      	bls.n	800395e <HAL_DMA_Init+0x2ae>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b52      	cmp	r3, #82	; 0x52
 8003958:	d801      	bhi.n	800395e <HAL_DMA_Init+0x2ae>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_DMA_Init+0x2b0>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b04      	cmp	r3, #4
 8003994:	d117      	bne.n	80039c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 ff85 	bl	80058b8 <DMA_CheckFifoParam>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e197      	b.n	8003cf6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 fec0 	bl	8005754 <DMA_CalcBaseAndBitshift>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	223f      	movs	r2, #63	; 0x3f
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e0cd      	b.n	8003b86 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <HAL_DMA_Init+0x42c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <HAL_DMA_Init+0x430>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_DMA_Init+0x434>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_DMA_Init+0x438>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a35      	ldr	r2, [pc, #212]	; (8003aec <HAL_DMA_Init+0x43c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a33      	ldr	r2, [pc, #204]	; (8003af0 <HAL_DMA_Init+0x440>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_DMA_Init+0x444>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <HAL_DMA_Init+0x448>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Init+0x38e>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_DMA_Init+0x390>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8097 	beq.w	8003b74 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a24      	ldr	r2, [pc, #144]	; (8003adc <HAL_DMA_Init+0x42c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d021      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_DMA_Init+0x430>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01c      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <HAL_DMA_Init+0x434>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d017      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_DMA_Init+0x438>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d012      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_DMA_Init+0x43c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_DMA_Init+0x440>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d008      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_DMA_Init+0x444>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_DMA_Init+0x448>)
 8003a92:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_DMA_Init+0x44c>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d021      	beq.n	8003b00 <HAL_DMA_Init+0x450>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d102      	bne.n	8003aca <HAL_DMA_Init+0x41a>
 8003ac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ac8:	e01b      	b.n	8003b02 <HAL_DMA_Init+0x452>
 8003aca:	2300      	movs	r3, #0
 8003acc:	e019      	b.n	8003b02 <HAL_DMA_Init+0x452>
 8003ace:	bf00      	nop
 8003ad0:	fe10803f 	.word	0xfe10803f
 8003ad4:	5c001000 	.word	0x5c001000
 8003ad8:	ffff0000 	.word	0xffff0000
 8003adc:	58025408 	.word	0x58025408
 8003ae0:	5802541c 	.word	0x5802541c
 8003ae4:	58025430 	.word	0x58025430
 8003ae8:	58025444 	.word	0x58025444
 8003aec:	58025458 	.word	0x58025458
 8003af0:	5802546c 	.word	0x5802546c
 8003af4:	58025480 	.word	0x58025480
 8003af8:	58025494 	.word	0x58025494
 8003afc:	fffe000f 	.word	0xfffe000f
 8003b00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_DMA_Init+0x650>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_DMA_Init+0x654>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 fdfb 	bl	8005754 <DMA_CalcBaseAndBitshift>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e008      	b.n	8003b86 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	; 0x40
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0b7      	b.n	8003cf6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5f      	ldr	r2, [pc, #380]	; (8003d08 <HAL_DMA_Init+0x658>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d072      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5d      	ldr	r2, [pc, #372]	; (8003d0c <HAL_DMA_Init+0x65c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d06d      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5c      	ldr	r2, [pc, #368]	; (8003d10 <HAL_DMA_Init+0x660>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d068      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5a      	ldr	r2, [pc, #360]	; (8003d14 <HAL_DMA_Init+0x664>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d063      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a59      	ldr	r2, [pc, #356]	; (8003d18 <HAL_DMA_Init+0x668>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d05e      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a57      	ldr	r2, [pc, #348]	; (8003d1c <HAL_DMA_Init+0x66c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d059      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a56      	ldr	r2, [pc, #344]	; (8003d20 <HAL_DMA_Init+0x670>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d054      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	; (8003d24 <HAL_DMA_Init+0x674>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04f      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a53      	ldr	r2, [pc, #332]	; (8003d28 <HAL_DMA_Init+0x678>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a51      	ldr	r2, [pc, #324]	; (8003d2c <HAL_DMA_Init+0x67c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_DMA_Init+0x680>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a4e      	ldr	r2, [pc, #312]	; (8003d34 <HAL_DMA_Init+0x684>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4d      	ldr	r2, [pc, #308]	; (8003d38 <HAL_DMA_Init+0x688>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_DMA_Init+0x68c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_DMA_Init+0x690>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a48      	ldr	r2, [pc, #288]	; (8003d44 <HAL_DMA_Init+0x694>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a47      	ldr	r2, [pc, #284]	; (8003d48 <HAL_DMA_Init+0x698>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a45      	ldr	r2, [pc, #276]	; (8003d4c <HAL_DMA_Init+0x69c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a44      	ldr	r2, [pc, #272]	; (8003d50 <HAL_DMA_Init+0x6a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_DMA_Init+0x6a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_DMA_Init+0x6a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <HAL_DMA_Init+0x6ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3e      	ldr	r2, [pc, #248]	; (8003d60 <HAL_DMA_Init+0x6b0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <HAL_DMA_Init+0x6b4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x5ca>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_Init+0x5cc>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d032      	beq.n	8003ce6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 fe95 	bl	80059b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d102      	bne.n	8003c94 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_DMA_Init+0x624>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d80c      	bhi.n	8003cd4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 ff12 	bl	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	a7fdabf8 	.word	0xa7fdabf8
 8003d04:	cccccccd 	.word	0xcccccccd
 8003d08:	40020010 	.word	0x40020010
 8003d0c:	40020028 	.word	0x40020028
 8003d10:	40020040 	.word	0x40020040
 8003d14:	40020058 	.word	0x40020058
 8003d18:	40020070 	.word	0x40020070
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	400200a0 	.word	0x400200a0
 8003d24:	400200b8 	.word	0x400200b8
 8003d28:	40020410 	.word	0x40020410
 8003d2c:	40020428 	.word	0x40020428
 8003d30:	40020440 	.word	0x40020440
 8003d34:	40020458 	.word	0x40020458
 8003d38:	40020470 	.word	0x40020470
 8003d3c:	40020488 	.word	0x40020488
 8003d40:	400204a0 	.word	0x400204a0
 8003d44:	400204b8 	.word	0x400204b8
 8003d48:	58025408 	.word	0x58025408
 8003d4c:	5802541c 	.word	0x5802541c
 8003d50:	58025430 	.word	0x58025430
 8003d54:	58025444 	.word	0x58025444
 8003d58:	58025458 	.word	0x58025458
 8003d5c:	5802546c 	.word	0x5802546c
 8003d60:	58025480 	.word	0x58025480
 8003d64:	58025494 	.word	0x58025494

08003d68 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1a8      	b.n	80040cc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a82      	ldr	r2, [pc, #520]	; (8003f88 <HAL_DMA_DeInit+0x220>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <HAL_DMA_DeInit+0x224>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7f      	ldr	r2, [pc, #508]	; (8003f90 <HAL_DMA_DeInit+0x228>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7d      	ldr	r2, [pc, #500]	; (8003f94 <HAL_DMA_DeInit+0x22c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7c      	ldr	r2, [pc, #496]	; (8003f98 <HAL_DMA_DeInit+0x230>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_DMA_DeInit+0x234>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a79      	ldr	r2, [pc, #484]	; (8003fa0 <HAL_DMA_DeInit+0x238>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_DMA_DeInit+0x23c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a76      	ldr	r2, [pc, #472]	; (8003fa8 <HAL_DMA_DeInit+0x240>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a74      	ldr	r2, [pc, #464]	; (8003fac <HAL_DMA_DeInit+0x244>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_DMA_DeInit+0x248>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a71      	ldr	r2, [pc, #452]	; (8003fb4 <HAL_DMA_DeInit+0x24c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_DMA_DeInit+0x250>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_DMA_DeInit+0x254>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6d      	ldr	r2, [pc, #436]	; (8003fc0 <HAL_DMA_DeInit+0x258>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_DeInit+0xb2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6b      	ldr	r2, [pc, #428]	; (8003fc4 <HAL_DMA_DeInit+0x25c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_DeInit+0xc4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_DeInit+0xd4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_DMA_DeInit+0x220>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_DMA_DeInit+0x224>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d045      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4e      	ldr	r2, [pc, #312]	; (8003f90 <HAL_DMA_DeInit+0x228>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_DMA_DeInit+0x22c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <HAL_DMA_DeInit+0x230>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_DMA_DeInit+0x234>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_DMA_DeInit+0x238>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <HAL_DMA_DeInit+0x23c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_DMA_DeInit+0x240>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_DMA_DeInit+0x244>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_DMA_DeInit+0x248>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_DMA_DeInit+0x24c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_DMA_DeInit+0x250>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <HAL_DMA_DeInit+0x254>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_DMA_DeInit+0x258>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_DeInit+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <HAL_DMA_DeInit+0x25c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_DMA_DeInit+0x178>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_DMA_DeInit+0x17a>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d025      	beq.n	8003f32 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 fc1c 	bl	8005754 <DMA_CalcBaseAndBitshift>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	223f      	movs	r2, #63	; 0x3f
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	e081      	b.n	8004036 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <HAL_DMA_DeInit+0x260>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_DMA_DeInit+0x264>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01d      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_DMA_DeInit+0x268>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_DMA_DeInit+0x26c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_DMA_DeInit+0x270>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_DMA_DeInit+0x274>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_DMA_DeInit+0x278>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_DeInit+0x21a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_DMA_DeInit+0x27c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d132      	bne.n	8003fe8 <HAL_DMA_DeInit+0x280>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e031      	b.n	8003fea <HAL_DMA_DeInit+0x282>
 8003f86:	bf00      	nop
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
 8003fc8:	58025408 	.word	0x58025408
 8003fcc:	5802541c 	.word	0x5802541c
 8003fd0:	58025430 	.word	0x58025430
 8003fd4:	58025444 	.word	0x58025444
 8003fd8:	58025458 	.word	0x58025458
 8003fdc:	5802546c 	.word	0x5802546c
 8003fe0:	58025480 	.word	0x58025480
 8003fe4:	58025494 	.word	0x58025494
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 fb9c 	bl	8005754 <DMA_CalcBaseAndBitshift>
 800401c:	4603      	mov	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	e001      	b.n	8004036 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e04a      	b.n	80040cc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fcba 	bl	80059b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004054:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00f      	beq.n	800407e <HAL_DMA_DeInit+0x316>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d80b      	bhi.n	800407e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 fd3c 	bl	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800407c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e226      	b.n	800453e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Start_IT+0x2a>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e21f      	b.n	800453e <HAL_DMA_Start_IT+0x46a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 820a 	bne.w	8004528 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a68      	ldr	r2, [pc, #416]	; (80042c8 <HAL_DMA_Start_IT+0x1f4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d04a      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a66      	ldr	r2, [pc, #408]	; (80042cc <HAL_DMA_Start_IT+0x1f8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d045      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_DMA_Start_IT+0x1fc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d040      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a63      	ldr	r2, [pc, #396]	; (80042d4 <HAL_DMA_Start_IT+0x200>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d03b      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a62      	ldr	r2, [pc, #392]	; (80042d8 <HAL_DMA_Start_IT+0x204>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d036      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a60      	ldr	r2, [pc, #384]	; (80042dc <HAL_DMA_Start_IT+0x208>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d031      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5f      	ldr	r2, [pc, #380]	; (80042e0 <HAL_DMA_Start_IT+0x20c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d02c      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5d      	ldr	r2, [pc, #372]	; (80042e4 <HAL_DMA_Start_IT+0x210>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d027      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5c      	ldr	r2, [pc, #368]	; (80042e8 <HAL_DMA_Start_IT+0x214>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5a      	ldr	r2, [pc, #360]	; (80042ec <HAL_DMA_Start_IT+0x218>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01d      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a59      	ldr	r2, [pc, #356]	; (80042f0 <HAL_DMA_Start_IT+0x21c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a57      	ldr	r2, [pc, #348]	; (80042f4 <HAL_DMA_Start_IT+0x220>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_DMA_Start_IT+0x224>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a54      	ldr	r2, [pc, #336]	; (80042fc <HAL_DMA_Start_IT+0x228>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a53      	ldr	r2, [pc, #332]	; (8004300 <HAL_DMA_Start_IT+0x22c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_DMA_Start_IT+0xee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a51      	ldr	r2, [pc, #324]	; (8004304 <HAL_DMA_Start_IT+0x230>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <HAL_DMA_Start_IT+0x100>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e007      	b.n	80041e4 <HAL_DMA_Start_IT+0x110>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f001 f906 	bl	80053fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a34      	ldr	r2, [pc, #208]	; (80042c8 <HAL_DMA_Start_IT+0x1f4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d04a      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a33      	ldr	r2, [pc, #204]	; (80042cc <HAL_DMA_Start_IT+0x1f8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d045      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a31      	ldr	r2, [pc, #196]	; (80042d0 <HAL_DMA_Start_IT+0x1fc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d040      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a30      	ldr	r2, [pc, #192]	; (80042d4 <HAL_DMA_Start_IT+0x200>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d03b      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <HAL_DMA_Start_IT+0x204>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d036      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <HAL_DMA_Start_IT+0x208>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d031      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2b      	ldr	r2, [pc, #172]	; (80042e0 <HAL_DMA_Start_IT+0x20c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02c      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_DMA_Start_IT+0x210>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d027      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <HAL_DMA_Start_IT+0x214>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a27      	ldr	r2, [pc, #156]	; (80042ec <HAL_DMA_Start_IT+0x218>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <HAL_DMA_Start_IT+0x21c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <HAL_DMA_Start_IT+0x220>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_DMA_Start_IT+0x224>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_DMA_Start_IT+0x228>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_DMA_Start_IT+0x22c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_DMA_Start_IT+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_DMA_Start_IT+0x230>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_DMA_Start_IT+0x1c0>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_DMA_Start_IT+0x1c2>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d036      	beq.n	8004308 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 021e 	bic.w	r2, r3, #30
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0216 	orr.w	r2, r2, #22
 80042ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d03e      	beq.n	8004334 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0208 	orr.w	r2, r2, #8
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e035      	b.n	8004334 <HAL_DMA_Start_IT+0x260>
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020e 	bic.w	r2, r3, #14
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 020a 	orr.w	r2, r2, #10
 800431a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0204 	orr.w	r2, r2, #4
 8004332:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a83      	ldr	r2, [pc, #524]	; (8004548 <HAL_DMA_Start_IT+0x474>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d072      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a82      	ldr	r2, [pc, #520]	; (800454c <HAL_DMA_Start_IT+0x478>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d06d      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a80      	ldr	r2, [pc, #512]	; (8004550 <HAL_DMA_Start_IT+0x47c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d068      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7f      	ldr	r2, [pc, #508]	; (8004554 <HAL_DMA_Start_IT+0x480>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d063      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a7d      	ldr	r2, [pc, #500]	; (8004558 <HAL_DMA_Start_IT+0x484>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d05e      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_DMA_Start_IT+0x488>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d059      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7a      	ldr	r2, [pc, #488]	; (8004560 <HAL_DMA_Start_IT+0x48c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d054      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a79      	ldr	r2, [pc, #484]	; (8004564 <HAL_DMA_Start_IT+0x490>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04f      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_DMA_Start_IT+0x494>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d04a      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_DMA_Start_IT+0x498>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d045      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a74      	ldr	r2, [pc, #464]	; (8004570 <HAL_DMA_Start_IT+0x49c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d040      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	; (8004574 <HAL_DMA_Start_IT+0x4a0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d03b      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a71      	ldr	r2, [pc, #452]	; (8004578 <HAL_DMA_Start_IT+0x4a4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d036      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a70      	ldr	r2, [pc, #448]	; (800457c <HAL_DMA_Start_IT+0x4a8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d031      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	; (8004580 <HAL_DMA_Start_IT+0x4ac>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02c      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6d      	ldr	r2, [pc, #436]	; (8004584 <HAL_DMA_Start_IT+0x4b0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d027      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6b      	ldr	r2, [pc, #428]	; (8004588 <HAL_DMA_Start_IT+0x4b4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6a      	ldr	r2, [pc, #424]	; (800458c <HAL_DMA_Start_IT+0x4b8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d01d      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a68      	ldr	r2, [pc, #416]	; (8004590 <HAL_DMA_Start_IT+0x4bc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a67      	ldr	r2, [pc, #412]	; (8004594 <HAL_DMA_Start_IT+0x4c0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_DMA_Start_IT+0x4c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a64      	ldr	r2, [pc, #400]	; (800459c <HAL_DMA_Start_IT+0x4c8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a62      	ldr	r2, [pc, #392]	; (80045a0 <HAL_DMA_Start_IT+0x4cc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_DMA_Start_IT+0x350>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a61      	ldr	r2, [pc, #388]	; (80045a4 <HAL_DMA_Start_IT+0x4d0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Start_IT+0x354>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_DMA_Start_IT+0x356>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01a      	beq.n	8004464 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004462:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a37      	ldr	r2, [pc, #220]	; (8004548 <HAL_DMA_Start_IT+0x474>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a36      	ldr	r2, [pc, #216]	; (800454c <HAL_DMA_Start_IT+0x478>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_DMA_Start_IT+0x47c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a33      	ldr	r2, [pc, #204]	; (8004554 <HAL_DMA_Start_IT+0x480>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_DMA_Start_IT+0x484>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a30      	ldr	r2, [pc, #192]	; (800455c <HAL_DMA_Start_IT+0x488>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2e      	ldr	r2, [pc, #184]	; (8004560 <HAL_DMA_Start_IT+0x48c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <HAL_DMA_Start_IT+0x490>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <HAL_DMA_Start_IT+0x494>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2a      	ldr	r2, [pc, #168]	; (800456c <HAL_DMA_Start_IT+0x498>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a28      	ldr	r2, [pc, #160]	; (8004570 <HAL_DMA_Start_IT+0x49c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <HAL_DMA_Start_IT+0x4a0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_DMA_Start_IT+0x4a4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_DMA_Start_IT+0x4a8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_DMA_Start_IT+0x4ac>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_Start_IT+0x430>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <HAL_DMA_Start_IT+0x4b0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <HAL_DMA_Start_IT+0x442>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e012      	b.n	800453c <HAL_DMA_Start_IT+0x468>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e009      	b.n	800453c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	58025408 	.word	0x58025408
 800458c:	5802541c 	.word	0x5802541c
 8004590:	58025430 	.word	0x58025430
 8004594:	58025444 	.word	0x58025444
 8004598:	58025458 	.word	0x58025458
 800459c:	5802546c 	.word	0x5802546c
 80045a0:	58025480 	.word	0x58025480
 80045a4:	58025494 	.word	0x58025494

080045a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045b4:	4b67      	ldr	r3, [pc, #412]	; (8004754 <HAL_DMA_IRQHandler+0x1ac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a67      	ldr	r2, [pc, #412]	; (8004758 <HAL_DMA_IRQHandler+0x1b0>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5f      	ldr	r2, [pc, #380]	; (800475c <HAL_DMA_IRQHandler+0x1b4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04a      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a5d      	ldr	r2, [pc, #372]	; (8004760 <HAL_DMA_IRQHandler+0x1b8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d045      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a5c      	ldr	r2, [pc, #368]	; (8004764 <HAL_DMA_IRQHandler+0x1bc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d040      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a5a      	ldr	r2, [pc, #360]	; (8004768 <HAL_DMA_IRQHandler+0x1c0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03b      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a59      	ldr	r2, [pc, #356]	; (800476c <HAL_DMA_IRQHandler+0x1c4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d036      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_DMA_IRQHandler+0x1c8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a56      	ldr	r2, [pc, #344]	; (8004774 <HAL_DMA_IRQHandler+0x1cc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d02c      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_DMA_IRQHandler+0x1d0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a53      	ldr	r2, [pc, #332]	; (800477c <HAL_DMA_IRQHandler+0x1d4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a51      	ldr	r2, [pc, #324]	; (8004780 <HAL_DMA_IRQHandler+0x1d8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a50      	ldr	r2, [pc, #320]	; (8004784 <HAL_DMA_IRQHandler+0x1dc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a4e      	ldr	r2, [pc, #312]	; (8004788 <HAL_DMA_IRQHandler+0x1e0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a4d      	ldr	r2, [pc, #308]	; (800478c <HAL_DMA_IRQHandler+0x1e4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a4b      	ldr	r2, [pc, #300]	; (8004790 <HAL_DMA_IRQHandler+0x1e8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a4a      	ldr	r2, [pc, #296]	; (8004794 <HAL_DMA_IRQHandler+0x1ec>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_DMA_IRQHandler+0xd2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_DMA_IRQHandler+0x1f0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_DMA_IRQHandler+0xd6>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_DMA_IRQHandler+0xd8>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 842b 	beq.w	8004edc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2208      	movs	r2, #8
 8004690:	409a      	lsls	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a2 	beq.w	80047e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2e      	ldr	r2, [pc, #184]	; (800475c <HAL_DMA_IRQHandler+0x1b4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <HAL_DMA_IRQHandler+0x1b8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <HAL_DMA_IRQHandler+0x1bc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <HAL_DMA_IRQHandler+0x1c0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a28      	ldr	r2, [pc, #160]	; (800476c <HAL_DMA_IRQHandler+0x1c4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a27      	ldr	r2, [pc, #156]	; (8004770 <HAL_DMA_IRQHandler+0x1c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a25      	ldr	r2, [pc, #148]	; (8004774 <HAL_DMA_IRQHandler+0x1cc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a24      	ldr	r2, [pc, #144]	; (8004778 <HAL_DMA_IRQHandler+0x1d0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a22      	ldr	r2, [pc, #136]	; (800477c <HAL_DMA_IRQHandler+0x1d4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a21      	ldr	r2, [pc, #132]	; (8004780 <HAL_DMA_IRQHandler+0x1d8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_DMA_IRQHandler+0x1dc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <HAL_DMA_IRQHandler+0x1e0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <HAL_DMA_IRQHandler+0x1e4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_DMA_IRQHandler+0x1e8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_DMA_IRQHandler+0x1ec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_IRQHandler+0x194>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_DMA_IRQHandler+0x1f0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d12f      	bne.n	800479c <HAL_DMA_IRQHandler+0x1f4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e02e      	b.n	80047b0 <HAL_DMA_IRQHandler+0x208>
 8004752:	bf00      	nop
 8004754:	2400000c 	.word	0x2400000c
 8004758:	1b4e81b5 	.word	0x1b4e81b5
 800475c:	40020010 	.word	0x40020010
 8004760:	40020028 	.word	0x40020028
 8004764:	40020040 	.word	0x40020040
 8004768:	40020058 	.word	0x40020058
 800476c:	40020070 	.word	0x40020070
 8004770:	40020088 	.word	0x40020088
 8004774:	400200a0 	.word	0x400200a0
 8004778:	400200b8 	.word	0x400200b8
 800477c:	40020410 	.word	0x40020410
 8004780:	40020428 	.word	0x40020428
 8004784:	40020440 	.word	0x40020440
 8004788:	40020458 	.word	0x40020458
 800478c:	40020470 	.word	0x40020470
 8004790:	40020488 	.word	0x40020488
 8004794:	400204a0 	.word	0x400204a0
 8004798:	400204b8 	.word	0x400204b8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2208      	movs	r2, #8
 80047ce:	409a      	lsls	r2, r3
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d06e      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a69      	ldr	r2, [pc, #420]	; (80049a0 <HAL_DMA_IRQHandler+0x3f8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04a      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a67      	ldr	r2, [pc, #412]	; (80049a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d045      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a66      	ldr	r2, [pc, #408]	; (80049a8 <HAL_DMA_IRQHandler+0x400>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a64      	ldr	r2, [pc, #400]	; (80049ac <HAL_DMA_IRQHandler+0x404>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d03b      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a63      	ldr	r2, [pc, #396]	; (80049b0 <HAL_DMA_IRQHandler+0x408>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d036      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a61      	ldr	r2, [pc, #388]	; (80049b4 <HAL_DMA_IRQHandler+0x40c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a60      	ldr	r2, [pc, #384]	; (80049b8 <HAL_DMA_IRQHandler+0x410>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02c      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5e      	ldr	r2, [pc, #376]	; (80049bc <HAL_DMA_IRQHandler+0x414>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d027      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_DMA_IRQHandler+0x418>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5b      	ldr	r2, [pc, #364]	; (80049c4 <HAL_DMA_IRQHandler+0x41c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <HAL_DMA_IRQHandler+0x420>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_DMA_IRQHandler+0x424>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_DMA_IRQHandler+0x428>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a55      	ldr	r2, [pc, #340]	; (80049d4 <HAL_DMA_IRQHandler+0x42c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a54      	ldr	r2, [pc, #336]	; (80049d8 <HAL_DMA_IRQHandler+0x430>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2ee>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a52      	ldr	r2, [pc, #328]	; (80049dc <HAL_DMA_IRQHandler+0x434>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d10a      	bne.n	80048ac <HAL_DMA_IRQHandler+0x304>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e003      	b.n	80048b4 <HAL_DMA_IRQHandler+0x30c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f043 0202 	orr.w	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2204      	movs	r2, #4
 80048de:	409a      	lsls	r2, r3
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 808f 	beq.w	8004a08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <HAL_DMA_IRQHandler+0x3f8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d04a      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <HAL_DMA_IRQHandler+0x3fc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d045      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_DMA_IRQHandler+0x400>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d040      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <HAL_DMA_IRQHandler+0x404>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d03b      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_DMA_IRQHandler+0x408>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d036      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <HAL_DMA_IRQHandler+0x40c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d031      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_DMA_IRQHandler+0x410>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d02c      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <HAL_DMA_IRQHandler+0x414>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d027      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_DMA_IRQHandler+0x418>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_DMA_IRQHandler+0x41c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01d      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_DMA_IRQHandler+0x420>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_DMA_IRQHandler+0x424>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_DMA_IRQHandler+0x428>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_DMA_IRQHandler+0x42c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_DMA_IRQHandler+0x430>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_DMA_IRQHandler+0x3e2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_DMA_IRQHandler+0x434>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d12a      	bne.n	80049e0 <HAL_DMA_IRQHandler+0x438>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e023      	b.n	80049e8 <HAL_DMA_IRQHandler+0x440>
 80049a0:	40020010 	.word	0x40020010
 80049a4:	40020028 	.word	0x40020028
 80049a8:	40020040 	.word	0x40020040
 80049ac:	40020058 	.word	0x40020058
 80049b0:	40020070 	.word	0x40020070
 80049b4:	40020088 	.word	0x40020088
 80049b8:	400200a0 	.word	0x400200a0
 80049bc:	400200b8 	.word	0x400200b8
 80049c0:	40020410 	.word	0x40020410
 80049c4:	40020428 	.word	0x40020428
 80049c8:	40020440 	.word	0x40020440
 80049cc:	40020458 	.word	0x40020458
 80049d0:	40020470 	.word	0x40020470
 80049d4:	40020488 	.word	0x40020488
 80049d8:	400204a0 	.word	0x400204a0
 80049dc:	400204b8 	.word	0x400204b8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2204      	movs	r2, #4
 80049f6:	409a      	lsls	r2, r3
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0204 	orr.w	r2, r3, #4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2210      	movs	r2, #16
 8004a12:	409a      	lsls	r2, r3
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a6 	beq.w	8004b6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a85      	ldr	r2, [pc, #532]	; (8004c38 <HAL_DMA_IRQHandler+0x690>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a83      	ldr	r2, [pc, #524]	; (8004c3c <HAL_DMA_IRQHandler+0x694>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a82      	ldr	r2, [pc, #520]	; (8004c40 <HAL_DMA_IRQHandler+0x698>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a80      	ldr	r2, [pc, #512]	; (8004c44 <HAL_DMA_IRQHandler+0x69c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7f      	ldr	r2, [pc, #508]	; (8004c48 <HAL_DMA_IRQHandler+0x6a0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a7d      	ldr	r2, [pc, #500]	; (8004c4c <HAL_DMA_IRQHandler+0x6a4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a7c      	ldr	r2, [pc, #496]	; (8004c50 <HAL_DMA_IRQHandler+0x6a8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a7a      	ldr	r2, [pc, #488]	; (8004c54 <HAL_DMA_IRQHandler+0x6ac>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a79      	ldr	r2, [pc, #484]	; (8004c58 <HAL_DMA_IRQHandler+0x6b0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a77      	ldr	r2, [pc, #476]	; (8004c5c <HAL_DMA_IRQHandler+0x6b4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a76      	ldr	r2, [pc, #472]	; (8004c60 <HAL_DMA_IRQHandler+0x6b8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a74      	ldr	r2, [pc, #464]	; (8004c64 <HAL_DMA_IRQHandler+0x6bc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a73      	ldr	r2, [pc, #460]	; (8004c68 <HAL_DMA_IRQHandler+0x6c0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a71      	ldr	r2, [pc, #452]	; (8004c6c <HAL_DMA_IRQHandler+0x6c4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a70      	ldr	r2, [pc, #448]	; (8004c70 <HAL_DMA_IRQHandler+0x6c8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_IRQHandler+0x516>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_DMA_IRQHandler+0x6cc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10a      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x52c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e009      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x540>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03e      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2210      	movs	r2, #16
 8004af6:	409a      	lsls	r2, r3
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d024      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e01f      	b.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
 8004b3a:	e016      	b.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0208 	bic.w	r2, r2, #8
 8004b58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2220      	movs	r2, #32
 8004b74:	409a      	lsls	r2, r3
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8110 	beq.w	8004da0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <HAL_DMA_IRQHandler+0x690>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d04a      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <HAL_DMA_IRQHandler+0x694>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d045      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a29      	ldr	r2, [pc, #164]	; (8004c40 <HAL_DMA_IRQHandler+0x698>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d040      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <HAL_DMA_IRQHandler+0x69c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d03b      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <HAL_DMA_IRQHandler+0x6a0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d036      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <HAL_DMA_IRQHandler+0x6a4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d031      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <HAL_DMA_IRQHandler+0x6a8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d02c      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <HAL_DMA_IRQHandler+0x6ac>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d027      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a20      	ldr	r2, [pc, #128]	; (8004c58 <HAL_DMA_IRQHandler+0x6b0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_DMA_IRQHandler+0x6b4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01d      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <HAL_DMA_IRQHandler+0x6b8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HAL_DMA_IRQHandler+0x6bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <HAL_DMA_IRQHandler+0x6c0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <HAL_DMA_IRQHandler+0x6c4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <HAL_DMA_IRQHandler+0x6c8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x678>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <HAL_DMA_IRQHandler+0x6cc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d12b      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x6d0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e02a      	b.n	8004c8c <HAL_DMA_IRQHandler+0x6e4>
 8004c36:	bf00      	nop
 8004c38:	40020010 	.word	0x40020010
 8004c3c:	40020028 	.word	0x40020028
 8004c40:	40020040 	.word	0x40020040
 8004c44:	40020058 	.word	0x40020058
 8004c48:	40020070 	.word	0x40020070
 8004c4c:	40020088 	.word	0x40020088
 8004c50:	400200a0 	.word	0x400200a0
 8004c54:	400200b8 	.word	0x400200b8
 8004c58:	40020410 	.word	0x40020410
 8004c5c:	40020428 	.word	0x40020428
 8004c60:	40020440 	.word	0x40020440
 8004c64:	40020458 	.word	0x40020458
 8004c68:	40020470 	.word	0x40020470
 8004c6c:	40020488 	.word	0x40020488
 8004c70:	400204a0 	.word	0x400204a0
 8004c74:	400204b8 	.word	0x400204b8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8087 	beq.w	8004da0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d139      	bne.n	8004d22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0216 	bic.w	r2, r2, #22
 8004cbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ccc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_DMA_IRQHandler+0x736>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0208 	bic.w	r2, r2, #8
 8004cec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	223f      	movs	r2, #63	; 0x3f
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 834a 	beq.w	80053ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
          }
          return;
 8004d20:	e344      	b.n	80053ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d02c      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
 8004d4e:	e027      	b.n	8004da0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	e01e      	b.n	8004da0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0210 	bic.w	r2, r2, #16
 8004d7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8306 	beq.w	80053b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8088 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7a      	ldr	r2, [pc, #488]	; (8004fb0 <HAL_DMA_IRQHandler+0xa08>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d04a      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a79      	ldr	r2, [pc, #484]	; (8004fb4 <HAL_DMA_IRQHandler+0xa0c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d045      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_DMA_IRQHandler+0xa10>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d040      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a76      	ldr	r2, [pc, #472]	; (8004fbc <HAL_DMA_IRQHandler+0xa14>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d03b      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a74      	ldr	r2, [pc, #464]	; (8004fc0 <HAL_DMA_IRQHandler+0xa18>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d036      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a73      	ldr	r2, [pc, #460]	; (8004fc4 <HAL_DMA_IRQHandler+0xa1c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d031      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a71      	ldr	r2, [pc, #452]	; (8004fc8 <HAL_DMA_IRQHandler+0xa20>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02c      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a70      	ldr	r2, [pc, #448]	; (8004fcc <HAL_DMA_IRQHandler+0xa24>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d027      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a6e      	ldr	r2, [pc, #440]	; (8004fd0 <HAL_DMA_IRQHandler+0xa28>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d022      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6d      	ldr	r2, [pc, #436]	; (8004fd4 <HAL_DMA_IRQHandler+0xa2c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01d      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6b      	ldr	r2, [pc, #428]	; (8004fd8 <HAL_DMA_IRQHandler+0xa30>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6a      	ldr	r2, [pc, #424]	; (8004fdc <HAL_DMA_IRQHandler+0xa34>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a68      	ldr	r2, [pc, #416]	; (8004fe0 <HAL_DMA_IRQHandler+0xa38>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a67      	ldr	r2, [pc, #412]	; (8004fe4 <HAL_DMA_IRQHandler+0xa3c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a65      	ldr	r2, [pc, #404]	; (8004fe8 <HAL_DMA_IRQHandler+0xa40>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x8b8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a64      	ldr	r2, [pc, #400]	; (8004fec <HAL_DMA_IRQHandler+0xa44>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <HAL_DMA_IRQHandler+0x8ca>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e007      	b.n	8004e82 <HAL_DMA_IRQHandler+0x8da>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d307      	bcc.n	8004e9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f2      	bne.n	8004e82 <HAL_DMA_IRQHandler+0x8da>
 8004e9c:	e000      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004eb6:	e003      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8272 	beq.w	80053b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
 8004eda:	e26c      	b.n	80053b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a43      	ldr	r2, [pc, #268]	; (8004ff0 <HAL_DMA_IRQHandler+0xa48>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a42      	ldr	r2, [pc, #264]	; (8004ff4 <HAL_DMA_IRQHandler+0xa4c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01d      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a40      	ldr	r2, [pc, #256]	; (8004ff8 <HAL_DMA_IRQHandler+0xa50>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3f      	ldr	r2, [pc, #252]	; (8004ffc <HAL_DMA_IRQHandler+0xa54>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <HAL_DMA_IRQHandler+0xa58>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <HAL_DMA_IRQHandler+0xa5c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3a      	ldr	r2, [pc, #232]	; (8005008 <HAL_DMA_IRQHandler+0xa60>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x984>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a39      	ldr	r2, [pc, #228]	; (800500c <HAL_DMA_IRQHandler+0xa64>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_DMA_IRQHandler+0x988>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_DMA_IRQHandler+0x98a>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 823f 	beq.w	80053b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2204      	movs	r2, #4
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80cd 	beq.w	80050f0 <HAL_DMA_IRQHandler+0xb48>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80c7 	beq.w	80050f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d049      	beq.n	8005010 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8210 	beq.w	80053b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f98:	e20a      	b.n	80053b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8206 	beq.w	80053b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fac:	e200      	b.n	80053b0 <HAL_DMA_IRQHandler+0xe08>
 8004fae:	bf00      	nop
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8
 8004ff0:	58025408 	.word	0x58025408
 8004ff4:	5802541c 	.word	0x5802541c
 8004ff8:	58025430 	.word	0x58025430
 8004ffc:	58025444 	.word	0x58025444
 8005000:	58025458 	.word	0x58025458
 8005004:	5802546c 	.word	0x5802546c
 8005008:	58025480 	.word	0x58025480
 800500c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d160      	bne.n	80050dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7f      	ldr	r2, [pc, #508]	; (800521c <HAL_DMA_IRQHandler+0xc74>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04a      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a7d      	ldr	r2, [pc, #500]	; (8005220 <HAL_DMA_IRQHandler+0xc78>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d045      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a7c      	ldr	r2, [pc, #496]	; (8005224 <HAL_DMA_IRQHandler+0xc7c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d040      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7a      	ldr	r2, [pc, #488]	; (8005228 <HAL_DMA_IRQHandler+0xc80>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d03b      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a79      	ldr	r2, [pc, #484]	; (800522c <HAL_DMA_IRQHandler+0xc84>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d036      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a77      	ldr	r2, [pc, #476]	; (8005230 <HAL_DMA_IRQHandler+0xc88>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d031      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a76      	ldr	r2, [pc, #472]	; (8005234 <HAL_DMA_IRQHandler+0xc8c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d02c      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a74      	ldr	r2, [pc, #464]	; (8005238 <HAL_DMA_IRQHandler+0xc90>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d027      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a73      	ldr	r2, [pc, #460]	; (800523c <HAL_DMA_IRQHandler+0xc94>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a71      	ldr	r2, [pc, #452]	; (8005240 <HAL_DMA_IRQHandler+0xc98>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01d      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a70      	ldr	r2, [pc, #448]	; (8005244 <HAL_DMA_IRQHandler+0xc9c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6e      	ldr	r2, [pc, #440]	; (8005248 <HAL_DMA_IRQHandler+0xca0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6d      	ldr	r2, [pc, #436]	; (800524c <HAL_DMA_IRQHandler+0xca4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6b      	ldr	r2, [pc, #428]	; (8005250 <HAL_DMA_IRQHandler+0xca8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6a      	ldr	r2, [pc, #424]	; (8005254 <HAL_DMA_IRQHandler+0xcac>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_DMA_IRQHandler+0xb12>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a68      	ldr	r2, [pc, #416]	; (8005258 <HAL_DMA_IRQHandler+0xcb0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <HAL_DMA_IRQHandler+0xb24>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0208 	bic.w	r2, r2, #8
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e007      	b.n	80050dc <HAL_DMA_IRQHandler+0xb34>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0204 	bic.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8165 	beq.w	80053b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ee:	e15f      	b.n	80053b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	2202      	movs	r2, #2
 80050fa:	409a      	lsls	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80c5 	beq.w	8005290 <HAL_DMA_IRQHandler+0xce8>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80bf 	beq.w	8005290 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2202      	movs	r2, #2
 800511c:	409a      	lsls	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 813a 	beq.w	80053b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005148:	e134      	b.n	80053b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8130 	beq.w	80053b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800515c:	e12a      	b.n	80053b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	f040 8089 	bne.w	800527c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_DMA_IRQHandler+0xc74>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d04a      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <HAL_DMA_IRQHandler+0xc78>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d045      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a28      	ldr	r2, [pc, #160]	; (8005224 <HAL_DMA_IRQHandler+0xc7c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d040      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <HAL_DMA_IRQHandler+0xc80>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d03b      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a25      	ldr	r2, [pc, #148]	; (800522c <HAL_DMA_IRQHandler+0xc84>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d036      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <HAL_DMA_IRQHandler+0xc88>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d031      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_DMA_IRQHandler+0xc8c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d02c      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <HAL_DMA_IRQHandler+0xc90>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d027      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1f      	ldr	r2, [pc, #124]	; (800523c <HAL_DMA_IRQHandler+0xc94>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_DMA_IRQHandler+0xc98>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <HAL_DMA_IRQHandler+0xc9c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_DMA_IRQHandler+0xca0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a19      	ldr	r2, [pc, #100]	; (800524c <HAL_DMA_IRQHandler+0xca4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a17      	ldr	r2, [pc, #92]	; (8005250 <HAL_DMA_IRQHandler+0xca8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a16      	ldr	r2, [pc, #88]	; (8005254 <HAL_DMA_IRQHandler+0xcac>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_DMA_IRQHandler+0xc62>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a14      	ldr	r2, [pc, #80]	; (8005258 <HAL_DMA_IRQHandler+0xcb0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d128      	bne.n	800525c <HAL_DMA_IRQHandler+0xcb4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0214 	bic.w	r2, r2, #20
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e027      	b.n	800526c <HAL_DMA_IRQHandler+0xcc4>
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 020a 	bic.w	r2, r2, #10
 800526a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8097 	beq.w	80053b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800528e:	e091      	b.n	80053b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2208      	movs	r2, #8
 800529a:	409a      	lsls	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8088 	beq.w	80053b6 <HAL_DMA_IRQHandler+0xe0e>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8082 	beq.w	80053b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a41      	ldr	r2, [pc, #260]	; (80053bc <HAL_DMA_IRQHandler+0xe14>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d04a      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <HAL_DMA_IRQHandler+0xe18>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d045      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a3e      	ldr	r2, [pc, #248]	; (80053c4 <HAL_DMA_IRQHandler+0xe1c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d040      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <HAL_DMA_IRQHandler+0xe20>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d03b      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3b      	ldr	r2, [pc, #236]	; (80053cc <HAL_DMA_IRQHandler+0xe24>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d036      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a39      	ldr	r2, [pc, #228]	; (80053d0 <HAL_DMA_IRQHandler+0xe28>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a38      	ldr	r2, [pc, #224]	; (80053d4 <HAL_DMA_IRQHandler+0xe2c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d02c      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a36      	ldr	r2, [pc, #216]	; (80053d8 <HAL_DMA_IRQHandler+0xe30>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d027      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a35      	ldr	r2, [pc, #212]	; (80053dc <HAL_DMA_IRQHandler+0xe34>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <HAL_DMA_IRQHandler+0xe38>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01d      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a32      	ldr	r2, [pc, #200]	; (80053e4 <HAL_DMA_IRQHandler+0xe3c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <HAL_DMA_IRQHandler+0xe40>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <HAL_DMA_IRQHandler+0xe44>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <HAL_DMA_IRQHandler+0xe48>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <HAL_DMA_IRQHandler+0xe4c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_DMA_IRQHandler+0xdaa>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <HAL_DMA_IRQHandler+0xe50>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d108      	bne.n	8005364 <HAL_DMA_IRQHandler+0xdbc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 021c 	bic.w	r2, r2, #28
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e007      	b.n	8005374 <HAL_DMA_IRQHandler+0xdcc>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 020e 	bic.w	r2, r2, #14
 8005372:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
 80053aa:	e004      	b.n	80053b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40020010 	.word	0x40020010
 80053c0:	40020028 	.word	0x40020028
 80053c4:	40020040 	.word	0x40020040
 80053c8:	40020058 	.word	0x40020058
 80053cc:	40020070 	.word	0x40020070
 80053d0:	40020088 	.word	0x40020088
 80053d4:	400200a0 	.word	0x400200a0
 80053d8:	400200b8 	.word	0x400200b8
 80053dc:	40020410 	.word	0x40020410
 80053e0:	40020428 	.word	0x40020428
 80053e4:	40020440 	.word	0x40020440
 80053e8:	40020458 	.word	0x40020458
 80053ec:	40020470 	.word	0x40020470
 80053f0:	40020488 	.word	0x40020488
 80053f4:	400204a0 	.word	0x400204a0
 80053f8:	400204b8 	.word	0x400204b8

080053fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7f      	ldr	r2, [pc, #508]	; (8005618 <DMA_SetConfig+0x21c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d072      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a7d      	ldr	r2, [pc, #500]	; (800561c <DMA_SetConfig+0x220>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d06d      	beq.n	8005506 <DMA_SetConfig+0x10a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7c      	ldr	r2, [pc, #496]	; (8005620 <DMA_SetConfig+0x224>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d068      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a7a      	ldr	r2, [pc, #488]	; (8005624 <DMA_SetConfig+0x228>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d063      	beq.n	8005506 <DMA_SetConfig+0x10a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a79      	ldr	r2, [pc, #484]	; (8005628 <DMA_SetConfig+0x22c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d05e      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a77      	ldr	r2, [pc, #476]	; (800562c <DMA_SetConfig+0x230>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d059      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a76      	ldr	r2, [pc, #472]	; (8005630 <DMA_SetConfig+0x234>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d054      	beq.n	8005506 <DMA_SetConfig+0x10a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a74      	ldr	r2, [pc, #464]	; (8005634 <DMA_SetConfig+0x238>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04f      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a73      	ldr	r2, [pc, #460]	; (8005638 <DMA_SetConfig+0x23c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d04a      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a71      	ldr	r2, [pc, #452]	; (800563c <DMA_SetConfig+0x240>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d045      	beq.n	8005506 <DMA_SetConfig+0x10a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a70      	ldr	r2, [pc, #448]	; (8005640 <DMA_SetConfig+0x244>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d040      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6e      	ldr	r2, [pc, #440]	; (8005644 <DMA_SetConfig+0x248>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d03b      	beq.n	8005506 <DMA_SetConfig+0x10a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6d      	ldr	r2, [pc, #436]	; (8005648 <DMA_SetConfig+0x24c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d036      	beq.n	8005506 <DMA_SetConfig+0x10a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6b      	ldr	r2, [pc, #428]	; (800564c <DMA_SetConfig+0x250>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d031      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6a      	ldr	r2, [pc, #424]	; (8005650 <DMA_SetConfig+0x254>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d02c      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a68      	ldr	r2, [pc, #416]	; (8005654 <DMA_SetConfig+0x258>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d027      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a67      	ldr	r2, [pc, #412]	; (8005658 <DMA_SetConfig+0x25c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a65      	ldr	r2, [pc, #404]	; (800565c <DMA_SetConfig+0x260>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a64      	ldr	r2, [pc, #400]	; (8005660 <DMA_SetConfig+0x264>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a62      	ldr	r2, [pc, #392]	; (8005664 <DMA_SetConfig+0x268>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a61      	ldr	r2, [pc, #388]	; (8005668 <DMA_SetConfig+0x26c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5f      	ldr	r2, [pc, #380]	; (800566c <DMA_SetConfig+0x270>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <DMA_SetConfig+0x274>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <DMA_SetConfig+0x10a>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5c      	ldr	r2, [pc, #368]	; (8005674 <DMA_SetConfig+0x278>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <DMA_SetConfig+0x10e>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <DMA_SetConfig+0x110>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005518:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800552a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a39      	ldr	r2, [pc, #228]	; (8005618 <DMA_SetConfig+0x21c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d04a      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a38      	ldr	r2, [pc, #224]	; (800561c <DMA_SetConfig+0x220>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d045      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a36      	ldr	r2, [pc, #216]	; (8005620 <DMA_SetConfig+0x224>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d040      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a35      	ldr	r2, [pc, #212]	; (8005624 <DMA_SetConfig+0x228>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d03b      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a33      	ldr	r2, [pc, #204]	; (8005628 <DMA_SetConfig+0x22c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d036      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a32      	ldr	r2, [pc, #200]	; (800562c <DMA_SetConfig+0x230>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d031      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a30      	ldr	r2, [pc, #192]	; (8005630 <DMA_SetConfig+0x234>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02c      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <DMA_SetConfig+0x238>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d027      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <DMA_SetConfig+0x23c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d022      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <DMA_SetConfig+0x240>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01d      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <DMA_SetConfig+0x244>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a29      	ldr	r2, [pc, #164]	; (8005644 <DMA_SetConfig+0x248>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <DMA_SetConfig+0x24c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <DMA_SetConfig+0x250>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <DMA_SetConfig+0x254>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <DMA_SetConfig+0x1d0>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a23      	ldr	r2, [pc, #140]	; (8005654 <DMA_SetConfig+0x258>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <DMA_SetConfig+0x1d4>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <DMA_SetConfig+0x1d6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d059      	beq.n	800568a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	223f      	movs	r2, #63	; 0x3f
 80055e0:	409a      	lsls	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d138      	bne.n	8005678 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005616:	e086      	b.n	8005726 <DMA_SetConfig+0x32a>
 8005618:	40020010 	.word	0x40020010
 800561c:	40020028 	.word	0x40020028
 8005620:	40020040 	.word	0x40020040
 8005624:	40020058 	.word	0x40020058
 8005628:	40020070 	.word	0x40020070
 800562c:	40020088 	.word	0x40020088
 8005630:	400200a0 	.word	0x400200a0
 8005634:	400200b8 	.word	0x400200b8
 8005638:	40020410 	.word	0x40020410
 800563c:	40020428 	.word	0x40020428
 8005640:	40020440 	.word	0x40020440
 8005644:	40020458 	.word	0x40020458
 8005648:	40020470 	.word	0x40020470
 800564c:	40020488 	.word	0x40020488
 8005650:	400204a0 	.word	0x400204a0
 8005654:	400204b8 	.word	0x400204b8
 8005658:	58025408 	.word	0x58025408
 800565c:	5802541c 	.word	0x5802541c
 8005660:	58025430 	.word	0x58025430
 8005664:	58025444 	.word	0x58025444
 8005668:	58025458 	.word	0x58025458
 800566c:	5802546c 	.word	0x5802546c
 8005670:	58025480 	.word	0x58025480
 8005674:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]
}
 8005688:	e04d      	b.n	8005726 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a29      	ldr	r2, [pc, #164]	; (8005734 <DMA_SetConfig+0x338>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <DMA_SetConfig+0x2de>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a27      	ldr	r2, [pc, #156]	; (8005738 <DMA_SetConfig+0x33c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <DMA_SetConfig+0x2de>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a26      	ldr	r2, [pc, #152]	; (800573c <DMA_SetConfig+0x340>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <DMA_SetConfig+0x2de>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <DMA_SetConfig+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <DMA_SetConfig+0x2de>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a23      	ldr	r2, [pc, #140]	; (8005744 <DMA_SetConfig+0x348>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <DMA_SetConfig+0x2de>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a21      	ldr	r2, [pc, #132]	; (8005748 <DMA_SetConfig+0x34c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <DMA_SetConfig+0x2de>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a20      	ldr	r2, [pc, #128]	; (800574c <DMA_SetConfig+0x350>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <DMA_SetConfig+0x2de>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	; (8005750 <DMA_SetConfig+0x354>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <DMA_SetConfig+0x2e2>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <DMA_SetConfig+0x2e4>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2201      	movs	r2, #1
 80056ee:	409a      	lsls	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d108      	bne.n	8005716 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	60da      	str	r2, [r3, #12]
}
 8005714:	e007      	b.n	8005726 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	58025408 	.word	0x58025408
 8005738:	5802541c 	.word	0x5802541c
 800573c:	58025430 	.word	0x58025430
 8005740:	58025444 	.word	0x58025444
 8005744:	58025458 	.word	0x58025458
 8005748:	5802546c 	.word	0x5802546c
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494

08005754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a42      	ldr	r2, [pc, #264]	; (800586c <DMA_CalcBaseAndBitshift+0x118>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04a      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a41      	ldr	r2, [pc, #260]	; (8005870 <DMA_CalcBaseAndBitshift+0x11c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d045      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <DMA_CalcBaseAndBitshift+0x120>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d040      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a3e      	ldr	r2, [pc, #248]	; (8005878 <DMA_CalcBaseAndBitshift+0x124>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d03b      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3c      	ldr	r2, [pc, #240]	; (800587c <DMA_CalcBaseAndBitshift+0x128>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d036      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a3b      	ldr	r2, [pc, #236]	; (8005880 <DMA_CalcBaseAndBitshift+0x12c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d031      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a39      	ldr	r2, [pc, #228]	; (8005884 <DMA_CalcBaseAndBitshift+0x130>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d02c      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a38      	ldr	r2, [pc, #224]	; (8005888 <DMA_CalcBaseAndBitshift+0x134>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d027      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a36      	ldr	r2, [pc, #216]	; (800588c <DMA_CalcBaseAndBitshift+0x138>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a35      	ldr	r2, [pc, #212]	; (8005890 <DMA_CalcBaseAndBitshift+0x13c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d01d      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a33      	ldr	r2, [pc, #204]	; (8005894 <DMA_CalcBaseAndBitshift+0x140>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a32      	ldr	r2, [pc, #200]	; (8005898 <DMA_CalcBaseAndBitshift+0x144>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a30      	ldr	r2, [pc, #192]	; (800589c <DMA_CalcBaseAndBitshift+0x148>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2f      	ldr	r2, [pc, #188]	; (80058a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <DMA_CalcBaseAndBitshift+0x150>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xa8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <DMA_CalcBaseAndBitshift+0x154>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <DMA_CalcBaseAndBitshift+0xac>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <DMA_CalcBaseAndBitshift+0xae>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d024      	beq.n	8005850 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	3b10      	subs	r3, #16
 800580e:	4a27      	ldr	r2, [pc, #156]	; (80058ac <DMA_CalcBaseAndBitshift+0x158>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005820:	5cd3      	ldrb	r3, [r2, r3]
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d908      	bls.n	8005840 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005836:	4013      	ands	r3, r2
 8005838:	1d1a      	adds	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	659a      	str	r2, [r3, #88]	; 0x58
 800583e:	e00d      	b.n	800585c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005848:	4013      	ands	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6593      	str	r3, [r2, #88]	; 0x58
 800584e:	e005      	b.n	800585c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40020010 	.word	0x40020010
 8005870:	40020028 	.word	0x40020028
 8005874:	40020040 	.word	0x40020040
 8005878:	40020058 	.word	0x40020058
 800587c:	40020070 	.word	0x40020070
 8005880:	40020088 	.word	0x40020088
 8005884:	400200a0 	.word	0x400200a0
 8005888:	400200b8 	.word	0x400200b8
 800588c:	40020410 	.word	0x40020410
 8005890:	40020428 	.word	0x40020428
 8005894:	40020440 	.word	0x40020440
 8005898:	40020458 	.word	0x40020458
 800589c:	40020470 	.word	0x40020470
 80058a0:	40020488 	.word	0x40020488
 80058a4:	400204a0 	.word	0x400204a0
 80058a8:	400204b8 	.word	0x400204b8
 80058ac:	aaaaaaab 	.word	0xaaaaaaab
 80058b0:	0800db0c 	.word	0x0800db0c
 80058b4:	fffffc00 	.word	0xfffffc00

080058b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d120      	bne.n	800590e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d858      	bhi.n	8005986 <DMA_CheckFifoParam+0xce>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <DMA_CheckFifoParam+0x24>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	080058ed 	.word	0x080058ed
 80058e0:	080058ff 	.word	0x080058ff
 80058e4:	080058ed 	.word	0x080058ed
 80058e8:	08005987 	.word	0x08005987
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d048      	beq.n	800598a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058fc:	e045      	b.n	800598a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005906:	d142      	bne.n	800598e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800590c:	e03f      	b.n	800598e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005916:	d123      	bne.n	8005960 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	2b03      	cmp	r3, #3
 800591e:	d838      	bhi.n	8005992 <DMA_CheckFifoParam+0xda>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <DMA_CheckFifoParam+0x70>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	08005939 	.word	0x08005939
 800592c:	0800593f 	.word	0x0800593f
 8005930:	08005939 	.word	0x08005939
 8005934:	08005951 	.word	0x08005951
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
        break;
 800593c:	e030      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d025      	beq.n	8005996 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800594e:	e022      	b.n	8005996 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005958:	d11f      	bne.n	800599a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800595e:	e01c      	b.n	800599a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	2b02      	cmp	r3, #2
 8005966:	d902      	bls.n	800596e <DMA_CheckFifoParam+0xb6>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d003      	beq.n	8005974 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800596c:	e018      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
        break;
 8005972:	e015      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00e      	beq.n	800599e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
    break;
 8005984:	e00b      	b.n	800599e <DMA_CheckFifoParam+0xe6>
        break;
 8005986:	bf00      	nop
 8005988:	e00a      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        break;
 800598a:	bf00      	nop
 800598c:	e008      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        break;
 800598e:	bf00      	nop
 8005990:	e006      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005992:	bf00      	nop
 8005994:	e004      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
        break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <DMA_CheckFifoParam+0xe8>
    break;
 800599e:	bf00      	nop
    }
  }

  return status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a38      	ldr	r2, [pc, #224]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a36      	ldr	r2, [pc, #216]	; (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a35      	ldr	r2, [pc, #212]	; (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a33      	ldr	r2, [pc, #204]	; (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a32      	ldr	r2, [pc, #200]	; (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a30      	ldr	r2, [pc, #192]	; (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	; (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d101      	bne.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01a      	beq.n	8005a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	3b08      	subs	r3, #8
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a24      	ldr	r2, [pc, #144]	; (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a4c:	e024      	b.n	8005a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	3b10      	subs	r3, #16
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d806      	bhi.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d902      	bls.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3308      	adds	r3, #8
 8005a74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	58025408 	.word	0x58025408
 8005aa8:	5802541c 	.word	0x5802541c
 8005aac:	58025430 	.word	0x58025430
 8005ab0:	58025444 	.word	0x58025444
 8005ab4:	58025458 	.word	0x58025458
 8005ab8:	5802546c 	.word	0x5802546c
 8005abc:	58025480 	.word	0x58025480
 8005ac0:	58025494 	.word	0x58025494
 8005ac4:	cccccccd 	.word	0xcccccccd
 8005ac8:	16009600 	.word	0x16009600
 8005acc:	58025880 	.word	0x58025880
 8005ad0:	aaaaaaab 	.word	0xaaaaaaab
 8005ad4:	400204b8 	.word	0x400204b8
 8005ad8:	4002040f 	.word	0x4002040f
 8005adc:	10008200 	.word	0x10008200
 8005ae0:	40020880 	.word	0x40020880

08005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04a      	beq.n	8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d847      	bhi.n	8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d022      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01d      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d018      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00e      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d101      	bne.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8005b6e:	e009      	b.n	8005b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	58025408 	.word	0x58025408
 8005ba0:	5802541c 	.word	0x5802541c
 8005ba4:	58025430 	.word	0x58025430
 8005ba8:	58025444 	.word	0x58025444
 8005bac:	58025458 	.word	0x58025458
 8005bb0:	5802546c 	.word	0x5802546c
 8005bb4:	58025480 	.word	0x58025480
 8005bb8:	58025494 	.word	0x58025494
 8005bbc:	1600963f 	.word	0x1600963f
 8005bc0:	58025940 	.word	0x58025940
 8005bc4:	1000823f 	.word	0x1000823f
 8005bc8:	40020940 	.word	0x40020940

08005bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bda:	4b89      	ldr	r3, [pc, #548]	; (8005e00 <HAL_GPIO_Init+0x234>)
 8005bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bde:	e194      	b.n	8005f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2101      	movs	r1, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8186 	beq.w	8005f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d005      	beq.n	8005c10 <HAL_GPIO_Init+0x44>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d130      	bne.n	8005c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c46:	2201      	movs	r2, #1
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 0201 	and.w	r2, r3, #1
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d017      	beq.n	8005cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	2203      	movs	r2, #3
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d123      	bne.n	8005d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	08da      	lsrs	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	220f      	movs	r2, #15
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	08da      	lsrs	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3208      	adds	r2, #8
 8005cfc:	69b9      	ldr	r1, [r7, #24]
 8005cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0203 	and.w	r2, r3, #3
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80e0 	beq.w	8005f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d44:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <HAL_GPIO_Init+0x238>)
 8005d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d4a:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <HAL_GPIO_Init+0x238>)
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d54:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_GPIO_Init+0x238>)
 8005d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d62:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <HAL_GPIO_Init+0x23c>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	3302      	adds	r3, #2
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <HAL_GPIO_Init+0x240>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d052      	beq.n	8005e34 <HAL_GPIO_Init+0x268>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <HAL_GPIO_Init+0x244>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d031      	beq.n	8005dfa <HAL_GPIO_Init+0x22e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <HAL_GPIO_Init+0x248>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d02b      	beq.n	8005df6 <HAL_GPIO_Init+0x22a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_GPIO_Init+0x24c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d025      	beq.n	8005df2 <HAL_GPIO_Init+0x226>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <HAL_GPIO_Init+0x250>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <HAL_GPIO_Init+0x222>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <HAL_GPIO_Init+0x254>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d019      	beq.n	8005dea <HAL_GPIO_Init+0x21e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <HAL_GPIO_Init+0x258>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_GPIO_Init+0x21a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_GPIO_Init+0x25c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00d      	beq.n	8005de2 <HAL_GPIO_Init+0x216>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <HAL_GPIO_Init+0x260>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <HAL_GPIO_Init+0x212>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a17      	ldr	r2, [pc, #92]	; (8005e30 <HAL_GPIO_Init+0x264>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <HAL_GPIO_Init+0x20e>
 8005dd6:	2309      	movs	r3, #9
 8005dd8:	e02d      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dda:	230a      	movs	r3, #10
 8005ddc:	e02b      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dde:	2308      	movs	r3, #8
 8005de0:	e029      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005de2:	2307      	movs	r3, #7
 8005de4:	e027      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005de6:	2306      	movs	r3, #6
 8005de8:	e025      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dea:	2305      	movs	r3, #5
 8005dec:	e023      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dee:	2304      	movs	r3, #4
 8005df0:	e021      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005df2:	2303      	movs	r3, #3
 8005df4:	e01f      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e01d      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e01b      	b.n	8005e36 <HAL_GPIO_Init+0x26a>
 8005dfe:	bf00      	nop
 8005e00:	58000080 	.word	0x58000080
 8005e04:	58024400 	.word	0x58024400
 8005e08:	58000400 	.word	0x58000400
 8005e0c:	58020000 	.word	0x58020000
 8005e10:	58020400 	.word	0x58020400
 8005e14:	58020800 	.word	0x58020800
 8005e18:	58020c00 	.word	0x58020c00
 8005e1c:	58021000 	.word	0x58021000
 8005e20:	58021400 	.word	0x58021400
 8005e24:	58021800 	.word	0x58021800
 8005e28:	58021c00 	.word	0x58021c00
 8005e2c:	58022000 	.word	0x58022000
 8005e30:	58022400 	.word	0x58022400
 8005e34:	2300      	movs	r3, #0
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	f002 0203 	and.w	r2, r2, #3
 8005e3c:	0092      	lsls	r2, r2, #2
 8005e3e:	4093      	lsls	r3, r2
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e46:	4938      	ldr	r1, [pc, #224]	; (8005f28 <HAL_GPIO_Init+0x35c>)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4013      	ands	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f ae63 	bne.w	8005be0 <HAL_GPIO_Init+0x14>
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	3724      	adds	r7, #36	; 0x24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	58000400 	.word	0x58000400

08005f2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f3a:	4b75      	ldr	r3, [pc, #468]	; (8006110 <HAL_GPIO_DeInit+0x1e4>)
 8005f3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005f3e:	e0d9      	b.n	80060f4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005f40:	2201      	movs	r2, #1
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80cc 	beq.w	80060ee <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f56:	4a6f      	ldr	r2, [pc, #444]	; (8006114 <HAL_GPIO_DeInit+0x1e8>)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f62:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	220f      	movs	r2, #15
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4013      	ands	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a67      	ldr	r2, [pc, #412]	; (8006118 <HAL_GPIO_DeInit+0x1ec>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d037      	beq.n	8005ff0 <HAL_GPIO_DeInit+0xc4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a66      	ldr	r2, [pc, #408]	; (800611c <HAL_GPIO_DeInit+0x1f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_GPIO_DeInit+0xc0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a65      	ldr	r2, [pc, #404]	; (8006120 <HAL_GPIO_DeInit+0x1f4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d02b      	beq.n	8005fe8 <HAL_GPIO_DeInit+0xbc>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a64      	ldr	r2, [pc, #400]	; (8006124 <HAL_GPIO_DeInit+0x1f8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d025      	beq.n	8005fe4 <HAL_GPIO_DeInit+0xb8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a63      	ldr	r2, [pc, #396]	; (8006128 <HAL_GPIO_DeInit+0x1fc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d01f      	beq.n	8005fe0 <HAL_GPIO_DeInit+0xb4>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a62      	ldr	r2, [pc, #392]	; (800612c <HAL_GPIO_DeInit+0x200>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d019      	beq.n	8005fdc <HAL_GPIO_DeInit+0xb0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a61      	ldr	r2, [pc, #388]	; (8006130 <HAL_GPIO_DeInit+0x204>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <HAL_GPIO_DeInit+0xac>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a60      	ldr	r2, [pc, #384]	; (8006134 <HAL_GPIO_DeInit+0x208>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00d      	beq.n	8005fd4 <HAL_GPIO_DeInit+0xa8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a5f      	ldr	r2, [pc, #380]	; (8006138 <HAL_GPIO_DeInit+0x20c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d007      	beq.n	8005fd0 <HAL_GPIO_DeInit+0xa4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a5e      	ldr	r2, [pc, #376]	; (800613c <HAL_GPIO_DeInit+0x210>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_GPIO_DeInit+0xa0>
 8005fc8:	2309      	movs	r3, #9
 8005fca:	e012      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fcc:	230a      	movs	r3, #10
 8005fce:	e010      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	e00e      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fd4:	2307      	movs	r3, #7
 8005fd6:	e00c      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fd8:	2306      	movs	r3, #6
 8005fda:	e00a      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fdc:	2305      	movs	r3, #5
 8005fde:	e008      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e006      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e004      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e002      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_GPIO_DeInit+0xc6>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f002 0203 	and.w	r2, r2, #3
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	4093      	lsls	r3, r2
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d136      	bne.n	8006070 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	43db      	mvns	r3, r3
 800600a:	401a      	ands	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	43db      	mvns	r3, r3
 8006018:	401a      	ands	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	43db      	mvns	r3, r3
 8006028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800602c:	4013      	ands	r3, r2
 800602e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	43db      	mvns	r3, r3
 800603a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603e:	4013      	ands	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	220f      	movs	r2, #15
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006052:	4a30      	ldr	r2, [pc, #192]	; (8006114 <HAL_GPIO_DeInit+0x1e8>)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3302      	adds	r3, #2
 800605a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	43da      	mvns	r2, r3
 8006062:	482c      	ldr	r0, [pc, #176]	; (8006114 <HAL_GPIO_DeInit+0x1e8>)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	400a      	ands	r2, r1
 800606a:	3302      	adds	r3, #2
 800606c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	2103      	movs	r1, #3
 800607a:	fa01 f303 	lsl.w	r3, r1, r3
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	08da      	lsrs	r2, r3, #3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3208      	adds	r2, #8
 800608c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	220f      	movs	r2, #15
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	08d2      	lsrs	r2, r2, #3
 80060a4:	4019      	ands	r1, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3208      	adds	r2, #8
 80060aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	2103      	movs	r1, #3
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	401a      	ands	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	2101      	movs	r1, #1
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	2103      	movs	r1, #3
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	401a      	ands	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	3301      	adds	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f af1f 	bne.w	8005f40 <HAL_GPIO_DeInit+0x14>
  }
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	58000080 	.word	0x58000080
 8006114:	58000400 	.word	0x58000400
 8006118:	58020000 	.word	0x58020000
 800611c:	58020400 	.word	0x58020400
 8006120:	58020800 	.word	0x58020800
 8006124:	58020c00 	.word	0x58020c00
 8006128:	58021000 	.word	0x58021000
 800612c:	58021400 	.word	0x58021400
 8006130:	58021800 	.word	0x58021800
 8006134:	58021c00 	.word	0x58021c00
 8006138:	58022000 	.word	0x58022000
 800613c:	58022400 	.word	0x58022400

08006140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
 800614c:	4613      	mov	r3, r2
 800614e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006150:	787b      	ldrb	r3, [r7, #1]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006156:	887a      	ldrh	r2, [r7, #2]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800615c:	e003      	b.n	8006166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800615e:	887b      	ldrh	r3, [r7, #2]
 8006160:	041a      	lsls	r2, r3, #16
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	619a      	str	r2, [r3, #24]
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006184:	887a      	ldrh	r2, [r7, #2]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4013      	ands	r3, r2
 800618a:	041a      	lsls	r2, r3, #16
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	43d9      	mvns	r1, r3
 8006190:	887b      	ldrh	r3, [r7, #2]
 8006192:	400b      	ands	r3, r1
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	619a      	str	r2, [r3, #24]
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	4603      	mov	r3, r0
 80061ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f804 	bl	80061da <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80061f8:	4b29      	ldr	r3, [pc, #164]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	2b06      	cmp	r3, #6
 8006202:	d00a      	beq.n	800621a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006204:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d001      	beq.n	8006216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e040      	b.n	8006298 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e03e      	b.n	8006298 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800621a:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006222:	491f      	ldr	r1, [pc, #124]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4313      	orrs	r3, r2
 8006228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800622a:	f7fa fc27 	bl	8000a7c <HAL_GetTick>
 800622e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006230:	e009      	b.n	8006246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006232:	f7fa fc23 	bl	8000a7c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006240:	d901      	bls.n	8006246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e028      	b.n	8006298 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006252:	d1ee      	bne.n	8006232 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b1e      	cmp	r3, #30
 8006258:	d008      	beq.n	800626c <HAL_PWREx_ConfigSupply+0x7c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b2e      	cmp	r3, #46	; 0x2e
 800625e:	d005      	beq.n	800626c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b1d      	cmp	r3, #29
 8006264:	d002      	beq.n	800626c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b2d      	cmp	r3, #45	; 0x2d
 800626a:	d114      	bne.n	8006296 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800626c:	f7fa fc06 	bl	8000a7c <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006272:	e009      	b.n	8006288 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006274:	f7fa fc02 	bl	8000a7c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006282:	d901      	bls.n	8006288 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e007      	b.n	8006298 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d1ee      	bne.n	8006274 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	58024800 	.word	0x58024800

080062a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08c      	sub	sp, #48	; 0x30
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f000 bc48 	b.w	8006b48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8088 	beq.w	80063d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c6:	4b99      	ldr	r3, [pc, #612]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d0:	4b96      	ldr	r3, [pc, #600]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d007      	beq.n	80062ec <HAL_RCC_OscConfig+0x48>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b18      	cmp	r3, #24
 80062e0:	d111      	bne.n	8006306 <HAL_RCC_OscConfig+0x62>
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d10c      	bne.n	8006306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	4b8f      	ldr	r3, [pc, #572]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d06d      	beq.n	80063d4 <HAL_RCC_OscConfig+0x130>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d169      	bne.n	80063d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f000 bc21 	b.w	8006b48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d106      	bne.n	800631e <HAL_RCC_OscConfig+0x7a>
 8006310:	4b86      	ldr	r3, [pc, #536]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a85      	ldr	r2, [pc, #532]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e02e      	b.n	800637c <HAL_RCC_OscConfig+0xd8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x9c>
 8006326:	4b81      	ldr	r3, [pc, #516]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a80      	ldr	r2, [pc, #512]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800632c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	4b7e      	ldr	r3, [pc, #504]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a7d      	ldr	r2, [pc, #500]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e01d      	b.n	800637c <HAL_RCC_OscConfig+0xd8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0xc0>
 800634a:	4b78      	ldr	r3, [pc, #480]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a77      	ldr	r2, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b75      	ldr	r3, [pc, #468]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a74      	ldr	r2, [pc, #464]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800635c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e00b      	b.n	800637c <HAL_RCC_OscConfig+0xd8>
 8006364:	4b71      	ldr	r3, [pc, #452]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a70      	ldr	r2, [pc, #448]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800636a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b6e      	ldr	r3, [pc, #440]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6d      	ldr	r2, [pc, #436]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fa fb7a 	bl	8000a7c <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800638c:	f7fa fb76 	bl	8000a7c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	; 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e3d4      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800639e:	4b63      	ldr	r3, [pc, #396]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0xe8>
 80063aa:	e014      	b.n	80063d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fa fb66 	bl	8000a7c <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fa fb62 	bl	8000a7c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e3c0      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063c6:	4b59      	ldr	r3, [pc, #356]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x110>
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80ca 	beq.w	8006578 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e4:	4b51      	ldr	r3, [pc, #324]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ee:	4b4f      	ldr	r3, [pc, #316]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_RCC_OscConfig+0x166>
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2b18      	cmp	r3, #24
 80063fe:	d156      	bne.n	80064ae <HAL_RCC_OscConfig+0x20a>
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d151      	bne.n	80064ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800640a:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_RCC_OscConfig+0x17e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e392      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006422:	4b42      	ldr	r3, [pc, #264]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f023 0219 	bic.w	r2, r3, #25
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	493f      	ldr	r1, [pc, #252]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fa fb22 	bl	8000a7c <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800643c:	f7fa fb1e 	bl	8000a7c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e37c      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645a:	f7fa fb3f 	bl	8000adc <HAL_GetREVID>
 800645e:	4603      	mov	r3, r0
 8006460:	f241 0203 	movw	r2, #4099	; 0x1003
 8006464:	4293      	cmp	r3, r2
 8006466:	d817      	bhi.n	8006498 <HAL_RCC_OscConfig+0x1f4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d108      	bne.n	8006482 <HAL_RCC_OscConfig+0x1de>
 8006470:	4b2e      	ldr	r3, [pc, #184]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800647a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800647e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006480:	e07a      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	031b      	lsls	r3, r3, #12
 8006490:	4926      	ldr	r1, [pc, #152]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006496:	e06f      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006498:	4b24      	ldr	r3, [pc, #144]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	4921      	ldr	r1, [pc, #132]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ac:	e064      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d047      	beq.n	8006546 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064b6:	4b1d      	ldr	r3, [pc, #116]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 0219 	bic.w	r2, r3, #25
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	491a      	ldr	r1, [pc, #104]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fa fad8 	bl	8000a7c <HAL_GetTick>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d0:	f7fa fad4 	bl	8000a7c <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e332      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_RCC_OscConfig+0x288>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	f7fa faf5 	bl	8000adc <HAL_GetREVID>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d819      	bhi.n	8006530 <HAL_RCC_OscConfig+0x28c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d108      	bne.n	8006516 <HAL_RCC_OscConfig+0x272>
 8006504:	4b09      	ldr	r3, [pc, #36]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800650c:	4a07      	ldr	r2, [pc, #28]	; (800652c <HAL_RCC_OscConfig+0x288>)
 800650e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006512:	6053      	str	r3, [r2, #4]
 8006514:	e030      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	031b      	lsls	r3, r3, #12
 8006524:	4901      	ldr	r1, [pc, #4]	; (800652c <HAL_RCC_OscConfig+0x288>)
 8006526:	4313      	orrs	r3, r2
 8006528:	604b      	str	r3, [r1, #4]
 800652a:	e025      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
 800652c:	58024400 	.word	0x58024400
 8006530:	4b9a      	ldr	r3, [pc, #616]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	061b      	lsls	r3, r3, #24
 800653e:	4997      	ldr	r1, [pc, #604]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006540:	4313      	orrs	r3, r2
 8006542:	604b      	str	r3, [r1, #4]
 8006544:	e018      	b.n	8006578 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006546:	4b95      	ldr	r3, [pc, #596]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a94      	ldr	r2, [pc, #592]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fa fa93 	bl	8000a7c <HAL_GetTick>
 8006556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fa fa8f 	bl	8000a7c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e2ed      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800656c:	4b8b      	ldr	r3, [pc, #556]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f0      	bne.n	800655a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80a9 	beq.w	80066d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006586:	4b85      	ldr	r3, [pc, #532]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006590:	4b82      	ldr	r3, [pc, #520]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d007      	beq.n	80065ac <HAL_RCC_OscConfig+0x308>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b18      	cmp	r3, #24
 80065a0:	d13a      	bne.n	8006618 <HAL_RCC_OscConfig+0x374>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d135      	bne.n	8006618 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ac:	4b7b      	ldr	r3, [pc, #492]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_OscConfig+0x320>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	2b80      	cmp	r3, #128	; 0x80
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e2c1      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065c4:	f7fa fa8a 	bl	8000adc <HAL_GetREVID>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d817      	bhi.n	8006602 <HAL_RCC_OscConfig+0x35e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d108      	bne.n	80065ec <HAL_RCC_OscConfig+0x348>
 80065da:	4b70      	ldr	r3, [pc, #448]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065e2:	4a6e      	ldr	r2, [pc, #440]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80065e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ea:	e075      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ec:	4b6b      	ldr	r3, [pc, #428]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	069b      	lsls	r3, r3, #26
 80065fa:	4968      	ldr	r1, [pc, #416]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006600:	e06a      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006602:	4b66      	ldr	r3, [pc, #408]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	061b      	lsls	r3, r3, #24
 8006610:	4962      	ldr	r1, [pc, #392]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006616:	e05f      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d042      	beq.n	80066a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006620:	4b5e      	ldr	r3, [pc, #376]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5d      	ldr	r2, [pc, #372]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662c:	f7fa fa26 	bl	8000a7c <HAL_GetTick>
 8006630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006634:	f7fa fa22 	bl	8000a7c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e280      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006646:	4b55      	ldr	r3, [pc, #340]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006652:	f7fa fa43 	bl	8000adc <HAL_GetREVID>
 8006656:	4603      	mov	r3, r0
 8006658:	f241 0203 	movw	r2, #4099	; 0x1003
 800665c:	4293      	cmp	r3, r2
 800665e:	d817      	bhi.n	8006690 <HAL_RCC_OscConfig+0x3ec>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	2b20      	cmp	r3, #32
 8006666:	d108      	bne.n	800667a <HAL_RCC_OscConfig+0x3d6>
 8006668:	4b4c      	ldr	r3, [pc, #304]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006670:	4a4a      	ldr	r2, [pc, #296]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006676:	6053      	str	r3, [r2, #4]
 8006678:	e02e      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
 800667a:	4b48      	ldr	r3, [pc, #288]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	069b      	lsls	r3, r3, #26
 8006688:	4944      	ldr	r1, [pc, #272]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800668a:	4313      	orrs	r3, r2
 800668c:	604b      	str	r3, [r1, #4]
 800668e:	e023      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
 8006690:	4b42      	ldr	r3, [pc, #264]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	061b      	lsls	r3, r3, #24
 800669e:	493f      	ldr	r1, [pc, #252]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60cb      	str	r3, [r1, #12]
 80066a4:	e018      	b.n	80066d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066a6:	4b3d      	ldr	r3, [pc, #244]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3c      	ldr	r2, [pc, #240]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fa f9e3 	bl	8000a7c <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066ba:	f7fa f9df 	bl	8000a7c <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e23d      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066cc:	4b33      	ldr	r3, [pc, #204]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d036      	beq.n	8006752 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d019      	beq.n	8006720 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ec:	4b2b      	ldr	r3, [pc, #172]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f0:	4a2a      	ldr	r2, [pc, #168]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fa f9c0 	bl	8000a7c <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006700:	f7fa f9bc 	bl	8000a7c <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e21a      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006712:	4b22      	ldr	r3, [pc, #136]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x45c>
 800671e:	e018      	b.n	8006752 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006720:	4b1e      	ldr	r3, [pc, #120]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006724:	4a1d      	ldr	r2, [pc, #116]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fa f9a6 	bl	8000a7c <HAL_GetTick>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006734:	f7fa f9a2 	bl	8000a7c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e200      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d039      	beq.n	80067d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a0c      	ldr	r2, [pc, #48]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800676c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006772:	f7fa f983 	bl	8000a7c <HAL_GetTick>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800677a:	f7fa f97f 	bl	8000a7c <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e1dd      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <HAL_RCC_OscConfig+0x4f8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x4d6>
 8006798:	e01b      	b.n	80067d2 <HAL_RCC_OscConfig+0x52e>
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067a0:	4b9b      	ldr	r3, [pc, #620]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a9a      	ldr	r2, [pc, #616]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80067a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ac:	f7fa f966 	bl	8000a7c <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b4:	f7fa f962 	bl	8000a7c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e1c0      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067c6:	4b92      	ldr	r3, [pc, #584]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8081 	beq.w	80068e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067e0:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <HAL_RCC_OscConfig+0x770>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a8b      	ldr	r2, [pc, #556]	; (8006a14 <HAL_RCC_OscConfig+0x770>)
 80067e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ec:	f7fa f946 	bl	8000a7c <HAL_GetTick>
 80067f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f4:	f7fa f942 	bl	8000a7c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	; 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e1a0      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006806:	4b83      	ldr	r3, [pc, #524]	; (8006a14 <HAL_RCC_OscConfig+0x770>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d106      	bne.n	8006828 <HAL_RCC_OscConfig+0x584>
 800681a:	4b7d      	ldr	r3, [pc, #500]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a7c      	ldr	r2, [pc, #496]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6713      	str	r3, [r2, #112]	; 0x70
 8006826:	e02d      	b.n	8006884 <HAL_RCC_OscConfig+0x5e0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10c      	bne.n	800684a <HAL_RCC_OscConfig+0x5a6>
 8006830:	4b77      	ldr	r3, [pc, #476]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006834:	4a76      	ldr	r2, [pc, #472]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	6713      	str	r3, [r2, #112]	; 0x70
 800683c:	4b74      	ldr	r3, [pc, #464]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4a73      	ldr	r2, [pc, #460]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006842:	f023 0304 	bic.w	r3, r3, #4
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
 8006848:	e01c      	b.n	8006884 <HAL_RCC_OscConfig+0x5e0>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x5c8>
 8006852:	4b6f      	ldr	r3, [pc, #444]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a6e      	ldr	r2, [pc, #440]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6713      	str	r3, [r2, #112]	; 0x70
 800685e:	4b6c      	ldr	r3, [pc, #432]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a6b      	ldr	r2, [pc, #428]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0x5e0>
 800686c:	4b68      	ldr	r3, [pc, #416]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006870:	4a67      	ldr	r2, [pc, #412]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6713      	str	r3, [r2, #112]	; 0x70
 8006878:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a64      	ldr	r2, [pc, #400]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800687e:	f023 0304 	bic.w	r3, r3, #4
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fa f8f6 	bl	8000a7c <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006892:	e00a      	b.n	80068aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006894:	f7fa f8f2 	bl	8000a7c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e14e      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068aa:	4b59      	ldr	r3, [pc, #356]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ee      	beq.n	8006894 <HAL_RCC_OscConfig+0x5f0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fa f8e0 	bl	8000a7c <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fa f8dc 	bl	8000a7c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e138      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068d6:	4b4e      	ldr	r3, [pc, #312]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ee      	bne.n	80068c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 812d 	beq.w	8006b46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068ec:	4b48      	ldr	r3, [pc, #288]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f4:	2b18      	cmp	r3, #24
 80068f6:	f000 80bd 	beq.w	8006a74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f040 809e 	bne.w	8006a40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006904:	4b42      	ldr	r3, [pc, #264]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a41      	ldr	r2, [pc, #260]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800690a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800690e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fa f8b4 	bl	8000a7c <HAL_GetTick>
 8006914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006918:	f7fa f8b0 	bl	8000a7c <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e10e      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800692a:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006936:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693a:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <HAL_RCC_OscConfig+0x774>)
 800693c:	4013      	ands	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	430a      	orrs	r2, r1
 800694a:	4931      	ldr	r1, [pc, #196]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800694c:	4313      	orrs	r3, r2
 800694e:	628b      	str	r3, [r1, #40]	; 0x28
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	3b01      	subs	r3, #1
 8006956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	3b01      	subs	r3, #1
 8006960:	025b      	lsls	r3, r3, #9
 8006962:	b29b      	uxth	r3, r3
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	3b01      	subs	r3, #1
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	3b01      	subs	r3, #1
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006980:	4923      	ldr	r1, [pc, #140]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006986:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006992:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006996:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800699e:	00d2      	lsls	r2, r2, #3
 80069a0:	491b      	ldr	r1, [pc, #108]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	f023 020c 	bic.w	r2, r3, #12
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	4917      	ldr	r1, [pc, #92]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	f023 0202 	bic.w	r2, r3, #2
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	4912      	ldr	r1, [pc, #72]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a0d      	ldr	r2, [pc, #52]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <HAL_RCC_OscConfig+0x76c>)
 8006a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fa f839 	bl	8000a7c <HAL_GetTick>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a0c:	e011      	b.n	8006a32 <HAL_RCC_OscConfig+0x78e>
 8006a0e:	bf00      	nop
 8006a10:	58024400 	.word	0x58024400
 8006a14:	58024800 	.word	0x58024800
 8006a18:	fffffc0c 	.word	0xfffffc0c
 8006a1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fa f82c 	bl	8000a7c <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e08a      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a32:	4b47      	ldr	r3, [pc, #284]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x77c>
 8006a3e:	e082      	b.n	8006b46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a40:	4b43      	ldr	r3, [pc, #268]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a42      	ldr	r2, [pc, #264]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fa f816 	bl	8000a7c <HAL_GetTick>
 8006a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fa f812 	bl	8000a7c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e070      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a66:	4b3a      	ldr	r3, [pc, #232]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x7b0>
 8006a72:	e068      	b.n	8006b46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a74:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a7a:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d031      	beq.n	8006aec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f003 0203 	and.w	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d12a      	bne.n	8006aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d122      	bne.n	8006aec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d11a      	bne.n	8006aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	0a5b      	lsrs	r3, r3, #9
 8006aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d111      	bne.n	8006aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d108      	bne.n	8006aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	0e1b      	lsrs	r3, r3, #24
 8006ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e02b      	b.n	8006b48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006af0:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d01f      	beq.n	8006b46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b12:	f7f9 ffb3 	bl	8000a7c <HAL_GetTick>
 8006b16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b18:	bf00      	nop
 8006b1a:	f7f9 ffaf 	bl	8000a7c <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d0f9      	beq.n	8006b1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_RCC_OscConfig+0x8b0>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b32:	00d2      	lsls	r2, r2, #3
 8006b34:	4906      	ldr	r1, [pc, #24]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b3a:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <HAL_RCC_OscConfig+0x8ac>)
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3730      	adds	r7, #48	; 0x30
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	58024400 	.word	0x58024400
 8006b54:	ffff0007 	.word	0xffff0007

08006b58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e19c      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b6c:	4b8a      	ldr	r3, [pc, #552]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d910      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7a:	4b87      	ldr	r3, [pc, #540]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f023 020f 	bic.w	r2, r3, #15
 8006b82:	4985      	ldr	r1, [pc, #532]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8a:	4b83      	ldr	r3, [pc, #524]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e184      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	4b7b      	ldr	r3, [pc, #492]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d908      	bls.n	8006bca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bb8:	4b78      	ldr	r3, [pc, #480]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	4975      	ldr	r1, [pc, #468]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d010      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	4b70      	ldr	r3, [pc, #448]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d908      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006be6:	4b6d      	ldr	r3, [pc, #436]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	496a      	ldr	r1, [pc, #424]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	4b64      	ldr	r3, [pc, #400]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d908      	bls.n	8006c26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c14:	4b61      	ldr	r3, [pc, #388]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	495e      	ldr	r1, [pc, #376]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d908      	bls.n	8006c54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c42:	4b56      	ldr	r3, [pc, #344]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4953      	ldr	r1, [pc, #332]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	4b4d      	ldr	r3, [pc, #308]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d908      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b4a      	ldr	r3, [pc, #296]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f023 020f 	bic.w	r2, r3, #15
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4947      	ldr	r1, [pc, #284]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d055      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c8e:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	4940      	ldr	r1, [pc, #256]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ca8:	4b3c      	ldr	r3, [pc, #240]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d121      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0f6      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cc0:	4b36      	ldr	r3, [pc, #216]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d115      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0ea      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cd8:	4b30      	ldr	r3, [pc, #192]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0de      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ce8:	4b2c      	ldr	r3, [pc, #176]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0d6      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cf8:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f023 0207 	bic.w	r2, r3, #7
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4925      	ldr	r1, [pc, #148]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0a:	f7f9 feb7 	bl	8000a7c <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d10:	e00a      	b.n	8006d28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d12:	f7f9 feb3 	bl	8000a7c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e0be      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d1eb      	bne.n	8006d12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d010      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d208      	bcs.n	8006d68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f023 020f 	bic.w	r2, r3, #15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	490e      	ldr	r1, [pc, #56]	; (8006d9c <HAL_RCC_ClockConfig+0x244>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d68:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d214      	bcs.n	8006da0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 020f 	bic.w	r2, r3, #15
 8006d7e:	4906      	ldr	r1, [pc, #24]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <HAL_RCC_ClockConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d005      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e086      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x34e>
 8006d98:	52002000 	.word	0x52002000
 8006d9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d010      	beq.n	8006dce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d208      	bcs.n	8006dce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dbc:	4b3c      	ldr	r3, [pc, #240]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	4939      	ldr	r1, [pc, #228]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d010      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	4b34      	ldr	r3, [pc, #208]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d208      	bcs.n	8006dfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	492e      	ldr	r1, [pc, #184]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d208      	bcs.n	8006e2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	4922      	ldr	r1, [pc, #136]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d010      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d208      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4917      	ldr	r1, [pc, #92]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e58:	f000 f834 	bl	8006ec4 <HAL_RCC_GetSysClockFreq>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	4912      	ldr	r1, [pc, #72]	; (8006eb4 <HAL_RCC_ClockConfig+0x35c>)
 8006e6a:	5ccb      	ldrb	r3, [r1, r3]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <HAL_RCC_ClockConfig+0x358>)
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	4a0d      	ldr	r2, [pc, #52]	; (8006eb4 <HAL_RCC_ClockConfig+0x35c>)
 8006e80:	5cd3      	ldrb	r3, [r2, r3]
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <HAL_RCC_ClockConfig+0x360>)
 8006e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e90:	4a0a      	ldr	r2, [pc, #40]	; (8006ebc <HAL_RCC_ClockConfig+0x364>)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_RCC_ClockConfig+0x368>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7f9 fda4 	bl	80009e8 <HAL_InitTick>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	0800dafc 	.word	0x0800dafc
 8006eb8:	24000010 	.word	0x24000010
 8006ebc:	2400000c 	.word	0x2400000c
 8006ec0:	24000014 	.word	0x24000014

08006ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eca:	4bb3      	ldr	r3, [pc, #716]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed2:	2b18      	cmp	r3, #24
 8006ed4:	f200 8155 	bhi.w	8007182 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08007183 	.word	0x08007183
 8006ee8:	08007183 	.word	0x08007183
 8006eec:	08007183 	.word	0x08007183
 8006ef0:	08007183 	.word	0x08007183
 8006ef4:	08007183 	.word	0x08007183
 8006ef8:	08007183 	.word	0x08007183
 8006efc:	08007183 	.word	0x08007183
 8006f00:	08006f6b 	.word	0x08006f6b
 8006f04:	08007183 	.word	0x08007183
 8006f08:	08007183 	.word	0x08007183
 8006f0c:	08007183 	.word	0x08007183
 8006f10:	08007183 	.word	0x08007183
 8006f14:	08007183 	.word	0x08007183
 8006f18:	08007183 	.word	0x08007183
 8006f1c:	08007183 	.word	0x08007183
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08007183 	.word	0x08007183
 8006f28:	08007183 	.word	0x08007183
 8006f2c:	08007183 	.word	0x08007183
 8006f30:	08007183 	.word	0x08007183
 8006f34:	08007183 	.word	0x08007183
 8006f38:	08007183 	.word	0x08007183
 8006f3c:	08007183 	.word	0x08007183
 8006f40:	08006f77 	.word	0x08006f77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f44:	4b94      	ldr	r3, [pc, #592]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f50:	4b91      	ldr	r3, [pc, #580]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	08db      	lsrs	r3, r3, #3
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	4a90      	ldr	r2, [pc, #576]	; (800719c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f62:	e111      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f64:	4b8d      	ldr	r3, [pc, #564]	; (800719c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f66:	61bb      	str	r3, [r7, #24]
      break;
 8006f68:	e10e      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f6a:	4b8d      	ldr	r3, [pc, #564]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f6c:	61bb      	str	r3, [r7, #24]
      break;
 8006f6e:	e10b      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f70:	4b8c      	ldr	r3, [pc, #560]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f72:	61bb      	str	r3, [r7, #24]
      break;
 8006f74:	e108      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f80:	4b85      	ldr	r3, [pc, #532]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f8c:	4b82      	ldr	r3, [pc, #520]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f96:	4b80      	ldr	r3, [pc, #512]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	08db      	lsrs	r3, r3, #3
 8006f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80e1 	beq.w	800717c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	f000 8083 	beq.w	80070c8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f200 80a1 	bhi.w	800710c <HAL_RCC_GetSysClockFreq+0x248>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d056      	beq.n	8007084 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fd6:	e099      	b.n	800710c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02d      	beq.n	8007040 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe4:	4b6c      	ldr	r3, [pc, #432]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	08db      	lsrs	r3, r3, #3
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	4a6b      	ldr	r2, [pc, #428]	; (800719c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b62      	ldr	r3, [pc, #392]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007022:	eddf 5a61 	vldr	s11, [pc, #388]	; 80071a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800703e:	e087      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80071ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b51      	ldr	r3, [pc, #324]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a02 	vldr	s12, [r7, #8]
 8007066:	eddf 5a50 	vldr	s11, [pc, #320]	; 80071a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007082:	e065      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80071b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b40      	ldr	r3, [pc, #256]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80071a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070c6:	e043      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80071b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80071a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800710a:	e021      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a26 	vldr	s13, [pc, #152]	; 80071b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007132:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80071a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800714e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007150:	4b11      	ldr	r3, [pc, #68]	; (8007198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800715a:	3301      	adds	r3, #1
 800715c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007168:	edd7 6a07 	vldr	s13, [r7, #28]
 800716c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007174:	ee17 3a90 	vmov	r3, s15
 8007178:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800717a:	e005      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
      break;
 8007180:	e002      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007184:	61bb      	str	r3, [r7, #24]
      break;
 8007186:	bf00      	nop
  }

  return sysclockfreq;
 8007188:	69bb      	ldr	r3, [r7, #24]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3724      	adds	r7, #36	; 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	003d0900 	.word	0x003d0900
 80071a4:	007a1200 	.word	0x007a1200
 80071a8:	46000000 	.word	0x46000000
 80071ac:	4c742400 	.word	0x4c742400
 80071b0:	4a742400 	.word	0x4a742400
 80071b4:	4af42400 	.word	0x4af42400

080071b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071be:	f7ff fe81 	bl	8006ec4 <HAL_RCC_GetSysClockFreq>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_RCC_GetHCLKFreq+0x50>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	490f      	ldr	r1, [pc, #60]	; (800720c <HAL_RCC_GetHCLKFreq+0x54>)
 80071d0:	5ccb      	ldrb	r3, [r1, r3]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071dc:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <HAL_RCC_GetHCLKFreq+0x50>)
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	4a09      	ldr	r2, [pc, #36]	; (800720c <HAL_RCC_GetHCLKFreq+0x54>)
 80071e6:	5cd3      	ldrb	r3, [r2, r3]
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	fa22 f303 	lsr.w	r3, r2, r3
 80071f2:	4a07      	ldr	r2, [pc, #28]	; (8007210 <HAL_RCC_GetHCLKFreq+0x58>)
 80071f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071f6:	4a07      	ldr	r2, [pc, #28]	; (8007214 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <HAL_RCC_GetHCLKFreq+0x58>)
 80071fe:	681b      	ldr	r3, [r3, #0]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	58024400 	.word	0x58024400
 800720c:	0800dafc 	.word	0x0800dafc
 8007210:	24000010 	.word	0x24000010
 8007214:	2400000c 	.word	0x2400000c

08007218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800721c:	f7ff ffcc 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b06      	ldr	r3, [pc, #24]	; (800723c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	58024400 	.word	0x58024400
 8007240:	0800dafc 	.word	0x0800dafc

08007244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007248:	f7ff ffb6 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <HAL_RCC_GetPCLK2Freq+0x28>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	58024400 	.word	0x58024400
 800726c:	0800dafc 	.word	0x0800dafc

08007270 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	223f      	movs	r2, #63	; 0x3f
 800727e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0207 	and.w	r2, r3, #7
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800728c:	4b17      	ldr	r3, [pc, #92]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80072a4:	4b11      	ldr	r3, [pc, #68]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80072b0:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80072c8:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_RCC_GetClockConfig+0x7c>)
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_RCC_GetClockConfig+0x80>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 020f 	and.w	r2, r3, #15
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	601a      	str	r2, [r3, #0]
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	58024400 	.word	0x58024400
 80072f0:	52002000 	.word	0x52002000

080072f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f8:	b0ca      	sub	sp, #296	; 0x128
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007300:	2300      	movs	r3, #0
 8007302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007306:	2300      	movs	r3, #0
 8007308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007318:	2500      	movs	r5, #0
 800731a:	ea54 0305 	orrs.w	r3, r4, r5
 800731e:	d049      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007326:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800732a:	d02f      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800732c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007330:	d828      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007336:	d01a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800733c:	d822      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007346:	d007      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007348:	e01c      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734a:	4bb8      	ldr	r3, [pc, #736]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4ab7      	ldr	r2, [pc, #732]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007356:	e01a      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735c:	3308      	adds	r3, #8
 800735e:	2102      	movs	r1, #2
 8007360:	4618      	mov	r0, r3
 8007362:	f002 fb61 	bl	8009a28 <RCCEx_PLL2_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800736c:	e00f      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007372:	3328      	adds	r3, #40	; 0x28
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f002 fc08 	bl	8009b8c <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007382:	e004      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800738a:	e000      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800738c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007396:	4ba5      	ldr	r3, [pc, #660]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a4:	4aa1      	ldr	r2, [pc, #644]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6513      	str	r3, [r2, #80]	; 0x50
 80073aa:	e003      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80073c0:	f04f 0900 	mov.w	r9, #0
 80073c4:	ea58 0309 	orrs.w	r3, r8, r9
 80073c8:	d047      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d82a      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	080073f1 	.word	0x080073f1
 80073e0:	080073ff 	.word	0x080073ff
 80073e4:	08007415 	.word	0x08007415
 80073e8:	08007433 	.word	0x08007433
 80073ec:	08007433 	.word	0x08007433
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f0:	4b8e      	ldr	r3, [pc, #568]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	4a8d      	ldr	r2, [pc, #564]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073fc:	e01a      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007402:	3308      	adds	r3, #8
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f002 fb0e 	bl	8009a28 <RCCEx_PLL2_Config>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007412:	e00f      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007418:	3328      	adds	r3, #40	; 0x28
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f002 fbb5 	bl	8009b8c <RCCEx_PLL3_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007428:	e004      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007430:	e000      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800743c:	4b7b      	ldr	r3, [pc, #492]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007440:	f023 0107 	bic.w	r1, r3, #7
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	4a78      	ldr	r2, [pc, #480]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6513      	str	r3, [r2, #80]	; 0x50
 8007450:	e003      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007466:	f04f 0b00 	mov.w	fp, #0
 800746a:	ea5a 030b 	orrs.w	r3, sl, fp
 800746e:	d04c      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d030      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800747c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007480:	d829      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007482:	2bc0      	cmp	r3, #192	; 0xc0
 8007484:	d02d      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007486:	2bc0      	cmp	r3, #192	; 0xc0
 8007488:	d825      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d018      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d821      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	d007      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800749a:	e01c      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b63      	ldr	r3, [pc, #396]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a62      	ldr	r2, [pc, #392]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074a8:	e01c      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ae:	3308      	adds	r3, #8
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f002 fab8 	bl	8009a28 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074be:	e011      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c4:	3328      	adds	r3, #40	; 0x28
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 fb5f 	bl	8009b8c <RCCEx_PLL3_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074d4:	e006      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074dc:	e002      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074ec:	4b4f      	ldr	r3, [pc, #316]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	4a4c      	ldr	r2, [pc, #304]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6513      	str	r3, [r2, #80]	; 0x50
 8007500:	e003      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007516:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800751a:	2300      	movs	r3, #0
 800751c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007520:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007524:	460b      	mov	r3, r1
 8007526:	4313      	orrs	r3, r2
 8007528:	d053      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007536:	d035      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800753c:	d82e      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800753e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007542:	d031      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007544:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007548:	d828      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800754a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800754e:	d01a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007554:	d822      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800755a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800755e:	d007      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007560:	e01c      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007562:	4b32      	ldr	r3, [pc, #200]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	4a31      	ldr	r2, [pc, #196]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800756e:	e01c      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007574:	3308      	adds	r3, #8
 8007576:	2100      	movs	r1, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f002 fa55 	bl	8009a28 <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007584:	e011      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758a:	3328      	adds	r3, #40	; 0x28
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f002 fafc 	bl	8009b8c <RCCEx_PLL3_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800759a:	e006      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075a2:	e002      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075b2:	4b1e      	ldr	r3, [pc, #120]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075c2:	4a1a      	ldr	r2, [pc, #104]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6593      	str	r3, [r2, #88]	; 0x58
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80075de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d056      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075fe:	d038      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007604:	d831      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007606:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800760a:	d034      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800760c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007610:	d82b      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007616:	d01d      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800761c:	d825      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d006      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007628:	e01f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800762a:	bf00      	nop
 800762c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007630:	4ba2      	ldr	r3, [pc, #648]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4aa1      	ldr	r2, [pc, #644]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800763c:	e01c      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007642:	3308      	adds	r3, #8
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f002 f9ee 	bl	8009a28 <RCCEx_PLL2_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007652:	e011      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007658:	3328      	adds	r3, #40	; 0x28
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fa95 	bl	8009b8c <RCCEx_PLL3_Config>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007668:	e006      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007680:	4b8e      	ldr	r3, [pc, #568]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007684:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007690:	4a8a      	ldr	r2, [pc, #552]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007692:	430b      	orrs	r3, r1
 8007694:	6593      	str	r3, [r2, #88]	; 0x58
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800769c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80076ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d03a      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	d01f      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076ca:	2b30      	cmp	r3, #48	; 0x30
 80076cc:	d819      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d00c      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d815      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d019      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d111      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076de:	4b77      	ldr	r3, [pc, #476]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	4a76      	ldr	r2, [pc, #472]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076ea:	e011      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f0:	3308      	adds	r3, #8
 80076f2:	2102      	movs	r1, #2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f002 f997 	bl	8009a28 <RCCEx_PLL2_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007708:	e002      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800770e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007718:	4b68      	ldr	r3, [pc, #416]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007726:	4a65      	ldr	r2, [pc, #404]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007728:	430b      	orrs	r3, r1
 800772a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007732:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007742:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800774c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d051      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007760:	d035      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007766:	d82e      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800776c:	d031      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800776e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007772:	d828      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007778:	d01a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777e:	d822      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007788:	d007      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800778a:	e01c      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778c:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	4a4a      	ldr	r2, [pc, #296]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007798:	e01c      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	3308      	adds	r3, #8
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f002 f940 	bl	8009a28 <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077ae:	e011      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	3328      	adds	r3, #40	; 0x28
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f002 f9e7 	bl	8009b8c <RCCEx_PLL3_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077dc:	4b37      	ldr	r3, [pc, #220]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ea:	4a34      	ldr	r2, [pc, #208]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6513      	str	r3, [r2, #80]	; 0x50
 80077f0:	e003      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800780a:	2300      	movs	r3, #0
 800780c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007810:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d056      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007824:	d033      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800782a:	d82c      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800782c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007830:	d02f      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007836:	d826      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800783c:	d02b      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800783e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007842:	d820      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007848:	d012      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800784a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800784e:	d81a      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d022      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007858:	d115      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785e:	3308      	adds	r3, #8
 8007860:	2101      	movs	r1, #1
 8007862:	4618      	mov	r0, r3
 8007864:	f002 f8e0 	bl	8009a28 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800786e:	e015      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007874:	3328      	adds	r3, #40	; 0x28
 8007876:	2101      	movs	r1, #1
 8007878:	4618      	mov	r0, r3
 800787a:	f002 f987 	bl	8009b8c <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007884:	e00a      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800788c:	e006      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800788e:	bf00      	nop
 8007890:	e004      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007892:	bf00      	nop
 8007894:	e002      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007896:	bf00      	nop
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800789a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b2:	4a02      	ldr	r2, [pc, #8]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6513      	str	r3, [r2, #80]	; 0x50
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80078d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d055      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f4:	d033      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078fa:	d82c      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d02f      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007906:	d826      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800790c:	d02b      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800790e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007912:	d820      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007918:	d012      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800791a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791e:	d81a      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d022      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007928:	d115      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	3308      	adds	r3, #8
 8007930:	2101      	movs	r1, #1
 8007932:	4618      	mov	r0, r3
 8007934:	f002 f878 	bl	8009a28 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800793e:	e015      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007944:	3328      	adds	r3, #40	; 0x28
 8007946:	2101      	movs	r1, #1
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f91f 	bl	8009b8c <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007954:	e00a      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800795c:	e006      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800795e:	bf00      	nop
 8007960:	e004      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007962:	bf00      	nop
 8007964:	e002      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007966:	bf00      	nop
 8007968:	e000      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800796a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10b      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007974:	4ba3      	ldr	r3, [pc, #652]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800797c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007984:	4a9f      	ldr	r2, [pc, #636]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007986:	430b      	orrs	r3, r1
 8007988:	6593      	str	r3, [r2, #88]	; 0x58
 800798a:	e003      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80079a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079a4:	2300      	movs	r3, #0
 80079a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d037      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079be:	d00e      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c4:	d816      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d018      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ce:	d111      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b8c      	ldr	r3, [pc, #560]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a8b      	ldr	r2, [pc, #556]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079dc:	e00f      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e2:	3308      	adds	r3, #8
 80079e4:	2101      	movs	r1, #1
 80079e6:	4618      	mov	r0, r3
 80079e8:	f002 f81e 	bl	8009a28 <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079f2:	e004      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80079fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a06:	4b7f      	ldr	r3, [pc, #508]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	4a7b      	ldr	r2, [pc, #492]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a16:	430b      	orrs	r3, r1
 8007a18:	6513      	str	r3, [r2, #80]	; 0x50
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d039      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d81c      	bhi.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a91 	.word	0x08007a91
 8007a58:	08007a65 	.word	0x08007a65
 8007a5c:	08007a73 	.word	0x08007a73
 8007a60:	08007a91 	.word	0x08007a91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a64:	4b67      	ldr	r3, [pc, #412]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a66      	ldr	r2, [pc, #408]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a70:	e00f      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	3308      	adds	r3, #8
 8007a78:	2102      	movs	r1, #2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 ffd4 	bl	8009a28 <RCCEx_PLL2_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a86:	e004      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a9a:	4b5a      	ldr	r3, [pc, #360]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9e:	f023 0103 	bic.w	r1, r3, #3
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa8:	4a56      	ldr	r2, [pc, #344]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007aae:	e003      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ace:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f000 809f 	beq.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ada:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a4a      	ldr	r2, [pc, #296]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ae6:	f7f8 ffc9 	bl	8000a7c <HAL_GetTick>
 8007aea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aee:	e00b      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af0:	f7f8 ffc4 	bl	8000a7c <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b64      	cmp	r3, #100	; 0x64
 8007afe:	d903      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b06:	e005      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b08:	4b3f      	ldr	r3, [pc, #252]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0ed      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d179      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b1c:	4b39      	ldr	r3, [pc, #228]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b28:	4053      	eors	r3, r2
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d015      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b32:	4b34      	ldr	r3, [pc, #208]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b3e:	4b31      	ldr	r3, [pc, #196]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	4a30      	ldr	r2, [pc, #192]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b4a:	4b2e      	ldr	r3, [pc, #184]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	4a2d      	ldr	r2, [pc, #180]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b56:	4a2b      	ldr	r2, [pc, #172]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6a:	d118      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7f8 ff86 	bl	8000a7c <HAL_GetTick>
 8007b70:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b74:	e00d      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b76:	f7f8 ff81 	bl	8000a7c <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d903      	bls.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007b90:	e005      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b92:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0eb      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d129      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb6:	d10e      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bb8:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bc8:	091a      	lsrs	r2, r3, #4
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6113      	str	r3, [r2, #16]
 8007bd4:	e005      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007be0:	6113      	str	r3, [r2, #16]
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf2:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf8:	e00e      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c04:	58024400 	.word	0x58024400
 8007c08:	58024800 	.word	0x58024800
 8007c0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f002 0301 	and.w	r3, r2, #1
 8007c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f000 8089 	beq.w	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c40:	2b28      	cmp	r3, #40	; 0x28
 8007c42:	d86b      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007d25 	.word	0x08007d25
 8007c50:	08007d1d 	.word	0x08007d1d
 8007c54:	08007d1d 	.word	0x08007d1d
 8007c58:	08007d1d 	.word	0x08007d1d
 8007c5c:	08007d1d 	.word	0x08007d1d
 8007c60:	08007d1d 	.word	0x08007d1d
 8007c64:	08007d1d 	.word	0x08007d1d
 8007c68:	08007d1d 	.word	0x08007d1d
 8007c6c:	08007cf1 	.word	0x08007cf1
 8007c70:	08007d1d 	.word	0x08007d1d
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d1d 	.word	0x08007d1d
 8007c7c:	08007d1d 	.word	0x08007d1d
 8007c80:	08007d1d 	.word	0x08007d1d
 8007c84:	08007d1d 	.word	0x08007d1d
 8007c88:	08007d1d 	.word	0x08007d1d
 8007c8c:	08007d07 	.word	0x08007d07
 8007c90:	08007d1d 	.word	0x08007d1d
 8007c94:	08007d1d 	.word	0x08007d1d
 8007c98:	08007d1d 	.word	0x08007d1d
 8007c9c:	08007d1d 	.word	0x08007d1d
 8007ca0:	08007d1d 	.word	0x08007d1d
 8007ca4:	08007d1d 	.word	0x08007d1d
 8007ca8:	08007d1d 	.word	0x08007d1d
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d1d 	.word	0x08007d1d
 8007cb4:	08007d1d 	.word	0x08007d1d
 8007cb8:	08007d1d 	.word	0x08007d1d
 8007cbc:	08007d1d 	.word	0x08007d1d
 8007cc0:	08007d1d 	.word	0x08007d1d
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007d1d 	.word	0x08007d1d
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d1d 	.word	0x08007d1d
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d1d 	.word	0x08007d1d
 8007cdc:	08007d1d 	.word	0x08007d1d
 8007ce0:	08007d1d 	.word	0x08007d1d
 8007ce4:	08007d1d 	.word	0x08007d1d
 8007ce8:	08007d1d 	.word	0x08007d1d
 8007cec:	08007d25 	.word	0x08007d25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fe95 	bl	8009a28 <RCCEx_PLL2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d04:	e00f      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	3328      	adds	r3, #40	; 0x28
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 ff3c 	bl	8009b8c <RCCEx_PLL3_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e004      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d22:	e000      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d2e:	4bbf      	ldr	r3, [pc, #764]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3c:	4abb      	ldr	r2, [pc, #748]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	6553      	str	r3, [r2, #84]	; 0x54
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f002 0302 	and.w	r3, r2, #2
 8007d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d041      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	d824      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007dab 	.word	0x08007dab
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fe43 	bl	8009a28 <RCCEx_PLL2_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007da8:	e00f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	3328      	adds	r3, #40	; 0x28
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 feea 	bl	8009b8c <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dd2:	4b96      	ldr	r3, [pc, #600]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f023 0107 	bic.w	r1, r3, #7
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de0:	4a92      	ldr	r2, [pc, #584]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6553      	str	r3, [r2, #84]	; 0x54
 8007de6:	e003      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f002 0304 	and.w	r3, r2, #4
 8007dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d044      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d825      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e71 	.word	0x08007e71
 8007e28:	08007e3d 	.word	0x08007e3d
 8007e2c:	08007e53 	.word	0x08007e53
 8007e30:	08007e71 	.word	0x08007e71
 8007e34:	08007e71 	.word	0x08007e71
 8007e38:	08007e71 	.word	0x08007e71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e40:	3308      	adds	r3, #8
 8007e42:	2101      	movs	r1, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fdef 	bl	8009a28 <RCCEx_PLL2_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e50:	e00f      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e56:	3328      	adds	r3, #40	; 0x28
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fe96 	bl	8009b8c <RCCEx_PLL3_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e66:	e004      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e7a:	4b6c      	ldr	r3, [pc, #432]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7e:	f023 0107 	bic.w	r1, r3, #7
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e8a:	4a68      	ldr	r2, [pc, #416]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8007e90:	e003      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f002 0320 	and.w	r3, r2, #32
 8007ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d055      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec6:	d033      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ecc:	d82c      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed2:	d02f      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed8:	d826      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ede:	d02b      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ee4:	d820      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eea:	d012      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef0:	d81a      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d022      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efa:	d115      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f00:	3308      	adds	r3, #8
 8007f02:	2100      	movs	r1, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fd8f 	bl	8009a28 <RCCEx_PLL2_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f10:	e015      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f16:	3328      	adds	r3, #40	; 0x28
 8007f18:	2102      	movs	r1, #2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fe36 	bl	8009b8c <RCCEx_PLL3_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f26:	e00a      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f2e:	e006      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f30:	bf00      	nop
 8007f32:	e004      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f34:	bf00      	nop
 8007f36:	e002      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10b      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f46:	4b39      	ldr	r3, [pc, #228]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	4a35      	ldr	r2, [pc, #212]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	6553      	str	r3, [r2, #84]	; 0x54
 8007f5c:	e003      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f76:	2300      	movs	r3, #0
 8007f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4313      	orrs	r3, r2
 8007f84:	d058      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f92:	d033      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f98:	d82c      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9e:	d02f      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa4:	d826      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007faa:	d02b      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb0:	d820      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb6:	d012      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbc:	d81a      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d022      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc6:	d115      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fcc:	3308      	adds	r3, #8
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fd29 	bl	8009a28 <RCCEx_PLL2_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fdc:	e015      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe2:	3328      	adds	r3, #40	; 0x28
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fdd0 	bl	8009b8c <RCCEx_PLL3_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ff2:	e00a      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ffa:	e006      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ffc:	bf00      	nop
 8007ffe:	e004      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008000:	bf00      	nop
 8008002:	e002      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008004:	bf00      	nop
 8008006:	e000      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10e      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008016:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008022:	4a02      	ldr	r2, [pc, #8]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6593      	str	r3, [r2, #88]	; 0x58
 8008028:	e006      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800802a:	bf00      	nop
 800802c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008048:	2300      	movs	r3, #0
 800804a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800804e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d055      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008060:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008064:	d033      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008066:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800806a:	d82c      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800806c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008070:	d02f      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008076:	d826      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008078:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800807c:	d02b      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800807e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008082:	d820      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008088:	d012      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800808a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800808e:	d81a      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d022      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008098:	d115      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809e:	3308      	adds	r3, #8
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fcc0 	bl	8009a28 <RCCEx_PLL2_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080ae:	e015      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b4:	3328      	adds	r3, #40	; 0x28
 80080b6:	2102      	movs	r1, #2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fd67 	bl	8009b8c <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080c4:	e00a      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080cc:	e006      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080ce:	bf00      	nop
 80080d0:	e004      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080d2:	bf00      	nop
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080d6:	bf00      	nop
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080e4:	4ba1      	ldr	r3, [pc, #644]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080f4:	4a9d      	ldr	r2, [pc, #628]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6593      	str	r3, [r2, #88]	; 0x58
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f002 0308 	and.w	r3, r2, #8
 8008110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800811a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d01e      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008130:	d10c      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008136:	3328      	adds	r3, #40	; 0x28
 8008138:	2102      	movs	r1, #2
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fd26 	bl	8009b8c <RCCEx_PLL3_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800814c:	4b87      	ldr	r3, [pc, #540]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815c:	4a83      	ldr	r2, [pc, #524]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815e:	430b      	orrs	r3, r1
 8008160:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f002 0310 	and.w	r3, r2, #16
 800816e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008172:	2300      	movs	r3, #0
 8008174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008178:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800817c:	460b      	mov	r3, r1
 800817e:	4313      	orrs	r3, r2
 8008180:	d01e      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800818a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818e:	d10c      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008194:	3328      	adds	r3, #40	; 0x28
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fcf7 	bl	8009b8c <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081aa:	4b70      	ldr	r3, [pc, #448]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081ba:	4a6c      	ldr	r2, [pc, #432]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081bc:	430b      	orrs	r3, r1
 80081be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80081cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80081da:	460b      	mov	r3, r1
 80081dc:	4313      	orrs	r3, r2
 80081de:	d03e      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ec:	d022      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f2:	d81b      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fc:	d00b      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80081fe:	e015      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008204:	3308      	adds	r3, #8
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fc0d 	bl	8009a28 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821a:	3328      	adds	r3, #40	; 0x28
 800821c:	2102      	movs	r1, #2
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fcb4 	bl	8009b8c <RCCEx_PLL3_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800822a:	e004      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800823e:	4b4b      	ldr	r3, [pc, #300]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008242:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800824e:	4a47      	ldr	r2, [pc, #284]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008250:	430b      	orrs	r3, r1
 8008252:	6593      	str	r3, [r2, #88]	; 0x58
 8008254:	e003      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800825a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800826a:	67bb      	str	r3, [r7, #120]	; 0x78
 800826c:	2300      	movs	r3, #0
 800826e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008270:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d03b      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008286:	d01f      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800828c:	d818      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800828e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008292:	d003      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008298:	d007      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800829a:	e011      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800829c:	4b33      	ldr	r3, [pc, #204]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a32      	ldr	r2, [pc, #200]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082a8:	e00f      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ae:	3328      	adds	r3, #40	; 0x28
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 fc6a 	bl	8009b8c <RCCEx_PLL3_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082be:	e004      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082c6:	e000      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082d2:	4b26      	ldr	r3, [pc, #152]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e2:	4a22      	ldr	r2, [pc, #136]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6553      	str	r3, [r2, #84]	; 0x54
 80082e8:	e003      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80082fe:	673b      	str	r3, [r7, #112]	; 0x70
 8008300:	2300      	movs	r3, #0
 8008302:	677b      	str	r3, [r7, #116]	; 0x74
 8008304:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008308:	460b      	mov	r3, r1
 800830a:	4313      	orrs	r3, r2
 800830c:	d034      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831c:	d007      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800831e:	e011      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	4a11      	ldr	r2, [pc, #68]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800832c:	e00e      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008332:	3308      	adds	r3, #8
 8008334:	2102      	movs	r1, #2
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fb76 	bl	8009a28 <RCCEx_PLL2_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800834a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10d      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008362:	4a02      	ldr	r2, [pc, #8]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008364:	430b      	orrs	r3, r1
 8008366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008368:	e006      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800836a:	bf00      	nop
 800836c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008384:	66bb      	str	r3, [r7, #104]	; 0x68
 8008386:	2300      	movs	r3, #0
 8008388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800838e:	460b      	mov	r3, r1
 8008390:	4313      	orrs	r3, r2
 8008392:	d00c      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008398:	3328      	adds	r3, #40	; 0x28
 800839a:	2102      	movs	r1, #2
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fbf5 	bl	8009b8c <RCCEx_PLL3_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80083ba:	663b      	str	r3, [r7, #96]	; 0x60
 80083bc:	2300      	movs	r3, #0
 80083be:	667b      	str	r3, [r7, #100]	; 0x64
 80083c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80083c4:	460b      	mov	r3, r1
 80083c6:	4313      	orrs	r3, r2
 80083c8:	d038      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d018      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80083d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083dc:	d811      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e2:	d014      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e8:	d80b      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d011      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f2:	d106      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f4:	4bc3      	ldr	r3, [pc, #780]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4ac2      	ldr	r2, [pc, #776]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008400:	e008      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008408:	e004      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800841c:	4bb9      	ldr	r3, [pc, #740]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800842c:	4ab5      	ldr	r2, [pc, #724]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800842e:	430b      	orrs	r3, r1
 8008430:	6553      	str	r3, [r2, #84]	; 0x54
 8008432:	e003      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008448:	65bb      	str	r3, [r7, #88]	; 0x58
 800844a:	2300      	movs	r3, #0
 800844c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800844e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008452:	460b      	mov	r3, r1
 8008454:	4313      	orrs	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008458:	4baa      	ldr	r3, [pc, #680]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008466:	4aa7      	ldr	r2, [pc, #668]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008468:	430b      	orrs	r3, r1
 800846a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008478:	653b      	str	r3, [r7, #80]	; 0x50
 800847a:	2300      	movs	r3, #0
 800847c:	657b      	str	r3, [r7, #84]	; 0x54
 800847e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d00a      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008488:	4b9e      	ldr	r3, [pc, #632]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008494:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008498:	4a9a      	ldr	r2, [pc, #616]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800849a:	430b      	orrs	r3, r1
 800849c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80084aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ac:	2300      	movs	r3, #0
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80084b4:	460b      	mov	r3, r1
 80084b6:	4313      	orrs	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ba:	4b92      	ldr	r3, [pc, #584]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c8:	4a8e      	ldr	r2, [pc, #568]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ca:	430b      	orrs	r3, r1
 80084cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80084da:	643b      	str	r3, [r7, #64]	; 0x40
 80084dc:	2300      	movs	r3, #0
 80084de:	647b      	str	r3, [r7, #68]	; 0x44
 80084e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80084e4:	460b      	mov	r3, r1
 80084e6:	4313      	orrs	r3, r2
 80084e8:	d00e      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084ea:	4b86      	ldr	r3, [pc, #536]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	4a85      	ldr	r2, [pc, #532]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084f4:	6113      	str	r3, [r2, #16]
 80084f6:	4b83      	ldr	r3, [pc, #524]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f8:	6919      	ldr	r1, [r3, #16]
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008502:	4a80      	ldr	r2, [pc, #512]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008504:	430b      	orrs	r3, r1
 8008506:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008524:	4b77      	ldr	r3, [pc, #476]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008528:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	4a74      	ldr	r2, [pc, #464]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008534:	430b      	orrs	r3, r1
 8008536:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
 8008546:	2300      	movs	r3, #0
 8008548:	637b      	str	r3, [r7, #52]	; 0x34
 800854a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	d00a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008554:	4b6b      	ldr	r3, [pc, #428]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008558:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008564:	4a67      	ldr	r2, [pc, #412]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008566:	430b      	orrs	r3, r1
 8008568:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	2100      	movs	r1, #0
 8008574:	62b9      	str	r1, [r7, #40]	; 0x28
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008580:	460b      	mov	r3, r1
 8008582:	4313      	orrs	r3, r2
 8008584:	d011      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858a:	3308      	adds	r3, #8
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f001 fa4a 	bl	8009a28 <RCCEx_PLL2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800859a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	2100      	movs	r1, #0
 80085b4:	6239      	str	r1, [r7, #32]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
 80085bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085c0:	460b      	mov	r3, r1
 80085c2:	4313      	orrs	r3, r2
 80085c4:	d011      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	3308      	adds	r3, #8
 80085cc:	2101      	movs	r1, #1
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fa2a 	bl	8009a28 <RCCEx_PLL2_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	2100      	movs	r1, #0
 80085f4:	61b9      	str	r1, [r7, #24]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d011      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860a:	3308      	adds	r3, #8
 800860c:	2102      	movs	r1, #2
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fa0a 	bl	8009a28 <RCCEx_PLL2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	2100      	movs	r1, #0
 8008634:	6139      	str	r1, [r7, #16]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008640:	460b      	mov	r3, r1
 8008642:	4313      	orrs	r3, r2
 8008644:	d011      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	3328      	adds	r3, #40	; 0x28
 800864c:	2100      	movs	r1, #0
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fa9c 	bl	8009b8c <RCCEx_PLL3_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800865a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	2100      	movs	r1, #0
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	f003 0310 	and.w	r3, r3, #16
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d011      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868a:	3328      	adds	r3, #40	; 0x28
 800868c:	2101      	movs	r1, #1
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fa7c 	bl	8009b8c <RCCEx_PLL3_Config>
 8008694:	4603      	mov	r3, r0
 8008696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800869a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	2100      	movs	r1, #0
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	607b      	str	r3, [r7, #4]
 80086bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086c0:	460b      	mov	r3, r1
 80086c2:	4313      	orrs	r3, r2
 80086c4:	d011      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ca:	3328      	adds	r3, #40	; 0x28
 80086cc:	2102      	movs	r1, #2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fa5c 	bl	8009b8c <RCCEx_PLL3_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80086ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e000      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80086fe:	46bd      	mov	sp, r7
 8008700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008704:	58024400 	.word	0x58024400

08008708 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b090      	sub	sp, #64	; 0x40
 800870c:	af00      	add	r7, sp, #0
 800870e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008716:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800871a:	430b      	orrs	r3, r1
 800871c:	f040 8094 	bne.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008720:	4b9e      	ldr	r3, [pc, #632]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2b04      	cmp	r3, #4
 800872e:	f200 8087 	bhi.w	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	0800874d 	.word	0x0800874d
 800873c:	08008775 	.word	0x08008775
 8008740:	0800879d 	.word	0x0800879d
 8008744:	08008839 	.word	0x08008839
 8008748:	080087c5 	.word	0x080087c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800874c:	4b93      	ldr	r3, [pc, #588]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008758:	d108      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800875a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f001 f810 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008768:	f000 bd45 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008770:	f000 bd41 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008774:	4b89      	ldr	r3, [pc, #548]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008780:	d108      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008782:	f107 0318 	add.w	r3, r7, #24
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fd54 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008790:	f000 bd31 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	f000 bd2d 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800879c:	4b7f      	ldr	r3, [pc, #508]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a8:	d108      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087aa:	f107 030c 	add.w	r3, r7, #12
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fe94 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b8:	f000 bd1d 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c0:	f000 bd19 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087c4:	4b75      	ldr	r3, [pc, #468]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ce:	4b73      	ldr	r3, [pc, #460]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e0:	4b6e      	ldr	r3, [pc, #440]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a6d      	ldr	r2, [pc, #436]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f2:	e01f      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087f4:	4b69      	ldr	r3, [pc, #420]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008800:	d106      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008808:	d102      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800880a:	4b66      	ldr	r3, [pc, #408]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800880e:	e011      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008810:	4b62      	ldr	r3, [pc, #392]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881c:	d106      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008824:	d102      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008826:	4b60      	ldr	r3, [pc, #384]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800882a:	e003      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008830:	f000 bce1 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008834:	f000 bcdf 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008838:	4b5c      	ldr	r3, [pc, #368]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800883c:	f000 bcdb 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	f000 bcd7 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008850:	430b      	orrs	r3, r1
 8008852:	f040 80ad 	bne.w	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008856:	4b51      	ldr	r3, [pc, #324]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800885e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008866:	d056      	beq.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	f200 8090 	bhi.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2bc0      	cmp	r3, #192	; 0xc0
 8008876:	f000 8088 	beq.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	2bc0      	cmp	r3, #192	; 0xc0
 800887e:	f200 8088 	bhi.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d032      	beq.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	f200 8081 	bhi.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d014      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800889c:	e079      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800889e:	4b3f      	ldr	r3, [pc, #252]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088aa:	d108      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 ff67 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ba:	f000 bc9c 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c2:	f000 bc98 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c6:	4b35      	ldr	r3, [pc, #212]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d2:	d108      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d4:	f107 0318 	add.w	r3, r7, #24
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fcab 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e2:	f000 bc88 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ea:	f000 bc84 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088ee:	4b2b      	ldr	r3, [pc, #172]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088fa:	d108      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fc:	f107 030c 	add.w	r3, r7, #12
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fdeb 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800890a:	f000 bc74 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008912:	f000 bc70 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008916:	4b21      	ldr	r3, [pc, #132]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800891e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008920:	4b1e      	ldr	r3, [pc, #120]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d10c      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008932:	4b1a      	ldr	r3, [pc, #104]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	08db      	lsrs	r3, r3, #3
 8008938:	f003 0303 	and.w	r3, r3, #3
 800893c:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008944:	e01f      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008952:	d106      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800895a:	d102      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800895c:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008960:	e011      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800896e:	d106      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008976:	d102      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008978:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008982:	f000 bc38 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008986:	f000 bc36 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800898e:	f000 bc32 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008996:	f000 bc2e 	b.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800899a:	bf00      	nop
 800899c:	58024400 	.word	0x58024400
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	007a1200 	.word	0x007a1200
 80089ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089b8:	430b      	orrs	r3, r1
 80089ba:	f040 809c 	bne.w	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089be:	4b9e      	ldr	r3, [pc, #632]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089ce:	d054      	beq.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089d6:	f200 808b 	bhi.w	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089e0:	f000 8083 	beq.w	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089ea:	f200 8081 	bhi.w	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f4:	d02f      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089fc:	d878      	bhi.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a0a:	d012      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a0c:	e070      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a0e:	4b8a      	ldr	r3, [pc, #552]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 feaf 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2a:	e3e4      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a30:	e3e1      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a32:	4b81      	ldr	r3, [pc, #516]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3e:	d107      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a40:	f107 0318 	add.w	r3, r7, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fbf5 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	e3d2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a54:	e3cf      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a56:	4b78      	ldr	r3, [pc, #480]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a62:	d107      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fd37 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a72:	e3c0      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	e3bd      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a7a:	4b6f      	ldr	r3, [pc, #444]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a84:	4b6c      	ldr	r3, [pc, #432]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d10c      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a96:	4b68      	ldr	r3, [pc, #416]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	4a66      	ldr	r2, [pc, #408]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa8:	e01e      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aaa:	4b63      	ldr	r3, [pc, #396]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac0:	4b5f      	ldr	r3, [pc, #380]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac4:	e010      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ac6:	4b5c      	ldr	r3, [pc, #368]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ada:	d102      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008adc:	4b59      	ldr	r3, [pc, #356]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae0:	e002      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ae6:	e386      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ae8:	e385      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aea:	4b57      	ldr	r3, [pc, #348]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aee:	e382      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af4:	e37f      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008afe:	430b      	orrs	r3, r1
 8008b00:	f040 80a7 	bne.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b04:	4b4c      	ldr	r3, [pc, #304]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b08:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b14:	d055      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b1c:	f200 8096 	bhi.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b26:	f000 8084 	beq.w	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b30:	f200 808c 	bhi.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3a:	d030      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b42:	f200 8083 	bhi.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b52:	d012      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b54:	e07a      	b.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b56:	4b38      	ldr	r3, [pc, #224]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b62:	d107      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fe0b 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b72:	e340      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	e33d      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b86:	d107      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b88:	f107 0318 	add.w	r3, r7, #24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fb51 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b96:	e32e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b9c:	e32b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008baa:	d107      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fc93 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bba:	e31c      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc0:	e319      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bc2:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d10c      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	08db      	lsrs	r3, r3, #3
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	4a14      	ldr	r2, [pc, #80]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf0:	e01e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c06:	d102      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0c:	e010      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c1a:	d106      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c22:	d102      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c28:	e002      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c2e:	e2e2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c30:	e2e1      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c36:	e2de      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	03d09000 	.word	0x03d09000
 8008c40:	003d0900 	.word	0x003d0900
 8008c44:	007a1200 	.word	0x007a1200
 8008c48:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c50:	e2d1      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c56:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	f040 809c 	bne.w	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c60:	4b93      	ldr	r3, [pc, #588]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c70:	d054      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c78:	f200 808b 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c82:	f000 8083 	beq.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c8c:	f200 8081 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c96:	d02f      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9e:	d878      	bhi.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cac:	d012      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008cae:	e070      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cb0:	4b7f      	ldr	r3, [pc, #508]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cbc:	d107      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fd5e 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ccc:	e293      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd2:	e290      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd4:	4b76      	ldr	r3, [pc, #472]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce2:	f107 0318 	add.w	r3, r7, #24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 faa4 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf0:	e281      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf6:	e27e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cf8:	4b6d      	ldr	r3, [pc, #436]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d04:	d107      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fbe6 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d14:	e26f      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d1a:	e26c      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d1c:	4b64      	ldr	r3, [pc, #400]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d26:	4b62      	ldr	r3, [pc, #392]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d38:	4b5d      	ldr	r3, [pc, #372]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	4a5c      	ldr	r2, [pc, #368]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4a:	e01e      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d4c:	4b58      	ldr	r3, [pc, #352]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d58:	d106      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d60:	d102      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d62:	4b55      	ldr	r3, [pc, #340]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d66:	e010      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d68:	4b51      	ldr	r3, [pc, #324]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d74:	d106      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7c:	d102      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d7e:	4b4f      	ldr	r3, [pc, #316]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d82:	e002      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d88:	e235      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d8a:	e234      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d8c:	4b4c      	ldr	r3, [pc, #304]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d90:	e231      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d96:	e22e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008da0:	430b      	orrs	r3, r1
 8008da2:	f040 808f 	bne.w	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008da6:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008daa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008db6:	d06b      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dbe:	d874      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dc6:	d056      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dce:	d86c      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dd6:	d03b      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dde:	d864      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de6:	d021      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dee:	d85c      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfc:	d004      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008dfe:	e054      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e00:	f7fe fa0a 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8008e04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e06:	e1f6      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e08:	4b29      	ldr	r3, [pc, #164]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e14:	d107      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e16:	f107 0318 	add.w	r3, r7, #24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fa0a 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e24:	e1e7      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2a:	e1e4      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fb4c 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e48:	e1d5      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4e:	e1d2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e50:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d109      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e5c:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6e:	e1c2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e1bf      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e76:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d102      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e88:	e1b5      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8e:	e1b2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008e9e:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea2:	e1a8      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea8:	e1a5      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eae:	e1a2      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
 8008ebc:	007a1200 	.word	0x007a1200
 8008ec0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	d173      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ed0:	4b9c      	ldr	r3, [pc, #624]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ed8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee0:	d02f      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee8:	d863      	bhi.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef6:	d012      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008ef8:	e05b      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008efa:	4b92      	ldr	r3, [pc, #584]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f08:	f107 0318 	add.w	r3, r7, #24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f991 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f16:	e16e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1c:	e16b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1e:	4b89      	ldr	r3, [pc, #548]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2c:	f107 030c 	add.w	r3, r7, #12
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fad3 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3a:	e15c      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f40:	e159      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f42:	4b80      	ldr	r3, [pc, #512]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f4c:	4b7d      	ldr	r3, [pc, #500]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f5e:	4b79      	ldr	r3, [pc, #484]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a77      	ldr	r2, [pc, #476]	; (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f70:	e01e      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f72:	4b74      	ldr	r3, [pc, #464]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7e:	d106      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f86:	d102      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f88:	4b70      	ldr	r3, [pc, #448]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8c:	e010      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8e:	4b6d      	ldr	r3, [pc, #436]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa2:	d102      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fa4:	4b6a      	ldr	r3, [pc, #424]	; (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e002      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fae:	e122      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb0:	e121      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb6:	e11e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fbc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	d133      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008fc4:	4b5f      	ldr	r3, [pc, #380]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fda:	d012      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008fdc:	e023      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fde:	4b59      	ldr	r3, [pc, #356]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fea:	d107      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fbc7 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ffa:	e0fc      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009000:	e0f9      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009002:	4b50      	ldr	r3, [pc, #320]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800900a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800900e:	d107      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009010:	f107 0318 	add.w	r3, r7, #24
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f90d 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800901e:	e0ea      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009024:	e0e7      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902a:	e0e4      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800902c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009030:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009034:	430b      	orrs	r3, r1
 8009036:	f040 808d 	bne.w	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800903a:	4b42      	ldr	r3, [pc, #264]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009042:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800904a:	d06b      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009052:	d874      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905a:	d056      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009062:	d86c      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800906a:	d03b      	beq.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009072:	d864      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907a:	d021      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009082:	d85c      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009090:	d004      	beq.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009092:	e054      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009094:	f000 f8b8 	bl	8009208 <HAL_RCCEx_GetD3PCLK1Freq>
 8009098:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800909a:	e0ac      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800909c:	4b29      	ldr	r3, [pc, #164]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a8:	d107      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090aa:	f107 0318 	add.w	r3, r7, #24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 f8c0 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b8:	e09d      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090be:	e09a      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c0:	4b20      	ldr	r3, [pc, #128]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d107      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fa02 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090dc:	e08b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090e2:	e088      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090e4:	4b17      	ldr	r3, [pc, #92]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f0:	4b14      	ldr	r3, [pc, #80]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a13      	ldr	r2, [pc, #76]	; (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009102:	e078      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009108:	e075      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800910a:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009116:	d102      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911c:	e06b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009122:	e068      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009124:	4b07      	ldr	r3, [pc, #28]	; (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009130:	d102      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009136:	e05e      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913c:	e05b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009142:	e058      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009144:	58024400 	.word	0x58024400
 8009148:	03d09000 	.word	0x03d09000
 800914c:	003d0900 	.word	0x003d0900
 8009150:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009158:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800915c:	430b      	orrs	r3, r1
 800915e:	d148      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009160:	4b27      	ldr	r3, [pc, #156]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009168:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009170:	d02a      	beq.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009178:	d838      	bhi.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009186:	d00d      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009188:	e030      	b.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009196:	d102      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009198:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919c:	e02b      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a2:	e028      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a4:	4b16      	ldr	r3, [pc, #88]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b0:	d107      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fae4 	bl	8009784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c0:	e019      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c6:	e016      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c8:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d4:	d107      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d6:	f107 0318 	add.w	r3, r7, #24
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f82a 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e4:	e007      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ea:	e004      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f0:	e001      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3740      	adds	r7, #64	; 0x40
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	58024400 	.word	0x58024400
 8009204:	007a1200 	.word	0x007a1200

08009208 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800920c:	f7fd ffd4 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 8009210:	4602      	mov	r2, r0
 8009212:	4b06      	ldr	r3, [pc, #24]	; (800922c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	091b      	lsrs	r3, r3, #4
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	4904      	ldr	r1, [pc, #16]	; (8009230 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800921e:	5ccb      	ldrb	r3, [r1, r3]
 8009220:	f003 031f 	and.w	r3, r3, #31
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009228:	4618      	mov	r0, r3
 800922a:	bd80      	pop	{r7, pc}
 800922c:	58024400 	.word	0x58024400
 8009230:	0800dafc 	.word	0x0800dafc

08009234 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009234:	b480      	push	{r7}
 8009236:	b089      	sub	sp, #36	; 0x24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800923c:	4ba1      	ldr	r3, [pc, #644]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009246:	4b9f      	ldr	r3, [pc, #636]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	0b1b      	lsrs	r3, r3, #12
 800924c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009250:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009252:	4b9c      	ldr	r3, [pc, #624]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	091b      	lsrs	r3, r3, #4
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800925e:	4b99      	ldr	r3, [pc, #612]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	08db      	lsrs	r3, r3, #3
 8009264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8111 	beq.w	80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b02      	cmp	r3, #2
 8009286:	f000 8083 	beq.w	8009390 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b02      	cmp	r3, #2
 800928e:	f200 80a1 	bhi.w	80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d056      	beq.n	800934c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800929e:	e099      	b.n	80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a0:	4b88      	ldr	r3, [pc, #544]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d02d      	beq.n	8009308 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ac:	4b85      	ldr	r3, [pc, #532]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	08db      	lsrs	r3, r3, #3
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	4a84      	ldr	r2, [pc, #528]	; (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
 80092bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d6:	4b7b      	ldr	r3, [pc, #492]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009306:	e087      	b.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	4b6a      	ldr	r3, [pc, #424]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932a:	ed97 6a03 	vldr	s12, [r7, #12]
 800932e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934a:	e065      	b.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800935a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935e:	4b59      	ldr	r3, [pc, #356]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009372:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800938e:	e043      	b.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800939e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a2:	4b48      	ldr	r3, [pc, #288]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d2:	e021      	b.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e6:	4b37      	ldr	r3, [pc, #220]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009416:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009418:	4b2a      	ldr	r3, [pc, #168]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	0a5b      	lsrs	r3, r3, #9
 800941e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800942e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009432:	edd7 6a07 	vldr	s13, [r7, #28]
 8009436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800943a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943e:	ee17 2a90 	vmov	r2, s15
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009446:	4b1f      	ldr	r3, [pc, #124]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009450:	ee07 3a90 	vmov	s15, r3
 8009454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800945c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009460:	edd7 6a07 	vldr	s13, [r7, #28]
 8009464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946c:	ee17 2a90 	vmov	r2, s15
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009474:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	0e1b      	lsrs	r3, r3, #24
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800948a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949a:	ee17 2a90 	vmov	r2, s15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094a2:	e008      	b.n	80094b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	609a      	str	r2, [r3, #8]
}
 80094b6:	bf00      	nop
 80094b8:	3724      	adds	r7, #36	; 0x24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	46000000 	.word	0x46000000
 80094d0:	4c742400 	.word	0x4c742400
 80094d4:	4a742400 	.word	0x4a742400
 80094d8:	4af42400 	.word	0x4af42400

080094dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094dc:	b480      	push	{r7}
 80094de:	b089      	sub	sp, #36	; 0x24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e4:	4ba1      	ldr	r3, [pc, #644]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e8:	f003 0303 	and.w	r3, r3, #3
 80094ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094ee:	4b9f      	ldr	r3, [pc, #636]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	0d1b      	lsrs	r3, r3, #20
 80094f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094fa:	4b9c      	ldr	r3, [pc, #624]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009506:	4b99      	ldr	r3, [pc, #612]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950a:	08db      	lsrs	r3, r3, #3
 800950c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	fb02 f303 	mul.w	r3, r2, r3
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8111 	beq.w	800974c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b02      	cmp	r3, #2
 800952e:	f000 8083 	beq.w	8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f200 80a1 	bhi.w	800967c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d056      	beq.n	80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009546:	e099      	b.n	800967c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009548:	4b88      	ldr	r3, [pc, #544]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02d      	beq.n	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009554:	4b85      	ldr	r3, [pc, #532]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	08db      	lsrs	r3, r3, #3
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	4a84      	ldr	r2, [pc, #528]	; (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009560:	fa22 f303 	lsr.w	r3, r2, r3
 8009564:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957e:	4b7b      	ldr	r3, [pc, #492]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009592:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095ae:	e087      	b.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c2:	4b6a      	ldr	r3, [pc, #424]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ca:	ee07 3a90 	vmov	s15, r3
 80095ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095f2:	e065      	b.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009606:	4b59      	ldr	r3, [pc, #356]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009616:	ed97 6a03 	vldr	s12, [r7, #12]
 800961a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800961e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800962a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800962e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009636:	e043      	b.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009642:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964a:	4b48      	ldr	r3, [pc, #288]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965a:	ed97 6a03 	vldr	s12, [r7, #12]
 800965e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800966e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800967a:	e021      	b.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009686:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800968a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968e:	4b37      	ldr	r3, [pc, #220]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969e:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096c0:	4b2a      	ldr	r3, [pc, #168]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	0a5b      	lsrs	r3, r3, #9
 80096c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096da:	edd7 6a07 	vldr	s13, [r7, #28]
 80096de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e6:	ee17 2a90 	vmov	r2, s15
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096ee:	4b1f      	ldr	r3, [pc, #124]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	0c1b      	lsrs	r3, r3, #16
 80096f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009708:	edd7 6a07 	vldr	s13, [r7, #28]
 800970c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009714:	ee17 2a90 	vmov	r2, s15
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800971c:	4b13      	ldr	r3, [pc, #76]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	0e1b      	lsrs	r3, r3, #24
 8009722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009736:	edd7 6a07 	vldr	s13, [r7, #28]
 800973a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009742:	ee17 2a90 	vmov	r2, s15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800974a:	e008      	b.n	800975e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]
}
 800975e:	bf00      	nop
 8009760:	3724      	adds	r7, #36	; 0x24
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	58024400 	.word	0x58024400
 8009770:	03d09000 	.word	0x03d09000
 8009774:	46000000 	.word	0x46000000
 8009778:	4c742400 	.word	0x4c742400
 800977c:	4a742400 	.word	0x4a742400
 8009780:	4af42400 	.word	0x4af42400

08009784 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009784:	b480      	push	{r7}
 8009786:	b089      	sub	sp, #36	; 0x24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800978c:	4ba0      	ldr	r3, [pc, #640]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	f003 0303 	and.w	r3, r3, #3
 8009794:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009796:	4b9e      	ldr	r3, [pc, #632]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	091b      	lsrs	r3, r3, #4
 800979c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097a2:	4b9b      	ldr	r3, [pc, #620]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097ac:	4b98      	ldr	r3, [pc, #608]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	08db      	lsrs	r3, r3, #3
 80097b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	fb02 f303 	mul.w	r3, r2, r3
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 8111 	beq.w	80099f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	f000 8083 	beq.w	80098de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	f200 80a1 	bhi.w	8009922 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d056      	beq.n	800989a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097ec:	e099      	b.n	8009922 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ee:	4b88      	ldr	r3, [pc, #544]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d02d      	beq.n	8009856 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097fa:	4b85      	ldr	r3, [pc, #532]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	08db      	lsrs	r3, r3, #3
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	4a83      	ldr	r2, [pc, #524]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009806:	fa22 f303 	lsr.w	r3, r2, r3
 800980a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009824:	4b7a      	ldr	r3, [pc, #488]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982c:	ee07 3a90 	vmov	s15, r3
 8009830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009834:	ed97 6a03 	vldr	s12, [r7, #12]
 8009838:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800983c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009850:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009854:	e087      	b.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009860:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009868:	4b69      	ldr	r3, [pc, #420]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009878:	ed97 6a03 	vldr	s12, [r7, #12]
 800987c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009898:	e065      	b.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ac:	4b58      	ldr	r3, [pc, #352]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b4:	ee07 3a90 	vmov	s15, r3
 80098b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098dc:	e043      	b.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	ee07 3a90 	vmov	s15, r3
 80098e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f0:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f8:	ee07 3a90 	vmov	s15, r3
 80098fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009900:	ed97 6a03 	vldr	s12, [r7, #12]
 8009904:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009920:	e021      	b.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009934:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009944:	ed97 6a03 	vldr	s12, [r7, #12]
 8009948:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800994c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009964:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009966:	4b2a      	ldr	r3, [pc, #168]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996a:	0a5b      	lsrs	r3, r3, #9
 800996c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800997c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009980:	edd7 6a07 	vldr	s13, [r7, #28]
 8009984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800998c:	ee17 2a90 	vmov	r2, s15
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009994:	4b1e      	ldr	r3, [pc, #120]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	0c1b      	lsrs	r3, r3, #16
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ba:	ee17 2a90 	vmov	r2, s15
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099c2:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c6:	0e1b      	lsrs	r3, r3, #24
 80099c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e8:	ee17 2a90 	vmov	r2, s15
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099f0:	e008      	b.n	8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
}
 8009a04:	bf00      	nop
 8009a06:	3724      	adds	r7, #36	; 0x24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	58024400 	.word	0x58024400
 8009a14:	03d09000 	.word	0x03d09000
 8009a18:	46000000 	.word	0x46000000
 8009a1c:	4c742400 	.word	0x4c742400
 8009a20:	4a742400 	.word	0x4a742400
 8009a24:	4af42400 	.word	0x4af42400

08009a28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a36:	4b53      	ldr	r3, [pc, #332]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d101      	bne.n	8009a46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e099      	b.n	8009b7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a46:	4b4f      	ldr	r3, [pc, #316]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a4e      	ldr	r2, [pc, #312]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a52:	f7f7 f813 	bl	8000a7c <HAL_GetTick>
 8009a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a58:	e008      	b.n	8009a6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a5a:	f7f7 f80f 	bl	8000a7c <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d901      	bls.n	8009a6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e086      	b.n	8009b7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a6c:	4b45      	ldr	r3, [pc, #276]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f0      	bne.n	8009a5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a78:	4b42      	ldr	r3, [pc, #264]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	031b      	lsls	r3, r3, #12
 8009a86:	493f      	ldr	r1, [pc, #252]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	025b      	lsls	r3, r3, #9
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	041b      	lsls	r3, r3, #16
 8009aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	061b      	lsls	r3, r3, #24
 8009ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009abc:	4931      	ldr	r1, [pc, #196]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ac2:	4b30      	ldr	r3, [pc, #192]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	492d      	ldr	r1, [pc, #180]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ad4:	4b2b      	ldr	r3, [pc, #172]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	f023 0220 	bic.w	r2, r3, #32
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	4928      	ldr	r1, [pc, #160]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ae6:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	4a26      	ldr	r2, [pc, #152]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009aec:	f023 0310 	bic.w	r3, r3, #16
 8009af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af6:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <RCCEx_PLL2_Config+0x160>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	69d2      	ldr	r2, [r2, #28]
 8009afe:	00d2      	lsls	r2, r2, #3
 8009b00:	4920      	ldr	r1, [pc, #128]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b06:	4b1f      	ldr	r3, [pc, #124]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0a:	4a1e      	ldr	r2, [pc, #120]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b0c:	f043 0310 	orr.w	r3, r3, #16
 8009b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d106      	bne.n	8009b26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b18:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	4a19      	ldr	r2, [pc, #100]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b24:	e00f      	b.n	8009b46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d106      	bne.n	8009b3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b2c:	4b15      	ldr	r3, [pc, #84]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	4a14      	ldr	r2, [pc, #80]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b38:	e005      	b.n	8009b46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b3a:	4b12      	ldr	r3, [pc, #72]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	4a11      	ldr	r2, [pc, #68]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b46:	4b0f      	ldr	r3, [pc, #60]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a0e      	ldr	r2, [pc, #56]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b52:	f7f6 ff93 	bl	8000a7c <HAL_GetTick>
 8009b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b58:	e008      	b.n	8009b6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b5a:	f7f6 ff8f 	bl	8000a7c <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d901      	bls.n	8009b6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e006      	b.n	8009b7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b6c:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0f0      	beq.n	8009b5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	58024400 	.word	0x58024400
 8009b88:	ffff0007 	.word	0xffff0007

08009b8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b9a:	4b53      	ldr	r3, [pc, #332]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d101      	bne.n	8009baa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e099      	b.n	8009cde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009baa:	4b4f      	ldr	r3, [pc, #316]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a4e      	ldr	r2, [pc, #312]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb6:	f7f6 ff61 	bl	8000a7c <HAL_GetTick>
 8009bba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bbc:	e008      	b.n	8009bd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bbe:	f7f6 ff5d 	bl	8000a7c <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e086      	b.n	8009cde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bd0:	4b45      	ldr	r3, [pc, #276]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f0      	bne.n	8009bbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bdc:	4b42      	ldr	r3, [pc, #264]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	051b      	lsls	r3, r3, #20
 8009bea:	493f      	ldr	r1, [pc, #252]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	628b      	str	r3, [r1, #40]	; 0x28
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	025b      	lsls	r3, r3, #9
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	041b      	lsls	r3, r3, #16
 8009c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	061b      	lsls	r3, r3, #24
 8009c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c20:	4931      	ldr	r1, [pc, #196]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c26:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	492d      	ldr	r1, [pc, #180]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c38:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	4928      	ldr	r1, [pc, #160]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c4a:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	4a26      	ldr	r2, [pc, #152]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c56:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <RCCEx_PLL3_Config+0x160>)
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	69d2      	ldr	r2, [r2, #28]
 8009c62:	00d2      	lsls	r2, r2, #3
 8009c64:	4920      	ldr	r1, [pc, #128]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d106      	bne.n	8009c8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a19      	ldr	r2, [pc, #100]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c88:	e00f      	b.n	8009caa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d106      	bne.n	8009c9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c90:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a14      	ldr	r2, [pc, #80]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c9c:	e005      	b.n	8009caa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c9e:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	4a11      	ldr	r2, [pc, #68]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a0e      	ldr	r2, [pc, #56]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb6:	f7f6 fee1 	bl	8000a7c <HAL_GetTick>
 8009cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cbc:	e008      	b.n	8009cd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cbe:	f7f6 fedd 	bl	8000a7c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e006      	b.n	8009cde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0f0      	beq.n	8009cbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	58024400 	.word	0x58024400
 8009cec:	ffff0007 	.word	0xffff0007

08009cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e049      	b.n	8009d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f003 f834 	bl	800cd84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4610      	mov	r0, r2
 8009d30:	f000 f8a6 	bl	8009e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d001      	beq.n	8009db8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e04c      	b.n	8009e52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <HAL_TIM_Base_Start+0xc0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d022      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd2:	d01d      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a22      	ldr	r2, [pc, #136]	; (8009e64 <HAL_TIM_Base_Start+0xc4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d018      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a21      	ldr	r2, [pc, #132]	; (8009e68 <HAL_TIM_Base_Start+0xc8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d013      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1f      	ldr	r2, [pc, #124]	; (8009e6c <HAL_TIM_Base_Start+0xcc>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00e      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1e      	ldr	r2, [pc, #120]	; (8009e70 <HAL_TIM_Base_Start+0xd0>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d009      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1c      	ldr	r2, [pc, #112]	; (8009e74 <HAL_TIM_Base_Start+0xd4>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d004      	beq.n	8009e10 <HAL_TIM_Base_Start+0x70>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1b      	ldr	r2, [pc, #108]	; (8009e78 <HAL_TIM_Base_Start+0xd8>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d115      	bne.n	8009e3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <HAL_TIM_Base_Start+0xdc>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b06      	cmp	r3, #6
 8009e20:	d015      	beq.n	8009e4e <HAL_TIM_Base_Start+0xae>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e28:	d011      	beq.n	8009e4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0201 	orr.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3a:	e008      	b.n	8009e4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0201 	orr.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	e000      	b.n	8009e50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40001800 	.word	0x40001800
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	00010007 	.word	0x00010007

08009e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a40      	ldr	r2, [pc, #256]	; (8009f94 <TIM_Base_SetConfig+0x114>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <TIM_Base_SetConfig+0x40>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9e:	d00f      	beq.n	8009ec0 <TIM_Base_SetConfig+0x40>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a3d      	ldr	r2, [pc, #244]	; (8009f98 <TIM_Base_SetConfig+0x118>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00b      	beq.n	8009ec0 <TIM_Base_SetConfig+0x40>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a3c      	ldr	r2, [pc, #240]	; (8009f9c <TIM_Base_SetConfig+0x11c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d007      	beq.n	8009ec0 <TIM_Base_SetConfig+0x40>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a3b      	ldr	r2, [pc, #236]	; (8009fa0 <TIM_Base_SetConfig+0x120>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_Base_SetConfig+0x40>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a3a      	ldr	r2, [pc, #232]	; (8009fa4 <TIM_Base_SetConfig+0x124>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d108      	bne.n	8009ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a2f      	ldr	r2, [pc, #188]	; (8009f94 <TIM_Base_SetConfig+0x114>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d01f      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee0:	d01b      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a2c      	ldr	r2, [pc, #176]	; (8009f98 <TIM_Base_SetConfig+0x118>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d017      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a2b      	ldr	r2, [pc, #172]	; (8009f9c <TIM_Base_SetConfig+0x11c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d013      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <TIM_Base_SetConfig+0x120>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00f      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a29      	ldr	r2, [pc, #164]	; (8009fa4 <TIM_Base_SetConfig+0x124>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d00b      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a28      	ldr	r2, [pc, #160]	; (8009fa8 <TIM_Base_SetConfig+0x128>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d007      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a27      	ldr	r2, [pc, #156]	; (8009fac <TIM_Base_SetConfig+0x12c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d003      	beq.n	8009f1a <TIM_Base_SetConfig+0x9a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a26      	ldr	r2, [pc, #152]	; (8009fb0 <TIM_Base_SetConfig+0x130>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d108      	bne.n	8009f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <TIM_Base_SetConfig+0x114>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00f      	beq.n	8009f78 <TIM_Base_SetConfig+0xf8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <TIM_Base_SetConfig+0x124>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00b      	beq.n	8009f78 <TIM_Base_SetConfig+0xf8>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a11      	ldr	r2, [pc, #68]	; (8009fa8 <TIM_Base_SetConfig+0x128>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d007      	beq.n	8009f78 <TIM_Base_SetConfig+0xf8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a10      	ldr	r2, [pc, #64]	; (8009fac <TIM_Base_SetConfig+0x12c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_Base_SetConfig+0xf8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <TIM_Base_SetConfig+0x130>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d103      	bne.n	8009f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	615a      	str	r2, [r3, #20]
}
 8009f86:	bf00      	nop
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	40010000 	.word	0x40010000
 8009f98:	40000400 	.word	0x40000400
 8009f9c:	40000800 	.word	0x40000800
 8009fa0:	40000c00 	.word	0x40000c00
 8009fa4:	40010400 	.word	0x40010400
 8009fa8:	40014000 	.word	0x40014000
 8009fac:	40014400 	.word	0x40014400
 8009fb0:	40014800 	.word	0x40014800

08009fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e06d      	b.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a30      	ldr	r2, [pc, #192]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d004      	beq.n	800a000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a2f      	ldr	r2, [pc, #188]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d108      	bne.n	800a012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d022      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d01d      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d018      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1c      	ldr	r2, [pc, #112]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d013      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00e      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a15      	ldr	r2, [pc, #84]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d10c      	bne.n	800a096 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	40010000 	.word	0x40010000
 800a0b8:	40010400 	.word	0x40010400
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40001800 	.word	0x40001800
 800a0cc:	40014000 	.word	0x40014000

0800a0d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e042      	b.n	800a168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 fd0f 	bl	800cb18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2224      	movs	r2, #36	; 0x24
 800a0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0201 	bic.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f912 	bl	800a33c <UART_SetConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e022      	b.n	800a168 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fe6e 	bl	800ae0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a13e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a14e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fef5 	bl	800af50 <UART_CheckIdleState>
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	; 0x28
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4613      	mov	r3, r2
 800a17e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a186:	2b20      	cmp	r3, #32
 800a188:	d17b      	bne.n	800a282 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <HAL_UART_Transmit+0x26>
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e074      	b.n	800a284 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2221      	movs	r2, #33	; 0x21
 800a1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1aa:	f7f6 fc67 	bl	8000a7c <HAL_GetTick>
 800a1ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c8:	d108      	bne.n	800a1dc <HAL_UART_Transmit+0x6c>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d104      	bne.n	800a1dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	e003      	b.n	800a1e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1e4:	e030      	b.n	800a248 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2180      	movs	r1, #128	; 0x80
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 ff57 	bl	800b0a4 <UART_WaitOnFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e03d      	b.n	800a284 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a21c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	3302      	adds	r3, #2
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	e007      	b.n	800a236 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	3301      	adds	r3, #1
 800a234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1c8      	bne.n	800a1e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2200      	movs	r2, #0
 800a25c:	2140      	movs	r1, #64	; 0x40
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 ff20 	bl	800b0a4 <UART_WaitOnFlagUntilTimeout>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e006      	b.n	800a284 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e000      	b.n	800a284 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a282:	2302      	movs	r3, #2
  }
}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d137      	bne.n	800a314 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_UART_Receive_IT+0x24>
 800a2aa:	88fb      	ldrh	r3, [r7, #6]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e030      	b.n	800a316 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a18      	ldr	r2, [pc, #96]	; (800a320 <HAL_UART_Receive_IT+0x94>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d01f      	beq.n	800a304 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d018      	beq.n	800a304 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	69f9      	ldr	r1, [r7, #28]
 800a2f6:	6a3a      	ldr	r2, [r7, #32]
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e6      	bne.n	800a2d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	461a      	mov	r2, r3
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 ff32 	bl	800b174 <UART_Start_Receive_IT>
 800a310:	4603      	mov	r3, r0
 800a312:	e000      	b.n	800a316 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a314:	2302      	movs	r3, #2
  }
}
 800a316:	4618      	mov	r0, r3
 800a318:	3728      	adds	r7, #40	; 0x28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	58000c00 	.word	0x58000c00

0800a324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a33c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a340:	b092      	sub	sp, #72	; 0x48
 800a342:	af00      	add	r7, sp, #0
 800a344:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	431a      	orrs	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	4313      	orrs	r3, r2
 800a362:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	4bbe      	ldr	r3, [pc, #760]	; (800a664 <UART_SetConfig+0x328>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a374:	430b      	orrs	r3, r1
 800a376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4ab3      	ldr	r2, [pc, #716]	; (800a668 <UART_SetConfig+0x32c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d004      	beq.n	800a3a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	4baf      	ldr	r3, [pc, #700]	; (800a66c <UART_SetConfig+0x330>)
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	6812      	ldr	r2, [r2, #0]
 800a3b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	f023 010f 	bic.w	r1, r3, #15
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4aa6      	ldr	r2, [pc, #664]	; (800a670 <UART_SetConfig+0x334>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d177      	bne.n	800a4cc <UART_SetConfig+0x190>
 800a3dc:	4ba5      	ldr	r3, [pc, #660]	; (800a674 <UART_SetConfig+0x338>)
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e4:	2b28      	cmp	r3, #40	; 0x28
 800a3e6:	d86d      	bhi.n	800a4c4 <UART_SetConfig+0x188>
 800a3e8:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <UART_SetConfig+0xb4>)
 800a3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ee:	bf00      	nop
 800a3f0:	0800a495 	.word	0x0800a495
 800a3f4:	0800a4c5 	.word	0x0800a4c5
 800a3f8:	0800a4c5 	.word	0x0800a4c5
 800a3fc:	0800a4c5 	.word	0x0800a4c5
 800a400:	0800a4c5 	.word	0x0800a4c5
 800a404:	0800a4c5 	.word	0x0800a4c5
 800a408:	0800a4c5 	.word	0x0800a4c5
 800a40c:	0800a4c5 	.word	0x0800a4c5
 800a410:	0800a49d 	.word	0x0800a49d
 800a414:	0800a4c5 	.word	0x0800a4c5
 800a418:	0800a4c5 	.word	0x0800a4c5
 800a41c:	0800a4c5 	.word	0x0800a4c5
 800a420:	0800a4c5 	.word	0x0800a4c5
 800a424:	0800a4c5 	.word	0x0800a4c5
 800a428:	0800a4c5 	.word	0x0800a4c5
 800a42c:	0800a4c5 	.word	0x0800a4c5
 800a430:	0800a4a5 	.word	0x0800a4a5
 800a434:	0800a4c5 	.word	0x0800a4c5
 800a438:	0800a4c5 	.word	0x0800a4c5
 800a43c:	0800a4c5 	.word	0x0800a4c5
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a4c5 	.word	0x0800a4c5
 800a448:	0800a4c5 	.word	0x0800a4c5
 800a44c:	0800a4c5 	.word	0x0800a4c5
 800a450:	0800a4ad 	.word	0x0800a4ad
 800a454:	0800a4c5 	.word	0x0800a4c5
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a4c5 	.word	0x0800a4c5
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	0800a4c5 	.word	0x0800a4c5
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4b5 	.word	0x0800a4b5
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	0800a4c5 	.word	0x0800a4c5
 800a47c:	0800a4c5 	.word	0x0800a4c5
 800a480:	0800a4c5 	.word	0x0800a4c5
 800a484:	0800a4c5 	.word	0x0800a4c5
 800a488:	0800a4c5 	.word	0x0800a4c5
 800a48c:	0800a4c5 	.word	0x0800a4c5
 800a490:	0800a4bd 	.word	0x0800a4bd
 800a494:	2301      	movs	r3, #1
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49a:	e222      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a49c:	2304      	movs	r3, #4
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e21e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4a4:	2308      	movs	r3, #8
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e21a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4ac:	2310      	movs	r3, #16
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e216      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4b4:	2320      	movs	r3, #32
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e212      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c2:	e20e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ca:	e20a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a69      	ldr	r2, [pc, #420]	; (800a678 <UART_SetConfig+0x33c>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d130      	bne.n	800a538 <UART_SetConfig+0x1fc>
 800a4d6:	4b67      	ldr	r3, [pc, #412]	; (800a674 <UART_SetConfig+0x338>)
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	d826      	bhi.n	800a530 <UART_SetConfig+0x1f4>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <UART_SetConfig+0x1ac>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a501 	.word	0x0800a501
 800a4ec:	0800a509 	.word	0x0800a509
 800a4f0:	0800a511 	.word	0x0800a511
 800a4f4:	0800a519 	.word	0x0800a519
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a529 	.word	0x0800a529
 800a500:	2300      	movs	r3, #0
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e1ec      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a508:	2304      	movs	r3, #4
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e1e8      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a510:	2308      	movs	r3, #8
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a516:	e1e4      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a518:	2310      	movs	r3, #16
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e1e0      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a520:	2320      	movs	r3, #32
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a526:	e1dc      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52e:	e1d8      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a536:	e1d4      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a4f      	ldr	r2, [pc, #316]	; (800a67c <UART_SetConfig+0x340>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d130      	bne.n	800a5a4 <UART_SetConfig+0x268>
 800a542:	4b4c      	ldr	r3, [pc, #304]	; (800a674 <UART_SetConfig+0x338>)
 800a544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b05      	cmp	r3, #5
 800a54c:	d826      	bhi.n	800a59c <UART_SetConfig+0x260>
 800a54e:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <UART_SetConfig+0x218>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a56d 	.word	0x0800a56d
 800a558:	0800a575 	.word	0x0800a575
 800a55c:	0800a57d 	.word	0x0800a57d
 800a560:	0800a585 	.word	0x0800a585
 800a564:	0800a58d 	.word	0x0800a58d
 800a568:	0800a595 	.word	0x0800a595
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e1b6      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a574:	2304      	movs	r3, #4
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e1b2      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a57c:	2308      	movs	r3, #8
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a582:	e1ae      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a584:	2310      	movs	r3, #16
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e1aa      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a58c:	2320      	movs	r3, #32
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a592:	e1a6      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59a:	e1a2      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a59c:	2380      	movs	r3, #128	; 0x80
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a2:	e19e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a35      	ldr	r2, [pc, #212]	; (800a680 <UART_SetConfig+0x344>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d130      	bne.n	800a610 <UART_SetConfig+0x2d4>
 800a5ae:	4b31      	ldr	r3, [pc, #196]	; (800a674 <UART_SetConfig+0x338>)
 800a5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d826      	bhi.n	800a608 <UART_SetConfig+0x2cc>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0x284>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5d9 	.word	0x0800a5d9
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e180      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e17c      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e178      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e174      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e170      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e16c      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e168      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <UART_SetConfig+0x348>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d142      	bne.n	800a6a0 <UART_SetConfig+0x364>
 800a61a:	4b16      	ldr	r3, [pc, #88]	; (800a674 <UART_SetConfig+0x338>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f003 0307 	and.w	r3, r3, #7
 800a622:	2b05      	cmp	r3, #5
 800a624:	d838      	bhi.n	800a698 <UART_SetConfig+0x35c>
 800a626:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <UART_SetConfig+0x2f0>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a645 	.word	0x0800a645
 800a630:	0800a64d 	.word	0x0800a64d
 800a634:	0800a655 	.word	0x0800a655
 800a638:	0800a65d 	.word	0x0800a65d
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a691 	.word	0x0800a691
 800a644:	2300      	movs	r3, #0
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64a:	e14a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a64c:	2304      	movs	r3, #4
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e146      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a654:	2308      	movs	r3, #8
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65a:	e142      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a65c:	2310      	movs	r3, #16
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a662:	e13e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a664:	cfff69f3 	.word	0xcfff69f3
 800a668:	58000c00 	.word	0x58000c00
 800a66c:	11fff4ff 	.word	0x11fff4ff
 800a670:	40011000 	.word	0x40011000
 800a674:	58024400 	.word	0x58024400
 800a678:	40004400 	.word	0x40004400
 800a67c:	40004800 	.word	0x40004800
 800a680:	40004c00 	.word	0x40004c00
 800a684:	40005000 	.word	0x40005000
 800a688:	2320      	movs	r3, #32
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68e:	e128      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a696:	e124      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a698:	2380      	movs	r3, #128	; 0x80
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69e:	e120      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4acb      	ldr	r2, [pc, #812]	; (800a9d4 <UART_SetConfig+0x698>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d176      	bne.n	800a798 <UART_SetConfig+0x45c>
 800a6aa:	4bcb      	ldr	r3, [pc, #812]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b2:	2b28      	cmp	r3, #40	; 0x28
 800a6b4:	d86c      	bhi.n	800a790 <UART_SetConfig+0x454>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <UART_SetConfig+0x380>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a761 	.word	0x0800a761
 800a6c0:	0800a791 	.word	0x0800a791
 800a6c4:	0800a791 	.word	0x0800a791
 800a6c8:	0800a791 	.word	0x0800a791
 800a6cc:	0800a791 	.word	0x0800a791
 800a6d0:	0800a791 	.word	0x0800a791
 800a6d4:	0800a791 	.word	0x0800a791
 800a6d8:	0800a791 	.word	0x0800a791
 800a6dc:	0800a769 	.word	0x0800a769
 800a6e0:	0800a791 	.word	0x0800a791
 800a6e4:	0800a791 	.word	0x0800a791
 800a6e8:	0800a791 	.word	0x0800a791
 800a6ec:	0800a791 	.word	0x0800a791
 800a6f0:	0800a791 	.word	0x0800a791
 800a6f4:	0800a791 	.word	0x0800a791
 800a6f8:	0800a791 	.word	0x0800a791
 800a6fc:	0800a771 	.word	0x0800a771
 800a700:	0800a791 	.word	0x0800a791
 800a704:	0800a791 	.word	0x0800a791
 800a708:	0800a791 	.word	0x0800a791
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a791 	.word	0x0800a791
 800a714:	0800a791 	.word	0x0800a791
 800a718:	0800a791 	.word	0x0800a791
 800a71c:	0800a779 	.word	0x0800a779
 800a720:	0800a791 	.word	0x0800a791
 800a724:	0800a791 	.word	0x0800a791
 800a728:	0800a791 	.word	0x0800a791
 800a72c:	0800a791 	.word	0x0800a791
 800a730:	0800a791 	.word	0x0800a791
 800a734:	0800a791 	.word	0x0800a791
 800a738:	0800a791 	.word	0x0800a791
 800a73c:	0800a781 	.word	0x0800a781
 800a740:	0800a791 	.word	0x0800a791
 800a744:	0800a791 	.word	0x0800a791
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a791 	.word	0x0800a791
 800a754:	0800a791 	.word	0x0800a791
 800a758:	0800a791 	.word	0x0800a791
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e0bc      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a768:	2304      	movs	r3, #4
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e0b8      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a770:	2308      	movs	r3, #8
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e0b4      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a778:	2310      	movs	r3, #16
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e0b0      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a780:	2320      	movs	r3, #32
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e0ac      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78e:	e0a8      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e0a4      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a8f      	ldr	r2, [pc, #572]	; (800a9dc <UART_SetConfig+0x6a0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d130      	bne.n	800a804 <UART_SetConfig+0x4c8>
 800a7a2:	4b8d      	ldr	r3, [pc, #564]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b05      	cmp	r3, #5
 800a7ac:	d826      	bhi.n	800a7fc <UART_SetConfig+0x4c0>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <UART_SetConfig+0x478>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a7cd 	.word	0x0800a7cd
 800a7b8:	0800a7d5 	.word	0x0800a7d5
 800a7bc:	0800a7dd 	.word	0x0800a7dd
 800a7c0:	0800a7e5 	.word	0x0800a7e5
 800a7c4:	0800a7ed 	.word	0x0800a7ed
 800a7c8:	0800a7f5 	.word	0x0800a7f5
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d2:	e086      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e082      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e07e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e07a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e076      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fa:	e072      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a7fc:	2380      	movs	r3, #128	; 0x80
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e06e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a75      	ldr	r2, [pc, #468]	; (800a9e0 <UART_SetConfig+0x6a4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d130      	bne.n	800a870 <UART_SetConfig+0x534>
 800a80e:	4b72      	ldr	r3, [pc, #456]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b05      	cmp	r3, #5
 800a818:	d826      	bhi.n	800a868 <UART_SetConfig+0x52c>
 800a81a:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <UART_SetConfig+0x4e4>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a839 	.word	0x0800a839
 800a824:	0800a841 	.word	0x0800a841
 800a828:	0800a849 	.word	0x0800a849
 800a82c:	0800a851 	.word	0x0800a851
 800a830:	0800a859 	.word	0x0800a859
 800a834:	0800a861 	.word	0x0800a861
 800a838:	2300      	movs	r3, #0
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a83e:	e050      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a840:	2304      	movs	r3, #4
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a846:	e04c      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a848:	2308      	movs	r3, #8
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84e:	e048      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a850:	2310      	movs	r3, #16
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	e044      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a858:	2320      	movs	r3, #32
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85e:	e040      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a860:	2340      	movs	r3, #64	; 0x40
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a866:	e03c      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a868:	2380      	movs	r3, #128	; 0x80
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e038      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a5b      	ldr	r2, [pc, #364]	; (800a9e4 <UART_SetConfig+0x6a8>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d130      	bne.n	800a8dc <UART_SetConfig+0x5a0>
 800a87a:	4b57      	ldr	r3, [pc, #348]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	2b05      	cmp	r3, #5
 800a884:	d826      	bhi.n	800a8d4 <UART_SetConfig+0x598>
 800a886:	a201      	add	r2, pc, #4	; (adr r2, 800a88c <UART_SetConfig+0x550>)
 800a888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88c:	0800a8a5 	.word	0x0800a8a5
 800a890:	0800a8ad 	.word	0x0800a8ad
 800a894:	0800a8b5 	.word	0x0800a8b5
 800a898:	0800a8bd 	.word	0x0800a8bd
 800a89c:	0800a8c5 	.word	0x0800a8c5
 800a8a0:	0800a8cd 	.word	0x0800a8cd
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8aa:	e01a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b2:	e016      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e012      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e00e      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8c4:	2320      	movs	r3, #32
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ca:	e00a      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8cc:	2340      	movs	r3, #64	; 0x40
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e006      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8d4:	2380      	movs	r3, #128	; 0x80
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e002      	b.n	800a8e2 <UART_SetConfig+0x5a6>
 800a8dc:	2380      	movs	r3, #128	; 0x80
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a3f      	ldr	r2, [pc, #252]	; (800a9e4 <UART_SetConfig+0x6a8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	f040 80f8 	bne.w	800aade <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	dc46      	bgt.n	800a984 <UART_SetConfig+0x648>
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	f2c0 8082 	blt.w	800aa00 <UART_SetConfig+0x6c4>
 800a8fc:	3b02      	subs	r3, #2
 800a8fe:	2b1e      	cmp	r3, #30
 800a900:	d87e      	bhi.n	800aa00 <UART_SetConfig+0x6c4>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <UART_SetConfig+0x5cc>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a98b 	.word	0x0800a98b
 800a90c:	0800aa01 	.word	0x0800aa01
 800a910:	0800a993 	.word	0x0800a993
 800a914:	0800aa01 	.word	0x0800aa01
 800a918:	0800aa01 	.word	0x0800aa01
 800a91c:	0800aa01 	.word	0x0800aa01
 800a920:	0800a9a3 	.word	0x0800a9a3
 800a924:	0800aa01 	.word	0x0800aa01
 800a928:	0800aa01 	.word	0x0800aa01
 800a92c:	0800aa01 	.word	0x0800aa01
 800a930:	0800aa01 	.word	0x0800aa01
 800a934:	0800aa01 	.word	0x0800aa01
 800a938:	0800aa01 	.word	0x0800aa01
 800a93c:	0800aa01 	.word	0x0800aa01
 800a940:	0800a9b3 	.word	0x0800a9b3
 800a944:	0800aa01 	.word	0x0800aa01
 800a948:	0800aa01 	.word	0x0800aa01
 800a94c:	0800aa01 	.word	0x0800aa01
 800a950:	0800aa01 	.word	0x0800aa01
 800a954:	0800aa01 	.word	0x0800aa01
 800a958:	0800aa01 	.word	0x0800aa01
 800a95c:	0800aa01 	.word	0x0800aa01
 800a960:	0800aa01 	.word	0x0800aa01
 800a964:	0800aa01 	.word	0x0800aa01
 800a968:	0800aa01 	.word	0x0800aa01
 800a96c:	0800aa01 	.word	0x0800aa01
 800a970:	0800aa01 	.word	0x0800aa01
 800a974:	0800aa01 	.word	0x0800aa01
 800a978:	0800aa01 	.word	0x0800aa01
 800a97c:	0800aa01 	.word	0x0800aa01
 800a980:	0800a9f3 	.word	0x0800a9f3
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d037      	beq.n	800a9f8 <UART_SetConfig+0x6bc>
 800a988:	e03a      	b.n	800aa00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a98a:	f7fe fc3d 	bl	8009208 <HAL_RCCEx_GetD3PCLK1Freq>
 800a98e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a990:	e03c      	b.n	800aa0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fc4c 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a0:	e034      	b.n	800aa0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fd98 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b0:	e02c      	b.n	800aa0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b2:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d016      	beq.n	800a9ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <UART_SetConfig+0x69c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	08db      	lsrs	r3, r3, #3
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	4a07      	ldr	r2, [pc, #28]	; (800a9e8 <UART_SetConfig+0x6ac>)
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d0:	e01c      	b.n	800aa0c <UART_SetConfig+0x6d0>
 800a9d2:	bf00      	nop
 800a9d4:	40011400 	.word	0x40011400
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	40007800 	.word	0x40007800
 800a9e0:	40007c00 	.word	0x40007c00
 800a9e4:	58000c00 	.word	0x58000c00
 800a9e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a9ec:	4b9d      	ldr	r3, [pc, #628]	; (800ac64 <UART_SetConfig+0x928>)
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f0:	e00c      	b.n	800aa0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9f2:	4b9d      	ldr	r3, [pc, #628]	; (800ac68 <UART_SetConfig+0x92c>)
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f6:	e009      	b.n	800aa0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9fe:	e005      	b.n	800aa0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 81de 	beq.w	800add0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	4a94      	ldr	r2, [pc, #592]	; (800ac6c <UART_SetConfig+0x930>)
 800aa1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa26:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	4413      	add	r3, r2
 800aa32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d305      	bcc.n	800aa44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d903      	bls.n	800aa4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa4a:	e1c1      	b.n	800add0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4e:	2200      	movs	r2, #0
 800aa50:	60bb      	str	r3, [r7, #8]
 800aa52:	60fa      	str	r2, [r7, #12]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	4a84      	ldr	r2, [pc, #528]	; (800ac6c <UART_SetConfig+0x930>)
 800aa5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2200      	movs	r2, #0
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa6e:	f7f5 fc8f 	bl	8000390 <__aeabi_uldivmod>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4610      	mov	r0, r2
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	f04f 0300 	mov.w	r3, #0
 800aa82:	020b      	lsls	r3, r1, #8
 800aa84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa88:	0202      	lsls	r2, r0, #8
 800aa8a:	6979      	ldr	r1, [r7, #20]
 800aa8c:	6849      	ldr	r1, [r1, #4]
 800aa8e:	0849      	lsrs	r1, r1, #1
 800aa90:	2000      	movs	r0, #0
 800aa92:	460c      	mov	r4, r1
 800aa94:	4605      	mov	r5, r0
 800aa96:	eb12 0804 	adds.w	r8, r2, r4
 800aa9a:	eb43 0905 	adc.w	r9, r3, r5
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	469a      	mov	sl, r3
 800aaa6:	4693      	mov	fp, r2
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	465b      	mov	r3, fp
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f5 fc6e 	bl	8000390 <__aeabi_uldivmod>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4613      	mov	r3, r2
 800aaba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aac2:	d308      	bcc.n	800aad6 <UART_SetConfig+0x79a>
 800aac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaca:	d204      	bcs.n	800aad6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aad2:	60da      	str	r2, [r3, #12]
 800aad4:	e17c      	b.n	800add0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aadc:	e178      	b.n	800add0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae6:	f040 80c5 	bne.w	800ac74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aaea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	dc48      	bgt.n	800ab84 <UART_SetConfig+0x848>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	db7b      	blt.n	800abee <UART_SetConfig+0x8b2>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d879      	bhi.n	800abee <UART_SetConfig+0x8b2>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <UART_SetConfig+0x7c4>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab8b 	.word	0x0800ab8b
 800ab04:	0800ab93 	.word	0x0800ab93
 800ab08:	0800abef 	.word	0x0800abef
 800ab0c:	0800abef 	.word	0x0800abef
 800ab10:	0800ab9b 	.word	0x0800ab9b
 800ab14:	0800abef 	.word	0x0800abef
 800ab18:	0800abef 	.word	0x0800abef
 800ab1c:	0800abef 	.word	0x0800abef
 800ab20:	0800abab 	.word	0x0800abab
 800ab24:	0800abef 	.word	0x0800abef
 800ab28:	0800abef 	.word	0x0800abef
 800ab2c:	0800abef 	.word	0x0800abef
 800ab30:	0800abef 	.word	0x0800abef
 800ab34:	0800abef 	.word	0x0800abef
 800ab38:	0800abef 	.word	0x0800abef
 800ab3c:	0800abef 	.word	0x0800abef
 800ab40:	0800abbb 	.word	0x0800abbb
 800ab44:	0800abef 	.word	0x0800abef
 800ab48:	0800abef 	.word	0x0800abef
 800ab4c:	0800abef 	.word	0x0800abef
 800ab50:	0800abef 	.word	0x0800abef
 800ab54:	0800abef 	.word	0x0800abef
 800ab58:	0800abef 	.word	0x0800abef
 800ab5c:	0800abef 	.word	0x0800abef
 800ab60:	0800abef 	.word	0x0800abef
 800ab64:	0800abef 	.word	0x0800abef
 800ab68:	0800abef 	.word	0x0800abef
 800ab6c:	0800abef 	.word	0x0800abef
 800ab70:	0800abef 	.word	0x0800abef
 800ab74:	0800abef 	.word	0x0800abef
 800ab78:	0800abef 	.word	0x0800abef
 800ab7c:	0800abef 	.word	0x0800abef
 800ab80:	0800abe1 	.word	0x0800abe1
 800ab84:	2b40      	cmp	r3, #64	; 0x40
 800ab86:	d02e      	beq.n	800abe6 <UART_SetConfig+0x8aa>
 800ab88:	e031      	b.n	800abee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab8a:	f7fc fb45 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800ab8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab90:	e033      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab92:	f7fc fb57 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 800ab96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab98:	e02f      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fb48 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba8:	e027      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abaa:	f107 0318 	add.w	r3, r7, #24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fc94 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb8:	e01f      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abba:	4b2d      	ldr	r3, [pc, #180]	; (800ac70 <UART_SetConfig+0x934>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d009      	beq.n	800abda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abc6:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <UART_SetConfig+0x934>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	08db      	lsrs	r3, r3, #3
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	4a24      	ldr	r2, [pc, #144]	; (800ac64 <UART_SetConfig+0x928>)
 800abd2:	fa22 f303 	lsr.w	r3, r2, r3
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abd8:	e00f      	b.n	800abfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800abda:	4b22      	ldr	r3, [pc, #136]	; (800ac64 <UART_SetConfig+0x928>)
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abde:	e00c      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abe0:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <UART_SetConfig+0x92c>)
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe4:	e009      	b.n	800abfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abec:	e005      	b.n	800abfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 80e7 	beq.w	800add0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	4a19      	ldr	r2, [pc, #100]	; (800ac6c <UART_SetConfig+0x930>)
 800ac08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac14:	005a      	lsls	r2, r3, #1
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	085b      	lsrs	r3, r3, #1
 800ac1c:	441a      	add	r2, r3
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	2b0f      	cmp	r3, #15
 800ac2c:	d916      	bls.n	800ac5c <UART_SetConfig+0x920>
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac34:	d212      	bcs.n	800ac5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	f023 030f 	bic.w	r3, r3, #15
 800ac3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ac58:	60da      	str	r2, [r3, #12]
 800ac5a:	e0b9      	b.n	800add0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac62:	e0b5      	b.n	800add0 <UART_SetConfig+0xa94>
 800ac64:	03d09000 	.word	0x03d09000
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	0800db14 	.word	0x0800db14
 800ac70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	dc49      	bgt.n	800ad10 <UART_SetConfig+0x9d4>
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	db7c      	blt.n	800ad7a <UART_SetConfig+0xa3e>
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	d87a      	bhi.n	800ad7a <UART_SetConfig+0xa3e>
 800ac84:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <UART_SetConfig+0x950>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800ad17 	.word	0x0800ad17
 800ac90:	0800ad1f 	.word	0x0800ad1f
 800ac94:	0800ad7b 	.word	0x0800ad7b
 800ac98:	0800ad7b 	.word	0x0800ad7b
 800ac9c:	0800ad27 	.word	0x0800ad27
 800aca0:	0800ad7b 	.word	0x0800ad7b
 800aca4:	0800ad7b 	.word	0x0800ad7b
 800aca8:	0800ad7b 	.word	0x0800ad7b
 800acac:	0800ad37 	.word	0x0800ad37
 800acb0:	0800ad7b 	.word	0x0800ad7b
 800acb4:	0800ad7b 	.word	0x0800ad7b
 800acb8:	0800ad7b 	.word	0x0800ad7b
 800acbc:	0800ad7b 	.word	0x0800ad7b
 800acc0:	0800ad7b 	.word	0x0800ad7b
 800acc4:	0800ad7b 	.word	0x0800ad7b
 800acc8:	0800ad7b 	.word	0x0800ad7b
 800accc:	0800ad47 	.word	0x0800ad47
 800acd0:	0800ad7b 	.word	0x0800ad7b
 800acd4:	0800ad7b 	.word	0x0800ad7b
 800acd8:	0800ad7b 	.word	0x0800ad7b
 800acdc:	0800ad7b 	.word	0x0800ad7b
 800ace0:	0800ad7b 	.word	0x0800ad7b
 800ace4:	0800ad7b 	.word	0x0800ad7b
 800ace8:	0800ad7b 	.word	0x0800ad7b
 800acec:	0800ad7b 	.word	0x0800ad7b
 800acf0:	0800ad7b 	.word	0x0800ad7b
 800acf4:	0800ad7b 	.word	0x0800ad7b
 800acf8:	0800ad7b 	.word	0x0800ad7b
 800acfc:	0800ad7b 	.word	0x0800ad7b
 800ad00:	0800ad7b 	.word	0x0800ad7b
 800ad04:	0800ad7b 	.word	0x0800ad7b
 800ad08:	0800ad7b 	.word	0x0800ad7b
 800ad0c:	0800ad6d 	.word	0x0800ad6d
 800ad10:	2b40      	cmp	r3, #64	; 0x40
 800ad12:	d02e      	beq.n	800ad72 <UART_SetConfig+0xa36>
 800ad14:	e031      	b.n	800ad7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad16:	f7fc fa7f 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800ad1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad1c:	e033      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad1e:	f7fc fa91 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 800ad22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad24:	e02f      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe fa82 	bl	8009234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad34:	e027      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad36:	f107 0318 	add.w	r3, r7, #24
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fbce 	bl	80094dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad44:	e01f      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad46:	4b2d      	ldr	r3, [pc, #180]	; (800adfc <UART_SetConfig+0xac0>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0320 	and.w	r3, r3, #32
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d009      	beq.n	800ad66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad52:	4b2a      	ldr	r3, [pc, #168]	; (800adfc <UART_SetConfig+0xac0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	08db      	lsrs	r3, r3, #3
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	4a28      	ldr	r2, [pc, #160]	; (800ae00 <UART_SetConfig+0xac4>)
 800ad5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad64:	e00f      	b.n	800ad86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ad66:	4b26      	ldr	r3, [pc, #152]	; (800ae00 <UART_SetConfig+0xac4>)
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6a:	e00c      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <UART_SetConfig+0xac8>)
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad70:	e009      	b.n	800ad86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad78:	e005      	b.n	800ad86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad84:	bf00      	nop
    }

    if (pclk != 0U)
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d021      	beq.n	800add0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	4a1d      	ldr	r2, [pc, #116]	; (800ae08 <UART_SetConfig+0xacc>)
 800ad92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	441a      	add	r2, r3
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	2b0f      	cmp	r3, #15
 800adb4:	d909      	bls.n	800adca <UART_SetConfig+0xa8e>
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adbc:	d205      	bcs.n	800adca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60da      	str	r2, [r3, #12]
 800adc8:	e002      	b.n	800add0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2201      	movs	r2, #1
 800add4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2201      	movs	r2, #1
 800addc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2200      	movs	r2, #0
 800ade4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2200      	movs	r2, #0
 800adea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800adec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3748      	adds	r7, #72	; 0x48
 800adf4:	46bd      	mov	sp, r7
 800adf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adfa:	bf00      	nop
 800adfc:	58024400 	.word	0x58024400
 800ae00:	03d09000 	.word	0x03d09000
 800ae04:	003d0900 	.word	0x003d0900
 800ae08:	0800db14 	.word	0x0800db14

0800ae0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00a      	beq.n	800ae7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec2:	f003 0320 	and.w	r3, r3, #32
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01a      	beq.n	800af22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	430a      	orrs	r2, r1
 800af00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af0a:	d10a      	bne.n	800af22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]
  }
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b098      	sub	sp, #96	; 0x60
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af60:	f7f5 fd8c 	bl	8000a7c <HAL_GetTick>
 800af64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0308 	and.w	r3, r3, #8
 800af70:	2b08      	cmp	r3, #8
 800af72:	d12f      	bne.n	800afd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af7c:	2200      	movs	r2, #0
 800af7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f88e 	bl	800b0a4 <UART_WaitOnFlagUntilTimeout>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d022      	beq.n	800afd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa2:	653b      	str	r3, [r7, #80]	; 0x50
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afac:	647b      	str	r3, [r7, #68]	; 0x44
 800afae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e6      	bne.n	800af8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e063      	b.n	800b09c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b04      	cmp	r3, #4
 800afe0:	d149      	bne.n	800b076 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afea:	2200      	movs	r2, #0
 800afec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f857 	bl	800b0a4 <UART_WaitOnFlagUntilTimeout>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d03c      	beq.n	800b076 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	e853 3f00 	ldrex	r3, [r3]
 800b008:	623b      	str	r3, [r7, #32]
   return(result);
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b010:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01a:	633b      	str	r3, [r7, #48]	; 0x30
 800b01c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e6      	bne.n	800affc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3308      	adds	r3, #8
 800b034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f023 0301 	bic.w	r3, r3, #1
 800b044:	64bb      	str	r3, [r7, #72]	; 0x48
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b04e:	61fa      	str	r2, [r7, #28]
 800b050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	69b9      	ldr	r1, [r7, #24]
 800b054:	69fa      	ldr	r2, [r7, #28]
 800b056:	e841 2300 	strex	r3, r2, [r1]
 800b05a:	617b      	str	r3, [r7, #20]
   return(result);
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e5      	bne.n	800b02e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e012      	b.n	800b09c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2220      	movs	r2, #32
 800b07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2220      	movs	r2, #32
 800b082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3758      	adds	r7, #88	; 0x58
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0b4:	e049      	b.n	800b14a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0bc:	d045      	beq.n	800b14a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0be:	f7f5 fcdd 	bl	8000a7c <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d302      	bcc.n	800b0d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e048      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d031      	beq.n	800b14a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	f003 0308 	and.w	r3, r3, #8
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d110      	bne.n	800b116 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 f95b 	bl	800b3b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2208      	movs	r2, #8
 800b106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e029      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b124:	d111      	bne.n	800b14a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 f941 	bl	800b3b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2220      	movs	r2, #32
 800b13a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e00f      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69da      	ldr	r2, [r3, #28]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4013      	ands	r3, r2
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	429a      	cmp	r2, r3
 800b158:	bf0c      	ite	eq
 800b15a:	2301      	moveq	r3, #1
 800b15c:	2300      	movne	r3, #0
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	461a      	mov	r2, r3
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	429a      	cmp	r2, r3
 800b166:	d0a6      	beq.n	800b0b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b174:	b480      	push	{r7}
 800b176:	b0a3      	sub	sp, #140	; 0x8c
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	88fa      	ldrh	r2, [r7, #6]
 800b18c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	88fa      	ldrh	r2, [r7, #6]
 800b194:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a6:	d10e      	bne.n	800b1c6 <UART_Start_Receive_IT+0x52>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <UART_Start_Receive_IT+0x48>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b1b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1ba:	e02d      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	22ff      	movs	r2, #255	; 0xff
 800b1c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1c4:	e028      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10d      	bne.n	800b1ea <UART_Start_Receive_IT+0x76>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d104      	bne.n	800b1e0 <UART_Start_Receive_IT+0x6c>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	22ff      	movs	r2, #255	; 0xff
 800b1da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1de:	e01b      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	227f      	movs	r2, #127	; 0x7f
 800b1e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1e8:	e016      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1f2:	d10d      	bne.n	800b210 <UART_Start_Receive_IT+0x9c>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <UART_Start_Receive_IT+0x92>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	227f      	movs	r2, #127	; 0x7f
 800b200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b204:	e008      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	223f      	movs	r2, #63	; 0x3f
 800b20a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b20e:	e003      	b.n	800b218 <UART_Start_Receive_IT+0xa4>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2222      	movs	r2, #34	; 0x22
 800b224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3308      	adds	r3, #8
 800b22e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b24c:	673a      	str	r2, [r7, #112]	; 0x70
 800b24e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b250:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b252:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b254:	e841 2300 	strex	r3, r2, [r1]
 800b258:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b25a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1e3      	bne.n	800b228 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b268:	d14f      	bne.n	800b30a <UART_Start_Receive_IT+0x196>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b270:	88fa      	ldrh	r2, [r7, #6]
 800b272:	429a      	cmp	r2, r3
 800b274:	d349      	bcc.n	800b30a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b27e:	d107      	bne.n	800b290 <UART_Start_Receive_IT+0x11c>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d103      	bne.n	800b290 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4a47      	ldr	r2, [pc, #284]	; (800b3a8 <UART_Start_Receive_IT+0x234>)
 800b28c:	675a      	str	r2, [r3, #116]	; 0x74
 800b28e:	e002      	b.n	800b296 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4a46      	ldr	r2, [pc, #280]	; (800b3ac <UART_Start_Receive_IT+0x238>)
 800b294:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d01a      	beq.n	800b2d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e4      	bne.n	800b29e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b2f4:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <UART_Start_Receive_IT+0x160>
 800b308:	e046      	b.n	800b398 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b312:	d107      	bne.n	800b324 <UART_Start_Receive_IT+0x1b0>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	4a24      	ldr	r2, [pc, #144]	; (800b3b0 <UART_Start_Receive_IT+0x23c>)
 800b320:	675a      	str	r2, [r3, #116]	; 0x74
 800b322:	e002      	b.n	800b32a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4a23      	ldr	r2, [pc, #140]	; (800b3b4 <UART_Start_Receive_IT+0x240>)
 800b328:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d019      	beq.n	800b366 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b346:	677b      	str	r3, [r7, #116]	; 0x74
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b350:	637b      	str	r3, [r7, #52]	; 0x34
 800b352:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e6      	bne.n	800b332 <UART_Start_Receive_IT+0x1be>
 800b364:	e018      	b.n	800b398 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	613b      	str	r3, [r7, #16]
   return(result);
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f043 0320 	orr.w	r3, r3, #32
 800b37a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b384:	623b      	str	r3, [r7, #32]
 800b386:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	69f9      	ldr	r1, [r7, #28]
 800b38a:	6a3a      	ldr	r2, [r7, #32]
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	61bb      	str	r3, [r7, #24]
   return(result);
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e6      	bne.n	800b366 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	378c      	adds	r7, #140	; 0x8c
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	0800bb55 	.word	0x0800bb55
 800b3ac:	0800b7f5 	.word	0x0800b7f5
 800b3b0:	0800b63d 	.word	0x0800b63d
 800b3b4:	0800b485 	.word	0x0800b485

0800b3b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b095      	sub	sp, #84	; 0x54
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3de:	643b      	str	r3, [r7, #64]	; 0x40
 800b3e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e6      	bne.n	800b3c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3308      	adds	r3, #8
 800b3f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	61fb      	str	r3, [r7, #28]
   return(result);
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	4b1e      	ldr	r3, [pc, #120]	; (800b480 <UART_EndRxTransfer+0xc8>)
 800b406:	4013      	ands	r3, r2
 800b408:	64bb      	str	r3, [r7, #72]	; 0x48
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3308      	adds	r3, #8
 800b410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b412:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41a:	e841 2300 	strex	r3, r2, [r1]
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e5      	bne.n	800b3f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d118      	bne.n	800b460 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f023 0310 	bic.w	r3, r3, #16
 800b442:	647b      	str	r3, [r7, #68]	; 0x44
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	461a      	mov	r2, r3
 800b44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b44c:	61bb      	str	r3, [r7, #24]
 800b44e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	e841 2300 	strex	r3, r2, [r1]
 800b458:	613b      	str	r3, [r7, #16]
   return(result);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e6      	bne.n	800b42e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b474:	bf00      	nop
 800b476:	3754      	adds	r7, #84	; 0x54
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	effffffe 	.word	0xeffffffe

0800b484 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b09c      	sub	sp, #112	; 0x70
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b492:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b49c:	2b22      	cmp	r3, #34	; 0x22
 800b49e:	f040 80be 	bne.w	800b61e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b4b0:	b2d9      	uxtb	r1, r3
 800b4b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4bc:	400a      	ands	r2, r1
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f040 80a1 	bne.w	800b62e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b500:	66bb      	str	r3, [r7, #104]	; 0x68
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b50a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b50c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e6      	bne.n	800b4ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3308      	adds	r3, #8
 800b524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b530:	f023 0301 	bic.w	r3, r3, #1
 800b534:	667b      	str	r3, [r7, #100]	; 0x64
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3308      	adds	r3, #8
 800b53c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b53e:	647a      	str	r2, [r7, #68]	; 0x44
 800b540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e5      	bne.n	800b51e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a33      	ldr	r2, [pc, #204]	; (800b638 <UART_RxISR_8BIT+0x1b4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d01f      	beq.n	800b5b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d018      	beq.n	800b5b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	623b      	str	r3, [r7, #32]
   return(result);
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b592:	663b      	str	r3, [r7, #96]	; 0x60
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	461a      	mov	r2, r3
 800b59a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b59c:	633b      	str	r3, [r7, #48]	; 0x30
 800b59e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e6      	bne.n	800b57e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d12e      	bne.n	800b616 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0310 	bic.w	r3, r3, #16
 800b5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5dc:	61fb      	str	r3, [r7, #28]
 800b5de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	69b9      	ldr	r1, [r7, #24]
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e6      	bne.n	800b5be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	f003 0310 	and.w	r3, r3, #16
 800b5fa:	2b10      	cmp	r3, #16
 800b5fc:	d103      	bne.n	800b606 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2210      	movs	r2, #16
 800b604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7fe fe88 	bl	800a324 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b614:	e00b      	b.n	800b62e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fdc6 	bl	800c1a8 <HAL_UART_RxCpltCallback>
}
 800b61c:	e007      	b.n	800b62e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	699a      	ldr	r2, [r3, #24]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f042 0208 	orr.w	r2, r2, #8
 800b62c:	619a      	str	r2, [r3, #24]
}
 800b62e:	bf00      	nop
 800b630:	3770      	adds	r7, #112	; 0x70
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	58000c00 	.word	0x58000c00

0800b63c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b09c      	sub	sp, #112	; 0x70
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b64a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b654:	2b22      	cmp	r3, #34	; 0x22
 800b656:	f040 80be 	bne.w	800b7d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b668:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b66a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b66e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b672:	4013      	ands	r3, r2
 800b674:	b29a      	uxth	r2, r3
 800b676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b678:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67e:	1c9a      	adds	r2, r3, #2
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	3b01      	subs	r3, #1
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f040 80a1 	bne.w	800b7e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ac:	e853 3f00 	ldrex	r3, [r3]
 800b6b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6b8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6ca:	e841 2300 	strex	r3, r2, [r1]
 800b6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1e6      	bne.n	800b6a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e0:	e853 3f00 	ldrex	r3, [r3]
 800b6e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	f023 0301 	bic.w	r3, r3, #1
 800b6ec:	663b      	str	r3, [r7, #96]	; 0x60
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6f6:	643a      	str	r2, [r7, #64]	; 0x40
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6fe:	e841 2300 	strex	r3, r2, [r1]
 800b702:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1e5      	bne.n	800b6d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a33      	ldr	r2, [pc, #204]	; (800b7f0 <UART_RxISR_16BIT+0x1b4>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d01f      	beq.n	800b768 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b732:	2b00      	cmp	r3, #0
 800b734:	d018      	beq.n	800b768 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	e853 3f00 	ldrex	r3, [r3]
 800b742:	61fb      	str	r3, [r7, #28]
   return(result);
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b74a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	461a      	mov	r2, r3
 800b752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b756:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b75c:	e841 2300 	strex	r3, r2, [r1]
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e6      	bne.n	800b736 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d12e      	bne.n	800b7ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	e853 3f00 	ldrex	r3, [r3]
 800b782:	60bb      	str	r3, [r7, #8]
   return(result);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f023 0310 	bic.w	r3, r3, #16
 800b78a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	461a      	mov	r2, r3
 800b792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b798:	6979      	ldr	r1, [r7, #20]
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	e841 2300 	strex	r3, r2, [r1]
 800b7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1e6      	bne.n	800b776 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	f003 0310 	and.w	r3, r3, #16
 800b7b2:	2b10      	cmp	r3, #16
 800b7b4:	d103      	bne.n	800b7be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2210      	movs	r2, #16
 800b7bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7fe fdac 	bl	800a324 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7cc:	e00b      	b.n	800b7e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fcea 	bl	800c1a8 <HAL_UART_RxCpltCallback>
}
 800b7d4:	e007      	b.n	800b7e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	699a      	ldr	r2, [r3, #24]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f042 0208 	orr.w	r2, r2, #8
 800b7e4:	619a      	str	r2, [r3, #24]
}
 800b7e6:	bf00      	nop
 800b7e8:	3770      	adds	r7, #112	; 0x70
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	58000c00 	.word	0x58000c00

0800b7f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b0ac      	sub	sp, #176	; 0xb0
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b802:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b82a:	2b22      	cmp	r3, #34	; 0x22
 800b82c:	f040 8180 	bne.w	800bb30 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b836:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b83a:	e123      	b.n	800ba84 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b846:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b84a:	b2d9      	uxtb	r1, r3
 800b84c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b850:	b2da      	uxtb	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b856:	400a      	ands	r2, r1
 800b858:	b2d2      	uxtb	r2, r2
 800b85a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d053      	beq.n	800b936 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b88e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d011      	beq.n	800b8be <UART_RxISR_8BIT_FIFOEN+0xca>
 800b89a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b4:	f043 0201 	orr.w	r2, r3, #1
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d011      	beq.n	800b8ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b8ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00b      	beq.n	800b8ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e4:	f043 0204 	orr.w	r2, r3, #4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b8fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2204      	movs	r2, #4
 800b90c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b914:	f043 0202 	orr.w	r2, r3, #2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b924:	2b00      	cmp	r3, #0
 800b926:	d006      	beq.n	800b936 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fc69 	bl	800c200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f040 80a0 	bne.w	800ba84 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b966:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b968:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b96c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e4      	bne.n	800b944 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3308      	adds	r3, #8
 800b980:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b98a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b98c:	4b6e      	ldr	r3, [pc, #440]	; (800bb48 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b98e:	4013      	ands	r3, r2
 800b990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3308      	adds	r3, #8
 800b99a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b99e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b9a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b9a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e3      	bne.n	800b97a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a60      	ldr	r2, [pc, #384]	; (800bb4c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d021      	beq.n	800ba14 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01a      	beq.n	800ba14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba00:	657b      	str	r3, [r7, #84]	; 0x54
 800ba02:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e4      	bne.n	800b9de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d130      	bne.n	800ba7e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	f023 0310 	bic.w	r3, r3, #16
 800ba36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba44:	643b      	str	r3, [r7, #64]	; 0x40
 800ba46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e4      	bne.n	800ba22 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	f003 0310 	and.w	r3, r3, #16
 800ba62:	2b10      	cmp	r3, #16
 800ba64:	d103      	bne.n	800ba6e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2210      	movs	r2, #16
 800ba6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7fe fc54 	bl	800a324 <HAL_UARTEx_RxEventCallback>
 800ba7c:	e002      	b.n	800ba84 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fb92 	bl	800c1a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ba84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ba8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba90:	f003 0320 	and.w	r3, r3, #32
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f47f aed1 	bne.w	800b83c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baa0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800baa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d049      	beq.n	800bb40 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bab2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d242      	bcs.n	800bb40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3308      	adds	r3, #8
 800bac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	61fb      	str	r3, [r7, #28]
   return(result);
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3308      	adds	r3, #8
 800bada:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bade:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e3      	bne.n	800baba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a16      	ldr	r2, [pc, #88]	; (800bb50 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800baf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	f043 0320 	orr.w	r3, r3, #32
 800bb0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	6979      	ldr	r1, [r7, #20]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	613b      	str	r3, [r7, #16]
   return(result);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e4      	bne.n	800baf8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb2e:	e007      	b.n	800bb40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0208 	orr.w	r2, r2, #8
 800bb3e:	619a      	str	r2, [r3, #24]
}
 800bb40:	bf00      	nop
 800bb42:	37b0      	adds	r7, #176	; 0xb0
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	effffffe 	.word	0xeffffffe
 800bb4c:	58000c00 	.word	0x58000c00
 800bb50:	0800b485 	.word	0x0800b485

0800bb54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b0ae      	sub	sp, #184	; 0xb8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb62:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8a:	2b22      	cmp	r3, #34	; 0x22
 800bb8c:	f040 8184 	bne.w	800be98 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb96:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb9a:	e127      	b.n	800bdec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bbae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800bbb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc4:	1c9a      	adds	r2, r3, #2
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bbe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bbea:	f003 0307 	and.w	r3, r3, #7
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d053      	beq.n	800bc9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d011      	beq.n	800bc22 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bbfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc18:	f043 0201 	orr.w	r2, r3, #1
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d011      	beq.n	800bc52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bc2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc48:	f043 0204 	orr.w	r2, r3, #4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d011      	beq.n	800bc82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bc5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00b      	beq.n	800bc82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2204      	movs	r2, #4
 800bc70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc78:	f043 0202 	orr.w	r2, r3, #2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d006      	beq.n	800bc9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fab7 	bl	800c200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80a2 	bne.w	800bdec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcb0:	e853 3f00 	ldrex	r3, [r3]
 800bcb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e2      	bne.n	800bca8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcf4:	4b6e      	ldr	r3, [pc, #440]	; (800beb0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bd06:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e3      	bne.n	800bce2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a60      	ldr	r2, [pc, #384]	; (800beb4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d021      	beq.n	800bd7c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d01a      	beq.n	800bd7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd68:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e4      	bne.n	800bd46 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d130      	bne.n	800bde6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9a:	f023 0310 	bic.w	r3, r3, #16
 800bd9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdac:	647b      	str	r3, [r7, #68]	; 0x44
 800bdae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e4      	bne.n	800bd8a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	f003 0310 	and.w	r3, r3, #16
 800bdca:	2b10      	cmp	r3, #16
 800bdcc:	d103      	bne.n	800bdd6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2210      	movs	r2, #16
 800bdd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7fe faa0 	bl	800a324 <HAL_UARTEx_RxEventCallback>
 800bde4:	e002      	b.n	800bdec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f9de 	bl	800c1a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800bdf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdf8:	f003 0320 	and.w	r3, r3, #32
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f47f aecd 	bne.w	800bb9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be08:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800be10:	2b00      	cmp	r3, #0
 800be12:	d049      	beq.n	800bea8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be1a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800be1e:	429a      	cmp	r2, r3
 800be20:	d242      	bcs.n	800bea8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3308      	adds	r3, #8
 800be28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	e853 3f00 	ldrex	r3, [r3]
 800be30:	623b      	str	r3, [r7, #32]
   return(result);
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3308      	adds	r3, #8
 800be42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800be46:	633a      	str	r2, [r7, #48]	; 0x30
 800be48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4e:	e841 2300 	strex	r3, r2, [r1]
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1e3      	bne.n	800be22 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a16      	ldr	r2, [pc, #88]	; (800beb8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800be5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	e853 3f00 	ldrex	r3, [r3]
 800be6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f043 0320 	orr.w	r3, r3, #32
 800be74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be82:	61fb      	str	r3, [r7, #28]
 800be84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	69b9      	ldr	r1, [r7, #24]
 800be88:	69fa      	ldr	r2, [r7, #28]
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	617b      	str	r3, [r7, #20]
   return(result);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e4      	bne.n	800be60 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be96:	e007      	b.n	800bea8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	699a      	ldr	r2, [r3, #24]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f042 0208 	orr.w	r2, r2, #8
 800bea6:	619a      	str	r2, [r3, #24]
}
 800bea8:	bf00      	nop
 800beaa:	37b8      	adds	r7, #184	; 0xb8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	effffffe 	.word	0xeffffffe
 800beb4:	58000c00 	.word	0x58000c00
 800beb8:	0800b63d 	.word	0x0800b63d

0800bebc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800beca:	2b01      	cmp	r3, #1
 800becc:	d101      	bne.n	800bed2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bece:	2302      	movs	r3, #2
 800bed0:	e027      	b.n	800bf22 <HAL_UARTEx_DisableFifoMode+0x66>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2224      	movs	r2, #36	; 0x24
 800bede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0201 	bic.w	r2, r2, #1
 800bef8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e02d      	b.n	800bfa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2224      	movs	r2, #36	; 0x24
 800bf52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0201 	bic.w	r2, r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f850 	bl	800c028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d101      	bne.n	800bfc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	e02d      	b.n	800c01e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2224      	movs	r2, #36	; 0x24
 800bfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 0201 	bic.w	r2, r2, #1
 800bfe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f812 	bl	800c028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2220      	movs	r2, #32
 800c010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c034:	2b00      	cmp	r3, #0
 800c036:	d108      	bne.n	800c04a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c048:	e031      	b.n	800c0ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c04a:	2310      	movs	r3, #16
 800c04c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c04e:	2310      	movs	r3, #16
 800c050:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	0e5b      	lsrs	r3, r3, #25
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0307 	and.w	r3, r3, #7
 800c060:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	0f5b      	lsrs	r3, r3, #29
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	7b3a      	ldrb	r2, [r7, #12]
 800c076:	4911      	ldr	r1, [pc, #68]	; (800c0bc <UARTEx_SetNbDataToProcess+0x94>)
 800c078:	5c8a      	ldrb	r2, [r1, r2]
 800c07a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c07e:	7b3a      	ldrb	r2, [r7, #12]
 800c080:	490f      	ldr	r1, [pc, #60]	; (800c0c0 <UARTEx_SetNbDataToProcess+0x98>)
 800c082:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c084:	fb93 f3f2 	sdiv	r3, r3, r2
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	7b7a      	ldrb	r2, [r7, #13]
 800c094:	4909      	ldr	r1, [pc, #36]	; (800c0bc <UARTEx_SetNbDataToProcess+0x94>)
 800c096:	5c8a      	ldrb	r2, [r1, r2]
 800c098:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c09c:	7b7a      	ldrb	r2, [r7, #13]
 800c09e:	4908      	ldr	r1, [pc, #32]	; (800c0c0 <UARTEx_SetNbDataToProcess+0x98>)
 800c0a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	0800db2c 	.word	0x0800db2c
 800c0c0:	0800db34 	.word	0x0800db34

0800c0c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c0c8:	4b22      	ldr	r3, [pc, #136]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0ca:	4a23      	ldr	r2, [pc, #140]	; (800c158 <MX_USART3_UART_Init+0x94>)
 800c0cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800c0ce:	4b21      	ldr	r3, [pc, #132]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c0d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c0d6:	4b1f      	ldr	r3, [pc, #124]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c0e8:	4b1a      	ldr	r3, [pc, #104]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0ea:	220c      	movs	r2, #12
 800c0ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c0ee:	4b19      	ldr	r3, [pc, #100]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c0f4:	4b17      	ldr	r3, [pc, #92]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c100:	4b14      	ldr	r3, [pc, #80]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c102:	2200      	movs	r2, #0
 800c104:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c106:	4b13      	ldr	r3, [pc, #76]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c108:	2200      	movs	r2, #0
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c10c:	4811      	ldr	r0, [pc, #68]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c10e:	f7fd ffdf 	bl	800a0d0 <HAL_UART_Init>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800c118:	f000 fc5a 	bl	800c9d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c11c:	2100      	movs	r1, #0
 800c11e:	480d      	ldr	r0, [pc, #52]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c120:	f7ff ff05 	bl	800bf2e <HAL_UARTEx_SetTxFifoThreshold>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800c12a:	f000 fc51 	bl	800c9d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c12e:	2100      	movs	r1, #0
 800c130:	4808      	ldr	r0, [pc, #32]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c132:	f7ff ff3a 	bl	800bfaa <HAL_UARTEx_SetRxFifoThreshold>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800c13c:	f000 fc48 	bl	800c9d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800c140:	4804      	ldr	r0, [pc, #16]	; (800c154 <MX_USART3_UART_Init+0x90>)
 800c142:	f7ff febb 	bl	800bebc <HAL_UARTEx_DisableFifoMode>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800c14c:	f000 fc40 	bl	800c9d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c150:	bf00      	nop
 800c152:	bd80      	pop	{r7, pc}
 800c154:	2400026c 	.word	0x2400026c
 800c158:	40004800 	.word	0x40004800

0800c15c <myprintf>:

void myprintf(const char *fmt, ...) {
 800c15c:	b40f      	push	{r0, r1, r2, r3}
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	2164      	movs	r1, #100	; 0x64
 800c170:	480b      	ldr	r0, [pc, #44]	; (800c1a0 <myprintf+0x44>)
 800c172:	f000 fff1 	bl	800d158 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800c176:	480a      	ldr	r0, [pc, #40]	; (800c1a0 <myprintf+0x44>)
 800c178:	f7f4 f8b2 	bl	80002e0 <strlen>
 800c17c:	4603      	mov	r3, r0
 800c17e:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	b29a      	uxth	r2, r3
 800c184:	f04f 33ff 	mov.w	r3, #4294967295
 800c188:	4905      	ldr	r1, [pc, #20]	; (800c1a0 <myprintf+0x44>)
 800c18a:	4806      	ldr	r0, [pc, #24]	; (800c1a4 <myprintf+0x48>)
 800c18c:	f7fd fff0 	bl	800a170 <HAL_UART_Transmit>

}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c19a:	b004      	add	sp, #16
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	24000320 	.word	0x24000320
 800c1a4:	2400026c 	.word	0x2400026c

0800c1a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a0e      	ldr	r2, [pc, #56]	; (800c1ec <HAL_UART_RxCpltCallback+0x44>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d110      	bne.n	800c1da <HAL_UART_RxCpltCallback+0x32>
	{
		if(uart3_raw[0] == 'a')
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <HAL_UART_RxCpltCallback+0x48>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b61      	cmp	r3, #97	; 0x61
 800c1be:	d102      	bne.n	800c1c6 <HAL_UART_RxCpltCallback+0x1e>
		{
			rx_flagA = 1;
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <HAL_UART_RxCpltCallback+0x4c>)
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		if(uart3_raw[0] == 'b')
 800c1c6:	4b0a      	ldr	r3, [pc, #40]	; (800c1f0 <HAL_UART_RxCpltCallback+0x48>)
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	2b62      	cmp	r3, #98	; 0x62
 800c1cc:	d102      	bne.n	800c1d4 <HAL_UART_RxCpltCallback+0x2c>
		{
			rx_flagB = 1;
 800c1ce:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <HAL_UART_RxCpltCallback+0x50>)
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		rx_flagG = 1;
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <HAL_UART_RxCpltCallback+0x54>)
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 800c1da:	2201      	movs	r2, #1
 800c1dc:	4904      	ldr	r1, [pc, #16]	; (800c1f0 <HAL_UART_RxCpltCallback+0x48>)
 800c1de:	4803      	ldr	r0, [pc, #12]	; (800c1ec <HAL_UART_RxCpltCallback+0x44>)
 800c1e0:	f7fe f854 	bl	800a28c <HAL_UART_Receive_IT>
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	2400026c 	.word	0x2400026c
 800c1f0:	24000300 	.word	0x24000300
 800c1f4:	2400030c 	.word	0x2400030c
 800c1f8:	24000310 	.word	0x24000310
 800c1fc:	24000314 	.word	0x24000314

0800c200 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	int loop_A = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_Delay(1000);
 800c20c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c210:	f7f4 fc40 	bl	8000a94 <HAL_Delay>
		loop_A++;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	60fb      	str	r3, [r7, #12]

		if(loop_A > 10)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b0a      	cmp	r3, #10
 800c21e:	dc00      	bgt.n	800c222 <HAL_UART_ErrorCallback+0x22>
		HAL_Delay(1000);
 800c220:	e7f4      	b.n	800c20c <HAL_UART_ErrorCallback+0xc>
		{
			break;
 800c222:	bf00      	nop
		}
	}
}
 800c224:	bf00      	nop
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes */
  MPU_Config();
 800c232:	f000 fbd7 	bl	800c9e4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800c236:	f000 fbfb 	bl	800ca30 <CPU_CACHE_Enable>

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800c23a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c23e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800c240:	bf00      	nop
 800c242:	4b42      	ldr	r3, [pc, #264]	; (800c34c <main+0x120>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <main+0x2c>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dcf4      	bgt.n	800c242 <main+0x16>
  if ( timeout < 0 )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da01      	bge.n	800c262 <main+0x36>
  {
    Error_Handler();
 800c25e:	f000 fbb7 	bl	800c9d0 <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800c262:	f7f4 fb7d 	bl	8000960 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800c266:	f000 f893 	bl	800c390 <SystemClock_Config>

  /*## Configure peripherals #################################################*/

  /* Initialize LEDs on board */
  BSP_LED_Init(LED3);
 800c26a:	2002      	movs	r0, #2
 800c26c:	f7f4 fa0e 	bl	800068c <BSP_LED_Init>
  BSP_LED_Init(LED1);
 800c270:	2000      	movs	r0, #0
 800c272:	f7f4 fa0b 	bl	800068c <BSP_LED_Init>

  BSP_LED_On(LED1);
 800c276:	2000      	movs	r0, #0
 800c278:	f7f4 fa7e 	bl	8000778 <BSP_LED_On>


  /* Configure the ADCx and ADCy peripherals */
  ADC_Config();
 800c27c:	f000 f906 	bl	800c48c <ADC_Config>

#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Configure the TIM peripheral */
  TIM_Config();
 800c280:	f000 f9cc 	bl	800c61c <TIM_Config>
#endif

  /*## Enable peripherals ####################################################*/
#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Timer enable */
  if (HAL_TIM_Base_Start(&TimHandle) != HAL_OK)
 800c284:	4832      	ldr	r0, [pc, #200]	; (800c350 <main+0x124>)
 800c286:	f7fd fd8b 	bl	8009da0 <HAL_TIM_Base_Start>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <main+0x68>
  {
    /* Counter Enable Error */
    Error_Handler();
 800c290:	f000 fb9e 	bl	800c9d0 <Error_Handler>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

#if defined(WAVEFORM_VOLTAGE_GENERATION_FOR_TEST)
  /* Generate a periodic signal on a spare DAC channel */
  WaveformVoltageGenerationForTest();
 800c294:	f000 fa26 	bl	800c6e4 <WaveformVoltageGenerationForTest>


  /*## Start ADC conversions #################################################*/

  /* Start ADCx and ADCy multimode conversion on regular group with transfer by DMA */
  if (HAL_ADCEx_MultiModeStart_DMA(&AdcHandle_master,
 800c298:	2204      	movs	r2, #4
 800c29a:	492e      	ldr	r1, [pc, #184]	; (800c354 <main+0x128>)
 800c29c:	482e      	ldr	r0, [pc, #184]	; (800c358 <main+0x12c>)
 800c29e:	f7f6 fb29 	bl	80028f4 <HAL_ADCEx_MultiModeStart_DMA>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <main+0x80>
                                   (uint32_t *)aADCDualConvertedValues,
                                    ADCCONVERTEDVALUES_BUFFER_SIZE
                                  ) != HAL_OK)
  {
    /* Start Error */
    Error_Handler();
 800c2a8:	f000 fb92 	bl	800c9d0 <Error_Handler>
  }

  MX_USART3_UART_Init();
 800c2ac:	f7ff ff0a 	bl	800c0c4 <MX_USART3_UART_Init>

  HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	492a      	ldr	r1, [pc, #168]	; (800c35c <main+0x130>)
 800c2b4:	482a      	ldr	r0, [pc, #168]	; (800c360 <main+0x134>)
 800c2b6:	f7fd ffe9 	bl	800a28c <HAL_UART_Receive_IT>

  myprintf("Starting ... \r\n");
 800c2ba:	482a      	ldr	r0, [pc, #168]	; (800c364 <main+0x138>)
 800c2bc:	f7ff ff4e 	bl	800c15c <myprintf>
  HAL_Delay(500);
 800c2c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c2c4:	f7f4 fbe6 	bl	8000a94 <HAL_Delay>
  myprintf("After Delay ... \r\n");
 800c2c8:	4827      	ldr	r0, [pc, #156]	; (800c368 <main+0x13c>)
 800c2ca:	f7ff ff47 	bl	800c15c <myprintf>

  /* Array "aADCDualConvertedValues" contains both ADC results on 32 bits:    */
  /*  - ADC master results in the 16 LSB [15:0]                               */
  /*  - ADC slave results in the 16 MSB [31:16]                               */

  aShot  = HAL_GetTick();
 800c2ce:	f7f4 fbd5 	bl	8000a7c <HAL_GetTick>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	4b25      	ldr	r3, [pc, #148]	; (800c36c <main+0x140>)
 800c2d8:	601a      	str	r2, [r3, #0]
    /*  - Turn-off if ADC conversions buffer is not complete */
    /*  - Turn-on if ADC conversions buffer is complete */

    /* ADC conversion buffer complete variable is updated into ADC conversions*/
    /* complete callback.                                                     */
    if (ubADCDualConversionComplete == RESET)
 800c2da:	4b25      	ldr	r3, [pc, #148]	; (800c370 <main+0x144>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d103      	bne.n	800c2ea <main+0xbe>
    {
      BSP_LED_Off(LED1);
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f7f4 fa72 	bl	80007cc <BSP_LED_Off>
 800c2e8:	e002      	b.n	800c2f0 <main+0xc4>
    }
    else
    {
      BSP_LED_On(LED1);
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	f7f4 fa44 	bl	8000778 <BSP_LED_On>
    }

    if(HAL_GetTick() > (aShot + 1000))
 800c2f0:	f7f4 fbc4 	bl	8000a7c <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	4b1d      	ldr	r3, [pc, #116]	; (800c36c <main+0x140>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d9eb      	bls.n	800c2da <main+0xae>
    {
    	aShot  = HAL_GetTick();
 800c302:	f7f4 fbbb 	bl	8000a7c <HAL_GetTick>
 800c306:	4603      	mov	r3, r0
 800c308:	461a      	mov	r2, r3
 800c30a:	4b18      	ldr	r3, [pc, #96]	; (800c36c <main+0x140>)
 800c30c:	601a      	str	r2, [r3, #0]

    	myprintf("ADC[1] = %d  ADC[2] = %d \r\n", aADCxConvertedValues[0], aADCyConvertedValues[0]);
 800c30e:	4b19      	ldr	r3, [pc, #100]	; (800c374 <main+0x148>)
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	b29b      	uxth	r3, r3
 800c314:	4619      	mov	r1, r3
 800c316:	4b18      	ldr	r3, [pc, #96]	; (800c378 <main+0x14c>)
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	461a      	mov	r2, r3
 800c31e:	4817      	ldr	r0, [pc, #92]	; (800c37c <main+0x150>)
 800c320:	f7ff ff1c 	bl	800c15c <myprintf>
    	myprintf("Rate : %d\r\n", convrate);
 800c324:	4b16      	ldr	r3, [pc, #88]	; (800c380 <main+0x154>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4619      	mov	r1, r3
 800c32a:	4816      	ldr	r0, [pc, #88]	; (800c384 <main+0x158>)
 800c32c:	f7ff ff16 	bl	800c15c <myprintf>
    	convrate = 0;
 800c330:	4b13      	ldr	r3, [pc, #76]	; (800c380 <main+0x154>)
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]

    	if(rx_flagA == 1)
 800c336:	4b14      	ldr	r3, [pc, #80]	; (800c388 <main+0x15c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d1cd      	bne.n	800c2da <main+0xae>
    	{
    		myprintf("rx_flagA Received\r\n");
 800c33e:	4813      	ldr	r0, [pc, #76]	; (800c38c <main+0x160>)
 800c340:	f7ff ff0c 	bl	800c15c <myprintf>
    		rx_flagA = 0;
 800c344:	4b10      	ldr	r3, [pc, #64]	; (800c388 <main+0x15c>)
 800c346:	2200      	movs	r2, #0
 800c348:	601a      	str	r2, [r3, #0]
    if (ubADCDualConversionComplete == RESET)
 800c34a:	e7c6      	b.n	800c2da <main+0xae>
 800c34c:	58024400 	.word	0x58024400
 800c350:	24000168 	.word	0x24000168
 800c354:	24000220 	.word	0x24000220
 800c358:	240000a0 	.word	0x240000a0
 800c35c:	24000300 	.word	0x24000300
 800c360:	2400026c 	.word	0x2400026c
 800c364:	0800da94 	.word	0x0800da94
 800c368:	0800daa4 	.word	0x0800daa4
 800c36c:	24000318 	.word	0x24000318
 800c370:	24000268 	.word	0x24000268
 800c374:	24000240 	.word	0x24000240
 800c378:	24000260 	.word	0x24000260
 800c37c:	0800dab8 	.word	0x0800dab8
 800c380:	2400031c 	.word	0x2400031c
 800c384:	0800dad4 	.word	0x0800dad4
 800c388:	2400030c 	.word	0x2400030c
 800c38c:	0800dae0 	.word	0x0800dae0

0800c390 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b09e      	sub	sp, #120	; 0x78
 800c394:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c39c:	2004      	movs	r0, #4
 800c39e:	f7f9 ff27 	bl	80061f0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	607b      	str	r3, [r7, #4]
 800c3a6:	4b37      	ldr	r3, [pc, #220]	; (800c484 <SystemClock_Config+0xf4>)
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	4a36      	ldr	r2, [pc, #216]	; (800c484 <SystemClock_Config+0xf4>)
 800c3ac:	f023 0301 	bic.w	r3, r3, #1
 800c3b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3b2:	4b34      	ldr	r3, [pc, #208]	; (800c484 <SystemClock_Config+0xf4>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	607b      	str	r3, [r7, #4]
 800c3bc:	4b32      	ldr	r3, [pc, #200]	; (800c488 <SystemClock_Config+0xf8>)
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	4a31      	ldr	r2, [pc, #196]	; (800c488 <SystemClock_Config+0xf8>)
 800c3c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3c6:	6193      	str	r3, [r2, #24]
 800c3c8:	4b2f      	ldr	r3, [pc, #188]	; (800c488 <SystemClock_Config+0xf8>)
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c3d4:	bf00      	nop
 800c3d6:	4b2c      	ldr	r3, [pc, #176]	; (800c488 <SystemClock_Config+0xf8>)
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e2:	d1f8      	bne.n	800c3d6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c3e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c3ec:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 800c3fe:	2304      	movs	r3, #4
 800c400:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800c402:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c406:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c40c:	2302      	movs	r3, #2
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c410:	2302      	movs	r3, #2
 800c412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c414:	2304      	movs	r3, #4
 800c416:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c418:	2300      	movs	r3, #0
 800c41a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800c41c:	2304      	movs	r3, #4
 800c41e:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c420:	f107 0308 	add.w	r3, r7, #8
 800c424:	4618      	mov	r0, r3
 800c426:	f7f9 ff3d 	bl	80062a4 <HAL_RCC_OscConfig>
 800c42a:	4603      	mov	r3, r0
 800c42c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800c430:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <SystemClock_Config+0xac>
  {
    Error_Handler();
 800c438:	f000 faca 	bl	800c9d0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c43c:	233f      	movs	r3, #63	; 0x3f
 800c43e:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c440:	2303      	movs	r3, #3
 800c442:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c444:	2300      	movs	r3, #0
 800c446:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c448:	2308      	movs	r3, #8
 800c44a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c44c:	2340      	movs	r3, #64	; 0x40
 800c44e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c450:	2340      	movs	r3, #64	; 0x40
 800c452:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c458:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c45a:	2340      	movs	r3, #64	; 0x40
 800c45c:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c45e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c462:	2104      	movs	r1, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f7fa fb77 	bl	8006b58 <HAL_RCC_ClockConfig>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800c470:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <SystemClock_Config+0xec>
  {
    Error_Handler();
 800c478:	f000 faaa 	bl	800c9d0 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800c47c:	bf00      	nop
 800c47e:	3778      	adds	r7, #120	; 0x78
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	58000400 	.word	0x58000400
 800c488:	58024800 	.word	0x58024800

0800c48c <ADC_Config>:
  * @brief  ADC configuration
  * @param  None
  * @retval None
  */
static void ADC_Config(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08a      	sub	sp, #40	; 0x28
 800c490:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef   sConfig;
  ADC_MultiModeTypeDef     MultiModeInit;

  /* Configuration of ADC (master) init structure: ADC parameters and regular group */
  AdcHandle_master.Instance = ADCx;
 800c492:	4b5c      	ldr	r3, [pc, #368]	; (800c604 <ADC_Config+0x178>)
 800c494:	4a5c      	ldr	r2, [pc, #368]	; (800c608 <ADC_Config+0x17c>)
 800c496:	601a      	str	r2, [r3, #0]

  if (HAL_ADC_DeInit(&AdcHandle_master) != HAL_OK)
 800c498:	485a      	ldr	r0, [pc, #360]	; (800c604 <ADC_Config+0x178>)
 800c49a:	f7f4 feff 	bl	800129c <HAL_ADC_DeInit>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d001      	beq.n	800c4a8 <ADC_Config+0x1c>
  {
    /* ADC initialization error */
    Error_Handler();
 800c4a4:	f000 fa94 	bl	800c9d0 <Error_Handler>
  }
  AdcHandle_slave.Instance = ADCy;
 800c4a8:	4b58      	ldr	r3, [pc, #352]	; (800c60c <ADC_Config+0x180>)
 800c4aa:	4a59      	ldr	r2, [pc, #356]	; (800c610 <ADC_Config+0x184>)
 800c4ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_DeInit(&AdcHandle_slave) != HAL_OK)
 800c4ae:	4857      	ldr	r0, [pc, #348]	; (800c60c <ADC_Config+0x180>)
 800c4b0:	f7f4 fef4 	bl	800129c <HAL_ADC_DeInit>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <ADC_Config+0x32>
  {
    /* ADC initialization error */
    Error_Handler();
 800c4ba:	f000 fa89 	bl	800c9d0 <Error_Handler>
}

  AdcHandle_master.Init.ClockPrescaler           = ADC_CLOCK_ASYNC_DIV2;            /* Asynchronous clock mode, input ADC clock divided by 2*/
 800c4be:	4b51      	ldr	r3, [pc, #324]	; (800c604 <ADC_Config+0x178>)
 800c4c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c4c4:	605a      	str	r2, [r3, #4]
  AdcHandle_master.Init.Resolution               = ADC_RESOLUTION_16B;              /* 16-bit resolution for converted data */
 800c4c6:	4b4f      	ldr	r3, [pc, #316]	; (800c604 <ADC_Config+0x178>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	609a      	str	r2, [r3, #8]
  AdcHandle_master.Init.ScanConvMode             = DISABLE;                         /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 800c4cc:	4b4d      	ldr	r3, [pc, #308]	; (800c604 <ADC_Config+0x178>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	60da      	str	r2, [r3, #12]
  AdcHandle_master.Init.EOCSelection             = ADC_EOC_SINGLE_CONV;             /* EOC flag picked-up to indicate conversion end */
 800c4d2:	4b4c      	ldr	r3, [pc, #304]	; (800c604 <ADC_Config+0x178>)
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	611a      	str	r2, [r3, #16]
  AdcHandle_master.Init.LowPowerAutoWait         = DISABLE;                         /* Auto-delayed conversion feature disabled */
 800c4d8:	4b4a      	ldr	r3, [pc, #296]	; (800c604 <ADC_Config+0x178>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	751a      	strb	r2, [r3, #20]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ContinuousConvMode       = DISABLE;                         /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 800c4de:	4b49      	ldr	r3, [pc, #292]	; (800c604 <ADC_Config+0x178>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	755a      	strb	r2, [r3, #21]
#else
  AdcHandle_master.Init.ContinuousConvMode       = ENABLE;                          /* Continuous mode to have maximum conversion speed (no delay between conversions) */
#endif
  AdcHandle_master.Init.NbrOfConversion          = 1;                               /* Parameter discarded because sequencer is disabled */
 800c4e4:	4b47      	ldr	r3, [pc, #284]	; (800c604 <ADC_Config+0x178>)
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	619a      	str	r2, [r3, #24]
  AdcHandle_master.Init.DiscontinuousConvMode    = DISABLE;                         /* Parameter discarded because sequencer is disabled */
 800c4ea:	4b46      	ldr	r3, [pc, #280]	; (800c604 <ADC_Config+0x178>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	771a      	strb	r2, [r3, #28]
  AdcHandle_master.Init.NbrOfDiscConversion      = 1;                               /* Parameter discarded because sequencer is disabled */
 800c4f0:	4b44      	ldr	r3, [pc, #272]	; (800c604 <ADC_Config+0x178>)
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	621a      	str	r2, [r3, #32]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ExternalTrigConv         = ADC_EXTERNALTRIG_T3_TRGO;        /* Timer 3 external event triggering the conversion */
 800c4f6:	4b43      	ldr	r3, [pc, #268]	; (800c604 <ADC_Config+0x178>)
 800c4f8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800c4fc:	625a      	str	r2, [r3, #36]	; 0x24
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800c4fe:	4b41      	ldr	r3, [pc, #260]	; (800c604 <ADC_Config+0x178>)
 800c500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c504:	629a      	str	r2, [r3, #40]	; 0x28
#else
  AdcHandle_master.Init.ExternalTrigConv         = ADC_SOFTWARE_START;              /* Software start to trigger the 1st conversion manually, without external event */
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_NONE;   /* Parameter discarded because trigger of conversion by software start (no external event) */
#endif
  AdcHandle_master.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR; /* DMA circular mode selected */
 800c506:	4b3f      	ldr	r3, [pc, #252]	; (800c604 <ADC_Config+0x178>)
 800c508:	2203      	movs	r2, #3
 800c50a:	62da      	str	r2, [r3, #44]	; 0x2c
  AdcHandle_master.Init.Overrun                  = ADC_OVR_DATA_OVERWRITTEN;        /* DR register is overwritten with the last conversion result in case of overrun */
 800c50c:	4b3d      	ldr	r3, [pc, #244]	; (800c604 <ADC_Config+0x178>)
 800c50e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c512:	631a      	str	r2, [r3, #48]	; 0x30
  AdcHandle_master.Init.OversamplingMode         = DISABLE;                         /* No oversampling */
 800c514:	4b3b      	ldr	r3, [pc, #236]	; (800c604 <ADC_Config+0x178>)
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (HAL_ADC_Init(&AdcHandle_master) != HAL_OK)
 800c51c:	4839      	ldr	r0, [pc, #228]	; (800c604 <ADC_Config+0x178>)
 800c51e:	f7f4 fd1b 	bl	8000f58 <HAL_ADC_Init>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <ADC_Config+0xa0>
  {
    /* ADC initialization error */
    Error_Handler();
 800c528:	f000 fa52 	bl	800c9d0 <Error_Handler>
  }

  /* Configuration of ADC (slave) init structure: ADC parameters and regular group */
  AdcHandle_slave.Instance = ADCy;
 800c52c:	4b37      	ldr	r3, [pc, #220]	; (800c60c <ADC_Config+0x180>)
 800c52e:	4a38      	ldr	r2, [pc, #224]	; (800c610 <ADC_Config+0x184>)
 800c530:	601a      	str	r2, [r3, #0]

  /* Same configuration as ADC master, with continuous mode and external      */
  /* trigger disabled since ADC master is triggering the ADC slave            */
  /* conversions                                                              */
  AdcHandle_slave.Init = AdcHandle_master.Init;
 800c532:	4b36      	ldr	r3, [pc, #216]	; (800c60c <ADC_Config+0x180>)
 800c534:	4a33      	ldr	r2, [pc, #204]	; (800c604 <ADC_Config+0x178>)
 800c536:	3304      	adds	r3, #4
 800c538:	1d11      	adds	r1, r2, #4
 800c53a:	2248      	movs	r2, #72	; 0x48
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 fe4d 	bl	800d1dc <memcpy>
  AdcHandle_slave.Init.ContinuousConvMode    = DISABLE;
 800c542:	4b32      	ldr	r3, [pc, #200]	; (800c60c <ADC_Config+0x180>)
 800c544:	2200      	movs	r2, #0
 800c546:	755a      	strb	r2, [r3, #21]
  AdcHandle_slave.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 800c548:	4b30      	ldr	r3, [pc, #192]	; (800c60c <ADC_Config+0x180>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_ADC_Init(&AdcHandle_slave) != HAL_OK)
 800c54e:	482f      	ldr	r0, [pc, #188]	; (800c60c <ADC_Config+0x180>)
 800c550:	f7f4 fd02 	bl	8000f58 <HAL_ADC_Init>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <ADC_Config+0xd2>
  {
    /* ADC initialization error */
    Error_Handler();
 800c55a:	f000 fa39 	bl	800c9d0 <Error_Handler>
  /* Configuration of channel on ADC (master) regular group on sequencer rank 1 */
  /* Note: Considering IT occurring after each number of                      */
  /*       "ADCCONVERTEDVALUES_BUFFER_SIZE" ADC conversions (IT by DMA end    */
  /*       of transfer), select sampling time and ADC clock with sufficient   */
  /*       duration to not create an overhead situation in IRQHandler.        */
  sConfig.Channel      = ADCx_CHANNELa;                /* Sampled channel number */
 800c55e:	4b2d      	ldr	r3, [pc, #180]	; (800c614 <ADC_Config+0x188>)
 800c560:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;          /* Rank of sampled channel number ADCx_CHANNEL */
 800c562:	2306      	movs	r3, #6
 800c564:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;    /* Minimum sampling time */
 800c566:	2301      	movs	r3, #1
 800c568:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;            /* Single-ended input channel */
 800c56a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800c56e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;             /* No offset subtraction */
 800c570:	2304      	movs	r3, #4
 800c572:	61fb      	str	r3, [r7, #28]
  sConfig.Offset = 0;                                 /* Parameter discarded because offset correction is disabled */
 800c574:	2300      	movs	r3, #0
 800c576:	623b      	str	r3, [r7, #32]

  if (HAL_ADC_ConfigChannel(&AdcHandle_master, &sConfig) != HAL_OK)
 800c578:	f107 030c 	add.w	r3, r7, #12
 800c57c:	4619      	mov	r1, r3
 800c57e:	4821      	ldr	r0, [pc, #132]	; (800c604 <ADC_Config+0x178>)
 800c580:	f7f5 fa50 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <ADC_Config+0x102>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800c58a:	f000 fa21 	bl	800c9d0 <Error_Handler>
  }

  /* Configuration of channel on ADC (slave) regular group on sequencer rank 1 */
  /* Same channel as ADCx for dual mode interleaved: both ADC are converting   */
  /* the same channel.                                                         */
  sConfig.Channel = ADCy_CHANNELa;
 800c58e:	4b22      	ldr	r3, [pc, #136]	; (800c618 <ADC_Config+0x18c>)
 800c590:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&AdcHandle_slave, &sConfig) != HAL_OK)
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4619      	mov	r1, r3
 800c598:	481c      	ldr	r0, [pc, #112]	; (800c60c <ADC_Config+0x180>)
 800c59a:	f7f5 fa43 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <ADC_Config+0x11c>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800c5a4:	f000 fa14 	bl	800c9d0 <Error_Handler>
  }

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle_master, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800c5a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c5ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c5b0:	4814      	ldr	r0, [pc, #80]	; (800c604 <ADC_Config+0x178>)
 800c5b2:	f7f6 f93b 	bl	800282c <HAL_ADCEx_Calibration_Start>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <ADC_Config+0x134>
  {
    /* Calibration Error */
    Error_Handler();
 800c5bc:	f000 fa08 	bl	800c9d0 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&AdcHandle_slave, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800c5c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c5c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c5c8:	4810      	ldr	r0, [pc, #64]	; (800c60c <ADC_Config+0x180>)
 800c5ca:	f7f6 f92f 	bl	800282c <HAL_ADCEx_Calibration_Start>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <ADC_Config+0x14c>
  {
    /* Calibration Error */
    Error_Handler();
 800c5d4:	f000 f9fc 	bl	800c9d0 <Error_Handler>
  }

  /* Configuration of multimode */
  /* Multimode parameters settings and set ADCy (slave) under control of      */
  /* ADCx (master).                                                           */
  MultiModeInit.Mode = ADC_DUALMODE_INTERL;
 800c5d8:	2307      	movs	r3, #7
 800c5da:	603b      	str	r3, [r7, #0]
  MultiModeInit.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;  /* ADC and DMA configured in resolution 32 bits to match with both ADC master and slave resolution */
 800c5dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5e0:	607b      	str	r3, [r7, #4]
  MultiModeInit.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60bb      	str	r3, [r7, #8]

  if (HAL_ADCEx_MultiModeConfigChannel(&AdcHandle_master, &MultiModeInit) != HAL_OK)
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4806      	ldr	r0, [pc, #24]	; (800c604 <ADC_Config+0x178>)
 800c5ec:	f7f6 fa64 	bl	8002ab8 <HAL_ADCEx_MultiModeConfigChannel>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <ADC_Config+0x16e>
  {
    /* Multimode Configuration Error */
    Error_Handler();
 800c5f6:	f000 f9eb 	bl	800c9d0 <Error_Handler>
  }

}
 800c5fa:	bf00      	nop
 800c5fc:	3728      	adds	r7, #40	; 0x28
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	240000a0 	.word	0x240000a0
 800c608:	40022000 	.word	0x40022000
 800c60c:	24000104 	.word	0x24000104
 800c610:	40022100 	.word	0x40022100
 800c614:	0c900008 	.word	0x0c900008
 800c618:	1d500080 	.word	0x1d500080

0800c61c <TIM_Config>:
  * @brief  TIM configuration
  * @param  None
  * @retval None
  */
static void TIM_Config(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08e      	sub	sp, #56	; 0x38
 800c620:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800c622:	1d3b      	adds	r3, r7, #4
 800c624:	2220      	movs	r2, #32
 800c626:	2100      	movs	r1, #0
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 fda3 	bl	800d174 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800c62e:	2300      	movs	r3, #0
 800c630:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800c632:	2300      	movs	r3, #0
 800c634:	633b      	str	r3, [r7, #48]	; 0x30
  /* - TIMER_FREQUENCY_RANGE_MIN: timer minimum frequency possible            */
  /*   (unit: Hz).                                                            */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800c636:	463a      	mov	r2, r7
 800c638:	1d3b      	adds	r3, r7, #4
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fa fe17 	bl	8007270 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d103      	bne.n	800c650 <TIM_Config+0x34>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800c648:	f7fa fde6 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800c64c:	6378      	str	r0, [r7, #52]	; 0x34
 800c64e:	e004      	b.n	800c65a <TIM_Config+0x3e>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800c650:	f7fa fde2 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800c654:	4603      	mov	r3, r0
 800c656:	005b      	lsls	r3, r3, #1
 800c658:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800c65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65c:	085b      	lsrs	r3, r3, #1
 800c65e:	4a1e      	ldr	r2, [pc, #120]	; (800c6d8 <TIM_Config+0xbc>)
 800c660:	fba2 2303 	umull	r2, r3, r2, r3
 800c664:	0b9b      	lsrs	r3, r3, #14
 800c666:	3301      	adds	r3, #1
 800c668:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set timer instance */
  TimHandle.Instance = TIMx;
 800c66a:	4b1c      	ldr	r3, [pc, #112]	; (800c6dc <TIM_Config+0xc0>)
 800c66c:	4a1c      	ldr	r2, [pc, #112]	; (800c6e0 <TIM_Config+0xc4>)
 800c66e:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  TimHandle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800c676:	fb02 f303 	mul.w	r3, r2, r3
 800c67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c680:	3b01      	subs	r3, #1
 800c682:	4a16      	ldr	r2, [pc, #88]	; (800c6dc <TIM_Config+0xc0>)
 800c684:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler         = 40; //(timer_prescaler - 1);
 800c686:	4b15      	ldr	r3, [pc, #84]	; (800c6dc <TIM_Config+0xc0>)
 800c688:	2228      	movs	r2, #40	; 0x28
 800c68a:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800c68c:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <TIM_Config+0xc0>)
 800c68e:	2200      	movs	r2, #0
 800c690:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800c692:	4b12      	ldr	r3, [pc, #72]	; (800c6dc <TIM_Config+0xc0>)
 800c694:	2200      	movs	r2, #0
 800c696:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0x0;
 800c698:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <TIM_Config+0xc0>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800c69e:	480f      	ldr	r0, [pc, #60]	; (800c6dc <TIM_Config+0xc0>)
 800c6a0:	f7fd fb26 	bl	8009cf0 <HAL_TIM_Base_Init>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <TIM_Config+0x92>
  {
    /* Timer initialization Error */
    Error_Handler();
 800c6aa:	f000 f991 	bl	800c9d0 <Error_Handler>
  }

  /* Timer TRGO selection */
  master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c6ae:	2320      	movs	r3, #32
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
  master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	62bb      	str	r3, [r7, #40]	; 0x28
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandle, &master_timer_config) != HAL_OK)
 800c6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4806      	ldr	r0, [pc, #24]	; (800c6dc <TIM_Config+0xc0>)
 800c6c2:	f7fd fc77 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <TIM_Config+0xb4>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800c6cc:	f000 f980 	bl	800c9d0 <Error_Handler>
  }

}
 800c6d0:	bf00      	nop
 800c6d2:	3738      	adds	r7, #56	; 0x38
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	80010003 	.word	0x80010003
 800c6dc:	24000168 	.word	0x24000168
 800c6e0:	40000400 	.word	0x40000400

0800c6e4 <WaveformVoltageGenerationForTest>:
  *         (this prevents the user from resorting to an external signal generator)
  * @param  None
  * @retval None
  */
static void WaveformVoltageGenerationForTest(void)
  {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b09a      	sub	sp, #104	; 0x68
 800c6e8:	af02      	add	r7, sp, #8
  DAC_ChannelConfTypeDef sConfig;
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fd3e 	bl	800d174 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	65bb      	str	r3, [r7, #88]	; 0x58
  /* - TIMER_FOR_WAVEFORM_TEST_FREQUENCY_RANGE_MIN: time base minimum         */
  /*   frequency possible (unit: Hz).                                         */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800c700:	1d3a      	adds	r2, r7, #4
 800c702:	f107 0308 	add.w	r3, r7, #8
 800c706:	4611      	mov	r1, r2
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fa fdb1 	bl	8007270 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d103      	bne.n	800c71c <WaveformVoltageGenerationForTest+0x38>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800c714:	f7fa fd80 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800c718:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c71a:	e004      	b.n	800c726 <WaveformVoltageGenerationForTest+0x42>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800c71c:	f7fa fd7c 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800c720:	4603      	mov	r3, r0
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_FOR_WAVEFORM_TEST_PRESCALER_MAX_VALUE * TIMER_FOR_WAVEFORM_TEST_FREQUENCY_RANGE_MIN)) +1;
 800c726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c728:	085b      	lsrs	r3, r3, #1
 800c72a:	4a3e      	ldr	r2, [pc, #248]	; (800c824 <WaveformVoltageGenerationForTest+0x140>)
 800c72c:	fba2 2303 	umull	r2, r3, r2, r3
 800c730:	0b9b      	lsrs	r3, r3, #14
 800c732:	3301      	adds	r3, #1
 800c734:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Set timer instance */
  TimForWaveformTestHandle.Instance = TIMy;
 800c736:	4b3c      	ldr	r3, [pc, #240]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c738:	4a3c      	ldr	r2, [pc, #240]	; (800c82c <WaveformVoltageGenerationForTest+0x148>)
 800c73a:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  TimForWaveformTestHandle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER_FOR_WAVEFORM_TEST_FREQUENCY)) - 1);
 800c73c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c73e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c742:	fb02 f303 	mul.w	r3, r2, r3
 800c746:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c748:	fbb2 f3f3 	udiv	r3, r2, r3
 800c74c:	3b01      	subs	r3, #1
 800c74e:	4a36      	ldr	r2, [pc, #216]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c750:	60d3      	str	r3, [r2, #12]
  TimForWaveformTestHandle.Init.Prescaler         = (timer_prescaler - 1);
 800c752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c754:	3b01      	subs	r3, #1
 800c756:	4a34      	ldr	r2, [pc, #208]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c758:	6053      	str	r3, [r2, #4]
  TimForWaveformTestHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800c75a:	4b33      	ldr	r3, [pc, #204]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	611a      	str	r2, [r3, #16]
  TimForWaveformTestHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800c760:	4b31      	ldr	r3, [pc, #196]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c762:	2200      	movs	r2, #0
 800c764:	609a      	str	r2, [r3, #8]
  TimForWaveformTestHandle.Init.RepetitionCounter = 0x0;
 800c766:	4b30      	ldr	r3, [pc, #192]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c768:	2200      	movs	r2, #0
 800c76a:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&TimForWaveformTestHandle) != HAL_OK)
 800c76c:	482e      	ldr	r0, [pc, #184]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c76e:	f7fd fabf 	bl	8009cf0 <HAL_TIM_Base_Init>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <WaveformVoltageGenerationForTest+0x98>
  {
    /* Timer initialization Error */
    Error_Handler();
 800c778:	f000 f92a 	bl	800c9d0 <Error_Handler>
  }

  /* Timer TRGO selection */
  master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c77c:	2320      	movs	r3, #32
 800c77e:	62bb      	str	r3, [r7, #40]	; 0x28
  master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c780:	2300      	movs	r3, #0
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c784:	2300      	movs	r3, #0
 800c786:	633b      	str	r3, [r7, #48]	; 0x30

  if (HAL_TIMEx_MasterConfigSynchronization(&TimForWaveformTestHandle, &master_timer_config) != HAL_OK)
 800c788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c78c:	4619      	mov	r1, r3
 800c78e:	4826      	ldr	r0, [pc, #152]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c790:	f7fd fc10 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <WaveformVoltageGenerationForTest+0xba>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800c79a:	f000 f919 	bl	800c9d0 <Error_Handler>
  }


  /* Configuration of DACx peripheral */
  DacForWaveformTestHandle.Instance = DACx;
 800c79e:	4b24      	ldr	r3, [pc, #144]	; (800c830 <WaveformVoltageGenerationForTest+0x14c>)
 800c7a0:	4a24      	ldr	r2, [pc, #144]	; (800c834 <WaveformVoltageGenerationForTest+0x150>)
 800c7a2:	601a      	str	r2, [r3, #0]

  /* DeInitialize the DAC peripheral */
  if (HAL_DAC_DeInit(&DacForWaveformTestHandle) != HAL_OK)
 800c7a4:	4822      	ldr	r0, [pc, #136]	; (800c830 <WaveformVoltageGenerationForTest+0x14c>)
 800c7a6:	f7f6 fc45 	bl	8003034 <HAL_DAC_DeInit>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <WaveformVoltageGenerationForTest+0xd0>
  {
    /* Initialization Error */
    Error_Handler();
 800c7b0:	f000 f90e 	bl	800c9d0 <Error_Handler>
  }
  /* Initialize the DAC peripheral */
  if (HAL_DAC_Init(&DacForWaveformTestHandle) != HAL_OK)
 800c7b4:	481e      	ldr	r0, [pc, #120]	; (800c830 <WaveformVoltageGenerationForTest+0x14c>)
 800c7b6:	f7f6 fc1b 	bl	8002ff0 <HAL_DAC_Init>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <WaveformVoltageGenerationForTest+0xe0>
  {
    /* Initialization Error */
    Error_Handler();
 800c7c0:	f000 f906 	bl	800c9d0 <Error_Handler>
}
  /* Configuration of DAC channel */
  sConfig.DAC_Trigger = DACx_TRIGGER_Tx_TRGO;
 800c7c4:	2316      	movs	r3, #22
 800c7c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_DAC_ConfigChannel(&DacForWaveformTestHandle, &sConfig, DACx_CHANNELa) != HAL_OK)
 800c7d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4813      	ldr	r0, [pc, #76]	; (800c830 <WaveformVoltageGenerationForTest+0x14c>)
 800c7e2:	f7f6 fd93 	bl	800330c <HAL_DAC_ConfigChannel>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <WaveformVoltageGenerationForTest+0x10c>
  {
    /* Channel configuration error */
    Error_Handler();
 800c7ec:	f000 f8f0 	bl	800c9d0 <Error_Handler>


  /*## Enable peripherals ####################################################*/

  /* Timer counter enable */
  if (HAL_TIM_Base_Start(&TimForWaveformTestHandle) != HAL_OK)
 800c7f0:	480d      	ldr	r0, [pc, #52]	; (800c828 <WaveformVoltageGenerationForTest+0x144>)
 800c7f2:	f7fd fad5 	bl	8009da0 <HAL_TIM_Base_Start>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <WaveformVoltageGenerationForTest+0x11c>
  {
    /* Counter Enable Error */
    Error_Handler();
 800c7fc:	f000 f8e8 	bl	800c9d0 <Error_Handler>
  }

  /* Enable DAC Channel1 and associated DMA */
  if (HAL_DAC_Start_DMA(&DacForWaveformTestHandle, DACx_CHANNELa, (uint32_t *)Waveform_8bits, WAVEFORM_TEST_SAMPLES_NUMBER, DAC_ALIGN_8B_R) != HAL_OK)
 800c800:	2308      	movs	r3, #8
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	2305      	movs	r3, #5
 800c806:	4a0c      	ldr	r2, [pc, #48]	; (800c838 <WaveformVoltageGenerationForTest+0x154>)
 800c808:	2100      	movs	r1, #0
 800c80a:	4809      	ldr	r0, [pc, #36]	; (800c830 <WaveformVoltageGenerationForTest+0x14c>)
 800c80c:	f7f6 fc30 	bl	8003070 <HAL_DAC_Start_DMA>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <WaveformVoltageGenerationForTest+0x136>
  {
    /* Start DMA Error */
    Error_Handler();
 800c816:	f000 f8db 	bl	800c9d0 <Error_Handler>
  }

}
 800c81a:	bf00      	nop
 800c81c:	3760      	adds	r7, #96	; 0x60
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	80010003 	.word	0x80010003
 800c828:	240001c8 	.word	0x240001c8
 800c82c:	40001000 	.word	0x40001000
 800c830:	240001b4 	.word	0x240001b4
 800c834:	40007400 	.word	0x40007400
 800c838:	0800db3c 	.word	0x0800db3c

0800c83c <HAL_ADC_ConvCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b089      	sub	sp, #36	; 0x24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	4b28      	ldr	r3, [pc, #160]	; (800c8e8 <HAL_ADC_ConvCpltCallback+0xac>)
 800c846:	61bb      	str	r3, [r7, #24]
 800c848:	2308      	movs	r3, #8
 800c84a:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd1d      	ble.n	800c88e <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	f003 021f 	and.w	r2, r3, #31
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	4413      	add	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c862:	f3bf 8f4f 	dsb	sy
}
 800c866:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c868:	4a20      	ldr	r2, [pc, #128]	; (800c8ec <HAL_ADC_ConvCpltCallback+0xb0>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	3320      	adds	r3, #32
 800c874:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	3b20      	subs	r3, #32
 800c87a:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	dcf2      	bgt.n	800c868 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 800c882:	f3bf 8f4f 	dsb	sy
}
 800c886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c888:	f3bf 8f6f 	isb	sy
}
 800c88c:	bf00      	nop
}
 800c88e:	bf00      	nop

   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[ADCCONVERTEDVALUES_BUFFER_SIZE/2], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if defined(ADC_TRIGGER_FROM_TIMER)
  uint32_t tmp_index = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]

  convrate++;
 800c894:	4b16      	ldr	r3, [pc, #88]	; (800c8f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3301      	adds	r3, #1
 800c89a:	4a15      	ldr	r2, [pc, #84]	; (800c8f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 800c89c:	6013      	str	r3, [r2, #0]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800c89e:	2302      	movs	r3, #2
 800c8a0:	61fb      	str	r3, [r7, #28]
 800c8a2:	e015      	b.n	800c8d0 <HAL_ADC_ConvCpltCallback+0x94>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800c8a4:	4a13      	ldr	r2, [pc, #76]	; (800c8f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ac:	b299      	uxth	r1, r3
 800c8ae:	4a12      	ldr	r2, [pc, #72]	; (800c8f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800c8b6:	4a0f      	ldr	r2, [pc, #60]	; (800c8f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8be:	0c1b      	lsrs	r3, r3, #16
 800c8c0:	b299      	uxth	r1, r3
 800c8c2:	4a0e      	ldr	r2, [pc, #56]	; (800c8fc <HAL_ADC_ConvCpltCallback+0xc0>)
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	61fb      	str	r3, [r7, #28]
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d9e6      	bls.n	800c8a4 <HAL_ADC_ConvCpltCallback+0x68>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  /* Set variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = SET;
 800c8d6:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <HAL_ADC_ConvCpltCallback+0xc4>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	701a      	strb	r2, [r3, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	3724      	adds	r7, #36	; 0x24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	24000228 	.word	0x24000228
 800c8ec:	e000ed00 	.word	0xe000ed00
 800c8f0:	2400031c 	.word	0x2400031c
 800c8f4:	24000220 	.word	0x24000220
 800c8f8:	24000240 	.word	0x24000240
 800c8fc:	24000260 	.word	0x24000260
 800c900:	24000268 	.word	0x24000268

0800c904 <HAL_ADC_ConvHalfCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c904:	b480      	push	{r7}
 800c906:	b089      	sub	sp, #36	; 0x24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	4b26      	ldr	r3, [pc, #152]	; (800c9a8 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800c90e:	61bb      	str	r3, [r7, #24]
 800c910:	2308      	movs	r3, #8
 800c912:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	2b00      	cmp	r3, #0
 800c918:	dd1d      	ble.n	800c956 <HAL_ADC_ConvHalfCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	f003 021f 	and.w	r2, r3, #31
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	4413      	add	r3, r2
 800c924:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c92a:	f3bf 8f4f 	dsb	sy
}
 800c92e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c930:	4a1e      	ldr	r2, [pc, #120]	; (800c9ac <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3320      	adds	r3, #32
 800c93c:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	3b20      	subs	r3, #32
 800c942:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	dcf2      	bgt.n	800c930 <HAL_ADC_ConvHalfCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 800c94a:	f3bf 8f4f 	dsb	sy
}
 800c94e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c950:	f3bf 8f6f 	isb	sy
}
 800c954:	bf00      	nop
}
 800c956:	bf00      	nop
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if(defined(ADC_TRIGGER_FROM_TIMER))
  uint32_t tmp_index = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	61fb      	str	r3, [r7, #28]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800c95c:	2300      	movs	r3, #0
 800c95e:	61fb      	str	r3, [r7, #28]
 800c960:	e015      	b.n	800c98e <HAL_ADC_ConvHalfCpltCallback+0x8a>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800c962:	4a11      	ldr	r2, [pc, #68]	; (800c9a8 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c96a:	b299      	uxth	r1, r3
 800c96c:	4a10      	ldr	r2, [pc, #64]	; (800c9b0 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800c974:	4a0c      	ldr	r2, [pc, #48]	; (800c9a8 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c97c:	0c1b      	lsrs	r3, r3, #16
 800c97e:	b299      	uxth	r1, r3
 800c980:	4a0c      	ldr	r2, [pc, #48]	; (800c9b4 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	3301      	adds	r3, #1
 800c98c:	61fb      	str	r3, [r7, #28]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d9e6      	bls.n	800c962 <HAL_ADC_ConvHalfCpltCallback+0x5e>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  /* Reset variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = RESET;
 800c994:	4b08      	ldr	r3, [pc, #32]	; (800c9b8 <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
}
 800c99a:	bf00      	nop
 800c99c:	3724      	adds	r7, #36	; 0x24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	24000220 	.word	0x24000220
 800c9ac:	e000ed00 	.word	0xe000ed00
 800c9b0:	24000240 	.word	0x24000240
 800c9b4:	24000260 	.word	0x24000260
 800c9b8:	24000268 	.word	0x24000268

0800c9bc <HAL_ADC_ErrorCallback>:
  *         avoid ending up in the infinite loop of Error_Handler(), no call to this
  *         latter is done in case of HAL_ADC_ERROR_OVR error.
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
#if !defined(ADC_TRIGGER_FROM_TIMER)
  /* In case of ADC error, call main error handler */
  if (HAL_IS_BIT_CLR(hadc->ErrorCode, HAL_ADC_ERROR_OVR))
  {
#endif /* ADC_TRIGGER_FROM_TIMER */
  Error_Handler();
 800c9c4:	f000 f804 	bl	800c9d0 <Error_Handler>
#if !defined(ADC_TRIGGER_FROM_TIMER)
  }
#endif /* ADC_TRIGGER_FROM_TIMER */
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0

  /* In case of error, LED3 is toggling at a frequency of 1Hz */
  while(1)
  {
    /* Toggle LED3 */
    BSP_LED_Toggle(LED3);
 800c9d4:	2002      	movs	r0, #2
 800c9d6:	f7f3 ff23 	bl	8000820 <BSP_LED_Toggle>
    HAL_Delay(500);
 800c9da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c9de:	f7f4 f859 	bl	8000a94 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 800c9e2:	e7f7      	b.n	800c9d4 <Error_Handler+0x4>

0800c9e4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800c9ea:	f7f6 fa85 	bl	8002ef8 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c9f6:	231f      	movs	r3, #31
 800c9f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800ca06:	2301      	movs	r3, #1
 800ca08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800ca12:	2387      	movs	r3, #135	; 0x87
 800ca14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800ca16:	2301      	movs	r3, #1
 800ca18:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ca1a:	463b      	mov	r3, r7
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f6 faa3 	bl	8002f68 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ca22:	2004      	movs	r0, #4
 800ca24:	f7f6 fa80 	bl	8002f28 <HAL_MPU_Enable>
}
 800ca28:	bf00      	nop
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ca36:	4b34      	ldr	r3, [pc, #208]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d11b      	bne.n	800ca7a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800ca42:	f3bf 8f4f 	dsb	sy
}
 800ca46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ca48:	f3bf 8f6f 	isb	sy
}
 800ca4c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ca4e:	4b2e      	ldr	r3, [pc, #184]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ca56:	f3bf 8f4f 	dsb	sy
}
 800ca5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ca5c:	f3bf 8f6f 	isb	sy
}
 800ca60:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ca62:	4b29      	ldr	r3, [pc, #164]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	4a28      	ldr	r2, [pc, #160]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ca6e:	f3bf 8f4f 	dsb	sy
}
 800ca72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ca74:	f3bf 8f6f 	isb	sy
}
 800ca78:	e000      	b.n	800ca7c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ca7a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800ca7c:	4b22      	ldr	r3, [pc, #136]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d138      	bne.n	800cafa <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ca88:	4b1f      	ldr	r3, [pc, #124]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ca90:	f3bf 8f4f 	dsb	sy
}
 800ca94:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800ca96:	4b1c      	ldr	r3, [pc, #112]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800ca98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca9c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	0b5b      	lsrs	r3, r3, #13
 800caa2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800caa6:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cab0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800caba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cac0:	4911      	ldr	r1, [pc, #68]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800cac2:	4313      	orrs	r3, r2
 800cac4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	1e5a      	subs	r2, r3, #1
 800cacc:	607a      	str	r2, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1ef      	bne.n	800cab2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	1e5a      	subs	r2, r3, #1
 800cad6:	60ba      	str	r2, [r7, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e5      	bne.n	800caa8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800cadc:	f3bf 8f4f 	dsb	sy
}
 800cae0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cae2:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	4a08      	ldr	r2, [pc, #32]	; (800cb08 <CPU_CACHE_Enable+0xd8>)
 800cae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800caee:	f3bf 8f4f 	dsb	sy
}
 800caf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800caf4:	f3bf 8f6f 	isb	sy
}
 800caf8:	e000      	b.n	800cafc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cafa:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	e000ed00 	.word	0xe000ed00

0800cb0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800cb10:	b672      	cpsid	i
}
 800cb12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cb14:	e7fe      	b.n	800cb14 <Error_Handler+0x8>
	...

0800cb18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b0ba      	sub	sp, #232	; 0xe8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	605a      	str	r2, [r3, #4]
 800cb2a:	609a      	str	r2, [r3, #8]
 800cb2c:	60da      	str	r2, [r3, #12]
 800cb2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb30:	f107 0310 	add.w	r3, r7, #16
 800cb34:	22c0      	movs	r2, #192	; 0xc0
 800cb36:	2100      	movs	r1, #0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fb1b 	bl	800d174 <memset>
  if(huart->Instance==USART3)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a2b      	ldr	r2, [pc, #172]	; (800cbf0 <HAL_UART_MspInit+0xd8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d14e      	bne.n	800cbe6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800cb48:	f04f 0202 	mov.w	r2, #2
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800cb54:	2300      	movs	r3, #0
 800cb56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb5a:	f107 0310 	add.w	r3, r7, #16
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fa fbc8 	bl	80072f4 <HAL_RCCEx_PeriphCLKConfig>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800cb6a:	f7ff ffcf 	bl	800cb0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800cb6e:	4b21      	ldr	r3, [pc, #132]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cb74:	4a1f      	ldr	r2, [pc, #124]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cb7e:	4b1d      	ldr	r3, [pc, #116]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cb84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cb8c:	4b19      	ldr	r3, [pc, #100]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb92:	4a18      	ldr	r2, [pc, #96]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb94:	f043 0308 	orr.w	r3, r3, #8
 800cb98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cb9c:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <HAL_UART_MspInit+0xdc>)
 800cb9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cba2:	f003 0308 	and.w	r3, r3, #8
 800cba6:	60bb      	str	r3, [r7, #8]
 800cba8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800cbaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cbae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cbc4:	2307      	movs	r3, #7
 800cbc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cbca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4809      	ldr	r0, [pc, #36]	; (800cbf8 <HAL_UART_MspInit+0xe0>)
 800cbd2:	f7f8 fffb 	bl	8005bcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2027      	movs	r0, #39	; 0x27
 800cbdc:	f7f6 f949 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cbe0:	2027      	movs	r0, #39	; 0x27
 800cbe2:	f7f6 f960 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cbe6:	bf00      	nop
 800cbe8:	37e8      	adds	r7, #232	; 0xe8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	40004800 	.word	0x40004800
 800cbf4:	58024400 	.word	0x58024400
 800cbf8:	58020c00 	.word	0x58020c00

0800cbfc <HAL_ADC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	; 0x28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  DmaHandle;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable clock of GPIO associated to the peripheral channels */
  ADCx_CHANNELa_GPIO_CLK_ENABLE();
 800cc04:	4b42      	ldr	r3, [pc, #264]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc0a:	4a41      	ldr	r2, [pc, #260]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc0c:	f043 0301 	orr.w	r3, r3, #1
 800cc10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cc14:	4b3e      	ldr	r3, [pc, #248]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	613b      	str	r3, [r7, #16]
 800cc20:	693b      	ldr	r3, [r7, #16]
  
  /* Enable clock of ADCx peripheral */
  ADCx_CLK_ENABLE();
 800cc22:	4b3b      	ldr	r3, [pc, #236]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc28:	4a39      	ldr	r2, [pc, #228]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc2a:	f043 0320 	orr.w	r3, r3, #32
 800cc2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cc32:	4b37      	ldr	r3, [pc, #220]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc38:	f003 0320 	and.w	r3, r3, #32
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_CLKP);
 800cc40:	4b33      	ldr	r3, [pc, #204]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cc48:	4a31      	ldr	r2, [pc, #196]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc4e:	6593      	str	r3, [r2, #88]	; 0x58
  

  if (hadc->Instance == ADCx)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a2f      	ldr	r2, [pc, #188]	; (800cd14 <HAL_ADC_MspInit+0x118>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d14e      	bne.n	800ccf8 <HAL_ADC_MspInit+0xfc>
  { 
    /* Enable clock of DMA associated to the peripheral */
    ADCx_DMA_CLK_ENABLE();
 800cc5a:	4b2d      	ldr	r3, [pc, #180]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc60:	4a2b      	ldr	r2, [pc, #172]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc62:	f043 0301 	orr.w	r3, r3, #1
 800cc66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cc6a:	4b29      	ldr	r3, [pc, #164]	; (800cd10 <HAL_ADC_MspInit+0x114>)
 800cc6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	60bb      	str	r3, [r7, #8]
 800cc76:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/ 
    /* Configure GPIO pins of the selected ADC channels */
    GPIO_InitStruct.Pin = ADCx_CHANNELa_PIN;
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADCx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 800cc84:	f107 0314 	add.w	r3, r7, #20
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4823      	ldr	r0, [pc, #140]	; (800cd18 <HAL_ADC_MspInit+0x11c>)
 800cc8c:	f7f8 ff9e 	bl	8005bcc <HAL_GPIO_Init>
    /*       the same clock domain, same GPIO pins (interleaved on the same     */
    /*       channel) and same DMA as ADC master.                               */
  
    /*##-3- Configure the DMA ##################################################*/
    /* Configure DMA parameters (ADC master) */
    DmaHandle.Instance = ADCx_DMA;
 800cc90:	4b22      	ldr	r3, [pc, #136]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cc92:	4a23      	ldr	r2, [pc, #140]	; (800cd20 <HAL_ADC_MspInit+0x124>)
 800cc94:	601a      	str	r2, [r3, #0]

    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 800cc96:	4b21      	ldr	r3, [pc, #132]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cc98:	2209      	movs	r2, #9
 800cc9a:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800cc9c:	4b1f      	ldr	r3, [pc, #124]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800cca2:	4b1e      	ldr	r3, [pc, #120]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800cca8:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ccae:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;       /* Transfer from ADC by word to match with ADC configuration: Dual mode, ADC master contains conversion results on data register (32 bits) of ADC master and ADC slave  */
 800ccb0:	4b1a      	ldr	r3, [pc, #104]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ccb6:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;       /* Transfer to memory by word to match with buffer variable type: word */
 800ccb8:	4b18      	ldr	r3, [pc, #96]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ccbe:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;              /* DMA in circular mode to match with ADC configuration: DMA continuous requests */
 800ccc0:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccc6:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ccc8:	4b14      	ldr	r3, [pc, #80]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ccce:	621a      	str	r2, [r3, #32]
  
   /* Deinitialize  & Initialize the DMA for new transfer */
    HAL_DMA_DeInit(&DmaHandle);
 800ccd0:	4812      	ldr	r0, [pc, #72]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccd2:	f7f7 f849 	bl	8003d68 <HAL_DMA_DeInit>
    HAL_DMA_Init(&DmaHandle);
 800ccd6:	4811      	ldr	r0, [pc, #68]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800ccd8:	f7f6 fcea 	bl	80036b0 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a0f      	ldr	r2, [pc, #60]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cce0:	64da      	str	r2, [r3, #76]	; 0x4c
 800cce2:	4a0e      	ldr	r2, [pc, #56]	; (800cd1c <HAL_ADC_MspInit+0x120>)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6393      	str	r3, [r2, #56]	; 0x38
  
    /*##-4- Configure the NVIC #################################################*/

     /* NVIC configuration for DMA interrupt (transfer completion or error) */
    /* Priority: high-priority */
    HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 1, 0);
 800cce8:	2200      	movs	r2, #0
 800ccea:	2101      	movs	r1, #1
 800ccec:	200c      	movs	r0, #12
 800ccee:	f7f6 f8c0 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 800ccf2:	200c      	movs	r0, #12
 800ccf4:	f7f6 f8d7 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  }
  
  /* NVIC configuration for ADC interrupt */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(ADCx_IRQn, 0, 0);
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	2012      	movs	r0, #18
 800ccfe:	f7f6 f8b8 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
 800cd02:	2012      	movs	r0, #18
 800cd04:	f7f6 f8cf 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  
  //HAL_NVIC_SetPriority(ADCy_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(ADCy_IRQn);

}
 800cd08:	bf00      	nop
 800cd0a:	3728      	adds	r7, #40	; 0x28
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	58024400 	.word	0x58024400
 800cd14:	40022000 	.word	0x40022000
 800cd18:	58020000 	.word	0x58020000
 800cd1c:	24000384 	.word	0x24000384
 800cd20:	40020028 	.word	0x40020028

0800cd24 <HAL_ADC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
  { 
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  ADCx_FORCE_RESET();
 800cd2c:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <HAL_ADC_MspDeInit+0x58>)
 800cd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd32:	4a12      	ldr	r2, [pc, #72]	; (800cd7c <HAL_ADC_MspDeInit+0x58>)
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  ADCx_RELEASE_RESET();
 800cd3c:	4b0f      	ldr	r3, [pc, #60]	; (800cd7c <HAL_ADC_MspDeInit+0x58>)
 800cd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd42:	4a0e      	ldr	r2, [pc, #56]	; (800cd7c <HAL_ADC_MspDeInit+0x58>)
 800cd44:	f023 0320 	bic.w	r3, r3, #32
 800cd48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize GPIO pin of the selected ADC channel */
  HAL_GPIO_DeInit(ADCx_CHANNELa_GPIO_PORT, ADCx_CHANNELa_PIN);
 800cd4c:	2140      	movs	r1, #64	; 0x40
 800cd4e:	480c      	ldr	r0, [pc, #48]	; (800cd80 <HAL_ADC_MspDeInit+0x5c>)
 800cd50:	f7f9 f8ec 	bl	8005f2c <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA ####################################################*/
  /* De-Initialize the DMA associated to the peripheral */
  if(hadc->DMA_Handle != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <HAL_ADC_MspDeInit+0x42>
  {
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f7 f801 	bl	8003d68 <HAL_DMA_DeInit>
  }
  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(ADCx_DMA_IRQn);
 800cd66:	200c      	movs	r0, #12
 800cd68:	f7f6 f8ab 	bl	8002ec2 <HAL_NVIC_DisableIRQ>
  
  /* Disable the NVIC configuration for ADC interrupt */
  HAL_NVIC_DisableIRQ(ADCx_IRQn);
 800cd6c:	2012      	movs	r0, #18
 800cd6e:	f7f6 f8a8 	bl	8002ec2 <HAL_NVIC_DisableIRQ>
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	58024400 	.word	0x58024400
 800cd80:	58020000 	.word	0x58020000

0800cd84 <HAL_TIM_Base_MspInit>:
  *          - Enable clock of peripheral
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
  { 
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* TIM peripheral clock enable */
  if (htim->Instance == TIMx)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a16      	ldr	r2, [pc, #88]	; (800cdec <HAL_TIM_Base_MspInit+0x68>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d10f      	bne.n	800cdb6 <HAL_TIM_Base_MspInit+0x32>
  {
    TIMx_CLK_ENABLE();
 800cd96:	4b16      	ldr	r3, [pc, #88]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cd98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd9c:	4a14      	ldr	r2, [pc, #80]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cd9e:	f043 0302 	orr.w	r3, r3, #2
 800cda2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cda6:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cda8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
  else
  { 
    /* Error management can be implemented here */
  }

}
 800cdb4:	e013      	b.n	800cdde <HAL_TIM_Base_MspInit+0x5a>
  else if (htim->Instance == TIMy)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a0e      	ldr	r2, [pc, #56]	; (800cdf4 <HAL_TIM_Base_MspInit+0x70>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d10e      	bne.n	800cdde <HAL_TIM_Base_MspInit+0x5a>
    TIMy_CLK_ENABLE();
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cdc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cdc6:	4a0a      	ldr	r2, [pc, #40]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cdc8:	f043 0310 	orr.w	r3, r3, #16
 800cdcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cdd0:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <HAL_TIM_Base_MspInit+0x6c>)
 800cdd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cdd6:	f003 0310 	and.w	r3, r3, #16
 800cdda:	60bb      	str	r3, [r7, #8]
 800cddc:	68bb      	ldr	r3, [r7, #8]
}
 800cdde:	bf00      	nop
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	40000400 	.word	0x40000400
 800cdf0:	58024400 	.word	0x58024400
 800cdf4:	40001000 	.word	0x40001000

0800cdf8 <HAL_DAC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	; 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef  DmaHandle;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 800ce00:	4b3d      	ldr	r3, [pc, #244]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce06:	4a3c      	ldr	r2, [pc, #240]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce08:	f043 0301 	orr.w	r3, r3, #1
 800ce0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce10:	4b39      	ldr	r3, [pc, #228]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	613b      	str	r3, [r7, #16]
 800ce1c:	693b      	ldr	r3, [r7, #16]
  /* DAC peripheral clock enable */
  DACx_CLK_ENABLE();
 800ce1e:	4b36      	ldr	r3, [pc, #216]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce24:	4a34      	ldr	r2, [pc, #208]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ce2e:	4b32      	ldr	r3, [pc, #200]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]

  /* Enable clock of DMA associated to the peripheral */
  DACx_CHANNELa_DMA_CLK_ENABLE();
 800ce3c:	4b2e      	ldr	r3, [pc, #184]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ce42:	4a2d      	ldr	r2, [pc, #180]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce44:	f043 0301 	orr.w	r3, r3, #1
 800ce48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ce4c:	4b2a      	ldr	r3, [pc, #168]	; (800cef8 <HAL_DAC_MspInit+0x100>)
 800ce4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	60bb      	str	r3, [r7, #8]
 800ce58:	68bb      	ldr	r3, [r7, #8]


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* DAC Channel1 GPIO pin configuration */
  GPIO_InitStruct.Pin = DACx_CHANNELa_PIN;
 800ce5a:	2310      	movs	r3, #16
 800ce5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DACx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 800ce66:	f107 0314 	add.w	r3, r7, #20
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4823      	ldr	r0, [pc, #140]	; (800cefc <HAL_DAC_MspInit+0x104>)
 800ce6e:	f7f8 fead 	bl	8005bcc <HAL_GPIO_Init>
  
  
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure DMA parameters */
  DmaHandle.Instance = DACx_CHANNELa_DMA;
 800ce72:	4b23      	ldr	r3, [pc, #140]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce74:	4a23      	ldr	r2, [pc, #140]	; (800cf04 <HAL_DAC_MspInit+0x10c>)
 800ce76:	601a      	str	r2, [r3, #0]

  DmaHandle.Init.Request             = DMA_REQUEST_DAC1;
 800ce78:	4b21      	ldr	r3, [pc, #132]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce7a:	2243      	movs	r2, #67	; 0x43
 800ce7c:	605a      	str	r2, [r3, #4]
  DmaHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800ce7e:	4b20      	ldr	r3, [pc, #128]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce80:	2240      	movs	r2, #64	; 0x40
 800ce82:	609a      	str	r2, [r3, #8]
  DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ce84:	4b1e      	ldr	r3, [pc, #120]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	60da      	str	r2, [r3, #12]
  DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce90:	611a      	str	r2, [r3, #16]
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;   /* Transfer to DAC by byte to match with DAC configuration: DAC resolution 8 bits */
 800ce92:	4b1b      	ldr	r3, [pc, #108]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	615a      	str	r2, [r3, #20]
  DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;   /* Transfer to DAC by byte to match with DAC configuration: DAC resolution 8 bits */
 800ce98:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	619a      	str	r2, [r3, #24]
  DmaHandle.Init.Mode                = DMA_CIRCULAR;
 800ce9e:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800cea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cea4:	61da      	str	r2, [r3, #28]
  DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800cea6:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800cea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ceac:	621a      	str	r2, [r3, #32]
  
  /* Deinitialize  & Initialize the DMA for new transfer */
  HAL_DMA_DeInit(&DmaHandle);  
 800ceae:	4814      	ldr	r0, [pc, #80]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ceb0:	f7f6 ff5a 	bl	8003d68 <HAL_DMA_DeInit>
  HAL_DMA_Init(&DmaHandle);
 800ceb4:	4812      	ldr	r0, [pc, #72]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800ceb6:	f7f6 fbfb 	bl	80036b0 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the DAC handle */
  if (DmaHandle.Instance == DACx_CHANNELa_DMA)
 800ceba:	4b11      	ldr	r3, [pc, #68]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a11      	ldr	r2, [pc, #68]	; (800cf04 <HAL_DAC_MspInit+0x10c>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d105      	bne.n	800ced0 <HAL_DAC_MspInit+0xd8>
  {
    __HAL_LINKDMA(hdac, DMA_Handle1, DmaHandle);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a0e      	ldr	r2, [pc, #56]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800cec8:	609a      	str	r2, [r3, #8]
 800ceca:	4a0d      	ldr	r2, [pc, #52]	; (800cf00 <HAL_DAC_MspInit+0x108>)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC #################################################*/

  /* NVIC configuration for DMA interrupt (transfer completion or error) */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(DACx_CHANNELa_DMA_IRQn, 1, 0);
 800ced0:	2200      	movs	r2, #0
 800ced2:	2101      	movs	r1, #1
 800ced4:	200e      	movs	r0, #14
 800ced6:	f7f5 ffcc 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DACx_CHANNELa_DMA_IRQn);
 800ceda:	200e      	movs	r0, #14
 800cedc:	f7f5 ffe3 	bl	8002ea6 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DAC interrupt */
  /* Priority: mid-priority */
  HAL_NVIC_SetPriority(DACx_IRQn, 3, 0);
 800cee0:	2200      	movs	r2, #0
 800cee2:	2103      	movs	r1, #3
 800cee4:	2036      	movs	r0, #54	; 0x36
 800cee6:	f7f5 ffc4 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DACx_IRQn);
 800ceea:	2036      	movs	r0, #54	; 0x36
 800ceec:	f7f5 ffdb 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
}
 800cef0:	bf00      	nop
 800cef2:	3728      	adds	r7, #40	; 0x28
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	58024400 	.word	0x58024400
 800cefc:	58020000 	.word	0x58020000
 800cf00:	240003fc 	.word	0x240003fc
 800cf04:	40020058 	.word	0x40020058

0800cf08 <HAL_DAC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  DACx_FORCE_RESET();
 800cf10:	4b13      	ldr	r3, [pc, #76]	; (800cf60 <HAL_DAC_MspDeInit+0x58>)
 800cf12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf16:	4a12      	ldr	r2, [pc, #72]	; (800cf60 <HAL_DAC_MspDeInit+0x58>)
 800cf18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DACx_RELEASE_RESET();
 800cf20:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <HAL_DAC_MspDeInit+0x58>)
 800cf22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf26:	4a0e      	ldr	r2, [pc, #56]	; (800cf60 <HAL_DAC_MspDeInit+0x58>)
 800cf28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize the ADC Channel GPIO pin */
  HAL_GPIO_DeInit(DACx_CHANNELa_GPIO_PORT, DACx_CHANNELa_PIN);
 800cf30:	2110      	movs	r1, #16
 800cf32:	480c      	ldr	r0, [pc, #48]	; (800cf64 <HAL_DAC_MspDeInit+0x5c>)
 800cf34:	f7f8 fffa 	bl	8005f2c <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA streams ############################################*/
  /* De-Initialize the DMA associated to transmission process */
  HAL_DMA_DeInit(hdac->DMA_Handle1);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f6 ff13 	bl	8003d68 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(hdac->DMA_Handle2);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f6 ff0e 	bl	8003d68 <HAL_DMA_DeInit>

  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(DACx_CHANNELa_DMA_IRQn);
 800cf4c:	200e      	movs	r0, #14
 800cf4e:	f7f5 ffb8 	bl	8002ec2 <HAL_NVIC_DisableIRQ>

  /* Disable the NVIC configuration for DAC interrupt */
  HAL_NVIC_DisableIRQ(DACx_IRQn);
 800cf52:	2036      	movs	r0, #54	; 0x36
 800cf54:	f7f5 ffb5 	bl	8002ec2 <HAL_NVIC_DisableIRQ>
}
 800cf58:	bf00      	nop
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	58024400 	.word	0x58024400
 800cf64:	58020000 	.word	0x58020000

0800cf68 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	af00      	add	r7, sp, #0
}
 800cf6c:	bf00      	nop
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800cf76:	b480      	push	{r7}
 800cf78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800cf7a:	e7fe      	b.n	800cf7a <HardFault_Handler+0x4>

0800cf7c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800cf80:	e7fe      	b.n	800cf80 <MemManage_Handler+0x4>

0800cf82 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800cf82:	b480      	push	{r7}
 800cf84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800cf86:	e7fe      	b.n	800cf86 <BusFault_Handler+0x4>

0800cf88 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800cf8c:	e7fe      	b.n	800cf8c <UsageFault_Handler+0x4>

0800cf8e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	af00      	add	r7, sp, #0
}
 800cf92:	bf00      	nop
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
}
 800cfa0:	bf00      	nop
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	af00      	add	r7, sp, #0
}
 800cfae:	bf00      	nop
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800cfbc:	f7f3 fd4a 	bl	8000a54 <HAL_IncTick>
}
 800cfc0:	bf00      	nop
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800cfc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cfcc:	f7f9 f8eb 	bl	80061a6 <HAL_GPIO_EXTI_IRQHandler>
}
 800cfd0:	bf00      	nop
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <ADC_IRQHandler>:
  */
/* Note: On STM32H7xx, ADC2 IRQ handler is the same as ADC1.                  */
/*       Therefore, expected IRQ handler "ADCy_IRQHandler()" is not present   */
/*       and managed by IRQ handler "ADCx_IRQHandler()".                      */
void ADCx_IRQHandler(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&AdcHandle_master);
 800cfd8:	4803      	ldr	r0, [pc, #12]	; (800cfe8 <ADC_IRQHandler+0x14>)
 800cfda:	f7f4 fadf 	bl	800159c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&AdcHandle_slave);
 800cfde:	4803      	ldr	r0, [pc, #12]	; (800cfec <ADC_IRQHandler+0x18>)
 800cfe0:	f7f4 fadc 	bl	800159c <HAL_ADC_IRQHandler>
}
 800cfe4:	bf00      	nop
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	240000a0 	.word	0x240000a0
 800cfec:	24000104 	.word	0x24000104

0800cff0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800cff0:	b480      	push	{r7}
 800cff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_IRQn 0 */
  ////HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800cff4:	bf00      	nop
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
	...

0800d000 <DMA1_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle_master.DMA_Handle);
 800d004:	4b03      	ldr	r3, [pc, #12]	; (800d014 <DMA1_Stream1_IRQHandler+0x14>)
 800d006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d008:	4618      	mov	r0, r3
 800d00a:	f7f7 facd 	bl	80045a8 <HAL_DMA_IRQHandler>
}
 800d00e:	bf00      	nop
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	240000a0 	.word	0x240000a0

0800d018 <DMA1_Stream3_IRQHandler>:


#if defined(WAVEFORM_VOLTAGE_GENERATION_FOR_TEST)

void DACx_CHANNELa_DMA_IRQHandler(void)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(DacForWaveformTestHandle.DMA_Handle1);
 800d01c:	4b03      	ldr	r3, [pc, #12]	; (800d02c <DMA1_Stream3_IRQHandler+0x14>)
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	4618      	mov	r0, r3
 800d022:	f7f7 fac1 	bl	80045a8 <HAL_DMA_IRQHandler>
}
 800d026:	bf00      	nop
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	240001b4 	.word	0x240001b4

0800d030 <TIM6_DAC_IRQHandler>:
* @brief  This function handles DAC interrupt request.
* @param  None
* @retval None
*/
void TIM6_DAC_IRQHandler(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
  HAL_DAC_IRQHandler(&DacForWaveformTestHandle);
 800d034:	4802      	ldr	r0, [pc, #8]	; (800d040 <TIM6_DAC_IRQHandler+0x10>)
 800d036:	f7f6 f8e7 	bl	8003208 <HAL_DAC_IRQHandler>
}
 800d03a:	bf00      	nop
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	240001b4 	.word	0x240001b4

0800d044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d04c:	4a14      	ldr	r2, [pc, #80]	; (800d0a0 <_sbrk+0x5c>)
 800d04e:	4b15      	ldr	r3, [pc, #84]	; (800d0a4 <_sbrk+0x60>)
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d058:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <_sbrk+0x64>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d060:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <_sbrk+0x64>)
 800d062:	4a12      	ldr	r2, [pc, #72]	; (800d0ac <_sbrk+0x68>)
 800d064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <_sbrk+0x64>)
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4413      	add	r3, r2
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	429a      	cmp	r2, r3
 800d072:	d207      	bcs.n	800d084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d074:	f000 f886 	bl	800d184 <__errno>
 800d078:	4603      	mov	r3, r0
 800d07a:	220c      	movs	r2, #12
 800d07c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295
 800d082:	e009      	b.n	800d098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d084:	4b08      	ldr	r3, [pc, #32]	; (800d0a8 <_sbrk+0x64>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d08a:	4b07      	ldr	r3, [pc, #28]	; (800d0a8 <_sbrk+0x64>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4413      	add	r3, r2
 800d092:	4a05      	ldr	r2, [pc, #20]	; (800d0a8 <_sbrk+0x64>)
 800d094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d096:	68fb      	ldr	r3, [r7, #12]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	24080000 	.word	0x24080000
 800d0a4:	00000400 	.word	0x00000400
 800d0a8:	24000474 	.word	0x24000474
 800d0ac:	240005c0 	.word	0x240005c0

0800d0b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d0b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d0e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d0b4:	f7f3 fbde 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d0b8:	480c      	ldr	r0, [pc, #48]	; (800d0ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d0ba:	490d      	ldr	r1, [pc, #52]	; (800d0f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d0bc:	4a0d      	ldr	r2, [pc, #52]	; (800d0f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d0be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d0c0:	e002      	b.n	800d0c8 <LoopCopyDataInit>

0800d0c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d0c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d0c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d0c6:	3304      	adds	r3, #4

0800d0c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d0c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d0ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d0cc:	d3f9      	bcc.n	800d0c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d0ce:	4a0a      	ldr	r2, [pc, #40]	; (800d0f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d0d0:	4c0a      	ldr	r4, [pc, #40]	; (800d0fc <LoopFillZerobss+0x22>)
  movs r3, #0
 800d0d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d0d4:	e001      	b.n	800d0da <LoopFillZerobss>

0800d0d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d0d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d0d8:	3204      	adds	r2, #4

0800d0da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d0da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d0dc:	d3fb      	bcc.n	800d0d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d0de:	f000 f857 	bl	800d190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d0e2:	f7ff f8a3 	bl	800c22c <main>
  bx  lr
 800d0e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d0e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800d0ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800d0f0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800d0f4:	0800db84 	.word	0x0800db84
  ldr r2, =_sbss
 800d0f8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800d0fc:	240005c0 	.word	0x240005c0

0800d100 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d100:	e7fe      	b.n	800d100 <ADC3_IRQHandler>

0800d102 <_vsniprintf_r>:
 800d102:	b530      	push	{r4, r5, lr}
 800d104:	4614      	mov	r4, r2
 800d106:	2c00      	cmp	r4, #0
 800d108:	b09b      	sub	sp, #108	; 0x6c
 800d10a:	4605      	mov	r5, r0
 800d10c:	461a      	mov	r2, r3
 800d10e:	da05      	bge.n	800d11c <_vsniprintf_r+0x1a>
 800d110:	238b      	movs	r3, #139	; 0x8b
 800d112:	6003      	str	r3, [r0, #0]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	b01b      	add	sp, #108	; 0x6c
 800d11a:	bd30      	pop	{r4, r5, pc}
 800d11c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d120:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d124:	bf14      	ite	ne
 800d126:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d12a:	4623      	moveq	r3, r4
 800d12c:	9302      	str	r3, [sp, #8]
 800d12e:	9305      	str	r3, [sp, #20]
 800d130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d134:	9100      	str	r1, [sp, #0]
 800d136:	9104      	str	r1, [sp, #16]
 800d138:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d13c:	4669      	mov	r1, sp
 800d13e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d140:	f000 f9ac 	bl	800d49c <_svfiprintf_r>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	bfbc      	itt	lt
 800d148:	238b      	movlt	r3, #139	; 0x8b
 800d14a:	602b      	strlt	r3, [r5, #0]
 800d14c:	2c00      	cmp	r4, #0
 800d14e:	d0e3      	beq.n	800d118 <_vsniprintf_r+0x16>
 800d150:	9b00      	ldr	r3, [sp, #0]
 800d152:	2200      	movs	r2, #0
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e7df      	b.n	800d118 <_vsniprintf_r+0x16>

0800d158 <vsniprintf>:
 800d158:	b507      	push	{r0, r1, r2, lr}
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	460a      	mov	r2, r1
 800d160:	4601      	mov	r1, r0
 800d162:	4803      	ldr	r0, [pc, #12]	; (800d170 <vsniprintf+0x18>)
 800d164:	6800      	ldr	r0, [r0, #0]
 800d166:	f7ff ffcc 	bl	800d102 <_vsniprintf_r>
 800d16a:	b003      	add	sp, #12
 800d16c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d170:	24000068 	.word	0x24000068

0800d174 <memset>:
 800d174:	4402      	add	r2, r0
 800d176:	4603      	mov	r3, r0
 800d178:	4293      	cmp	r3, r2
 800d17a:	d100      	bne.n	800d17e <memset+0xa>
 800d17c:	4770      	bx	lr
 800d17e:	f803 1b01 	strb.w	r1, [r3], #1
 800d182:	e7f9      	b.n	800d178 <memset+0x4>

0800d184 <__errno>:
 800d184:	4b01      	ldr	r3, [pc, #4]	; (800d18c <__errno+0x8>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	24000068 	.word	0x24000068

0800d190 <__libc_init_array>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4d0d      	ldr	r5, [pc, #52]	; (800d1c8 <__libc_init_array+0x38>)
 800d194:	4c0d      	ldr	r4, [pc, #52]	; (800d1cc <__libc_init_array+0x3c>)
 800d196:	1b64      	subs	r4, r4, r5
 800d198:	10a4      	asrs	r4, r4, #2
 800d19a:	2600      	movs	r6, #0
 800d19c:	42a6      	cmp	r6, r4
 800d19e:	d109      	bne.n	800d1b4 <__libc_init_array+0x24>
 800d1a0:	4d0b      	ldr	r5, [pc, #44]	; (800d1d0 <__libc_init_array+0x40>)
 800d1a2:	4c0c      	ldr	r4, [pc, #48]	; (800d1d4 <__libc_init_array+0x44>)
 800d1a4:	f000 fc6a 	bl	800da7c <_init>
 800d1a8:	1b64      	subs	r4, r4, r5
 800d1aa:	10a4      	asrs	r4, r4, #2
 800d1ac:	2600      	movs	r6, #0
 800d1ae:	42a6      	cmp	r6, r4
 800d1b0:	d105      	bne.n	800d1be <__libc_init_array+0x2e>
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b8:	4798      	blx	r3
 800d1ba:	3601      	adds	r6, #1
 800d1bc:	e7ee      	b.n	800d19c <__libc_init_array+0xc>
 800d1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c2:	4798      	blx	r3
 800d1c4:	3601      	adds	r6, #1
 800d1c6:	e7f2      	b.n	800d1ae <__libc_init_array+0x1e>
 800d1c8:	0800db7c 	.word	0x0800db7c
 800d1cc:	0800db7c 	.word	0x0800db7c
 800d1d0:	0800db7c 	.word	0x0800db7c
 800d1d4:	0800db80 	.word	0x0800db80

0800d1d8 <__retarget_lock_acquire_recursive>:
 800d1d8:	4770      	bx	lr

0800d1da <__retarget_lock_release_recursive>:
 800d1da:	4770      	bx	lr

0800d1dc <memcpy>:
 800d1dc:	440a      	add	r2, r1
 800d1de:	4291      	cmp	r1, r2
 800d1e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1e4:	d100      	bne.n	800d1e8 <memcpy+0xc>
 800d1e6:	4770      	bx	lr
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	d1f9      	bne.n	800d1ea <memcpy+0xe>
 800d1f6:	bd10      	pop	{r4, pc}

0800d1f8 <_free_r>:
 800d1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1fa:	2900      	cmp	r1, #0
 800d1fc:	d044      	beq.n	800d288 <_free_r+0x90>
 800d1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d202:	9001      	str	r0, [sp, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f1a1 0404 	sub.w	r4, r1, #4
 800d20a:	bfb8      	it	lt
 800d20c:	18e4      	addlt	r4, r4, r3
 800d20e:	f000 f8df 	bl	800d3d0 <__malloc_lock>
 800d212:	4a1e      	ldr	r2, [pc, #120]	; (800d28c <_free_r+0x94>)
 800d214:	9801      	ldr	r0, [sp, #4]
 800d216:	6813      	ldr	r3, [r2, #0]
 800d218:	b933      	cbnz	r3, 800d228 <_free_r+0x30>
 800d21a:	6063      	str	r3, [r4, #4]
 800d21c:	6014      	str	r4, [r2, #0]
 800d21e:	b003      	add	sp, #12
 800d220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d224:	f000 b8da 	b.w	800d3dc <__malloc_unlock>
 800d228:	42a3      	cmp	r3, r4
 800d22a:	d908      	bls.n	800d23e <_free_r+0x46>
 800d22c:	6825      	ldr	r5, [r4, #0]
 800d22e:	1961      	adds	r1, r4, r5
 800d230:	428b      	cmp	r3, r1
 800d232:	bf01      	itttt	eq
 800d234:	6819      	ldreq	r1, [r3, #0]
 800d236:	685b      	ldreq	r3, [r3, #4]
 800d238:	1949      	addeq	r1, r1, r5
 800d23a:	6021      	streq	r1, [r4, #0]
 800d23c:	e7ed      	b.n	800d21a <_free_r+0x22>
 800d23e:	461a      	mov	r2, r3
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	b10b      	cbz	r3, 800d248 <_free_r+0x50>
 800d244:	42a3      	cmp	r3, r4
 800d246:	d9fa      	bls.n	800d23e <_free_r+0x46>
 800d248:	6811      	ldr	r1, [r2, #0]
 800d24a:	1855      	adds	r5, r2, r1
 800d24c:	42a5      	cmp	r5, r4
 800d24e:	d10b      	bne.n	800d268 <_free_r+0x70>
 800d250:	6824      	ldr	r4, [r4, #0]
 800d252:	4421      	add	r1, r4
 800d254:	1854      	adds	r4, r2, r1
 800d256:	42a3      	cmp	r3, r4
 800d258:	6011      	str	r1, [r2, #0]
 800d25a:	d1e0      	bne.n	800d21e <_free_r+0x26>
 800d25c:	681c      	ldr	r4, [r3, #0]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	6053      	str	r3, [r2, #4]
 800d262:	440c      	add	r4, r1
 800d264:	6014      	str	r4, [r2, #0]
 800d266:	e7da      	b.n	800d21e <_free_r+0x26>
 800d268:	d902      	bls.n	800d270 <_free_r+0x78>
 800d26a:	230c      	movs	r3, #12
 800d26c:	6003      	str	r3, [r0, #0]
 800d26e:	e7d6      	b.n	800d21e <_free_r+0x26>
 800d270:	6825      	ldr	r5, [r4, #0]
 800d272:	1961      	adds	r1, r4, r5
 800d274:	428b      	cmp	r3, r1
 800d276:	bf04      	itt	eq
 800d278:	6819      	ldreq	r1, [r3, #0]
 800d27a:	685b      	ldreq	r3, [r3, #4]
 800d27c:	6063      	str	r3, [r4, #4]
 800d27e:	bf04      	itt	eq
 800d280:	1949      	addeq	r1, r1, r5
 800d282:	6021      	streq	r1, [r4, #0]
 800d284:	6054      	str	r4, [r2, #4]
 800d286:	e7ca      	b.n	800d21e <_free_r+0x26>
 800d288:	b003      	add	sp, #12
 800d28a:	bd30      	pop	{r4, r5, pc}
 800d28c:	240005b8 	.word	0x240005b8

0800d290 <sbrk_aligned>:
 800d290:	b570      	push	{r4, r5, r6, lr}
 800d292:	4e0e      	ldr	r6, [pc, #56]	; (800d2cc <sbrk_aligned+0x3c>)
 800d294:	460c      	mov	r4, r1
 800d296:	6831      	ldr	r1, [r6, #0]
 800d298:	4605      	mov	r5, r0
 800d29a:	b911      	cbnz	r1, 800d2a2 <sbrk_aligned+0x12>
 800d29c:	f000 fba6 	bl	800d9ec <_sbrk_r>
 800d2a0:	6030      	str	r0, [r6, #0]
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f000 fba1 	bl	800d9ec <_sbrk_r>
 800d2aa:	1c43      	adds	r3, r0, #1
 800d2ac:	d00a      	beq.n	800d2c4 <sbrk_aligned+0x34>
 800d2ae:	1cc4      	adds	r4, r0, #3
 800d2b0:	f024 0403 	bic.w	r4, r4, #3
 800d2b4:	42a0      	cmp	r0, r4
 800d2b6:	d007      	beq.n	800d2c8 <sbrk_aligned+0x38>
 800d2b8:	1a21      	subs	r1, r4, r0
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f000 fb96 	bl	800d9ec <_sbrk_r>
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	d101      	bne.n	800d2c8 <sbrk_aligned+0x38>
 800d2c4:	f04f 34ff 	mov.w	r4, #4294967295
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}
 800d2cc:	240005bc 	.word	0x240005bc

0800d2d0 <_malloc_r>:
 800d2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d4:	1ccd      	adds	r5, r1, #3
 800d2d6:	f025 0503 	bic.w	r5, r5, #3
 800d2da:	3508      	adds	r5, #8
 800d2dc:	2d0c      	cmp	r5, #12
 800d2de:	bf38      	it	cc
 800d2e0:	250c      	movcc	r5, #12
 800d2e2:	2d00      	cmp	r5, #0
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	db01      	blt.n	800d2ec <_malloc_r+0x1c>
 800d2e8:	42a9      	cmp	r1, r5
 800d2ea:	d905      	bls.n	800d2f8 <_malloc_r+0x28>
 800d2ec:	230c      	movs	r3, #12
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	2600      	movs	r6, #0
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d3cc <_malloc_r+0xfc>
 800d2fc:	f000 f868 	bl	800d3d0 <__malloc_lock>
 800d300:	f8d8 3000 	ldr.w	r3, [r8]
 800d304:	461c      	mov	r4, r3
 800d306:	bb5c      	cbnz	r4, 800d360 <_malloc_r+0x90>
 800d308:	4629      	mov	r1, r5
 800d30a:	4638      	mov	r0, r7
 800d30c:	f7ff ffc0 	bl	800d290 <sbrk_aligned>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	4604      	mov	r4, r0
 800d314:	d155      	bne.n	800d3c2 <_malloc_r+0xf2>
 800d316:	f8d8 4000 	ldr.w	r4, [r8]
 800d31a:	4626      	mov	r6, r4
 800d31c:	2e00      	cmp	r6, #0
 800d31e:	d145      	bne.n	800d3ac <_malloc_r+0xdc>
 800d320:	2c00      	cmp	r4, #0
 800d322:	d048      	beq.n	800d3b6 <_malloc_r+0xe6>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	4631      	mov	r1, r6
 800d328:	4638      	mov	r0, r7
 800d32a:	eb04 0903 	add.w	r9, r4, r3
 800d32e:	f000 fb5d 	bl	800d9ec <_sbrk_r>
 800d332:	4581      	cmp	r9, r0
 800d334:	d13f      	bne.n	800d3b6 <_malloc_r+0xe6>
 800d336:	6821      	ldr	r1, [r4, #0]
 800d338:	1a6d      	subs	r5, r5, r1
 800d33a:	4629      	mov	r1, r5
 800d33c:	4638      	mov	r0, r7
 800d33e:	f7ff ffa7 	bl	800d290 <sbrk_aligned>
 800d342:	3001      	adds	r0, #1
 800d344:	d037      	beq.n	800d3b6 <_malloc_r+0xe6>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	442b      	add	r3, r5
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	f8d8 3000 	ldr.w	r3, [r8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d038      	beq.n	800d3c6 <_malloc_r+0xf6>
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	42a2      	cmp	r2, r4
 800d358:	d12b      	bne.n	800d3b2 <_malloc_r+0xe2>
 800d35a:	2200      	movs	r2, #0
 800d35c:	605a      	str	r2, [r3, #4]
 800d35e:	e00f      	b.n	800d380 <_malloc_r+0xb0>
 800d360:	6822      	ldr	r2, [r4, #0]
 800d362:	1b52      	subs	r2, r2, r5
 800d364:	d41f      	bmi.n	800d3a6 <_malloc_r+0xd6>
 800d366:	2a0b      	cmp	r2, #11
 800d368:	d917      	bls.n	800d39a <_malloc_r+0xca>
 800d36a:	1961      	adds	r1, r4, r5
 800d36c:	42a3      	cmp	r3, r4
 800d36e:	6025      	str	r5, [r4, #0]
 800d370:	bf18      	it	ne
 800d372:	6059      	strne	r1, [r3, #4]
 800d374:	6863      	ldr	r3, [r4, #4]
 800d376:	bf08      	it	eq
 800d378:	f8c8 1000 	streq.w	r1, [r8]
 800d37c:	5162      	str	r2, [r4, r5]
 800d37e:	604b      	str	r3, [r1, #4]
 800d380:	4638      	mov	r0, r7
 800d382:	f104 060b 	add.w	r6, r4, #11
 800d386:	f000 f829 	bl	800d3dc <__malloc_unlock>
 800d38a:	f026 0607 	bic.w	r6, r6, #7
 800d38e:	1d23      	adds	r3, r4, #4
 800d390:	1af2      	subs	r2, r6, r3
 800d392:	d0ae      	beq.n	800d2f2 <_malloc_r+0x22>
 800d394:	1b9b      	subs	r3, r3, r6
 800d396:	50a3      	str	r3, [r4, r2]
 800d398:	e7ab      	b.n	800d2f2 <_malloc_r+0x22>
 800d39a:	42a3      	cmp	r3, r4
 800d39c:	6862      	ldr	r2, [r4, #4]
 800d39e:	d1dd      	bne.n	800d35c <_malloc_r+0x8c>
 800d3a0:	f8c8 2000 	str.w	r2, [r8]
 800d3a4:	e7ec      	b.n	800d380 <_malloc_r+0xb0>
 800d3a6:	4623      	mov	r3, r4
 800d3a8:	6864      	ldr	r4, [r4, #4]
 800d3aa:	e7ac      	b.n	800d306 <_malloc_r+0x36>
 800d3ac:	4634      	mov	r4, r6
 800d3ae:	6876      	ldr	r6, [r6, #4]
 800d3b0:	e7b4      	b.n	800d31c <_malloc_r+0x4c>
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	e7cc      	b.n	800d350 <_malloc_r+0x80>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	603b      	str	r3, [r7, #0]
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f000 f80e 	bl	800d3dc <__malloc_unlock>
 800d3c0:	e797      	b.n	800d2f2 <_malloc_r+0x22>
 800d3c2:	6025      	str	r5, [r4, #0]
 800d3c4:	e7dc      	b.n	800d380 <_malloc_r+0xb0>
 800d3c6:	605b      	str	r3, [r3, #4]
 800d3c8:	deff      	udf	#255	; 0xff
 800d3ca:	bf00      	nop
 800d3cc:	240005b8 	.word	0x240005b8

0800d3d0 <__malloc_lock>:
 800d3d0:	4801      	ldr	r0, [pc, #4]	; (800d3d8 <__malloc_lock+0x8>)
 800d3d2:	f7ff bf01 	b.w	800d1d8 <__retarget_lock_acquire_recursive>
 800d3d6:	bf00      	nop
 800d3d8:	240005b4 	.word	0x240005b4

0800d3dc <__malloc_unlock>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	; (800d3e4 <__malloc_unlock+0x8>)
 800d3de:	f7ff befc 	b.w	800d1da <__retarget_lock_release_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	240005b4 	.word	0x240005b4

0800d3e8 <__ssputs_r>:
 800d3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ec:	688e      	ldr	r6, [r1, #8]
 800d3ee:	461f      	mov	r7, r3
 800d3f0:	42be      	cmp	r6, r7
 800d3f2:	680b      	ldr	r3, [r1, #0]
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	4690      	mov	r8, r2
 800d3fa:	d82c      	bhi.n	800d456 <__ssputs_r+0x6e>
 800d3fc:	898a      	ldrh	r2, [r1, #12]
 800d3fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d402:	d026      	beq.n	800d452 <__ssputs_r+0x6a>
 800d404:	6965      	ldr	r5, [r4, #20]
 800d406:	6909      	ldr	r1, [r1, #16]
 800d408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d40c:	eba3 0901 	sub.w	r9, r3, r1
 800d410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d414:	1c7b      	adds	r3, r7, #1
 800d416:	444b      	add	r3, r9
 800d418:	106d      	asrs	r5, r5, #1
 800d41a:	429d      	cmp	r5, r3
 800d41c:	bf38      	it	cc
 800d41e:	461d      	movcc	r5, r3
 800d420:	0553      	lsls	r3, r2, #21
 800d422:	d527      	bpl.n	800d474 <__ssputs_r+0x8c>
 800d424:	4629      	mov	r1, r5
 800d426:	f7ff ff53 	bl	800d2d0 <_malloc_r>
 800d42a:	4606      	mov	r6, r0
 800d42c:	b360      	cbz	r0, 800d488 <__ssputs_r+0xa0>
 800d42e:	6921      	ldr	r1, [r4, #16]
 800d430:	464a      	mov	r2, r9
 800d432:	f7ff fed3 	bl	800d1dc <memcpy>
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	6126      	str	r6, [r4, #16]
 800d444:	6165      	str	r5, [r4, #20]
 800d446:	444e      	add	r6, r9
 800d448:	eba5 0509 	sub.w	r5, r5, r9
 800d44c:	6026      	str	r6, [r4, #0]
 800d44e:	60a5      	str	r5, [r4, #8]
 800d450:	463e      	mov	r6, r7
 800d452:	42be      	cmp	r6, r7
 800d454:	d900      	bls.n	800d458 <__ssputs_r+0x70>
 800d456:	463e      	mov	r6, r7
 800d458:	6820      	ldr	r0, [r4, #0]
 800d45a:	4632      	mov	r2, r6
 800d45c:	4641      	mov	r1, r8
 800d45e:	f000 faab 	bl	800d9b8 <memmove>
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	1b9b      	subs	r3, r3, r6
 800d466:	60a3      	str	r3, [r4, #8]
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	4433      	add	r3, r6
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	2000      	movs	r0, #0
 800d470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d474:	462a      	mov	r2, r5
 800d476:	f000 fac9 	bl	800da0c <_realloc_r>
 800d47a:	4606      	mov	r6, r0
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d1e0      	bne.n	800d442 <__ssputs_r+0x5a>
 800d480:	6921      	ldr	r1, [r4, #16]
 800d482:	4650      	mov	r0, sl
 800d484:	f7ff feb8 	bl	800d1f8 <_free_r>
 800d488:	230c      	movs	r3, #12
 800d48a:	f8ca 3000 	str.w	r3, [sl]
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d494:	81a3      	strh	r3, [r4, #12]
 800d496:	f04f 30ff 	mov.w	r0, #4294967295
 800d49a:	e7e9      	b.n	800d470 <__ssputs_r+0x88>

0800d49c <_svfiprintf_r>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	4698      	mov	r8, r3
 800d4a2:	898b      	ldrh	r3, [r1, #12]
 800d4a4:	061b      	lsls	r3, r3, #24
 800d4a6:	b09d      	sub	sp, #116	; 0x74
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	d50e      	bpl.n	800d4ce <_svfiprintf_r+0x32>
 800d4b0:	690b      	ldr	r3, [r1, #16]
 800d4b2:	b963      	cbnz	r3, 800d4ce <_svfiprintf_r+0x32>
 800d4b4:	2140      	movs	r1, #64	; 0x40
 800d4b6:	f7ff ff0b 	bl	800d2d0 <_malloc_r>
 800d4ba:	6028      	str	r0, [r5, #0]
 800d4bc:	6128      	str	r0, [r5, #16]
 800d4be:	b920      	cbnz	r0, 800d4ca <_svfiprintf_r+0x2e>
 800d4c0:	230c      	movs	r3, #12
 800d4c2:	603b      	str	r3, [r7, #0]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e0d0      	b.n	800d66c <_svfiprintf_r+0x1d0>
 800d4ca:	2340      	movs	r3, #64	; 0x40
 800d4cc:	616b      	str	r3, [r5, #20]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d2:	2320      	movs	r3, #32
 800d4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4dc:	2330      	movs	r3, #48	; 0x30
 800d4de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d684 <_svfiprintf_r+0x1e8>
 800d4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4e6:	f04f 0901 	mov.w	r9, #1
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	469a      	mov	sl, r3
 800d4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4f2:	b10a      	cbz	r2, 800d4f8 <_svfiprintf_r+0x5c>
 800d4f4:	2a25      	cmp	r2, #37	; 0x25
 800d4f6:	d1f9      	bne.n	800d4ec <_svfiprintf_r+0x50>
 800d4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4fc:	d00b      	beq.n	800d516 <_svfiprintf_r+0x7a>
 800d4fe:	465b      	mov	r3, fp
 800d500:	4622      	mov	r2, r4
 800d502:	4629      	mov	r1, r5
 800d504:	4638      	mov	r0, r7
 800d506:	f7ff ff6f 	bl	800d3e8 <__ssputs_r>
 800d50a:	3001      	adds	r0, #1
 800d50c:	f000 80a9 	beq.w	800d662 <_svfiprintf_r+0x1c6>
 800d510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d512:	445a      	add	r2, fp
 800d514:	9209      	str	r2, [sp, #36]	; 0x24
 800d516:	f89a 3000 	ldrb.w	r3, [sl]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 80a1 	beq.w	800d662 <_svfiprintf_r+0x1c6>
 800d520:	2300      	movs	r3, #0
 800d522:	f04f 32ff 	mov.w	r2, #4294967295
 800d526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d52a:	f10a 0a01 	add.w	sl, sl, #1
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	9307      	str	r3, [sp, #28]
 800d532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d536:	931a      	str	r3, [sp, #104]	; 0x68
 800d538:	4654      	mov	r4, sl
 800d53a:	2205      	movs	r2, #5
 800d53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d540:	4850      	ldr	r0, [pc, #320]	; (800d684 <_svfiprintf_r+0x1e8>)
 800d542:	f7f2 fed5 	bl	80002f0 <memchr>
 800d546:	9a04      	ldr	r2, [sp, #16]
 800d548:	b9d8      	cbnz	r0, 800d582 <_svfiprintf_r+0xe6>
 800d54a:	06d0      	lsls	r0, r2, #27
 800d54c:	bf44      	itt	mi
 800d54e:	2320      	movmi	r3, #32
 800d550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d554:	0711      	lsls	r1, r2, #28
 800d556:	bf44      	itt	mi
 800d558:	232b      	movmi	r3, #43	; 0x2b
 800d55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d55e:	f89a 3000 	ldrb.w	r3, [sl]
 800d562:	2b2a      	cmp	r3, #42	; 0x2a
 800d564:	d015      	beq.n	800d592 <_svfiprintf_r+0xf6>
 800d566:	9a07      	ldr	r2, [sp, #28]
 800d568:	4654      	mov	r4, sl
 800d56a:	2000      	movs	r0, #0
 800d56c:	f04f 0c0a 	mov.w	ip, #10
 800d570:	4621      	mov	r1, r4
 800d572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d576:	3b30      	subs	r3, #48	; 0x30
 800d578:	2b09      	cmp	r3, #9
 800d57a:	d94d      	bls.n	800d618 <_svfiprintf_r+0x17c>
 800d57c:	b1b0      	cbz	r0, 800d5ac <_svfiprintf_r+0x110>
 800d57e:	9207      	str	r2, [sp, #28]
 800d580:	e014      	b.n	800d5ac <_svfiprintf_r+0x110>
 800d582:	eba0 0308 	sub.w	r3, r0, r8
 800d586:	fa09 f303 	lsl.w	r3, r9, r3
 800d58a:	4313      	orrs	r3, r2
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	46a2      	mov	sl, r4
 800d590:	e7d2      	b.n	800d538 <_svfiprintf_r+0x9c>
 800d592:	9b03      	ldr	r3, [sp, #12]
 800d594:	1d19      	adds	r1, r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	9103      	str	r1, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfbb      	ittet	lt
 800d59e:	425b      	neglt	r3, r3
 800d5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d5a4:	9307      	strge	r3, [sp, #28]
 800d5a6:	9307      	strlt	r3, [sp, #28]
 800d5a8:	bfb8      	it	lt
 800d5aa:	9204      	strlt	r2, [sp, #16]
 800d5ac:	7823      	ldrb	r3, [r4, #0]
 800d5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d5b0:	d10c      	bne.n	800d5cc <_svfiprintf_r+0x130>
 800d5b2:	7863      	ldrb	r3, [r4, #1]
 800d5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b6:	d134      	bne.n	800d622 <_svfiprintf_r+0x186>
 800d5b8:	9b03      	ldr	r3, [sp, #12]
 800d5ba:	1d1a      	adds	r2, r3, #4
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	9203      	str	r2, [sp, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bfb8      	it	lt
 800d5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5c8:	3402      	adds	r4, #2
 800d5ca:	9305      	str	r3, [sp, #20]
 800d5cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d694 <_svfiprintf_r+0x1f8>
 800d5d0:	7821      	ldrb	r1, [r4, #0]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	f7f2 fe8b 	bl	80002f0 <memchr>
 800d5da:	b138      	cbz	r0, 800d5ec <_svfiprintf_r+0x150>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	eba0 000a 	sub.w	r0, r0, sl
 800d5e2:	2240      	movs	r2, #64	; 0x40
 800d5e4:	4082      	lsls	r2, r0
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	3401      	adds	r4, #1
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f0:	4825      	ldr	r0, [pc, #148]	; (800d688 <_svfiprintf_r+0x1ec>)
 800d5f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5f6:	2206      	movs	r2, #6
 800d5f8:	f7f2 fe7a 	bl	80002f0 <memchr>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d038      	beq.n	800d672 <_svfiprintf_r+0x1d6>
 800d600:	4b22      	ldr	r3, [pc, #136]	; (800d68c <_svfiprintf_r+0x1f0>)
 800d602:	bb1b      	cbnz	r3, 800d64c <_svfiprintf_r+0x1b0>
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	3307      	adds	r3, #7
 800d608:	f023 0307 	bic.w	r3, r3, #7
 800d60c:	3308      	adds	r3, #8
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d612:	4433      	add	r3, r6
 800d614:	9309      	str	r3, [sp, #36]	; 0x24
 800d616:	e768      	b.n	800d4ea <_svfiprintf_r+0x4e>
 800d618:	fb0c 3202 	mla	r2, ip, r2, r3
 800d61c:	460c      	mov	r4, r1
 800d61e:	2001      	movs	r0, #1
 800d620:	e7a6      	b.n	800d570 <_svfiprintf_r+0xd4>
 800d622:	2300      	movs	r3, #0
 800d624:	3401      	adds	r4, #1
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	4619      	mov	r1, r3
 800d62a:	f04f 0c0a 	mov.w	ip, #10
 800d62e:	4620      	mov	r0, r4
 800d630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d634:	3a30      	subs	r2, #48	; 0x30
 800d636:	2a09      	cmp	r2, #9
 800d638:	d903      	bls.n	800d642 <_svfiprintf_r+0x1a6>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0c6      	beq.n	800d5cc <_svfiprintf_r+0x130>
 800d63e:	9105      	str	r1, [sp, #20]
 800d640:	e7c4      	b.n	800d5cc <_svfiprintf_r+0x130>
 800d642:	fb0c 2101 	mla	r1, ip, r1, r2
 800d646:	4604      	mov	r4, r0
 800d648:	2301      	movs	r3, #1
 800d64a:	e7f0      	b.n	800d62e <_svfiprintf_r+0x192>
 800d64c:	ab03      	add	r3, sp, #12
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	462a      	mov	r2, r5
 800d652:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <_svfiprintf_r+0x1f4>)
 800d654:	a904      	add	r1, sp, #16
 800d656:	4638      	mov	r0, r7
 800d658:	f3af 8000 	nop.w
 800d65c:	1c42      	adds	r2, r0, #1
 800d65e:	4606      	mov	r6, r0
 800d660:	d1d6      	bne.n	800d610 <_svfiprintf_r+0x174>
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	065b      	lsls	r3, r3, #25
 800d666:	f53f af2d 	bmi.w	800d4c4 <_svfiprintf_r+0x28>
 800d66a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d66c:	b01d      	add	sp, #116	; 0x74
 800d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d672:	ab03      	add	r3, sp, #12
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	462a      	mov	r2, r5
 800d678:	4b05      	ldr	r3, [pc, #20]	; (800d690 <_svfiprintf_r+0x1f4>)
 800d67a:	a904      	add	r1, sp, #16
 800d67c:	4638      	mov	r0, r7
 800d67e:	f000 f879 	bl	800d774 <_printf_i>
 800d682:	e7eb      	b.n	800d65c <_svfiprintf_r+0x1c0>
 800d684:	0800db41 	.word	0x0800db41
 800d688:	0800db4b 	.word	0x0800db4b
 800d68c:	00000000 	.word	0x00000000
 800d690:	0800d3e9 	.word	0x0800d3e9
 800d694:	0800db47 	.word	0x0800db47

0800d698 <_printf_common>:
 800d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d69c:	4616      	mov	r6, r2
 800d69e:	4699      	mov	r9, r3
 800d6a0:	688a      	ldr	r2, [r1, #8]
 800d6a2:	690b      	ldr	r3, [r1, #16]
 800d6a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	bfb8      	it	lt
 800d6ac:	4613      	movlt	r3, r2
 800d6ae:	6033      	str	r3, [r6, #0]
 800d6b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6b4:	4607      	mov	r7, r0
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	b10a      	cbz	r2, 800d6be <_printf_common+0x26>
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	6033      	str	r3, [r6, #0]
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	0699      	lsls	r1, r3, #26
 800d6c2:	bf42      	ittt	mi
 800d6c4:	6833      	ldrmi	r3, [r6, #0]
 800d6c6:	3302      	addmi	r3, #2
 800d6c8:	6033      	strmi	r3, [r6, #0]
 800d6ca:	6825      	ldr	r5, [r4, #0]
 800d6cc:	f015 0506 	ands.w	r5, r5, #6
 800d6d0:	d106      	bne.n	800d6e0 <_printf_common+0x48>
 800d6d2:	f104 0a19 	add.w	sl, r4, #25
 800d6d6:	68e3      	ldr	r3, [r4, #12]
 800d6d8:	6832      	ldr	r2, [r6, #0]
 800d6da:	1a9b      	subs	r3, r3, r2
 800d6dc:	42ab      	cmp	r3, r5
 800d6de:	dc26      	bgt.n	800d72e <_printf_common+0x96>
 800d6e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6e4:	1e13      	subs	r3, r2, #0
 800d6e6:	6822      	ldr	r2, [r4, #0]
 800d6e8:	bf18      	it	ne
 800d6ea:	2301      	movne	r3, #1
 800d6ec:	0692      	lsls	r2, r2, #26
 800d6ee:	d42b      	bmi.n	800d748 <_printf_common+0xb0>
 800d6f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	47c0      	blx	r8
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	d01e      	beq.n	800d73c <_printf_common+0xa4>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	6922      	ldr	r2, [r4, #16]
 800d702:	f003 0306 	and.w	r3, r3, #6
 800d706:	2b04      	cmp	r3, #4
 800d708:	bf02      	ittt	eq
 800d70a:	68e5      	ldreq	r5, [r4, #12]
 800d70c:	6833      	ldreq	r3, [r6, #0]
 800d70e:	1aed      	subeq	r5, r5, r3
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	bf0c      	ite	eq
 800d714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d718:	2500      	movne	r5, #0
 800d71a:	4293      	cmp	r3, r2
 800d71c:	bfc4      	itt	gt
 800d71e:	1a9b      	subgt	r3, r3, r2
 800d720:	18ed      	addgt	r5, r5, r3
 800d722:	2600      	movs	r6, #0
 800d724:	341a      	adds	r4, #26
 800d726:	42b5      	cmp	r5, r6
 800d728:	d11a      	bne.n	800d760 <_printf_common+0xc8>
 800d72a:	2000      	movs	r0, #0
 800d72c:	e008      	b.n	800d740 <_printf_common+0xa8>
 800d72e:	2301      	movs	r3, #1
 800d730:	4652      	mov	r2, sl
 800d732:	4649      	mov	r1, r9
 800d734:	4638      	mov	r0, r7
 800d736:	47c0      	blx	r8
 800d738:	3001      	adds	r0, #1
 800d73a:	d103      	bne.n	800d744 <_printf_common+0xac>
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d744:	3501      	adds	r5, #1
 800d746:	e7c6      	b.n	800d6d6 <_printf_common+0x3e>
 800d748:	18e1      	adds	r1, r4, r3
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	2030      	movs	r0, #48	; 0x30
 800d74e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d752:	4422      	add	r2, r4
 800d754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d75c:	3302      	adds	r3, #2
 800d75e:	e7c7      	b.n	800d6f0 <_printf_common+0x58>
 800d760:	2301      	movs	r3, #1
 800d762:	4622      	mov	r2, r4
 800d764:	4649      	mov	r1, r9
 800d766:	4638      	mov	r0, r7
 800d768:	47c0      	blx	r8
 800d76a:	3001      	adds	r0, #1
 800d76c:	d0e6      	beq.n	800d73c <_printf_common+0xa4>
 800d76e:	3601      	adds	r6, #1
 800d770:	e7d9      	b.n	800d726 <_printf_common+0x8e>
	...

0800d774 <_printf_i>:
 800d774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d778:	7e0f      	ldrb	r7, [r1, #24]
 800d77a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d77c:	2f78      	cmp	r7, #120	; 0x78
 800d77e:	4691      	mov	r9, r2
 800d780:	4680      	mov	r8, r0
 800d782:	460c      	mov	r4, r1
 800d784:	469a      	mov	sl, r3
 800d786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d78a:	d807      	bhi.n	800d79c <_printf_i+0x28>
 800d78c:	2f62      	cmp	r7, #98	; 0x62
 800d78e:	d80a      	bhi.n	800d7a6 <_printf_i+0x32>
 800d790:	2f00      	cmp	r7, #0
 800d792:	f000 80d4 	beq.w	800d93e <_printf_i+0x1ca>
 800d796:	2f58      	cmp	r7, #88	; 0x58
 800d798:	f000 80c0 	beq.w	800d91c <_printf_i+0x1a8>
 800d79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7a4:	e03a      	b.n	800d81c <_printf_i+0xa8>
 800d7a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7aa:	2b15      	cmp	r3, #21
 800d7ac:	d8f6      	bhi.n	800d79c <_printf_i+0x28>
 800d7ae:	a101      	add	r1, pc, #4	; (adr r1, 800d7b4 <_printf_i+0x40>)
 800d7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7b4:	0800d80d 	.word	0x0800d80d
 800d7b8:	0800d821 	.word	0x0800d821
 800d7bc:	0800d79d 	.word	0x0800d79d
 800d7c0:	0800d79d 	.word	0x0800d79d
 800d7c4:	0800d79d 	.word	0x0800d79d
 800d7c8:	0800d79d 	.word	0x0800d79d
 800d7cc:	0800d821 	.word	0x0800d821
 800d7d0:	0800d79d 	.word	0x0800d79d
 800d7d4:	0800d79d 	.word	0x0800d79d
 800d7d8:	0800d79d 	.word	0x0800d79d
 800d7dc:	0800d79d 	.word	0x0800d79d
 800d7e0:	0800d925 	.word	0x0800d925
 800d7e4:	0800d84d 	.word	0x0800d84d
 800d7e8:	0800d8df 	.word	0x0800d8df
 800d7ec:	0800d79d 	.word	0x0800d79d
 800d7f0:	0800d79d 	.word	0x0800d79d
 800d7f4:	0800d947 	.word	0x0800d947
 800d7f8:	0800d79d 	.word	0x0800d79d
 800d7fc:	0800d84d 	.word	0x0800d84d
 800d800:	0800d79d 	.word	0x0800d79d
 800d804:	0800d79d 	.word	0x0800d79d
 800d808:	0800d8e7 	.word	0x0800d8e7
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	1d1a      	adds	r2, r3, #4
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	602a      	str	r2, [r5, #0]
 800d814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d81c:	2301      	movs	r3, #1
 800d81e:	e09f      	b.n	800d960 <_printf_i+0x1ec>
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	0607      	lsls	r7, r0, #24
 800d826:	f103 0104 	add.w	r1, r3, #4
 800d82a:	6029      	str	r1, [r5, #0]
 800d82c:	d501      	bpl.n	800d832 <_printf_i+0xbe>
 800d82e:	681e      	ldr	r6, [r3, #0]
 800d830:	e003      	b.n	800d83a <_printf_i+0xc6>
 800d832:	0646      	lsls	r6, r0, #25
 800d834:	d5fb      	bpl.n	800d82e <_printf_i+0xba>
 800d836:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d83a:	2e00      	cmp	r6, #0
 800d83c:	da03      	bge.n	800d846 <_printf_i+0xd2>
 800d83e:	232d      	movs	r3, #45	; 0x2d
 800d840:	4276      	negs	r6, r6
 800d842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d846:	485a      	ldr	r0, [pc, #360]	; (800d9b0 <_printf_i+0x23c>)
 800d848:	230a      	movs	r3, #10
 800d84a:	e012      	b.n	800d872 <_printf_i+0xfe>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	6820      	ldr	r0, [r4, #0]
 800d850:	1d19      	adds	r1, r3, #4
 800d852:	6029      	str	r1, [r5, #0]
 800d854:	0605      	lsls	r5, r0, #24
 800d856:	d501      	bpl.n	800d85c <_printf_i+0xe8>
 800d858:	681e      	ldr	r6, [r3, #0]
 800d85a:	e002      	b.n	800d862 <_printf_i+0xee>
 800d85c:	0641      	lsls	r1, r0, #25
 800d85e:	d5fb      	bpl.n	800d858 <_printf_i+0xe4>
 800d860:	881e      	ldrh	r6, [r3, #0]
 800d862:	4853      	ldr	r0, [pc, #332]	; (800d9b0 <_printf_i+0x23c>)
 800d864:	2f6f      	cmp	r7, #111	; 0x6f
 800d866:	bf0c      	ite	eq
 800d868:	2308      	moveq	r3, #8
 800d86a:	230a      	movne	r3, #10
 800d86c:	2100      	movs	r1, #0
 800d86e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d872:	6865      	ldr	r5, [r4, #4]
 800d874:	60a5      	str	r5, [r4, #8]
 800d876:	2d00      	cmp	r5, #0
 800d878:	bfa2      	ittt	ge
 800d87a:	6821      	ldrge	r1, [r4, #0]
 800d87c:	f021 0104 	bicge.w	r1, r1, #4
 800d880:	6021      	strge	r1, [r4, #0]
 800d882:	b90e      	cbnz	r6, 800d888 <_printf_i+0x114>
 800d884:	2d00      	cmp	r5, #0
 800d886:	d04b      	beq.n	800d920 <_printf_i+0x1ac>
 800d888:	4615      	mov	r5, r2
 800d88a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d88e:	fb03 6711 	mls	r7, r3, r1, r6
 800d892:	5dc7      	ldrb	r7, [r0, r7]
 800d894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d898:	4637      	mov	r7, r6
 800d89a:	42bb      	cmp	r3, r7
 800d89c:	460e      	mov	r6, r1
 800d89e:	d9f4      	bls.n	800d88a <_printf_i+0x116>
 800d8a0:	2b08      	cmp	r3, #8
 800d8a2:	d10b      	bne.n	800d8bc <_printf_i+0x148>
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	07de      	lsls	r6, r3, #31
 800d8a8:	d508      	bpl.n	800d8bc <_printf_i+0x148>
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	6861      	ldr	r1, [r4, #4]
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	bfde      	ittt	le
 800d8b2:	2330      	movle	r3, #48	; 0x30
 800d8b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8bc:	1b52      	subs	r2, r2, r5
 800d8be:	6122      	str	r2, [r4, #16]
 800d8c0:	f8cd a000 	str.w	sl, [sp]
 800d8c4:	464b      	mov	r3, r9
 800d8c6:	aa03      	add	r2, sp, #12
 800d8c8:	4621      	mov	r1, r4
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	f7ff fee4 	bl	800d698 <_printf_common>
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	d14a      	bne.n	800d96a <_printf_i+0x1f6>
 800d8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d8:	b004      	add	sp, #16
 800d8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	f043 0320 	orr.w	r3, r3, #32
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	4833      	ldr	r0, [pc, #204]	; (800d9b4 <_printf_i+0x240>)
 800d8e8:	2778      	movs	r7, #120	; 0x78
 800d8ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	6829      	ldr	r1, [r5, #0]
 800d8f2:	061f      	lsls	r7, r3, #24
 800d8f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8f8:	d402      	bmi.n	800d900 <_printf_i+0x18c>
 800d8fa:	065f      	lsls	r7, r3, #25
 800d8fc:	bf48      	it	mi
 800d8fe:	b2b6      	uxthmi	r6, r6
 800d900:	07df      	lsls	r7, r3, #31
 800d902:	bf48      	it	mi
 800d904:	f043 0320 	orrmi.w	r3, r3, #32
 800d908:	6029      	str	r1, [r5, #0]
 800d90a:	bf48      	it	mi
 800d90c:	6023      	strmi	r3, [r4, #0]
 800d90e:	b91e      	cbnz	r6, 800d918 <_printf_i+0x1a4>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	f023 0320 	bic.w	r3, r3, #32
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	2310      	movs	r3, #16
 800d91a:	e7a7      	b.n	800d86c <_printf_i+0xf8>
 800d91c:	4824      	ldr	r0, [pc, #144]	; (800d9b0 <_printf_i+0x23c>)
 800d91e:	e7e4      	b.n	800d8ea <_printf_i+0x176>
 800d920:	4615      	mov	r5, r2
 800d922:	e7bd      	b.n	800d8a0 <_printf_i+0x12c>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	6826      	ldr	r6, [r4, #0]
 800d928:	6961      	ldr	r1, [r4, #20]
 800d92a:	1d18      	adds	r0, r3, #4
 800d92c:	6028      	str	r0, [r5, #0]
 800d92e:	0635      	lsls	r5, r6, #24
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	d501      	bpl.n	800d938 <_printf_i+0x1c4>
 800d934:	6019      	str	r1, [r3, #0]
 800d936:	e002      	b.n	800d93e <_printf_i+0x1ca>
 800d938:	0670      	lsls	r0, r6, #25
 800d93a:	d5fb      	bpl.n	800d934 <_printf_i+0x1c0>
 800d93c:	8019      	strh	r1, [r3, #0]
 800d93e:	2300      	movs	r3, #0
 800d940:	6123      	str	r3, [r4, #16]
 800d942:	4615      	mov	r5, r2
 800d944:	e7bc      	b.n	800d8c0 <_printf_i+0x14c>
 800d946:	682b      	ldr	r3, [r5, #0]
 800d948:	1d1a      	adds	r2, r3, #4
 800d94a:	602a      	str	r2, [r5, #0]
 800d94c:	681d      	ldr	r5, [r3, #0]
 800d94e:	6862      	ldr	r2, [r4, #4]
 800d950:	2100      	movs	r1, #0
 800d952:	4628      	mov	r0, r5
 800d954:	f7f2 fccc 	bl	80002f0 <memchr>
 800d958:	b108      	cbz	r0, 800d95e <_printf_i+0x1ea>
 800d95a:	1b40      	subs	r0, r0, r5
 800d95c:	6060      	str	r0, [r4, #4]
 800d95e:	6863      	ldr	r3, [r4, #4]
 800d960:	6123      	str	r3, [r4, #16]
 800d962:	2300      	movs	r3, #0
 800d964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d968:	e7aa      	b.n	800d8c0 <_printf_i+0x14c>
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	462a      	mov	r2, r5
 800d96e:	4649      	mov	r1, r9
 800d970:	4640      	mov	r0, r8
 800d972:	47d0      	blx	sl
 800d974:	3001      	adds	r0, #1
 800d976:	d0ad      	beq.n	800d8d4 <_printf_i+0x160>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	079b      	lsls	r3, r3, #30
 800d97c:	d413      	bmi.n	800d9a6 <_printf_i+0x232>
 800d97e:	68e0      	ldr	r0, [r4, #12]
 800d980:	9b03      	ldr	r3, [sp, #12]
 800d982:	4298      	cmp	r0, r3
 800d984:	bfb8      	it	lt
 800d986:	4618      	movlt	r0, r3
 800d988:	e7a6      	b.n	800d8d8 <_printf_i+0x164>
 800d98a:	2301      	movs	r3, #1
 800d98c:	4632      	mov	r2, r6
 800d98e:	4649      	mov	r1, r9
 800d990:	4640      	mov	r0, r8
 800d992:	47d0      	blx	sl
 800d994:	3001      	adds	r0, #1
 800d996:	d09d      	beq.n	800d8d4 <_printf_i+0x160>
 800d998:	3501      	adds	r5, #1
 800d99a:	68e3      	ldr	r3, [r4, #12]
 800d99c:	9903      	ldr	r1, [sp, #12]
 800d99e:	1a5b      	subs	r3, r3, r1
 800d9a0:	42ab      	cmp	r3, r5
 800d9a2:	dcf2      	bgt.n	800d98a <_printf_i+0x216>
 800d9a4:	e7eb      	b.n	800d97e <_printf_i+0x20a>
 800d9a6:	2500      	movs	r5, #0
 800d9a8:	f104 0619 	add.w	r6, r4, #25
 800d9ac:	e7f5      	b.n	800d99a <_printf_i+0x226>
 800d9ae:	bf00      	nop
 800d9b0:	0800db52 	.word	0x0800db52
 800d9b4:	0800db63 	.word	0x0800db63

0800d9b8 <memmove>:
 800d9b8:	4288      	cmp	r0, r1
 800d9ba:	b510      	push	{r4, lr}
 800d9bc:	eb01 0402 	add.w	r4, r1, r2
 800d9c0:	d902      	bls.n	800d9c8 <memmove+0x10>
 800d9c2:	4284      	cmp	r4, r0
 800d9c4:	4623      	mov	r3, r4
 800d9c6:	d807      	bhi.n	800d9d8 <memmove+0x20>
 800d9c8:	1e43      	subs	r3, r0, #1
 800d9ca:	42a1      	cmp	r1, r4
 800d9cc:	d008      	beq.n	800d9e0 <memmove+0x28>
 800d9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9d6:	e7f8      	b.n	800d9ca <memmove+0x12>
 800d9d8:	4402      	add	r2, r0
 800d9da:	4601      	mov	r1, r0
 800d9dc:	428a      	cmp	r2, r1
 800d9de:	d100      	bne.n	800d9e2 <memmove+0x2a>
 800d9e0:	bd10      	pop	{r4, pc}
 800d9e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9ea:	e7f7      	b.n	800d9dc <memmove+0x24>

0800d9ec <_sbrk_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d06      	ldr	r5, [pc, #24]	; (800da08 <_sbrk_r+0x1c>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	602b      	str	r3, [r5, #0]
 800d9f8:	f7ff fb24 	bl	800d044 <_sbrk>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_sbrk_r+0x1a>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_sbrk_r+0x1a>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	240005b0 	.word	0x240005b0

0800da0c <_realloc_r>:
 800da0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da10:	4680      	mov	r8, r0
 800da12:	4614      	mov	r4, r2
 800da14:	460e      	mov	r6, r1
 800da16:	b921      	cbnz	r1, 800da22 <_realloc_r+0x16>
 800da18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	4611      	mov	r1, r2
 800da1e:	f7ff bc57 	b.w	800d2d0 <_malloc_r>
 800da22:	b92a      	cbnz	r2, 800da30 <_realloc_r+0x24>
 800da24:	f7ff fbe8 	bl	800d1f8 <_free_r>
 800da28:	4625      	mov	r5, r4
 800da2a:	4628      	mov	r0, r5
 800da2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da30:	f000 f81b 	bl	800da6a <_malloc_usable_size_r>
 800da34:	4284      	cmp	r4, r0
 800da36:	4607      	mov	r7, r0
 800da38:	d802      	bhi.n	800da40 <_realloc_r+0x34>
 800da3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da3e:	d812      	bhi.n	800da66 <_realloc_r+0x5a>
 800da40:	4621      	mov	r1, r4
 800da42:	4640      	mov	r0, r8
 800da44:	f7ff fc44 	bl	800d2d0 <_malloc_r>
 800da48:	4605      	mov	r5, r0
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0ed      	beq.n	800da2a <_realloc_r+0x1e>
 800da4e:	42bc      	cmp	r4, r7
 800da50:	4622      	mov	r2, r4
 800da52:	4631      	mov	r1, r6
 800da54:	bf28      	it	cs
 800da56:	463a      	movcs	r2, r7
 800da58:	f7ff fbc0 	bl	800d1dc <memcpy>
 800da5c:	4631      	mov	r1, r6
 800da5e:	4640      	mov	r0, r8
 800da60:	f7ff fbca 	bl	800d1f8 <_free_r>
 800da64:	e7e1      	b.n	800da2a <_realloc_r+0x1e>
 800da66:	4635      	mov	r5, r6
 800da68:	e7df      	b.n	800da2a <_realloc_r+0x1e>

0800da6a <_malloc_usable_size_r>:
 800da6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6e:	1f18      	subs	r0, r3, #4
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfbc      	itt	lt
 800da74:	580b      	ldrlt	r3, [r1, r0]
 800da76:	18c0      	addlt	r0, r0, r3
 800da78:	4770      	bx	lr
	...

0800da7c <_init>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr

0800da88 <_fini>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr
