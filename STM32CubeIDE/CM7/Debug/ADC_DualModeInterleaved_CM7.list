
ADC_DualModeInterleaved_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f824  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800fac4  0800fac4  0001fac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb7c  0800fb7c  0001fb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb84  0800fb84  0001fb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800fb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ec4  24000080  0800fc08  00020080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24001f44  0800fc08  00021f44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f3d1  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003547  00000000  00000000  0003f4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a8  00000000  00000000  00042a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001274  00000000  00000000  000441b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cfc8  00000000  00000000  00045424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f5c2  00000000  00000000  000823ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0019972f  00000000  00000000  000a19ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b70  00000000  00000000  0023b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  00241c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800faac 	.word	0x0800faac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800faac 	.word	0x0800faac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d009      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d006      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d003      	beq.n	80006b4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006ac:	f06f 0301 	mvn.w	r3, #1
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b2:	e055      	b.n	8000760 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10f      	bne.n	80006da <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <BSP_LED_Init+0xe0>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <BSP_LED_Init+0xe0>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <BSP_LED_Init+0xe0>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	e021      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10f      	bne.n	8000700 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <BSP_LED_Init+0xe0>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <BSP_LED_Init+0xe0>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <BSP_LED_Init+0xe0>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	e00e      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <BSP_LED_Init+0xe0>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <BSP_LED_Init+0xe0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <BSP_LED_Init+0xe0>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <BSP_LED_Init+0xe4>)
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <BSP_LED_Init+0xe8>)
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	f107 0218 	add.w	r2, r7, #24
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f005 ff52 	bl	80065ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <BSP_LED_Init+0xe8>)
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <BSP_LED_Init+0xe4>)
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f006 fa00 	bl	8006b60 <HAL_GPIO_WritePin>
  }

  return ret;
 8000760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000762:	4618      	mov	r0, r3
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	0800fafc 	.word	0x0800fafc
 8000774:	24000000 	.word	0x24000000

08000778 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d009      	beq.n	80007a0 <BSP_LED_Toggle+0x28>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d006      	beq.n	80007a0 <BSP_LED_Toggle+0x28>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d003      	beq.n	80007a0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000798:	f06f 0301 	mvn.w	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e00b      	b.n	80007b8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <BSP_LED_Toggle+0x4c>)
 80007a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <BSP_LED_Toggle+0x50>)
 80007ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4610      	mov	r0, r2
 80007b4:	f006 f9ed 	bl	8006b92 <HAL_GPIO_TogglePin>
  }

  return ret;
 80007b8:	68fb      	ldr	r3, [r7, #12]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000000 	.word	0x24000000
 80007c8:	0800fafc 	.word	0x0800fafc

080007cc <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <SystemInit+0xcc>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a30      	ldr	r2, [pc, #192]	; (8000898 <SystemInit+0xcc>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <SystemInit+0xcc>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <SystemInit+0xcc>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <SystemInit+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <SystemInit+0xd0>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemInit+0xd0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <SystemInit+0xd0>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4926      	ldr	r1, [pc, #152]	; (800089c <SystemInit+0xd0>)
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <SystemInit+0xd4>)
 8000806:	4013      	ands	r3, r2
 8000808:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <SystemInit+0xd0>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <SystemInit+0xd0>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <SystemInit+0xd0>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemInit+0xd0>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <SystemInit+0xd0>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <SystemInit+0xd0>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <SystemInit+0xd0>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <SystemInit+0xd0>)
 8000836:	2200      	movs	r2, #0
 8000838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <SystemInit+0xd0>)
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <SystemInit+0xd0>)
 8000842:	2200      	movs	r2, #0
 8000844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <SystemInit+0xd0>)
 8000848:	2200      	movs	r2, #0
 800084a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <SystemInit+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <SystemInit+0xd0>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <SystemInit+0xd0>)
 800085a:	2200      	movs	r2, #0
 800085c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <SystemInit+0xd8>)
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <SystemInit+0xd8>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <SystemInit+0xdc>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <SystemInit+0xe0>)
 8000870:	4013      	ands	r3, r2
 8000872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000876:	d202      	bcs.n	800087e <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <SystemInit+0xe4>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <SystemInit+0xe8>)
 8000880:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000884:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SystemInit+0xcc>)
 8000888:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	580000c0 	.word	0x580000c0
 80008a8:	5c001000 	.word	0x5c001000
 80008ac:	ffff0000 	.word	0xffff0000
 80008b0:	51008108 	.word	0x51008108
 80008b4:	52004000 	.word	0x52004000

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f002 fa78 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c4:	f007 f80e 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_Init+0x68>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	4913      	ldr	r1, [pc, #76]	; (8000924 <HAL_Init+0x6c>)
 80008d6:	5ccb      	ldrb	r3, [r1, r3]
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
 80008e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_Init+0x68>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_Init+0x6c>)
 80008ec:	5cd3      	ldrb	r3, [r2, r3]
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <HAL_Init+0x70>)
 80008fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_Init+0x74>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f81c 	bl	8000940 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e002      	b.n	8000918 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000912:	f000 f80d 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58024400 	.word	0x58024400
 8000924:	0800fb04 	.word	0x0800fb04
 8000928:	24000010 	.word	0x24000010
 800092c:	2400000c 	.word	0x2400000c

08000930 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_InitTick+0x60>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e021      	b.n	8000998 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_InitTick+0x64>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fa63 	bl	8002e36 <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f002 fa1f 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x68>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000018 	.word	0x24000018
 80009a4:	2400000c 	.word	0x2400000c
 80009a8:	24000014 	.word	0x24000014

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	24000018 	.word	0x24000018
 80009d0:	2400009c 	.word	0x2400009c

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2400009c 	.word	0x2400009c

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff ffee 	bl	80009d4 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_Delay+0x44>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffde 	bl	80009d4 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000018 	.word	0x24000018

08000a34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetREVID+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	0c1b      	lsrs	r3, r3, #16
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	5c001000 	.word	0x5c001000

08000a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	609a      	str	r2, [r3, #8]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3360      	adds	r3, #96	; 0x60
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f003 031f 	and.w	r3, r3, #31
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	431a      	orrs	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	611a      	str	r2, [r3, #16]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3360      	adds	r3, #96	; 0x60
 8000b36:	461a      	mov	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	601a      	str	r2, [r3, #0]
  }
}
 8000b50:	bf00      	nop
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b087      	sub	sp, #28
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3330      	adds	r3, #48	; 0x30
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	4413      	add	r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f003 031f 	and.w	r3, r3, #31
 8000bac:	211f      	movs	r1, #31
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	0e9b      	lsrs	r3, r3, #26
 8000bba:	f003 011f 	and.w	r1, r3, #31
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3314      	adds	r3, #20
 8000c10:	461a      	mov	r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	0e5b      	lsrs	r3, r3, #25
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	0d1b      	lsrs	r3, r3, #20
 8000c28:	f003 031f 	and.w	r3, r3, #31
 8000c2c:	2107      	movs	r1, #7
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	401a      	ands	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0d1b      	lsrs	r3, r3, #20
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0318 	and.w	r3, r3, #24
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c7c:	40d9      	lsrs	r1, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	400b      	ands	r3, r1
 8000c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c86:	431a      	orrs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	000fffff 	.word	0x000fffff

08000ca0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 031f 	and.w	r3, r3, #31
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6093      	str	r3, [r2, #8]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	5fffffc0 	.word	0x5fffffc0

08000cfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <LL_ADC_EnableInternalRegulator+0x24>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	6fffffc0 	.word	0x6fffffc0

08000d4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d60:	d101      	bne.n	8000d66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_ADC_Enable+0x24>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	7fffffc0 	.word	0x7fffffc0

08000d9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <LL_ADC_Disable+0x24>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	f043 0202 	orr.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	7fffffc0 	.word	0x7fffffc0

08000dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <LL_ADC_IsEnabled+0x18>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <LL_ADC_IsEnabled+0x1a>
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d101      	bne.n	8000e02 <LL_ADC_IsDisableOngoing+0x18>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_ADC_IsDisableOngoing+0x1a>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_ADC_REG_StopConversion+0x24>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	7fffffc0 	.word	0x7fffffc0

08000e38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d101      	bne.n	8000e50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <LL_ADC_INJ_StopConversion+0x24>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	f043 0220 	orr.w	r2, r3, #32
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	7fffffc0 	.word	0x7fffffc0

08000e88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d101      	bne.n	8000ea0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e18f      	b.n	80011ea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f00d fe7f 	bl	800ebdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff03 	bl	8000cfc <LL_ADC_IsDeepPowerDownEnabled>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fee9 	bl	8000cd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff1e 	bl	8000d4c <LL_ADC_IsInternalRegulatorEnabled>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff02 	bl	8000d24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <HAL_ADC_Init+0x290>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	099b      	lsrs	r3, r3, #6
 8000f26:	4a87      	ldr	r2, [pc, #540]	; (8001144 <HAL_ADC_Init+0x294>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	099b      	lsrs	r3, r3, #6
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f32:	e002      	b.n	8000f3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f9      	bne.n	8000f34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff01 	bl	8000d4c <LL_ADC_IsInternalRegulatorEnabled>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10d      	bne.n	8000f6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f54:	f043 0210 	orr.w	r2, r3, #16
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff61 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 8000f76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 8129 	bne.w	80011d8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 8125 	bne.w	80011d8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f96:	f043 0202 	orr.w	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff0e 	bl	8000dc4 <LL_ADC_IsEnabled>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d136      	bne.n	800101c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a65      	ldr	r2, [pc, #404]	; (8001148 <HAL_ADC_Init+0x298>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_ADC_Init+0x112>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a63      	ldr	r2, [pc, #396]	; (800114c <HAL_ADC_Init+0x29c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_ADC_Init+0x130>
 8000fc2:	4861      	ldr	r0, [pc, #388]	; (8001148 <HAL_ADC_Init+0x298>)
 8000fc4:	f7ff fefe 	bl	8000dc4 <LL_ADC_IsEnabled>
 8000fc8:	4604      	mov	r4, r0
 8000fca:	4860      	ldr	r0, [pc, #384]	; (800114c <HAL_ADC_Init+0x29c>)
 8000fcc:	f7ff fefa 	bl	8000dc4 <LL_ADC_IsEnabled>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	e008      	b.n	8000ff2 <HAL_ADC_Init+0x142>
 8000fe0:	485b      	ldr	r0, [pc, #364]	; (8001150 <HAL_ADC_Init+0x2a0>)
 8000fe2:	f7ff feef 	bl	8000dc4 <LL_ADC_IsEnabled>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d012      	beq.n	800101c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a53      	ldr	r2, [pc, #332]	; (8001148 <HAL_ADC_Init+0x298>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_Init+0x15a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_ADC_Init+0x29c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x15e>
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_ADC_Init+0x2a4>)
 800100c:	e000      	b.n	8001010 <HAL_ADC_Init+0x160>
 800100e:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_ADC_Init+0x2a8>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4619      	mov	r1, r3
 8001016:	4610      	mov	r0, r2
 8001018:	f7ff fd18 	bl	8000a4c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800101c:	f7ff fd0a 	bl	8000a34 <HAL_GetREVID>
 8001020:	4603      	mov	r3, r0
 8001022:	f241 0203 	movw	r2, #4099	; 0x1003
 8001026:	4293      	cmp	r3, r2
 8001028:	d914      	bls.n	8001054 <HAL_ADC_Init+0x1a4>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b10      	cmp	r3, #16
 8001030:	d110      	bne.n	8001054 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7d5b      	ldrb	r3, [r3, #21]
 8001036:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800103c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001042:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7f1b      	ldrb	r3, [r3, #28]
 8001048:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800104a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800104c:	f043 030c 	orr.w	r3, r3, #12
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	e00d      	b.n	8001070 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7d5b      	ldrb	r3, [r3, #21]
 8001058:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800105e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001064:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7f1b      	ldrb	r3, [r3, #28]
 800106a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7f1b      	ldrb	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d106      	bne.n	8001086 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	3b01      	subs	r3, #1
 800107e:	045b      	lsls	r3, r3, #17
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_ADC_Init+0x2ac>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	69b9      	ldr	r1, [r7, #24]
 80010b2:	430b      	orrs	r3, r1
 80010b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff febc 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 80010c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fede 	bl	8000e88 <LL_ADC_INJ_IsConversionOngoing>
 80010cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d15f      	bne.n	8001194 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d15c      	bne.n	8001194 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_ADC_Init+0x2b0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001102:	2b01      	cmp	r3, #1
 8001104:	d130      	bne.n	8001168 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_ADC_Init+0x2b4>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800111a:	3a01      	subs	r2, #1
 800111c:	0411      	lsls	r1, r2, #16
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001122:	4311      	orrs	r1, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001128:	4311      	orrs	r1, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800112e:	430a      	orrs	r2, r1
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	e01c      	b.n	8001178 <HAL_ADC_Init+0x2c8>
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c
 8001144:	053e2d63 	.word	0x053e2d63
 8001148:	40022000 	.word	0x40022000
 800114c:	40022100 	.word	0x40022100
 8001150:	58026000 	.word	0x58026000
 8001154:	40022300 	.word	0x40022300
 8001158:	58026300 	.word	0x58026300
 800115c:	fff0c003 	.word	0xfff0c003
 8001160:	ffffbffc 	.word	0xffffbffc
 8001164:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f001 f97e 	bl	8002490 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10c      	bne.n	80011b6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f023 010f 	bic.w	r1, r3, #15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
 80011b4:	e007      	b.n	80011c6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020f 	bic.w	r2, r2, #15
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
 80011d6:	e007      	b.n	80011e8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop

080011f4 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e16e      	b.n	80014e4 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001212:	2103      	movs	r1, #3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 ff01 	bl	800201c <ADC_ConversionStop>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800122c:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f001 f837 	bl	80022a8 <ADC_Disable>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <HAL_ADC_DeInit+0x294>)
 8001256:	400b      	ands	r3, r1
 8001258:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001262:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8001272:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001282:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8001292:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012a2:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <HAL_ADC_DeInit+0x298>)
 80012b0:	400b      	ands	r3, r1
 80012b2:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80012c2:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 80012d2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a1a      	ldr	r2, [r3, #32]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80012e2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8001304:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8001318:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800132c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8001340:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_ADC_DeInit+0x29c>)
 8001350:	400b      	ands	r3, r1
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b4d      	ldr	r3, [pc, #308]	; (8001494 <HAL_ADC_DeInit+0x2a0>)
 8001360:	400b      	ands	r3, r1
 8001362:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_ADC_DeInit+0x2a0>)
 8001370:	400b      	ands	r3, r1
 8001372:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_DeInit+0x2a4>)
 8001380:	400b      	ands	r3, r1
 8001382:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	661a      	str	r2, [r3, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	669a      	str	r2, [r3, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_ADC_DeInit+0x2a8>)
 80013ca:	400b      	ands	r3, r1
 80013cc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_ADC_DeInit+0x2a8>)
 80013de:	400b      	ands	r3, r1
 80013e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_ADC_DeInit+0x2a8>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f002 22f8 	and.w	r2, r2, #4160813056	; 0xf800f800
 8001408:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_ADC_DeInit+0x2ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d004      	beq.n	8001420 <HAL_ADC_DeInit+0x22c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_ADC_DeInit+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10e      	bne.n	800143e <HAL_ADC_DeInit+0x24a>
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <HAL_ADC_DeInit+0x2ac>)
 8001422:	f7ff fccf 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001426:	4604      	mov	r4, r0
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_DeInit+0x2b0>)
 800142a:	f7ff fccb 	bl	8000dc4 <LL_ADC_IsEnabled>
 800142e:	4603      	mov	r3, r0
 8001430:	4323      	orrs	r3, r4
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	e008      	b.n	8001450 <HAL_ADC_DeInit+0x25c>
 800143e:	481a      	ldr	r0, [pc, #104]	; (80014a8 <HAL_ADC_DeInit+0x2b4>)
 8001440:	f7ff fcc0 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d036      	beq.n	80014c2 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_ADC_DeInit+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d004      	beq.n	8001468 <HAL_ADC_DeInit+0x274>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_DeInit+0x2b0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_ADC_DeInit+0x278>
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_ADC_DeInit+0x2b8>)
 800146a:	e000      	b.n	800146e <HAL_ADC_DeInit+0x27a>
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_ADC_DeInit+0x2bc>)
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_ADC_DeInit+0x2ac>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d004      	beq.n	8001484 <HAL_ADC_DeInit+0x290>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_ADC_DeInit+0x2b0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d117      	bne.n	80014b4 <HAL_ADC_DeInit+0x2c0>
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_ADC_DeInit+0x2b8>)
 8001486:	e016      	b.n	80014b6 <HAL_ADC_DeInit+0x2c2>
 8001488:	fffff800 	.word	0xfffff800
 800148c:	fc00f81c 	.word	0xfc00f81c
 8001490:	e0820830 	.word	0xe0820830
 8001494:	e0820820 	.word	0xe0820820
 8001498:	fffff820 	.word	0xfffff820
 800149c:	fff00000 	.word	0xfff00000
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40022100 	.word	0x40022100
 80014a8:	58026000 	.word	0x58026000
 80014ac:	40022300 	.word	0x40022300
 80014b0:	58026300 	.word	0x58026300
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_ADC_DeInit+0x2f8>)
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_ADC_DeInit+0x2fc>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f00d fc21 	bl	800ed04 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	58026300 	.word	0x58026300
 80014f0:	fe0030e0 	.word	0xfe0030e0

080014f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_ADC_IRQHandler+0x240>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d004      	beq.n	8001524 <HAL_ADC_IRQHandler+0x30>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a86      	ldr	r2, [pc, #536]	; (8001738 <HAL_ADC_IRQHandler+0x244>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_ADC_IRQHandler+0x34>
 8001524:	4b85      	ldr	r3, [pc, #532]	; (800173c <HAL_ADC_IRQHandler+0x248>)
 8001526:	e000      	b.n	800152a <HAL_ADC_IRQHandler+0x36>
 8001528:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_ADC_IRQHandler+0x24c>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fbb8 	bl	8000ca0 <LL_ADC_GetMultimode>
 8001530:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d017      	beq.n	800156c <HAL_ADC_IRQHandler+0x78>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fa4c 	bl	80029fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_ADC_IRQHandler+0x8c>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8083 	beq.w	8001692 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d07d      	beq.n	8001692 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fad2 	bl	8000b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d062      	beq.n	8001684 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <HAL_ADC_IRQHandler+0x244>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d002      	beq.n	80015ce <HAL_ADC_IRQHandler+0xda>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_IRQHandler+0xdc>
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_ADC_IRQHandler+0x240>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d008      	beq.n	80015ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d002      	beq.n	80015ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b09      	cmp	r3, #9
 80015e8:	d104      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	e00c      	b.n	800160e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_ADC_IRQHandler+0x244>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d002      	beq.n	8001604 <HAL_ADC_IRQHandler+0x110>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e000      	b.n	8001606 <HAL_ADC_IRQHandler+0x112>
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_ADC_IRQHandler+0x240>)
 8001606:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d135      	bne.n	8001684 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b08      	cmp	r3, #8
 8001624:	d12e      	bne.n	8001684 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc04 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11a      	bne.n	800166c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020c 	bic.w	r2, r2, #12
 8001644:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d112      	bne.n	8001684 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
 800166a:	e00b      	b.n	8001684 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f00c ff1b 	bl	800e4c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x1b2>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10b      	bne.n	80016be <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a0 	beq.w	80017f2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 809a 	beq.w	80017f2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fa7d 	bl	8000bda <LL_ADC_INJ_IsTriggerSourceSWStart>
 80016e0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa38 	bl	8000b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80016ec:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_ADC_IRQHandler+0x244>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_IRQHandler+0x20a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e000      	b.n	8001700 <HAL_ADC_IRQHandler+0x20c>
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_ADC_IRQHandler+0x240>)
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4293      	cmp	r3, r2
 8001706:	d008      	beq.n	800171a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d002      	beq.n	800171a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b07      	cmp	r3, #7
 8001718:	d104      	bne.n	8001724 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	e014      	b.n	800174e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_ADC_IRQHandler+0x244>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00a      	beq.n	8001744 <HAL_ADC_IRQHandler+0x250>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e008      	b.n	8001746 <HAL_ADC_IRQHandler+0x252>
 8001734:	40022000 	.word	0x40022000
 8001738:	40022100 	.word	0x40022100
 800173c:	40022300 	.word	0x40022300
 8001740:	58026300 	.word	0x58026300
 8001744:	4b84      	ldr	r3, [pc, #528]	; (8001958 <HAL_ADC_IRQHandler+0x464>)
 8001746:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d047      	beq.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_ADC_IRQHandler+0x27a>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03f      	beq.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13a      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	d133      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d12e      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fb7c 	bl	8000e88 <LL_ADC_INJ_IsConversionOngoing>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11a      	bne.n	80017cc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d112      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
 80017ca:	e00b      	b.n	80017e4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f043 0210 	orr.w	r2, r3, #16
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f001 f8e1 	bl	80029ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2260      	movs	r2, #96	; 0x60
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d011      	beq.n	8001820 <HAL_ADC_IRQHandler+0x32c>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8a8 	bl	8001968 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_ADC_IRQHandler+0x35c>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 f8c7 	bl	80029d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <HAL_ADC_IRQHandler+0x38c>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 f8b9 	bl	80029e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d043      	beq.n	8001912 <HAL_ADC_IRQHandler+0x41e>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03e      	beq.n	8001912 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e021      	b.n	80018e6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_ADC_IRQHandler+0x464>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_IRQHandler+0x3c8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_ADC_IRQHandler+0x468>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_IRQHandler+0x3cc>
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_ADC_IRQHandler+0x46c>)
 80018be:	e000      	b.n	80018c2 <HAL_ADC_IRQHandler+0x3ce>
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_ADC_IRQHandler+0x470>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f9fa 	bl	8000cbc <LL_ADC_GetMultiDMATransfer>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80018ce:	2301      	movs	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	e008      	b.n	80018e6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80018e2:	2301      	movs	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10e      	bne.n	800190a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f043 0202 	orr.w	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f00d f849 	bl	800e99c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d018      	beq.n	800194e <HAL_ADC_IRQHandler+0x45a>
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f043 0208 	orr.w	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001946:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 f839 	bl	80029c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000
 800195c:	40022100 	.word	0x40022100
 8001960:	40022300 	.word	0x40022300
 8001964:	58026300 	.word	0x58026300

08001968 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b0a1      	sub	sp, #132	; 0x84
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a9d      	ldr	r2, [pc, #628]	; (8001c0c <HAL_ADC_ConfigChannel+0x290>)
 8001996:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x2a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e321      	b.n	8001fea <HAL_ADC_ConfigChannel+0x66e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fa40 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 8306 	bne.w	8001fcc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d108      	bne.n	80019de <HAL_ADC_ConfigChannel+0x62>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0e9b      	lsrs	r3, r3, #26
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2201      	movs	r2, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	e016      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e003      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80019fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2201      	movs	r2, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	69d1      	ldr	r1, [r2, #28]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f7ff f8ab 	bl	8000b82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa01 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 8001a36:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa23 	bl	8000e88 <LL_ADC_INJ_IsConversionOngoing>
 8001a42:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80b3 	bne.w	8001bb2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80af 	bne.w	8001bb2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f7ff f8cd 	bl	8000c00 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a66:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_ADC_ConfigChannel+0x294>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a72:	d10b      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x110>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	e01d      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x14c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10b      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x136>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	e00a      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x14c>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d027      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ae0:	f7fe ffe8 	bl	8000ab4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6919      	ldr	r1, [r3, #16]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7e5b      	ldrb	r3, [r3, #25]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x17e>
 8001af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001af8:	e000      	b.n	8001afc <HAL_ADC_ConfigChannel+0x180>
 8001afa:	2300      	movs	r3, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff f812 	bl	8000b26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x19c>
 8001b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x19e>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f7fe ffea 	bl	8000af4 <LL_ADC_SetDataRightShift>
 8001b20:	e047      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	069b      	lsls	r3, r3, #26
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d107      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b44:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	069b      	lsls	r3, r3, #26
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d107      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b68:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	069b      	lsls	r3, r3, #26
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d107      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b8c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	069b      	lsls	r3, r3, #26
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bb0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f904 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 820d 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f7ff f841 	bl	8000c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_ADC_ConfigChannel+0x290>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f040 8133 	bne.w	8001e48 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d110      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x298>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0e9b      	lsrs	r3, r3, #26
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	bf94      	ite	ls
 8001c02:	2301      	movls	r3, #1
 8001c04:	2300      	movhi	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e01e      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x2cc>
 8001c0a:	bf00      	nop
 8001c0c:	47ff0000 	.word	0x47ff0000
 8001c10:	5c001000 	.word	0x5c001000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	e003      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	2b09      	cmp	r3, #9
 8001c40:	bf94      	ite	ls
 8001c42:	2301      	movls	r3, #1
 8001c44:	2300      	movhi	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d079      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x2ec>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	3301      	adds	r3, #1
 8001c60:	069b      	lsls	r3, r3, #26
 8001c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c66:	e015      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x318>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e003      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	069b      	lsls	r3, r3, #26
 8001c90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x338>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	e017      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x368>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e003      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10a      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x38e>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	051b      	lsls	r3, r3, #20
 8001d08:	e018      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x3c0>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001d22:	2320      	movs	r3, #32
 8001d24:	e003      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	e07e      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x3e0>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	3301      	adds	r3, #1
 8001d54:	069b      	lsls	r3, r3, #26
 8001d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5a:	e015      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x40c>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x42c>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	e017      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x45c>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	61bb      	str	r3, [r7, #24]
  return result;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	ea42 0103 	orr.w	r1, r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x488>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e02:	e01b      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x4c0>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	60fb      	str	r3, [r7, #12]
  return result;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 021f 	and.w	r2, r3, #31
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	051b      	lsls	r3, r3, #20
 8001e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	6892      	ldr	r2, [r2, #8]
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fedc 	bl	8000c00 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f280 80c6 	bge.w	8001fde <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x4ea>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x4ee>
 8001e66:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_ADC_ConfigChannel+0x680>)
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x4f0>
 8001e6a:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_ADC_ConfigChannel+0x684>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fe13 	bl	8000a98 <LL_ADC_GetCommonPathInternalCh>
 8001e72:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5e      	ldr	r2, [pc, #376]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x50c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10e      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x52a>
 8001e88:	485a      	ldr	r0, [pc, #360]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001e8a:	f7fe ff9b 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4859      	ldr	r0, [pc, #356]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001e92:	f7fe ff97 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	e008      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x53c>
 8001ea6:	4857      	ldr	r0, [pc, #348]	; (8002004 <HAL_ADC_ConfigChannel+0x688>)
 8001ea8:	f7fe ff8c 	bl	8000dc4 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d07d      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <HAL_ADC_ConfigChannel+0x68c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d130      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12b      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_ADC_ConfigChannel+0x688>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	f040 8081 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x574>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a43      	ldr	r2, [pc, #268]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x578>
 8001ef0:	4a42      	ldr	r2, [pc, #264]	; (8001ffc <HAL_ADC_ConfigChannel+0x680>)
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x57a>
 8001ef4:	4a42      	ldr	r2, [pc, #264]	; (8002000 <HAL_ADC_ConfigChannel+0x684>)
 8001ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f7fe fdb7 	bl	8000a72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f04:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_ADC_ConfigChannel+0x690>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_ADC_ConfigChannel+0x694>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f26:	e05a      	b.n	8001fde <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a39      	ldr	r2, [pc, #228]	; (8002014 <HAL_ADC_ConfigChannel+0x698>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11e      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x5f4>
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d119      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_ADC_ConfigChannel+0x688>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d14b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x5de>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x5e2>
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_ADC_ConfigChannel+0x680>)
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x5e4>
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_ADC_ConfigChannel+0x684>)
 8001f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f7fe fd82 	bl	8000a72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6e:	e036      	b.n	8001fde <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_ADC_ConfigChannel+0x69c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d131      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x662>
 8001f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d12c      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_ADC_ConfigChannel+0x688>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d127      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x626>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_ADC_ConfigChannel+0x67c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x62a>
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_ADC_ConfigChannel+0x680>)
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x62c>
 8001fa6:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_ADC_ConfigChannel+0x684>)
 8001fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fd5e 	bl	8000a72 <LL_ADC_SetCommonPathInternalCh>
 8001fb6:	e012      	b.n	8001fde <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fca:	e008      	b.n	8001fde <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3784      	adds	r7, #132	; 0x84
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40022100 	.word	0x40022100
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300
 8002004:	58026000 	.word	0x58026000
 8002008:	cb840000 	.word	0xcb840000
 800200c:	2400000c 	.word	0x2400000c
 8002010:	053e2d63 	.word	0x053e2d63
 8002014:	c7520000 	.word	0xc7520000
 8002018:	cfb80000 	.word	0xcfb80000

0800201c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ff00 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 8002038:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff22 	bl	8000e88 <LL_ADC_INJ_IsConversionOngoing>
 8002044:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8098 	beq.w	8002184 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02a      	beq.n	80020b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7d5b      	ldrb	r3, [r3, #21]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d126      	bne.n	80020b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7d1b      	ldrb	r3, [r3, #20]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d122      	bne.n	80020b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002076:	e014      	b.n	80020a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <ADC_ConversionStop+0x174>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d90d      	bls.n	800209c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e074      	b.n	8002186 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d1e3      	bne.n	8002078 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d014      	beq.n	80020e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe feb8 	bl	8000e38 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe89 	bl	8000dea <LL_ADC_IsDisableOngoing>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fe94 	bl	8000e10 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d014      	beq.n	8002118 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fec8 	bl	8000e88 <LL_ADC_INJ_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fe71 	bl	8000dea <LL_ADC_IsDisableOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fea4 	bl	8000e60 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d005      	beq.n	800212a <ADC_ConversionStop+0x10e>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d105      	bne.n	8002130 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002124:	230c      	movs	r3, #12
 8002126:	617b      	str	r3, [r7, #20]
        break;
 8002128:	e005      	b.n	8002136 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800212a:	2308      	movs	r3, #8
 800212c:	617b      	str	r3, [r7, #20]
        break;
 800212e:	e002      	b.n	8002136 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002130:	2304      	movs	r3, #4
 8002132:	617b      	str	r3, [r7, #20]
        break;
 8002134:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002136:	f7fe fc4d 	bl	80009d4 <HAL_GetTick>
 800213a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800213c:	e01b      	b.n	8002176 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800213e:	f7fe fc49 	bl	80009d4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b05      	cmp	r3, #5
 800214a:	d914      	bls.n	8002176 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1dc      	bne.n	800213e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	000cdbff 	.word	0x000cdbff

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fe0f 	bl	8000dc4 <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d16e      	bne.n	800228a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <ADC_Enable+0x100>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e05a      	b.n	800228c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fdca 	bl	8000d74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fbf8 	bl	80009d4 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <ADC_Enable+0x104>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <ADC_Enable+0x66>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <ADC_Enable+0x108>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <ADC_Enable+0x6a>
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <ADC_Enable+0x10c>)
 80021fc:	e000      	b.n	8002200 <ADC_Enable+0x6c>
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <ADC_Enable+0x110>)
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fd4d 	bl	8000ca0 <LL_ADC_GetMultimode>
 8002206:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <ADC_Enable+0x108>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d002      	beq.n	8002218 <ADC_Enable+0x84>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e000      	b.n	800221a <ADC_Enable+0x86>
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <ADC_Enable+0x104>)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4293      	cmp	r3, r2
 8002220:	d02c      	beq.n	800227c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d130      	bne.n	800228a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002228:	e028      	b.n	800227c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fdc8 	bl	8000dc4 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fd98 	bl	8000d74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002244:	f7fe fbc6 	bl	80009d4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d914      	bls.n	800227c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d00d      	beq.n	800227c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0210 	orr.w	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e007      	b.n	800228c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d1cf      	bne.n	800222a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	8000003f 	.word	0x8000003f
 8002298:	40022000 	.word	0x40022000
 800229c:	40022100 	.word	0x40022100
 80022a0:	40022300 	.word	0x40022300
 80022a4:	58026300 	.word	0x58026300

080022a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd98 	bl	8000dea <LL_ADC_IsDisableOngoing>
 80022ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fd7f 	bl	8000dc4 <LL_ADC_IsEnabled>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d047      	beq.n	800235c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d144      	bne.n	800235c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030d 	and.w	r3, r3, #13
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10c      	bne.n	80022fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fd59 	bl	8000d9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2203      	movs	r2, #3
 80022f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fb6f 	bl	80009d4 <HAL_GetTick>
 80022f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022f8:	e029      	b.n	800234e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e023      	b.n	800235e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002316:	f7fe fb5d 	bl	80009d4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d914      	bls.n	800234e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e007      	b.n	800235e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1dc      	bne.n	8002316 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d14b      	bne.n	8002418 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d021      	beq.n	80023de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fbdc 	bl	8000b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d032      	beq.n	8002410 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12b      	bne.n	8002410 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11f      	bne.n	8002410 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
 80023dc:	e018      	b.n	8002410 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f00c f855 	bl	800e4c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002416:	e00e      	b.n	8002436 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f00c fab9 	bl	800e99c <HAL_ADC_ErrorCallback>
}
 800242a:	e004      	b.n	8002436 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f00c fa49 	bl	800e8e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f043 0204 	orr.w	r2, r3, #4
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f00c fa8b 	bl	800e99c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <ADC_ConfigureBoostMode+0x1f8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <ADC_ConfigureBoostMode+0x1c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a79      	ldr	r2, [pc, #484]	; (800268c <ADC_ConfigureBoostMode+0x1fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d109      	bne.n	80024c0 <ADC_ConfigureBoostMode+0x30>
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <ADC_ConfigureBoostMode+0x200>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e008      	b.n	80024d2 <ADC_ConfigureBoostMode+0x42>
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <ADC_ConfigureBoostMode+0x204>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01c      	beq.n	8002510 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024d6:	f005 fb7f 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 80024da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024e4:	d010      	beq.n	8002508 <ADC_ConfigureBoostMode+0x78>
 80024e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024ea:	d873      	bhi.n	80025d4 <ADC_ConfigureBoostMode+0x144>
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d002      	beq.n	80024f8 <ADC_ConfigureBoostMode+0x68>
 80024f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f6:	d16d      	bne.n	80025d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	60fb      	str	r3, [r7, #12]
        break;
 8002506:	e068      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	60fb      	str	r3, [r7, #12]
        break;
 800250e:	e064      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002510:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f006 fe06 	bl	8009128 <HAL_RCCEx_GetPeriphCLKFreq>
 800251c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002526:	d051      	beq.n	80025cc <ADC_ConfigureBoostMode+0x13c>
 8002528:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800252c:	d854      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800252e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002532:	d047      	beq.n	80025c4 <ADC_ConfigureBoostMode+0x134>
 8002534:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002538:	d84e      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800253a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800253e:	d03d      	beq.n	80025bc <ADC_ConfigureBoostMode+0x12c>
 8002540:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002544:	d848      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800254a:	d033      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x124>
 800254c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002550:	d842      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002552:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002556:	d029      	beq.n	80025ac <ADC_ConfigureBoostMode+0x11c>
 8002558:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800255c:	d83c      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800255e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002562:	d01a      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002564:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002568:	d836      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800256a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800256e:	d014      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002570:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002574:	d830      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257a:	d00e      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002580:	d82a      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002582:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002586:	d008      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002588:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800258c:	d824      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800258e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002592:	d002      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002598:	d11e      	bne.n	80025d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e016      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
        break;
 80025b2:	e012      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	60fb      	str	r3, [r7, #12]
        break;
 80025ba:	e00e      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	60fb      	str	r3, [r7, #12]
        break;
 80025c2:	e00a      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	09db      	lsrs	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
        break;
 80025ca:	e006      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
        break;
 80025d2:	e002      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
        break;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80025d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025da:	f7fe fa2b 	bl	8000a34 <HAL_GetREVID>
 80025de:	4603      	mov	r3, r0
 80025e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d815      	bhi.n	8002614 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <ADC_ConfigureBoostMode+0x208>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d908      	bls.n	8002602 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002600:	e03e      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	e035      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <ADC_ConfigureBoostMode+0x20c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d808      	bhi.n	8002634 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	e025      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <ADC_ConfigureBoostMode+0x210>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d80a      	bhi.n	8002652 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	e016      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <ADC_ConfigureBoostMode+0x214>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d80a      	bhi.n	8002670 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	609a      	str	r2, [r3, #8]
}
 800266e:	e007      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	40022100 	.word	0x40022100
 8002690:	40022300 	.word	0x40022300
 8002694:	58026300 	.word	0x58026300
 8002698:	01312d00 	.word	0x01312d00
 800269c:	005f5e10 	.word	0x005f5e10
 80026a0:	00bebc20 	.word	0x00bebc20
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <LL_ADC_IsEnabled>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <LL_ADC_IsEnabled+0x18>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <LL_ADC_IsEnabled+0x1a>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <LL_ADC_StartCalibration>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <LL_ADC_StartCalibration+0x38>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026f0:	430a      	orrs	r2, r1
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	3ffeffc0 	.word	0x3ffeffc0

0800270c <LL_ADC_IsCalibrationOnGoing>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800271c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002720:	d101      	bne.n	8002726 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_REG_StartConversion>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <LL_ADC_REG_StartConversion+0x24>)
 8002742:	4013      	ands	r3, r2
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	7fffffc0 	.word	0x7fffffc0

0800275c <LL_ADC_REG_IsConversionOngoing>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b04      	cmp	r3, #4
 800276e:	d101      	bne.n	8002774 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e04c      	b.n	800283c <HAL_ADCEx_Calibration_Start+0xb8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff fd7c 	bl	80022a8 <ADC_Disable>
 80027b0:	4603      	mov	r3, r0
 80027b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d135      	bne.n	8002826 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_ADCEx_Calibration_Start+0xc0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff7c 	bl	80026d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027d8:	e014      	b.n	8002804 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3301      	adds	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_ADCEx_Calibration_Start+0xc4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d30d      	bcc.n	8002804 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f023 0312 	bic.w	r3, r3, #18
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e01b      	b.n	800283c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff7f 	bl	800270c <LL_ADC_IsCalibrationOnGoing>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e2      	bne.n	80027da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f023 0303 	bic.w	r3, r3, #3
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
 8002824:	e005      	b.n	8002832 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	ffffeefd 	.word	0xffffeefd
 8002848:	25c3f800 	.word	0x25c3f800

0800284c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a0      	sub	sp, #128	; 0x80
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff7d 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	e08a      	b.n	8002982 <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002876:	2302      	movs	r3, #2
 8002878:	e083      	b.n	8002982 <HAL_ADCEx_MultiModeStart_DMA+0x136>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002886:	2300      	movs	r3, #0
 8002888:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e001      	b.n	800289e <HAL_ADCEx_MultiModeStart_DMA+0x52>
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e062      	b.n	8002982 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fc69 	bl	8002194 <ADC_Enable>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 80028c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fc5d 	bl	8002194 <ADC_Enable>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80028e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d146      	bne.n	8002976 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8002914:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800292c:	e000      	b.n	8002930 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002930:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	221c      	movs	r2, #28
 8002938:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0210 	orr.w	r2, r2, #16
 8002950:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002958:	330c      	adds	r3, #12
 800295a:	4619      	mov	r1, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f001 fb64 	bl	800402c <HAL_DMA_Start_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fee0 	bl	8002734 <LL_ADC_REG_StartConversion>
 8002974:	e003      	b.n	800297e <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 800297e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3780      	adds	r7, #128	; 0x80
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000
 8002990:	40022100 	.word	0x40022100
 8002994:	fffff0fe 	.word	0xfffff0fe
 8002998:	08002367 	.word	0x08002367
 800299c:	0800243f 	.word	0x0800243f
 80029a0:	0800245b 	.word	0x0800245b
 80029a4:	40022300 	.word	0x40022300
 80029a8:	58026300 	.word	0x58026300

080029ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b09f      	sub	sp, #124	; 0x7c
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0be      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d102      	bne.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a48:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	e001      	b.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e09d      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fe72 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002a78:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fe6c 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d17f      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d17c      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a46      	ldr	r2, [pc, #280]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002aa6:	e000      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002aa8:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002aaa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d039      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10e      	bne.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ada:	4836      	ldr	r0, [pc, #216]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002adc:	f7ff fde4 	bl	80026a8 <LL_ADC_IsEnabled>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	4835      	ldr	r0, [pc, #212]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ae4:	f7ff fde0 	bl	80026a8 <LL_ADC_IsEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4323      	orrs	r3, r4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e008      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002af8:	4832      	ldr	r0, [pc, #200]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002afa:	f7ff fdd5 	bl	80026a8 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d047      	beq.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b26:	e03a      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10e      	bne.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b48:	481a      	ldr	r0, [pc, #104]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b4a:	f7ff fdad 	bl	80026a8 <LL_ADC_IsEnabled>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4819      	ldr	r0, [pc, #100]	; (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b52:	f7ff fda9 	bl	80026a8 <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e008      	b.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b66:	4817      	ldr	r0, [pc, #92]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b68:	f7ff fd9e 	bl	80026a8 <LL_ADC_IsEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b88:	e009      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b9c:	e000      	b.n	8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	377c      	adds	r7, #124	; 0x7c
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022100 	.word	0x40022100
 8002bbc:	40022300 	.word	0x40022300
 8002bc0:	58026300 	.word	0x58026300
 8002bc4:	58026000 	.word	0x58026000
 8002bc8:	fffff0e0 	.word	0xfffff0e0

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <__NVIC_SetPriorityGrouping+0x40>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfa:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <__NVIC_SetPriorityGrouping+0x40>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60d3      	str	r3, [r2, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	05fa0000 	.word	0x05fa0000

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db12      	blt.n	8002ca4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	490a      	ldr	r1, [pc, #40]	; (8002cb0 <__NVIC_DisableIRQ+0x44>)
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	3320      	adds	r3, #32
 8002c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c98:	f3bf 8f4f 	dsb	sy
}
 8002c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c9e:	f3bf 8f6f 	isb	sy
}
 8002ca2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	; (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff05 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd8:	f7ff ff1c 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f7ff ff90 	bl	8002d08 <NVIC_EncodePriority>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff5f 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff0f 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff1f 	bl	8002c6c <__NVIC_DisableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff96 	bl	8002d70 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002e54:	f3bf 8f5f 	dmb	sy
}
 8002e58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_MPU_Disable+0x28>)
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_MPU_Disable+0x28>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_MPU_Disable+0x2c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	e000ed90 	.word	0xe000ed90

08002e80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e88:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_MPU_Enable+0x38>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_MPU_Enable+0x3c>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_MPU_Enable+0x3c>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9e:	f3bf 8f4f 	dsb	sy
}
 8002ea2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ea4:	f3bf 8f6f 	isb	sy
}
 8002ea8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed90 	.word	0xe000ed90
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	785a      	ldrb	r2, [r3, #1]
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_MPU_ConfigRegion+0x84>)
 8002ece:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d029      	beq.n	8002f2c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_MPU_ConfigRegion+0x84>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7b1b      	ldrb	r3, [r3, #12]
 8002ee4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7adb      	ldrb	r3, [r3, #11]
 8002eea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002eec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a9b      	ldrb	r3, [r3, #10]
 8002ef2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ef4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7b5b      	ldrb	r3, [r3, #13]
 8002efa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002efc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7b9b      	ldrb	r3, [r3, #14]
 8002f02:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7bdb      	ldrb	r3, [r3, #15]
 8002f0a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7a5b      	ldrb	r3, [r3, #9]
 8002f12:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7a1b      	ldrb	r3, [r3, #8]
 8002f1a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f1c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f26:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f28:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002f2a:	e005      	b.n	8002f38 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_MPU_ConfigRegion+0x84>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_MPU_ConfigRegion+0x84>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed90 	.word	0xe000ed90

08002f48 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e014      	b.n	8002f84 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f00b ff50 	bl	800ee10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f00b ffbb 	bl	800ef20 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	795b      	ldrb	r3, [r3, #5]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DAC_Start_DMA+0x1e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0ab      	b.n	800313e <HAL_DAC_Start_DMA+0x176>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d12f      	bne.n	8003058 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_DAC_Start_DMA+0x180>)
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a51      	ldr	r2, [pc, #324]	; (800314c <HAL_DAC_Start_DMA+0x184>)
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a50      	ldr	r2, [pc, #320]	; (8003150 <HAL_DAC_Start_DMA+0x188>)
 800300e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800301e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	2b08      	cmp	r3, #8
 8003024:	d013      	beq.n	800304e <HAL_DAC_Start_DMA+0x86>
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d845      	bhi.n	80030b8 <HAL_DAC_Start_DMA+0xf0>
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_DAC_Start_DMA+0x72>
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2b04      	cmp	r3, #4
 8003036:	d005      	beq.n	8003044 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003038:	e03e      	b.n	80030b8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	613b      	str	r3, [r7, #16]
        break;
 8003042:	e03c      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	613b      	str	r3, [r7, #16]
        break;
 800304c:	e037      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3310      	adds	r3, #16
 8003054:	613b      	str	r3, [r7, #16]
        break;
 8003056:	e032      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a3d      	ldr	r2, [pc, #244]	; (8003154 <HAL_DAC_Start_DMA+0x18c>)
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <HAL_DAC_Start_DMA+0x190>)
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a3b      	ldr	r2, [pc, #236]	; (800315c <HAL_DAC_Start_DMA+0x194>)
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800307e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b08      	cmp	r3, #8
 8003084:	d013      	beq.n	80030ae <HAL_DAC_Start_DMA+0xe6>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d817      	bhi.n	80030bc <HAL_DAC_Start_DMA+0xf4>
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_DAC_Start_DMA+0xd2>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d005      	beq.n	80030a4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003098:	e010      	b.n	80030bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	613b      	str	r3, [r7, #16]
        break;
 80030a2:	e00c      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3318      	adds	r3, #24
 80030aa:	613b      	str	r3, [r7, #16]
        break;
 80030ac:	e007      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	331c      	adds	r3, #28
 80030b4:	613b      	str	r3, [r7, #16]
        break;
 80030b6:	e002      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_DAC_Start_DMA+0xf6>
        break;
 80030bc:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6898      	ldr	r0, [r3, #8]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	f000 ffa5 	bl	800402c <HAL_DMA_Start_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e010      	b.n	800310a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68d8      	ldr	r0, [r3, #12]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	f000 ff93 	bl	800402c <HAL_DMA_Start_IT>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2201      	movs	r2, #1
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e005      	b.n	800313c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	080034e1 	.word	0x080034e1
 800314c:	08003503 	.word	0x08003503
 8003150:	0800351f 	.word	0x0800351f
 8003154:	0800359d 	.word	0x0800359d
 8003158:	080035bf 	.word	0x080035bf
 800315c:	080035db 	.word	0x080035db

08003160 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003176:	d120      	bne.n	80031ba <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003186:	d118      	bne.n	80031ba <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2204      	movs	r2, #4
 800318c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f84b 	bl	8003250 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c8:	d120      	bne.n	800320c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d8:	d118      	bne.n	800320c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9be 	bl	8003588 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_DAC_ConfigChannel+0x18>
 8003278:	2302      	movs	r3, #2
 800327a:	e12a      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x26e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2202      	movs	r2, #2
 8003286:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b04      	cmp	r3, #4
 800328e:	f040 8081 	bne.w	8003394 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003292:	f7fd fb9f 	bl	80009d4 <HAL_GetTick>
 8003296:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d140      	bne.n	8003320 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800329e:	e018      	b.n	80032d2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032a0:	f7fd fb98 	bl	80009d4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d911      	bls.n	80032d2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b4:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_DAC_ConfigChannel+0x278>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f043 0208 	orr.w	r2, r3, #8
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2203      	movs	r2, #3
 80032cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0ff      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d8:	4b80      	ldr	r3, [pc, #512]	; (80034dc <HAL_DAC_ConfigChannel+0x278>)
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1df      	bne.n	80032a0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7fd fb83 	bl	80009ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	6992      	ldr	r2, [r2, #24]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
 80032f0:	e023      	b.n	800333a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032f2:	f7fd fb6f 	bl	80009d4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d90f      	bls.n	8003320 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	2b00      	cmp	r3, #0
 8003308:	da0a      	bge.n	8003320 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2203      	movs	r2, #3
 800331a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0d8      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	2b00      	cmp	r3, #0
 8003328:	dbe3      	blt.n	80032f2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800332a:	2001      	movs	r0, #1
 800332c:	f7fd fb5e 	bl	80009ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	6992      	ldr	r2, [r2, #24]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	ea02 0103 	and.w	r1, r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	21ff      	movs	r1, #255	; 0xff
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	ea02 0103 	and.w	r1, r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d11d      	bne.n	80033d8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	221f      	movs	r2, #31
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2207      	movs	r2, #7
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d102      	bne.n	8003402 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e00f      	b.n	8003422 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d102      	bne.n	8003410 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e008      	b.n	8003422 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003418:	2301      	movs	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e001      	b.n	8003422 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43da      	mvns	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	f640 72fe 	movw	r2, #4094	; 0xffe
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4013      	ands	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	22c0      	movs	r2, #192	; 0xc0
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	400a      	ands	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20008000 	.word	0x20008000

080034e0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fe90 	bl	8003214 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	711a      	strb	r2, [r3, #4]
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fe89 	bl	8003228 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff fe7f 	bl	800323c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	711a      	strb	r2, [r3, #4]
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff ffce 	bl	800354c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	711a      	strb	r2, [r3, #4]
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ffc7 	bl	8003560 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ffbd 	bl	8003574 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	711a      	strb	r2, [r3, #4]
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7fd f9e0 	bl	80009d4 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e316      	b.n	8003c4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a66      	ldr	r2, [pc, #408]	; (80037c0 <HAL_DMA_Init+0x1b8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a65      	ldr	r2, [pc, #404]	; (80037c4 <HAL_DMA_Init+0x1bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a63      	ldr	r2, [pc, #396]	; (80037c8 <HAL_DMA_Init+0x1c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a62      	ldr	r2, [pc, #392]	; (80037cc <HAL_DMA_Init+0x1c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a60      	ldr	r2, [pc, #384]	; (80037d0 <HAL_DMA_Init+0x1c8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5f      	ldr	r2, [pc, #380]	; (80037d4 <HAL_DMA_Init+0x1cc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5d      	ldr	r2, [pc, #372]	; (80037d8 <HAL_DMA_Init+0x1d0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_DMA_Init+0x1d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_DMA_Init+0x1d8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_DMA_Init+0x1dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_DMA_Init+0x1e0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_DMA_Init+0x1e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a54      	ldr	r2, [pc, #336]	; (80037f0 <HAL_DMA_Init+0x1e8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a53      	ldr	r2, [pc, #332]	; (80037f4 <HAL_DMA_Init+0x1ec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_DMA_Init+0x1f0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_Init+0xb8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_DMA_Init+0x1f4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Init+0xbc>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_DMA_Init+0xbe>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 813b 	beq.w	8003942 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a37      	ldr	r2, [pc, #220]	; (80037c0 <HAL_DMA_Init+0x1b8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_DMA_Init+0x174>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a36      	ldr	r2, [pc, #216]	; (80037c4 <HAL_DMA_Init+0x1bc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d045      	beq.n	800377c <HAL_DMA_Init+0x174>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <HAL_DMA_Init+0x1c0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d040      	beq.n	800377c <HAL_DMA_Init+0x174>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a33      	ldr	r2, [pc, #204]	; (80037cc <HAL_DMA_Init+0x1c4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03b      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a31      	ldr	r2, [pc, #196]	; (80037d0 <HAL_DMA_Init+0x1c8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_DMA_Init+0x174>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_DMA_Init+0x1cc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d031      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2e      	ldr	r2, [pc, #184]	; (80037d8 <HAL_DMA_Init+0x1d0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02c      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2d      	ldr	r2, [pc, #180]	; (80037dc <HAL_DMA_Init+0x1d4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_Init+0x174>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <HAL_DMA_Init+0x1d8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <HAL_DMA_Init+0x1dc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01d      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a28      	ldr	r2, [pc, #160]	; (80037e8 <HAL_DMA_Init+0x1e0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_DMA_Init+0x174>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a27      	ldr	r2, [pc, #156]	; (80037ec <HAL_DMA_Init+0x1e4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <HAL_DMA_Init+0x1e8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_DMA_Init+0x174>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_DMA_Init+0x1ec>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_DMA_Init+0x1f0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_DMA_Init+0x174>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_DMA_Init+0x1f4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <HAL_DMA_Init+0x186>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e007      	b.n	800379e <HAL_DMA_Init+0x196>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800379e:	e02f      	b.n	8003800 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a0:	f7fd f918 	bl	80009d4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d928      	bls.n	8003800 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e246      	b.n	8003c4e <HAL_DMA_Init+0x646>
 80037c0:	40020010 	.word	0x40020010
 80037c4:	40020028 	.word	0x40020028
 80037c8:	40020040 	.word	0x40020040
 80037cc:	40020058 	.word	0x40020058
 80037d0:	40020070 	.word	0x40020070
 80037d4:	40020088 	.word	0x40020088
 80037d8:	400200a0 	.word	0x400200a0
 80037dc:	400200b8 	.word	0x400200b8
 80037e0:	40020410 	.word	0x40020410
 80037e4:	40020428 	.word	0x40020428
 80037e8:	40020440 	.word	0x40020440
 80037ec:	40020458 	.word	0x40020458
 80037f0:	40020470 	.word	0x40020470
 80037f4:	40020488 	.word	0x40020488
 80037f8:	400204a0 	.word	0x400204a0
 80037fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1c8      	bne.n	80037a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4b83      	ldr	r3, [pc, #524]	; (8003a28 <HAL_DMA_Init+0x420>)
 800381a:	4013      	ands	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003826:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b04      	cmp	r3, #4
 8003852:	d107      	bne.n	8003864 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4313      	orrs	r3, r2
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003864:	4b71      	ldr	r3, [pc, #452]	; (8003a2c <HAL_DMA_Init+0x424>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b71      	ldr	r3, [pc, #452]	; (8003a30 <HAL_DMA_Init+0x428>)
 800386a:	4013      	ands	r3, r2
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003870:	d328      	bcc.n	80038c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b28      	cmp	r3, #40	; 0x28
 8003878:	d903      	bls.n	8003882 <HAL_DMA_Init+0x27a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b2e      	cmp	r3, #46	; 0x2e
 8003880:	d917      	bls.n	80038b2 <HAL_DMA_Init+0x2aa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d903      	bls.n	8003892 <HAL_DMA_Init+0x28a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b42      	cmp	r3, #66	; 0x42
 8003890:	d90f      	bls.n	80038b2 <HAL_DMA_Init+0x2aa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b46      	cmp	r3, #70	; 0x46
 8003898:	d903      	bls.n	80038a2 <HAL_DMA_Init+0x29a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b48      	cmp	r3, #72	; 0x48
 80038a0:	d907      	bls.n	80038b2 <HAL_DMA_Init+0x2aa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b4e      	cmp	r3, #78	; 0x4e
 80038a8:	d905      	bls.n	80038b6 <HAL_DMA_Init+0x2ae>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b52      	cmp	r3, #82	; 0x52
 80038b0:	d801      	bhi.n	80038b6 <HAL_DMA_Init+0x2ae>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_Init+0x2b0>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0307 	bic.w	r3, r3, #7
 80038da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d117      	bne.n	800391e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f002 fce9 	bl	80062d8 <DMA_CheckFifoParam>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e197      	b.n	8003c4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f002 fc24 	bl	8006174 <DMA_CalcBaseAndBitshift>
 800392c:	4603      	mov	r3, r0
 800392e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	223f      	movs	r2, #63	; 0x3f
 800393a:	409a      	lsls	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e0cd      	b.n	8003ade <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <HAL_DMA_Init+0x42c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_DMA_Init+0x430>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01d      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <HAL_DMA_Init+0x434>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a36      	ldr	r2, [pc, #216]	; (8003a40 <HAL_DMA_Init+0x438>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_DMA_Init+0x43c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a33      	ldr	r2, [pc, #204]	; (8003a48 <HAL_DMA_Init+0x440>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a32      	ldr	r2, [pc, #200]	; (8003a4c <HAL_DMA_Init+0x444>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_DMA_Init+0x38a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <HAL_DMA_Init+0x448>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_DMA_Init+0x38e>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_DMA_Init+0x390>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a24      	ldr	r2, [pc, #144]	; (8003a34 <HAL_DMA_Init+0x42c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d021      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_DMA_Init+0x430>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01c      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <HAL_DMA_Init+0x434>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d017      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <HAL_DMA_Init+0x438>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d012      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_DMA_Init+0x43c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00d      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_DMA_Init+0x440>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d008      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_DMA_Init+0x444>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_Init+0x3e4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_DMA_Init+0x448>)
 80039ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_DMA_Init+0x44c>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d021      	beq.n	8003a58 <HAL_DMA_Init+0x450>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d102      	bne.n	8003a22 <HAL_DMA_Init+0x41a>
 8003a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a20:	e01b      	b.n	8003a5a <HAL_DMA_Init+0x452>
 8003a22:	2300      	movs	r3, #0
 8003a24:	e019      	b.n	8003a5a <HAL_DMA_Init+0x452>
 8003a26:	bf00      	nop
 8003a28:	fe10803f 	.word	0xfe10803f
 8003a2c:	5c001000 	.word	0x5c001000
 8003a30:	ffff0000 	.word	0xffff0000
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494
 8003a54:	fffe000f 	.word	0xfffe000f
 8003a58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <HAL_DMA_Init+0x650>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <HAL_DMA_Init+0x654>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	009a      	lsls	r2, r3, #2
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f002 fb5f 	bl	8006174 <DMA_CalcBaseAndBitshift>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e008      	b.n	8003ade <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0b7      	b.n	8003c4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5f      	ldr	r2, [pc, #380]	; (8003c60 <HAL_DMA_Init+0x658>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d072      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5d      	ldr	r2, [pc, #372]	; (8003c64 <HAL_DMA_Init+0x65c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d06d      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <HAL_DMA_Init+0x660>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d068      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_DMA_Init+0x664>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d063      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_DMA_Init+0x668>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d05e      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a57      	ldr	r2, [pc, #348]	; (8003c74 <HAL_DMA_Init+0x66c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d059      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_DMA_Init+0x670>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d054      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_DMA_Init+0x674>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d04f      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a53      	ldr	r2, [pc, #332]	; (8003c80 <HAL_DMA_Init+0x678>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04a      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_DMA_Init+0x67c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d045      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_DMA_Init+0x680>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d040      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_DMA_Init+0x684>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d03b      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_DMA_Init+0x688>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d036      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a4b      	ldr	r2, [pc, #300]	; (8003c94 <HAL_DMA_Init+0x68c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d031      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <HAL_DMA_Init+0x690>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d02c      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_DMA_Init+0x694>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a47      	ldr	r2, [pc, #284]	; (8003ca0 <HAL_DMA_Init+0x698>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a45      	ldr	r2, [pc, #276]	; (8003ca4 <HAL_DMA_Init+0x69c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a44      	ldr	r2, [pc, #272]	; (8003ca8 <HAL_DMA_Init+0x6a0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a42      	ldr	r2, [pc, #264]	; (8003cac <HAL_DMA_Init+0x6a4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <HAL_DMA_Init+0x6a8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3f      	ldr	r2, [pc, #252]	; (8003cb4 <HAL_DMA_Init+0x6ac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3e      	ldr	r2, [pc, #248]	; (8003cb8 <HAL_DMA_Init+0x6b0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <HAL_DMA_Init+0x6b4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Init+0x5ca>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMA_Init+0x5cc>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d032      	beq.n	8003c3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f002 fbf9 	bl	80063d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d102      	bne.n	8003bec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_DMA_Init+0x624>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d80c      	bhi.n	8003c2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f002 fc76 	bl	8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e008      	b.n	8003c3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	a7fdabf8 	.word	0xa7fdabf8
 8003c5c:	cccccccd 	.word	0xcccccccd
 8003c60:	40020010 	.word	0x40020010
 8003c64:	40020028 	.word	0x40020028
 8003c68:	40020040 	.word	0x40020040
 8003c6c:	40020058 	.word	0x40020058
 8003c70:	40020070 	.word	0x40020070
 8003c74:	40020088 	.word	0x40020088
 8003c78:	400200a0 	.word	0x400200a0
 8003c7c:	400200b8 	.word	0x400200b8
 8003c80:	40020410 	.word	0x40020410
 8003c84:	40020428 	.word	0x40020428
 8003c88:	40020440 	.word	0x40020440
 8003c8c:	40020458 	.word	0x40020458
 8003c90:	40020470 	.word	0x40020470
 8003c94:	40020488 	.word	0x40020488
 8003c98:	400204a0 	.word	0x400204a0
 8003c9c:	400204b8 	.word	0x400204b8
 8003ca0:	58025408 	.word	0x58025408
 8003ca4:	5802541c 	.word	0x5802541c
 8003ca8:	58025430 	.word	0x58025430
 8003cac:	58025444 	.word	0x58025444
 8003cb0:	58025458 	.word	0x58025458
 8003cb4:	5802546c 	.word	0x5802546c
 8003cb8:	58025480 	.word	0x58025480
 8003cbc:	58025494 	.word	0x58025494

08003cc0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1a8      	b.n	8004024 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a82      	ldr	r2, [pc, #520]	; (8003ee0 <HAL_DMA_DeInit+0x220>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_DMA_DeInit+0x224>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7f      	ldr	r2, [pc, #508]	; (8003ee8 <HAL_DMA_DeInit+0x228>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a7d      	ldr	r2, [pc, #500]	; (8003eec <HAL_DMA_DeInit+0x22c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7c      	ldr	r2, [pc, #496]	; (8003ef0 <HAL_DMA_DeInit+0x230>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7a      	ldr	r2, [pc, #488]	; (8003ef4 <HAL_DMA_DeInit+0x234>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a79      	ldr	r2, [pc, #484]	; (8003ef8 <HAL_DMA_DeInit+0x238>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a77      	ldr	r2, [pc, #476]	; (8003efc <HAL_DMA_DeInit+0x23c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a76      	ldr	r2, [pc, #472]	; (8003f00 <HAL_DMA_DeInit+0x240>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a74      	ldr	r2, [pc, #464]	; (8003f04 <HAL_DMA_DeInit+0x244>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a73      	ldr	r2, [pc, #460]	; (8003f08 <HAL_DMA_DeInit+0x248>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a71      	ldr	r2, [pc, #452]	; (8003f0c <HAL_DMA_DeInit+0x24c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <HAL_DMA_DeInit+0x250>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	; (8003f14 <HAL_DMA_DeInit+0x254>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6d      	ldr	r2, [pc, #436]	; (8003f18 <HAL_DMA_DeInit+0x258>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_DeInit+0xb2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6b      	ldr	r2, [pc, #428]	; (8003f1c <HAL_DMA_DeInit+0x25c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_DMA_DeInit+0xc4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_DMA_DeInit+0xd4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a51      	ldr	r2, [pc, #324]	; (8003ee0 <HAL_DMA_DeInit+0x220>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04a      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a50      	ldr	r2, [pc, #320]	; (8003ee4 <HAL_DMA_DeInit+0x224>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d045      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4e      	ldr	r2, [pc, #312]	; (8003ee8 <HAL_DMA_DeInit+0x228>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d040      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_DMA_DeInit+0x22c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d03b      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <HAL_DMA_DeInit+0x230>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <HAL_DMA_DeInit+0x234>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_DMA_DeInit+0x238>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_DMA_DeInit+0x23c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d027      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <HAL_DMA_DeInit+0x240>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a44      	ldr	r2, [pc, #272]	; (8003f04 <HAL_DMA_DeInit+0x244>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a42      	ldr	r2, [pc, #264]	; (8003f08 <HAL_DMA_DeInit+0x248>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <HAL_DMA_DeInit+0x24c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_DMA_DeInit+0x250>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_DMA_DeInit+0x254>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_DMA_DeInit+0x258>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_DeInit+0x174>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3b      	ldr	r2, [pc, #236]	; (8003f1c <HAL_DMA_DeInit+0x25c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_DeInit+0x178>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_DeInit+0x17a>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d025      	beq.n	8003e8a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2221      	movs	r2, #33	; 0x21
 8003e6c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f002 f980 	bl	8006174 <DMA_CalcBaseAndBitshift>
 8003e74:	4603      	mov	r3, r0
 8003e76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	e081      	b.n	8003f8e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_DeInit+0x260>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_DeInit+0x264>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_DeInit+0x268>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_DMA_DeInit+0x26c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_DMA_DeInit+0x270>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_DMA_DeInit+0x274>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_DMA_DeInit+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_DeInit+0x21a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_DMA_DeInit+0x27c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d132      	bne.n	8003f40 <HAL_DMA_DeInit+0x280>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e031      	b.n	8003f42 <HAL_DMA_DeInit+0x282>
 8003ede:	bf00      	nop
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
 8003f20:	58025408 	.word	0x58025408
 8003f24:	5802541c 	.word	0x5802541c
 8003f28:	58025430 	.word	0x58025430
 8003f2c:	58025444 	.word	0x58025444
 8003f30:	58025458 	.word	0x58025458
 8003f34:	5802546c 	.word	0x5802546c
 8003f38:	58025480 	.word	0x58025480
 8003f3c:	58025494 	.word	0x58025494
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d021      	beq.n	8003f8a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f002 f900 	bl	8006174 <DMA_CalcBaseAndBitshift>
 8003f74:	4603      	mov	r3, r0
 8003f76:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2201      	movs	r2, #1
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	e001      	b.n	8003f8e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e04a      	b.n	8004024 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f002 fa1e 	bl	80063d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fac:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00f      	beq.n	8003fd6 <HAL_DMA_DeInit+0x316>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d80b      	bhi.n	8003fd6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f002 faa0 	bl	8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fd4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e226      	b.n	8004496 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Start_IT+0x2a>
 8004052:	2302      	movs	r3, #2
 8004054:	e21f      	b.n	8004496 <HAL_DMA_Start_IT+0x46a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 820a 	bne.w	8004480 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a68      	ldr	r2, [pc, #416]	; (8004220 <HAL_DMA_Start_IT+0x1f4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a66      	ldr	r2, [pc, #408]	; (8004224 <HAL_DMA_Start_IT+0x1f8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_DMA_Start_IT+0x1fc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a63      	ldr	r2, [pc, #396]	; (800422c <HAL_DMA_Start_IT+0x200>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a62      	ldr	r2, [pc, #392]	; (8004230 <HAL_DMA_Start_IT+0x204>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a60      	ldr	r2, [pc, #384]	; (8004234 <HAL_DMA_Start_IT+0x208>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5f      	ldr	r2, [pc, #380]	; (8004238 <HAL_DMA_Start_IT+0x20c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_DMA_Start_IT+0x210>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_DMA_Start_IT+0x214>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_DMA_Start_IT+0x218>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_DMA_Start_IT+0x21c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_DMA_Start_IT+0x220>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a56      	ldr	r2, [pc, #344]	; (8004250 <HAL_DMA_Start_IT+0x224>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a54      	ldr	r2, [pc, #336]	; (8004254 <HAL_DMA_Start_IT+0x228>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a53      	ldr	r2, [pc, #332]	; (8004258 <HAL_DMA_Start_IT+0x22c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a51      	ldr	r2, [pc, #324]	; (800425c <HAL_DMA_Start_IT+0x230>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <HAL_DMA_Start_IT+0x100>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <HAL_DMA_Start_IT+0x110>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f001 fe6a 	bl	8005e1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a34      	ldr	r2, [pc, #208]	; (8004220 <HAL_DMA_Start_IT+0x1f4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d04a      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a33      	ldr	r2, [pc, #204]	; (8004224 <HAL_DMA_Start_IT+0x1f8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d045      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a31      	ldr	r2, [pc, #196]	; (8004228 <HAL_DMA_Start_IT+0x1fc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d040      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_DMA_Start_IT+0x200>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d03b      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <HAL_DMA_Start_IT+0x204>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d036      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <HAL_DMA_Start_IT+0x208>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d031      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_DMA_Start_IT+0x20c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02c      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2a      	ldr	r2, [pc, #168]	; (800423c <HAL_DMA_Start_IT+0x210>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d027      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a28      	ldr	r2, [pc, #160]	; (8004240 <HAL_DMA_Start_IT+0x214>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d022      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_DMA_Start_IT+0x218>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d01d      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a25      	ldr	r2, [pc, #148]	; (8004248 <HAL_DMA_Start_IT+0x21c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d018      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a24      	ldr	r2, [pc, #144]	; (800424c <HAL_DMA_Start_IT+0x220>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_DMA_Start_IT+0x224>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <HAL_DMA_Start_IT+0x228>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_DMA_Start_IT+0x22c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_DMA_Start_IT+0x230>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_DMA_Start_IT+0x1c0>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_DMA_Start_IT+0x1c2>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d036      	beq.n	8004260 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 021e 	bic.w	r2, r3, #30
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0216 	orr.w	r2, r2, #22
 8004204:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03e      	beq.n	800428c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0208 	orr.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e035      	b.n	800428c <HAL_DMA_Start_IT+0x260>
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020e 	bic.w	r2, r3, #14
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 020a 	orr.w	r2, r2, #10
 8004272:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0204 	orr.w	r2, r2, #4
 800428a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a83      	ldr	r2, [pc, #524]	; (80044a0 <HAL_DMA_Start_IT+0x474>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d072      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a82      	ldr	r2, [pc, #520]	; (80044a4 <HAL_DMA_Start_IT+0x478>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d06d      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_DMA_Start_IT+0x47c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d068      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7f      	ldr	r2, [pc, #508]	; (80044ac <HAL_DMA_Start_IT+0x480>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d063      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_DMA_Start_IT+0x484>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d05e      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_DMA_Start_IT+0x488>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d059      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_DMA_Start_IT+0x48c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d054      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_DMA_Start_IT+0x490>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04f      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a77      	ldr	r2, [pc, #476]	; (80044c0 <HAL_DMA_Start_IT+0x494>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d04a      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a76      	ldr	r2, [pc, #472]	; (80044c4 <HAL_DMA_Start_IT+0x498>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d045      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a74      	ldr	r2, [pc, #464]	; (80044c8 <HAL_DMA_Start_IT+0x49c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d040      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	; (80044cc <HAL_DMA_Start_IT+0x4a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d03b      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_DMA_Start_IT+0x4a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d036      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_DMA_Start_IT+0x4a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d031      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_DMA_Start_IT+0x4ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02c      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6d      	ldr	r2, [pc, #436]	; (80044dc <HAL_DMA_Start_IT+0x4b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d027      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_DMA_Start_IT+0x4b4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_DMA_Start_IT+0x4b8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <HAL_DMA_Start_IT+0x4bc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a67      	ldr	r2, [pc, #412]	; (80044ec <HAL_DMA_Start_IT+0x4c0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_DMA_Start_IT+0x4c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a64      	ldr	r2, [pc, #400]	; (80044f4 <HAL_DMA_Start_IT+0x4c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a62      	ldr	r2, [pc, #392]	; (80044f8 <HAL_DMA_Start_IT+0x4cc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a61      	ldr	r2, [pc, #388]	; (80044fc <HAL_DMA_Start_IT+0x4d0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Start_IT+0x354>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_DMA_Start_IT+0x356>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01a      	beq.n	80043bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <HAL_DMA_Start_IT+0x474>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04a      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <HAL_DMA_Start_IT+0x478>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d045      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a34      	ldr	r2, [pc, #208]	; (80044a8 <HAL_DMA_Start_IT+0x47c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d040      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a33      	ldr	r2, [pc, #204]	; (80044ac <HAL_DMA_Start_IT+0x480>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03b      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <HAL_DMA_Start_IT+0x484>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <HAL_DMA_Start_IT+0x488>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d031      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <HAL_DMA_Start_IT+0x48c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_DMA_Start_IT+0x490>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_DMA_Start_IT+0x494>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <HAL_DMA_Start_IT+0x498>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <HAL_DMA_Start_IT+0x49c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_DMA_Start_IT+0x4a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_DMA_Start_IT+0x4a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <HAL_DMA_Start_IT+0x4a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <HAL_DMA_Start_IT+0x4ac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_DMA_Start_IT+0x4b0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <HAL_DMA_Start_IT+0x442>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e012      	b.n	8004494 <HAL_DMA_Start_IT+0x468>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e009      	b.n	8004494 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	58025408 	.word	0x58025408
 80044e4:	5802541c 	.word	0x5802541c
 80044e8:	58025430 	.word	0x58025430
 80044ec:	58025444 	.word	0x58025444
 80044f0:	58025458 	.word	0x58025458
 80044f4:	5802546c 	.word	0x5802546c
 80044f8:	58025480 	.word	0x58025480
 80044fc:	58025494 	.word	0x58025494

08004500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004508:	f7fc fa64 	bl	80009d4 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e2dc      	b.n	8004ad2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d008      	beq.n	8004536 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e2cd      	b.n	8004ad2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a76      	ldr	r2, [pc, #472]	; (8004714 <HAL_DMA_Abort+0x214>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04a      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_DMA_Abort+0x218>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d045      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a73      	ldr	r2, [pc, #460]	; (800471c <HAL_DMA_Abort+0x21c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d040      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a71      	ldr	r2, [pc, #452]	; (8004720 <HAL_DMA_Abort+0x220>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d03b      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a70      	ldr	r2, [pc, #448]	; (8004724 <HAL_DMA_Abort+0x224>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d036      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6e      	ldr	r2, [pc, #440]	; (8004728 <HAL_DMA_Abort+0x228>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6d      	ldr	r2, [pc, #436]	; (800472c <HAL_DMA_Abort+0x22c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d02c      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6b      	ldr	r2, [pc, #428]	; (8004730 <HAL_DMA_Abort+0x230>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d027      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a6a      	ldr	r2, [pc, #424]	; (8004734 <HAL_DMA_Abort+0x234>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a68      	ldr	r2, [pc, #416]	; (8004738 <HAL_DMA_Abort+0x238>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a67      	ldr	r2, [pc, #412]	; (800473c <HAL_DMA_Abort+0x23c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a65      	ldr	r2, [pc, #404]	; (8004740 <HAL_DMA_Abort+0x240>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a64      	ldr	r2, [pc, #400]	; (8004744 <HAL_DMA_Abort+0x244>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a62      	ldr	r2, [pc, #392]	; (8004748 <HAL_DMA_Abort+0x248>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a61      	ldr	r2, [pc, #388]	; (800474c <HAL_DMA_Abort+0x24c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_DMA_Abort+0xd6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a5f      	ldr	r2, [pc, #380]	; (8004750 <HAL_DMA_Abort+0x250>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_DMA_Abort+0xda>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_DMA_Abort+0xdc>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 021e 	bic.w	r2, r2, #30
 80045ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e00a      	b.n	800461e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020e 	bic.w	r2, r2, #14
 8004616:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <HAL_DMA_Abort+0x214>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d072      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <HAL_DMA_Abort+0x218>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d06d      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a39      	ldr	r2, [pc, #228]	; (800471c <HAL_DMA_Abort+0x21c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d068      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a37      	ldr	r2, [pc, #220]	; (8004720 <HAL_DMA_Abort+0x220>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d063      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a36      	ldr	r2, [pc, #216]	; (8004724 <HAL_DMA_Abort+0x224>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d05e      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a34      	ldr	r2, [pc, #208]	; (8004728 <HAL_DMA_Abort+0x228>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d059      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a33      	ldr	r2, [pc, #204]	; (800472c <HAL_DMA_Abort+0x22c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d054      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a31      	ldr	r2, [pc, #196]	; (8004730 <HAL_DMA_Abort+0x230>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04f      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a30      	ldr	r2, [pc, #192]	; (8004734 <HAL_DMA_Abort+0x234>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04a      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <HAL_DMA_Abort+0x238>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d045      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2d      	ldr	r2, [pc, #180]	; (800473c <HAL_DMA_Abort+0x23c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d040      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_DMA_Abort+0x240>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d03b      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <HAL_DMA_Abort+0x244>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d036      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <HAL_DMA_Abort+0x248>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d031      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a27      	ldr	r2, [pc, #156]	; (800474c <HAL_DMA_Abort+0x24c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d02c      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_DMA_Abort+0x250>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d027      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_DMA_Abort+0x254>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_DMA_Abort+0x258>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01d      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_DMA_Abort+0x25c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d018      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_DMA_Abort+0x260>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_DMA_Abort+0x264>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_DMA_Abort+0x268>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_DMA_Abort+0x26c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_DMA_Abort+0x20e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_DMA_Abort+0x270>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d132      	bne.n	8004774 <HAL_DMA_Abort+0x274>
 800470e:	2301      	movs	r3, #1
 8004710:	e031      	b.n	8004776 <HAL_DMA_Abort+0x276>
 8004712:	bf00      	nop
 8004714:	40020010 	.word	0x40020010
 8004718:	40020028 	.word	0x40020028
 800471c:	40020040 	.word	0x40020040
 8004720:	40020058 	.word	0x40020058
 8004724:	40020070 	.word	0x40020070
 8004728:	40020088 	.word	0x40020088
 800472c:	400200a0 	.word	0x400200a0
 8004730:	400200b8 	.word	0x400200b8
 8004734:	40020410 	.word	0x40020410
 8004738:	40020428 	.word	0x40020428
 800473c:	40020440 	.word	0x40020440
 8004740:	40020458 	.word	0x40020458
 8004744:	40020470 	.word	0x40020470
 8004748:	40020488 	.word	0x40020488
 800474c:	400204a0 	.word	0x400204a0
 8004750:	400204b8 	.word	0x400204b8
 8004754:	58025408 	.word	0x58025408
 8004758:	5802541c 	.word	0x5802541c
 800475c:	58025430 	.word	0x58025430
 8004760:	58025444 	.word	0x58025444
 8004764:	58025458 	.word	0x58025458
 8004768:	5802546c 	.word	0x5802546c
 800476c:	58025480 	.word	0x58025480
 8004770:	58025494 	.word	0x58025494
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004788:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6d      	ldr	r2, [pc, #436]	; (8004944 <HAL_DMA_Abort+0x444>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d04a      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a6b      	ldr	r2, [pc, #428]	; (8004948 <HAL_DMA_Abort+0x448>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d045      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a6a      	ldr	r2, [pc, #424]	; (800494c <HAL_DMA_Abort+0x44c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d040      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a68      	ldr	r2, [pc, #416]	; (8004950 <HAL_DMA_Abort+0x450>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d03b      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a67      	ldr	r2, [pc, #412]	; (8004954 <HAL_DMA_Abort+0x454>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d036      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_DMA_Abort+0x458>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a64      	ldr	r2, [pc, #400]	; (800495c <HAL_DMA_Abort+0x45c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d02c      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a62      	ldr	r2, [pc, #392]	; (8004960 <HAL_DMA_Abort+0x460>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d027      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a61      	ldr	r2, [pc, #388]	; (8004964 <HAL_DMA_Abort+0x464>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d022      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_DMA_Abort+0x468>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01d      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a5e      	ldr	r2, [pc, #376]	; (800496c <HAL_DMA_Abort+0x46c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a5c      	ldr	r2, [pc, #368]	; (8004970 <HAL_DMA_Abort+0x470>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_DMA_Abort+0x474>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a59      	ldr	r2, [pc, #356]	; (8004978 <HAL_DMA_Abort+0x478>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_DMA_Abort+0x47c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_DMA_Abort+0x32a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_DMA_Abort+0x480>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d108      	bne.n	800483c <HAL_DMA_Abort+0x33c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e007      	b.n	800484c <HAL_DMA_Abort+0x34c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800484c:	e013      	b.n	8004876 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800484e:	f7fc f8c1 	bl	80009d4 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b05      	cmp	r3, #5
 800485a:	d90c      	bls.n	8004876 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2203      	movs	r2, #3
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e12d      	b.n	8004ad2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <HAL_DMA_Abort+0x444>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_DMA_Abort+0x448>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <HAL_DMA_Abort+0x44c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <HAL_DMA_Abort+0x450>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a29      	ldr	r2, [pc, #164]	; (8004954 <HAL_DMA_Abort+0x454>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <HAL_DMA_Abort+0x458>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_DMA_Abort+0x45c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a24      	ldr	r2, [pc, #144]	; (8004960 <HAL_DMA_Abort+0x460>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_DMA_Abort+0x464>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_DMA_Abort+0x468>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a20      	ldr	r2, [pc, #128]	; (800496c <HAL_DMA_Abort+0x46c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <HAL_DMA_Abort+0x470>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_DMA_Abort+0x474>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <HAL_DMA_Abort+0x478>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1a      	ldr	r2, [pc, #104]	; (800497c <HAL_DMA_Abort+0x47c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMA_Abort+0x422>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_DMA_Abort+0x480>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_DMA_Abort+0x426>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_DMA_Abort+0x428>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02b      	beq.n	8004984 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	223f      	movs	r2, #63	; 0x3f
 800493c:	409a      	lsls	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	e02a      	b.n	800499a <HAL_DMA_Abort+0x49a>
 8004944:	40020010 	.word	0x40020010
 8004948:	40020028 	.word	0x40020028
 800494c:	40020040 	.word	0x40020040
 8004950:	40020058 	.word	0x40020058
 8004954:	40020070 	.word	0x40020070
 8004958:	40020088 	.word	0x40020088
 800495c:	400200a0 	.word	0x400200a0
 8004960:	400200b8 	.word	0x400200b8
 8004964:	40020410 	.word	0x40020410
 8004968:	40020428 	.word	0x40020428
 800496c:	40020440 	.word	0x40020440
 8004970:	40020458 	.word	0x40020458
 8004974:	40020470 	.word	0x40020470
 8004978:	40020488 	.word	0x40020488
 800497c:	400204a0 	.word	0x400204a0
 8004980:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a4f      	ldr	r2, [pc, #316]	; (8004adc <HAL_DMA_Abort+0x5dc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d072      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a4d      	ldr	r2, [pc, #308]	; (8004ae0 <HAL_DMA_Abort+0x5e0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d06d      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4c      	ldr	r2, [pc, #304]	; (8004ae4 <HAL_DMA_Abort+0x5e4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d068      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4a      	ldr	r2, [pc, #296]	; (8004ae8 <HAL_DMA_Abort+0x5e8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d063      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a49      	ldr	r2, [pc, #292]	; (8004aec <HAL_DMA_Abort+0x5ec>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d05e      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_DMA_Abort+0x5f0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d059      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_DMA_Abort+0x5f4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d054      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a44      	ldr	r2, [pc, #272]	; (8004af8 <HAL_DMA_Abort+0x5f8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04f      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a43      	ldr	r2, [pc, #268]	; (8004afc <HAL_DMA_Abort+0x5fc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04a      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <HAL_DMA_Abort+0x600>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d045      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a40      	ldr	r2, [pc, #256]	; (8004b04 <HAL_DMA_Abort+0x604>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d040      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3e      	ldr	r2, [pc, #248]	; (8004b08 <HAL_DMA_Abort+0x608>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d03b      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3d      	ldr	r2, [pc, #244]	; (8004b0c <HAL_DMA_Abort+0x60c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d036      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <HAL_DMA_Abort+0x610>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3a      	ldr	r2, [pc, #232]	; (8004b14 <HAL_DMA_Abort+0x614>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d02c      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <HAL_DMA_Abort+0x618>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d027      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a37      	ldr	r2, [pc, #220]	; (8004b1c <HAL_DMA_Abort+0x61c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a35      	ldr	r2, [pc, #212]	; (8004b20 <HAL_DMA_Abort+0x620>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01d      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_DMA_Abort+0x624>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_DMA_Abort+0x628>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <HAL_DMA_Abort+0x62c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2f      	ldr	r2, [pc, #188]	; (8004b30 <HAL_DMA_Abort+0x630>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2e      	ldr	r2, [pc, #184]	; (8004b34 <HAL_DMA_Abort+0x634>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_DMA_Abort+0x58a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <HAL_DMA_Abort+0x638>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_DMA_Abort+0x58e>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_DMA_Abort+0x590>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d015      	beq.n	8004ac0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004abe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40020010 	.word	0x40020010
 8004ae0:	40020028 	.word	0x40020028
 8004ae4:	40020040 	.word	0x40020040
 8004ae8:	40020058 	.word	0x40020058
 8004aec:	40020070 	.word	0x40020070
 8004af0:	40020088 	.word	0x40020088
 8004af4:	400200a0 	.word	0x400200a0
 8004af8:	400200b8 	.word	0x400200b8
 8004afc:	40020410 	.word	0x40020410
 8004b00:	40020428 	.word	0x40020428
 8004b04:	40020440 	.word	0x40020440
 8004b08:	40020458 	.word	0x40020458
 8004b0c:	40020470 	.word	0x40020470
 8004b10:	40020488 	.word	0x40020488
 8004b14:	400204a0 	.word	0x400204a0
 8004b18:	400204b8 	.word	0x400204b8
 8004b1c:	58025408 	.word	0x58025408
 8004b20:	5802541c 	.word	0x5802541c
 8004b24:	58025430 	.word	0x58025430
 8004b28:	58025444 	.word	0x58025444
 8004b2c:	58025458 	.word	0x58025458
 8004b30:	5802546c 	.word	0x5802546c
 8004b34:	58025480 	.word	0x58025480
 8004b38:	58025494 	.word	0x58025494

08004b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e237      	b.n	8004fbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d004      	beq.n	8004b64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e22c      	b.n	8004fbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5c      	ldr	r2, [pc, #368]	; (8004cdc <HAL_DMA_Abort_IT+0x1a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04a      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5b      	ldr	r2, [pc, #364]	; (8004ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d045      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a59      	ldr	r2, [pc, #356]	; (8004ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d040      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a58      	ldr	r2, [pc, #352]	; (8004ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d03b      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a56      	ldr	r2, [pc, #344]	; (8004cec <HAL_DMA_Abort_IT+0x1b0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d036      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a55      	ldr	r2, [pc, #340]	; (8004cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d031      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a53      	ldr	r2, [pc, #332]	; (8004cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02c      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d027      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a50      	ldr	r2, [pc, #320]	; (8004cfc <HAL_DMA_Abort_IT+0x1c0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_DMA_Abort_IT+0x1c4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01d      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <HAL_DMA_Abort_IT+0x1c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d018      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4c      	ldr	r2, [pc, #304]	; (8004d08 <HAL_DMA_Abort_IT+0x1cc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4a      	ldr	r2, [pc, #296]	; (8004d0c <HAL_DMA_Abort_IT+0x1d0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a49      	ldr	r2, [pc, #292]	; (8004d10 <HAL_DMA_Abort_IT+0x1d4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a47      	ldr	r2, [pc, #284]	; (8004d14 <HAL_DMA_Abort_IT+0x1d8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xc8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <HAL_DMA_Abort_IT+0x1dc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_Abort_IT+0xcc>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_Abort_IT+0xce>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8086 	beq.w	8004d1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <HAL_DMA_Abort_IT+0x1a0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d04a      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d045      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d040      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d03b      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <HAL_DMA_Abort_IT+0x1b0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d036      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d031      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02c      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a25      	ldr	r2, [pc, #148]	; (8004cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d027      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a23      	ldr	r2, [pc, #140]	; (8004cfc <HAL_DMA_Abort_IT+0x1c0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d022      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_DMA_Abort_IT+0x1c4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <HAL_DMA_Abort_IT+0x1c8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d018      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <HAL_DMA_Abort_IT+0x1cc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <HAL_DMA_Abort_IT+0x1d0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00e      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <HAL_DMA_Abort_IT+0x1d4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_DMA_Abort_IT+0x1d8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x17c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_DMA_Abort_IT+0x1dc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <HAL_DMA_Abort_IT+0x18e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e178      	b.n	8004fbc <HAL_DMA_Abort_IT+0x480>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e16f      	b.n	8004fbc <HAL_DMA_Abort_IT+0x480>
 8004cdc:	40020010 	.word	0x40020010
 8004ce0:	40020028 	.word	0x40020028
 8004ce4:	40020040 	.word	0x40020040
 8004ce8:	40020058 	.word	0x40020058
 8004cec:	40020070 	.word	0x40020070
 8004cf0:	40020088 	.word	0x40020088
 8004cf4:	400200a0 	.word	0x400200a0
 8004cf8:	400200b8 	.word	0x400200b8
 8004cfc:	40020410 	.word	0x40020410
 8004d00:	40020428 	.word	0x40020428
 8004d04:	40020440 	.word	0x40020440
 8004d08:	40020458 	.word	0x40020458
 8004d0c:	40020470 	.word	0x40020470
 8004d10:	40020488 	.word	0x40020488
 8004d14:	400204a0 	.word	0x400204a0
 8004d18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 020e 	bic.w	r2, r2, #14
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6c      	ldr	r2, [pc, #432]	; (8004ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04a      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6b      	ldr	r2, [pc, #428]	; (8004ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d045      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a69      	ldr	r2, [pc, #420]	; (8004eec <HAL_DMA_Abort_IT+0x3b0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d040      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a68      	ldr	r2, [pc, #416]	; (8004ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d03b      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a66      	ldr	r2, [pc, #408]	; (8004ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d036      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a65      	ldr	r2, [pc, #404]	; (8004ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d031      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a63      	ldr	r2, [pc, #396]	; (8004efc <HAL_DMA_Abort_IT+0x3c0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02c      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a62      	ldr	r2, [pc, #392]	; (8004f00 <HAL_DMA_Abort_IT+0x3c4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d027      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a60      	ldr	r2, [pc, #384]	; (8004f04 <HAL_DMA_Abort_IT+0x3c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d022      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a5f      	ldr	r2, [pc, #380]	; (8004f08 <HAL_DMA_Abort_IT+0x3cc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01d      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <HAL_DMA_Abort_IT+0x3d0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d018      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5c      	ldr	r2, [pc, #368]	; (8004f10 <HAL_DMA_Abort_IT+0x3d4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5a      	ldr	r2, [pc, #360]	; (8004f14 <HAL_DMA_Abort_IT+0x3d8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00e      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a59      	ldr	r2, [pc, #356]	; (8004f18 <HAL_DMA_Abort_IT+0x3dc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a57      	ldr	r2, [pc, #348]	; (8004f1c <HAL_DMA_Abort_IT+0x3e0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x290>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a56      	ldr	r2, [pc, #344]	; (8004f20 <HAL_DMA_Abort_IT+0x3e4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <HAL_DMA_Abort_IT+0x2a2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e007      	b.n	8004dee <HAL_DMA_Abort_IT+0x2b2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d072      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d06d      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_DMA_Abort_IT+0x3b0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d063      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05e      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d059      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_DMA_Abort_IT+0x3c0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d054      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <HAL_DMA_Abort_IT+0x3c4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04f      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_DMA_Abort_IT+0x3c8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <HAL_DMA_Abort_IT+0x3cc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_DMA_Abort_IT+0x3d0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_DMA_Abort_IT+0x3d4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_DMA_Abort_IT+0x3d8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_DMA_Abort_IT+0x3dc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_DMA_Abort_IT+0x3e0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <HAL_DMA_Abort_IT+0x3e4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_DMA_Abort_IT+0x3e8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_DMA_Abort_IT+0x3ec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_DMA_Abort_IT+0x3f0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_DMA_Abort_IT+0x3f4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_DMA_Abort_IT+0x3f8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_DMA_Abort_IT+0x3fc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_DMA_Abort_IT+0x400>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Abort_IT+0x3a2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_DMA_Abort_IT+0x404>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d132      	bne.n	8004f44 <HAL_DMA_Abort_IT+0x408>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e031      	b.n	8004f46 <HAL_DMA_Abort_IT+0x40a>
 8004ee2:	bf00      	nop
 8004ee4:	40020010 	.word	0x40020010
 8004ee8:	40020028 	.word	0x40020028
 8004eec:	40020040 	.word	0x40020040
 8004ef0:	40020058 	.word	0x40020058
 8004ef4:	40020070 	.word	0x40020070
 8004ef8:	40020088 	.word	0x40020088
 8004efc:	400200a0 	.word	0x400200a0
 8004f00:	400200b8 	.word	0x400200b8
 8004f04:	40020410 	.word	0x40020410
 8004f08:	40020428 	.word	0x40020428
 8004f0c:	40020440 	.word	0x40020440
 8004f10:	40020458 	.word	0x40020458
 8004f14:	40020470 	.word	0x40020470
 8004f18:	40020488 	.word	0x40020488
 8004f1c:	400204a0 	.word	0x400204a0
 8004f20:	400204b8 	.word	0x400204b8
 8004f24:	58025408 	.word	0x58025408
 8004f28:	5802541c 	.word	0x5802541c
 8004f2c:	58025430 	.word	0x58025430
 8004f30:	58025444 	.word	0x58025444
 8004f34:	58025458 	.word	0x58025458
 8004f38:	5802546c 	.word	0x5802546c
 8004f3c:	58025480 	.word	0x58025480
 8004f40:	58025494 	.word	0x58025494
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d028      	beq.n	8004f9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2201      	movs	r2, #1
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fd4:	4b67      	ldr	r3, [pc, #412]	; (8005174 <HAL_DMA_IRQHandler+0x1ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a67      	ldr	r2, [pc, #412]	; (8005178 <HAL_DMA_IRQHandler+0x1b0>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0a9b      	lsrs	r3, r3, #10
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a5f      	ldr	r2, [pc, #380]	; (800517c <HAL_DMA_IRQHandler+0x1b4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04a      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <HAL_DMA_IRQHandler+0x1b8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d045      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a5c      	ldr	r2, [pc, #368]	; (8005184 <HAL_DMA_IRQHandler+0x1bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d040      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a5a      	ldr	r2, [pc, #360]	; (8005188 <HAL_DMA_IRQHandler+0x1c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d03b      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a59      	ldr	r2, [pc, #356]	; (800518c <HAL_DMA_IRQHandler+0x1c4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d036      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a57      	ldr	r2, [pc, #348]	; (8005190 <HAL_DMA_IRQHandler+0x1c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d031      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a56      	ldr	r2, [pc, #344]	; (8005194 <HAL_DMA_IRQHandler+0x1cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d02c      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a54      	ldr	r2, [pc, #336]	; (8005198 <HAL_DMA_IRQHandler+0x1d0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d027      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a53      	ldr	r2, [pc, #332]	; (800519c <HAL_DMA_IRQHandler+0x1d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a51      	ldr	r2, [pc, #324]	; (80051a0 <HAL_DMA_IRQHandler+0x1d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01d      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a50      	ldr	r2, [pc, #320]	; (80051a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a4e      	ldr	r2, [pc, #312]	; (80051a8 <HAL_DMA_IRQHandler+0x1e0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a4d      	ldr	r2, [pc, #308]	; (80051ac <HAL_DMA_IRQHandler+0x1e4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a4b      	ldr	r2, [pc, #300]	; (80051b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4a      	ldr	r2, [pc, #296]	; (80051b4 <HAL_DMA_IRQHandler+0x1ec>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_DMA_IRQHandler+0xd2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a48      	ldr	r2, [pc, #288]	; (80051b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_DMA_IRQHandler+0xd6>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_DMA_IRQHandler+0xd8>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 842b 	beq.w	80058fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2208      	movs	r2, #8
 80050b0:	409a      	lsls	r2, r3
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80a2 	beq.w	8005200 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2e      	ldr	r2, [pc, #184]	; (800517c <HAL_DMA_IRQHandler+0x1b4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d04a      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2d      	ldr	r2, [pc, #180]	; (8005180 <HAL_DMA_IRQHandler+0x1b8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d045      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2b      	ldr	r2, [pc, #172]	; (8005184 <HAL_DMA_IRQHandler+0x1bc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d040      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <HAL_DMA_IRQHandler+0x1c0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d03b      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a28      	ldr	r2, [pc, #160]	; (800518c <HAL_DMA_IRQHandler+0x1c4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d036      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a27      	ldr	r2, [pc, #156]	; (8005190 <HAL_DMA_IRQHandler+0x1c8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d031      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a25      	ldr	r2, [pc, #148]	; (8005194 <HAL_DMA_IRQHandler+0x1cc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02c      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a24      	ldr	r2, [pc, #144]	; (8005198 <HAL_DMA_IRQHandler+0x1d0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d027      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_DMA_IRQHandler+0x1d4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d022      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_DMA_IRQHandler+0x1d8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d01d      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d018      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_DMA_IRQHandler+0x1e4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00e      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_DMA_IRQHandler+0x1ec>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_DMA_IRQHandler+0x194>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d12f      	bne.n	80051bc <HAL_DMA_IRQHandler+0x1f4>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e02e      	b.n	80051d0 <HAL_DMA_IRQHandler+0x208>
 8005172:	bf00      	nop
 8005174:	2400000c 	.word	0x2400000c
 8005178:	1b4e81b5 	.word	0x1b4e81b5
 800517c:	40020010 	.word	0x40020010
 8005180:	40020028 	.word	0x40020028
 8005184:	40020040 	.word	0x40020040
 8005188:	40020058 	.word	0x40020058
 800518c:	40020070 	.word	0x40020070
 8005190:	40020088 	.word	0x40020088
 8005194:	400200a0 	.word	0x400200a0
 8005198:	400200b8 	.word	0x400200b8
 800519c:	40020410 	.word	0x40020410
 80051a0:	40020428 	.word	0x40020428
 80051a4:	40020440 	.word	0x40020440
 80051a8:	40020458 	.word	0x40020458
 80051ac:	40020470 	.word	0x40020470
 80051b0:	40020488 	.word	0x40020488
 80051b4:	400204a0 	.word	0x400204a0
 80051b8:	400204b8 	.word	0x400204b8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2208      	movs	r2, #8
 80051ee:	409a      	lsls	r2, r3
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	fa22 f303 	lsr.w	r3, r2, r3
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d06e      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a69      	ldr	r2, [pc, #420]	; (80053c0 <HAL_DMA_IRQHandler+0x3f8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a67      	ldr	r2, [pc, #412]	; (80053c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a66      	ldr	r2, [pc, #408]	; (80053c8 <HAL_DMA_IRQHandler+0x400>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a64      	ldr	r2, [pc, #400]	; (80053cc <HAL_DMA_IRQHandler+0x404>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a63      	ldr	r2, [pc, #396]	; (80053d0 <HAL_DMA_IRQHandler+0x408>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <HAL_DMA_IRQHandler+0x40c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a60      	ldr	r2, [pc, #384]	; (80053d8 <HAL_DMA_IRQHandler+0x410>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a5e      	ldr	r2, [pc, #376]	; (80053dc <HAL_DMA_IRQHandler+0x414>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a5d      	ldr	r2, [pc, #372]	; (80053e0 <HAL_DMA_IRQHandler+0x418>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5b      	ldr	r2, [pc, #364]	; (80053e4 <HAL_DMA_IRQHandler+0x41c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a5a      	ldr	r2, [pc, #360]	; (80053e8 <HAL_DMA_IRQHandler+0x420>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_DMA_IRQHandler+0x424>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a57      	ldr	r2, [pc, #348]	; (80053f0 <HAL_DMA_IRQHandler+0x428>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a55      	ldr	r2, [pc, #340]	; (80053f4 <HAL_DMA_IRQHandler+0x42c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a54      	ldr	r2, [pc, #336]	; (80053f8 <HAL_DMA_IRQHandler+0x430>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2ee>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_DMA_IRQHandler+0x434>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10a      	bne.n	80052cc <HAL_DMA_IRQHandler+0x304>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e003      	b.n	80052d4 <HAL_DMA_IRQHandler+0x30c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f043 0202 	orr.w	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2204      	movs	r2, #4
 80052fe:	409a      	lsls	r2, r3
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 808f 	beq.w	8005428 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d04a      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <HAL_DMA_IRQHandler+0x3fc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d045      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <HAL_DMA_IRQHandler+0x400>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a27      	ldr	r2, [pc, #156]	; (80053cc <HAL_DMA_IRQHandler+0x404>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d03b      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <HAL_DMA_IRQHandler+0x408>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d036      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a24      	ldr	r2, [pc, #144]	; (80053d4 <HAL_DMA_IRQHandler+0x40c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <HAL_DMA_IRQHandler+0x410>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d02c      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_DMA_IRQHandler+0x414>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d027      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <HAL_DMA_IRQHandler+0x418>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d022      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_DMA_IRQHandler+0x41c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_DMA_IRQHandler+0x420>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_DMA_IRQHandler+0x424>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <HAL_DMA_IRQHandler+0x428>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_DMA_IRQHandler+0x42c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <HAL_DMA_IRQHandler+0x430>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_DMA_IRQHandler+0x3e2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a15      	ldr	r2, [pc, #84]	; (80053fc <HAL_DMA_IRQHandler+0x434>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d12a      	bne.n	8005400 <HAL_DMA_IRQHandler+0x438>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e023      	b.n	8005408 <HAL_DMA_IRQHandler+0x440>
 80053c0:	40020010 	.word	0x40020010
 80053c4:	40020028 	.word	0x40020028
 80053c8:	40020040 	.word	0x40020040
 80053cc:	40020058 	.word	0x40020058
 80053d0:	40020070 	.word	0x40020070
 80053d4:	40020088 	.word	0x40020088
 80053d8:	400200a0 	.word	0x400200a0
 80053dc:	400200b8 	.word	0x400200b8
 80053e0:	40020410 	.word	0x40020410
 80053e4:	40020428 	.word	0x40020428
 80053e8:	40020440 	.word	0x40020440
 80053ec:	40020458 	.word	0x40020458
 80053f0:	40020470 	.word	0x40020470
 80053f4:	40020488 	.word	0x40020488
 80053f8:	400204a0 	.word	0x400204a0
 80053fc:	400204b8 	.word	0x400204b8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2204      	movs	r2, #4
 8005416:	409a      	lsls	r2, r3
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2210      	movs	r2, #16
 8005432:	409a      	lsls	r2, r3
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a6 	beq.w	800558a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a85      	ldr	r2, [pc, #532]	; (8005658 <HAL_DMA_IRQHandler+0x690>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a83      	ldr	r2, [pc, #524]	; (800565c <HAL_DMA_IRQHandler+0x694>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a82      	ldr	r2, [pc, #520]	; (8005660 <HAL_DMA_IRQHandler+0x698>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a80      	ldr	r2, [pc, #512]	; (8005664 <HAL_DMA_IRQHandler+0x69c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a7f      	ldr	r2, [pc, #508]	; (8005668 <HAL_DMA_IRQHandler+0x6a0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a7d      	ldr	r2, [pc, #500]	; (800566c <HAL_DMA_IRQHandler+0x6a4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <HAL_DMA_IRQHandler+0x6a8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7a      	ldr	r2, [pc, #488]	; (8005674 <HAL_DMA_IRQHandler+0x6ac>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a79      	ldr	r2, [pc, #484]	; (8005678 <HAL_DMA_IRQHandler+0x6b0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a77      	ldr	r2, [pc, #476]	; (800567c <HAL_DMA_IRQHandler+0x6b4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a76      	ldr	r2, [pc, #472]	; (8005680 <HAL_DMA_IRQHandler+0x6b8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a74      	ldr	r2, [pc, #464]	; (8005684 <HAL_DMA_IRQHandler+0x6bc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a73      	ldr	r2, [pc, #460]	; (8005688 <HAL_DMA_IRQHandler+0x6c0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a71      	ldr	r2, [pc, #452]	; (800568c <HAL_DMA_IRQHandler+0x6c4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a70      	ldr	r2, [pc, #448]	; (8005690 <HAL_DMA_IRQHandler+0x6c8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_IRQHandler+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6e      	ldr	r2, [pc, #440]	; (8005694 <HAL_DMA_IRQHandler+0x6cc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10a      	bne.n	80054f4 <HAL_DMA_IRQHandler+0x52c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e009      	b.n	8005508 <HAL_DMA_IRQHandler+0x540>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d03e      	beq.n	800558a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2210      	movs	r2, #16
 8005516:	409a      	lsls	r2, r3
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d018      	beq.n	800555c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d108      	bne.n	800554a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d024      	beq.n	800558a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
 8005548:	e01f      	b.n	800558a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01b      	beq.n	800558a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
 800555a:	e016      	b.n	800558a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0208 	bic.w	r2, r2, #8
 8005578:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2220      	movs	r2, #32
 8005594:	409a      	lsls	r2, r3
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8110 	beq.w	80057c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <HAL_DMA_IRQHandler+0x690>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2b      	ldr	r2, [pc, #172]	; (800565c <HAL_DMA_IRQHandler+0x694>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a29      	ldr	r2, [pc, #164]	; (8005660 <HAL_DMA_IRQHandler+0x698>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a28      	ldr	r2, [pc, #160]	; (8005664 <HAL_DMA_IRQHandler+0x69c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a26      	ldr	r2, [pc, #152]	; (8005668 <HAL_DMA_IRQHandler+0x6a0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a25      	ldr	r2, [pc, #148]	; (800566c <HAL_DMA_IRQHandler+0x6a4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a23      	ldr	r2, [pc, #140]	; (8005670 <HAL_DMA_IRQHandler+0x6a8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a22      	ldr	r2, [pc, #136]	; (8005674 <HAL_DMA_IRQHandler+0x6ac>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a20      	ldr	r2, [pc, #128]	; (8005678 <HAL_DMA_IRQHandler+0x6b0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1f      	ldr	r2, [pc, #124]	; (800567c <HAL_DMA_IRQHandler+0x6b4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_DMA_IRQHandler+0x6b8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_DMA_IRQHandler+0x6bc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <HAL_DMA_IRQHandler+0x6c0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a19      	ldr	r2, [pc, #100]	; (800568c <HAL_DMA_IRQHandler+0x6c4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <HAL_DMA_IRQHandler+0x6c8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_IRQHandler+0x678>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <HAL_DMA_IRQHandler+0x6cc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d12b      	bne.n	8005698 <HAL_DMA_IRQHandler+0x6d0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf14      	ite	ne
 800564e:	2301      	movne	r3, #1
 8005650:	2300      	moveq	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e02a      	b.n	80056ac <HAL_DMA_IRQHandler+0x6e4>
 8005656:	bf00      	nop
 8005658:	40020010 	.word	0x40020010
 800565c:	40020028 	.word	0x40020028
 8005660:	40020040 	.word	0x40020040
 8005664:	40020058 	.word	0x40020058
 8005668:	40020070 	.word	0x40020070
 800566c:	40020088 	.word	0x40020088
 8005670:	400200a0 	.word	0x400200a0
 8005674:	400200b8 	.word	0x400200b8
 8005678:	40020410 	.word	0x40020410
 800567c:	40020428 	.word	0x40020428
 8005680:	40020440 	.word	0x40020440
 8005684:	40020458 	.word	0x40020458
 8005688:	40020470 	.word	0x40020470
 800568c:	40020488 	.word	0x40020488
 8005690:	400204a0 	.word	0x400204a0
 8005694:	400204b8 	.word	0x400204b8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8087 	beq.w	80057c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2220      	movs	r2, #32
 80056bc:	409a      	lsls	r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d139      	bne.n	8005742 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0216 	bic.w	r2, r2, #22
 80056dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695a      	ldr	r2, [r3, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_DMA_IRQHandler+0x736>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0208 	bic.w	r2, r2, #8
 800570c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	223f      	movs	r2, #63	; 0x3f
 8005718:	409a      	lsls	r2, r3
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 834a 	beq.w	8005dcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
          }
          return;
 8005740:	e344      	b.n	8005dcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d018      	beq.n	8005782 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02c      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
 800576e:	e027      	b.n	80057c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d023      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
 8005780:	e01e      	b.n	80057c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10f      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0210 	bic.w	r2, r2, #16
 800579e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8306 	beq.w	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8088 	beq.w	80058e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a7a      	ldr	r2, [pc, #488]	; (80059d0 <HAL_DMA_IRQHandler+0xa08>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04a      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a79      	ldr	r2, [pc, #484]	; (80059d4 <HAL_DMA_IRQHandler+0xa0c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d045      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a77      	ldr	r2, [pc, #476]	; (80059d8 <HAL_DMA_IRQHandler+0xa10>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d040      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a76      	ldr	r2, [pc, #472]	; (80059dc <HAL_DMA_IRQHandler+0xa14>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d03b      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a74      	ldr	r2, [pc, #464]	; (80059e0 <HAL_DMA_IRQHandler+0xa18>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d036      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a73      	ldr	r2, [pc, #460]	; (80059e4 <HAL_DMA_IRQHandler+0xa1c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d031      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a71      	ldr	r2, [pc, #452]	; (80059e8 <HAL_DMA_IRQHandler+0xa20>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02c      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a70      	ldr	r2, [pc, #448]	; (80059ec <HAL_DMA_IRQHandler+0xa24>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d027      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6e      	ldr	r2, [pc, #440]	; (80059f0 <HAL_DMA_IRQHandler+0xa28>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6d      	ldr	r2, [pc, #436]	; (80059f4 <HAL_DMA_IRQHandler+0xa2c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01d      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a6b      	ldr	r2, [pc, #428]	; (80059f8 <HAL_DMA_IRQHandler+0xa30>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6a      	ldr	r2, [pc, #424]	; (80059fc <HAL_DMA_IRQHandler+0xa34>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a68      	ldr	r2, [pc, #416]	; (8005a00 <HAL_DMA_IRQHandler+0xa38>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a67      	ldr	r2, [pc, #412]	; (8005a04 <HAL_DMA_IRQHandler+0xa3c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a65      	ldr	r2, [pc, #404]	; (8005a08 <HAL_DMA_IRQHandler+0xa40>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_DMA_IRQHandler+0x8b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a64      	ldr	r2, [pc, #400]	; (8005a0c <HAL_DMA_IRQHandler+0xa44>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <HAL_DMA_IRQHandler+0x8ca>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e007      	b.n	80058a2 <HAL_DMA_IRQHandler+0x8da>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d307      	bcc.n	80058be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f2      	bne.n	80058a2 <HAL_DMA_IRQHandler+0x8da>
 80058bc:	e000      	b.n	80058c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80058be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2203      	movs	r2, #3
 80058d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80058d6:	e003      	b.n	80058e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8272 	beq.w	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	e26c      	b.n	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a43      	ldr	r2, [pc, #268]	; (8005a10 <HAL_DMA_IRQHandler+0xa48>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a42      	ldr	r2, [pc, #264]	; (8005a14 <HAL_DMA_IRQHandler+0xa4c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d01d      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a40      	ldr	r2, [pc, #256]	; (8005a18 <HAL_DMA_IRQHandler+0xa50>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a3f      	ldr	r2, [pc, #252]	; (8005a1c <HAL_DMA_IRQHandler+0xa54>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <HAL_DMA_IRQHandler+0xa58>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <HAL_DMA_IRQHandler+0xa5c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3a      	ldr	r2, [pc, #232]	; (8005a28 <HAL_DMA_IRQHandler+0xa60>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_DMA_IRQHandler+0x984>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a39      	ldr	r2, [pc, #228]	; (8005a2c <HAL_DMA_IRQHandler+0xa64>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_DMA_IRQHandler+0x988>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_DMA_IRQHandler+0x98a>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 823f 	beq.w	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2204      	movs	r2, #4
 800596a:	409a      	lsls	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80cd 	beq.w	8005b10 <HAL_DMA_IRQHandler+0xb48>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80c7 	beq.w	8005b10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2204      	movs	r2, #4
 800598c:	409a      	lsls	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d049      	beq.n	8005a30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8210 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b8:	e20a      	b.n	8005dd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8206 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059cc:	e200      	b.n	8005dd0 <HAL_DMA_IRQHandler+0xe08>
 80059ce:	bf00      	nop
 80059d0:	40020010 	.word	0x40020010
 80059d4:	40020028 	.word	0x40020028
 80059d8:	40020040 	.word	0x40020040
 80059dc:	40020058 	.word	0x40020058
 80059e0:	40020070 	.word	0x40020070
 80059e4:	40020088 	.word	0x40020088
 80059e8:	400200a0 	.word	0x400200a0
 80059ec:	400200b8 	.word	0x400200b8
 80059f0:	40020410 	.word	0x40020410
 80059f4:	40020428 	.word	0x40020428
 80059f8:	40020440 	.word	0x40020440
 80059fc:	40020458 	.word	0x40020458
 8005a00:	40020470 	.word	0x40020470
 8005a04:	40020488 	.word	0x40020488
 8005a08:	400204a0 	.word	0x400204a0
 8005a0c:	400204b8 	.word	0x400204b8
 8005a10:	58025408 	.word	0x58025408
 8005a14:	5802541c 	.word	0x5802541c
 8005a18:	58025430 	.word	0x58025430
 8005a1c:	58025444 	.word	0x58025444
 8005a20:	58025458 	.word	0x58025458
 8005a24:	5802546c 	.word	0x5802546c
 8005a28:	58025480 	.word	0x58025480
 8005a2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d160      	bne.n	8005afc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a7f      	ldr	r2, [pc, #508]	; (8005c3c <HAL_DMA_IRQHandler+0xc74>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d04a      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a7d      	ldr	r2, [pc, #500]	; (8005c40 <HAL_DMA_IRQHandler+0xc78>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d045      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a7c      	ldr	r2, [pc, #496]	; (8005c44 <HAL_DMA_IRQHandler+0xc7c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d040      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7a      	ldr	r2, [pc, #488]	; (8005c48 <HAL_DMA_IRQHandler+0xc80>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d03b      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a79      	ldr	r2, [pc, #484]	; (8005c4c <HAL_DMA_IRQHandler+0xc84>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d036      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a77      	ldr	r2, [pc, #476]	; (8005c50 <HAL_DMA_IRQHandler+0xc88>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d031      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a76      	ldr	r2, [pc, #472]	; (8005c54 <HAL_DMA_IRQHandler+0xc8c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d02c      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a74      	ldr	r2, [pc, #464]	; (8005c58 <HAL_DMA_IRQHandler+0xc90>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d027      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a73      	ldr	r2, [pc, #460]	; (8005c5c <HAL_DMA_IRQHandler+0xc94>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d022      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <HAL_DMA_IRQHandler+0xc98>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a70      	ldr	r2, [pc, #448]	; (8005c64 <HAL_DMA_IRQHandler+0xc9c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d018      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a6e      	ldr	r2, [pc, #440]	; (8005c68 <HAL_DMA_IRQHandler+0xca0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6d      	ldr	r2, [pc, #436]	; (8005c6c <HAL_DMA_IRQHandler+0xca4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6b      	ldr	r2, [pc, #428]	; (8005c70 <HAL_DMA_IRQHandler+0xca8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6a      	ldr	r2, [pc, #424]	; (8005c74 <HAL_DMA_IRQHandler+0xcac>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_IRQHandler+0xb12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a68      	ldr	r2, [pc, #416]	; (8005c78 <HAL_DMA_IRQHandler+0xcb0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <HAL_DMA_IRQHandler+0xb24>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0208 	bic.w	r2, r2, #8
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e007      	b.n	8005afc <HAL_DMA_IRQHandler+0xb34>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8165 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b0e:	e15f      	b.n	8005dd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2202      	movs	r2, #2
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80c5 	beq.w	8005cb0 <HAL_DMA_IRQHandler+0xce8>
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80bf 	beq.w	8005cb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d018      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 813a 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b68:	e134      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8130 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b7c:	e12a      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8089 	bne.w	8005c9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_DMA_IRQHandler+0xc74>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d04a      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <HAL_DMA_IRQHandler+0xc78>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d045      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_DMA_IRQHandler+0xc7c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d040      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_DMA_IRQHandler+0xc80>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d03b      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a25      	ldr	r2, [pc, #148]	; (8005c4c <HAL_DMA_IRQHandler+0xc84>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d036      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <HAL_DMA_IRQHandler+0xc88>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d031      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_DMA_IRQHandler+0xc8c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d02c      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	; (8005c58 <HAL_DMA_IRQHandler+0xc90>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d027      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_DMA_IRQHandler+0xc94>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_DMA_IRQHandler+0xc98>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01d      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <HAL_DMA_IRQHandler+0xc9c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1a      	ldr	r2, [pc, #104]	; (8005c68 <HAL_DMA_IRQHandler+0xca0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <HAL_DMA_IRQHandler+0xca4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <HAL_DMA_IRQHandler+0xca8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <HAL_DMA_IRQHandler+0xcac>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xc62>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_DMA_IRQHandler+0xcb0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d128      	bne.n	8005c7c <HAL_DMA_IRQHandler+0xcb4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0214 	bic.w	r2, r2, #20
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e027      	b.n	8005c8c <HAL_DMA_IRQHandler+0xcc4>
 8005c3c:	40020010 	.word	0x40020010
 8005c40:	40020028 	.word	0x40020028
 8005c44:	40020040 	.word	0x40020040
 8005c48:	40020058 	.word	0x40020058
 8005c4c:	40020070 	.word	0x40020070
 8005c50:	40020088 	.word	0x40020088
 8005c54:	400200a0 	.word	0x400200a0
 8005c58:	400200b8 	.word	0x400200b8
 8005c5c:	40020410 	.word	0x40020410
 8005c60:	40020428 	.word	0x40020428
 8005c64:	40020440 	.word	0x40020440
 8005c68:	40020458 	.word	0x40020458
 8005c6c:	40020470 	.word	0x40020470
 8005c70:	40020488 	.word	0x40020488
 8005c74:	400204a0 	.word	0x400204a0
 8005c78:	400204b8 	.word	0x400204b8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 020a 	bic.w	r2, r2, #10
 8005c8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8097 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cae:	e091      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2208      	movs	r2, #8
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8088 	beq.w	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8082 	beq.w	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a41      	ldr	r2, [pc, #260]	; (8005ddc <HAL_DMA_IRQHandler+0xe14>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d04a      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3f      	ldr	r2, [pc, #252]	; (8005de0 <HAL_DMA_IRQHandler+0xe18>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d045      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3e      	ldr	r2, [pc, #248]	; (8005de4 <HAL_DMA_IRQHandler+0xe1c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d040      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <HAL_DMA_IRQHandler+0xe20>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d03b      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <HAL_DMA_IRQHandler+0xe24>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d036      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <HAL_DMA_IRQHandler+0xe28>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d031      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a38      	ldr	r2, [pc, #224]	; (8005df4 <HAL_DMA_IRQHandler+0xe2c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d02c      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a36      	ldr	r2, [pc, #216]	; (8005df8 <HAL_DMA_IRQHandler+0xe30>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d027      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a35      	ldr	r2, [pc, #212]	; (8005dfc <HAL_DMA_IRQHandler+0xe34>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a33      	ldr	r2, [pc, #204]	; (8005e00 <HAL_DMA_IRQHandler+0xe38>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a32      	ldr	r2, [pc, #200]	; (8005e04 <HAL_DMA_IRQHandler+0xe3c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a30      	ldr	r2, [pc, #192]	; (8005e08 <HAL_DMA_IRQHandler+0xe40>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <HAL_DMA_IRQHandler+0xe44>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2d      	ldr	r2, [pc, #180]	; (8005e10 <HAL_DMA_IRQHandler+0xe48>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <HAL_DMA_IRQHandler+0xe4c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xdaa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <HAL_DMA_IRQHandler+0xe50>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <HAL_DMA_IRQHandler+0xdbc>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 021c 	bic.w	r2, r2, #28
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e007      	b.n	8005d94 <HAL_DMA_IRQHandler+0xdcc>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 020e 	bic.w	r2, r2, #14
 8005d92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	e004      	b.n	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005dcc:	bf00      	nop
 8005dce:	e002      	b.n	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dd6:	3728      	adds	r7, #40	; 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8

08005e1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7f      	ldr	r2, [pc, #508]	; (8006038 <DMA_SetConfig+0x21c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d072      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a7d      	ldr	r2, [pc, #500]	; (800603c <DMA_SetConfig+0x220>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d06d      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a7c      	ldr	r2, [pc, #496]	; (8006040 <DMA_SetConfig+0x224>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d068      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a7a      	ldr	r2, [pc, #488]	; (8006044 <DMA_SetConfig+0x228>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d063      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a79      	ldr	r2, [pc, #484]	; (8006048 <DMA_SetConfig+0x22c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d05e      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a77      	ldr	r2, [pc, #476]	; (800604c <DMA_SetConfig+0x230>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d059      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a76      	ldr	r2, [pc, #472]	; (8006050 <DMA_SetConfig+0x234>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d054      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a74      	ldr	r2, [pc, #464]	; (8006054 <DMA_SetConfig+0x238>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d04f      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a73      	ldr	r2, [pc, #460]	; (8006058 <DMA_SetConfig+0x23c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04a      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a71      	ldr	r2, [pc, #452]	; (800605c <DMA_SetConfig+0x240>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d045      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a70      	ldr	r2, [pc, #448]	; (8006060 <DMA_SetConfig+0x244>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d040      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a6e      	ldr	r2, [pc, #440]	; (8006064 <DMA_SetConfig+0x248>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d03b      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6d      	ldr	r2, [pc, #436]	; (8006068 <DMA_SetConfig+0x24c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d036      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a6b      	ldr	r2, [pc, #428]	; (800606c <DMA_SetConfig+0x250>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a6a      	ldr	r2, [pc, #424]	; (8006070 <DMA_SetConfig+0x254>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d02c      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a68      	ldr	r2, [pc, #416]	; (8006074 <DMA_SetConfig+0x258>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d027      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a67      	ldr	r2, [pc, #412]	; (8006078 <DMA_SetConfig+0x25c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a65      	ldr	r2, [pc, #404]	; (800607c <DMA_SetConfig+0x260>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a64      	ldr	r2, [pc, #400]	; (8006080 <DMA_SetConfig+0x264>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a62      	ldr	r2, [pc, #392]	; (8006084 <DMA_SetConfig+0x268>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a61      	ldr	r2, [pc, #388]	; (8006088 <DMA_SetConfig+0x26c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a5f      	ldr	r2, [pc, #380]	; (800608c <DMA_SetConfig+0x270>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a5e      	ldr	r2, [pc, #376]	; (8006090 <DMA_SetConfig+0x274>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <DMA_SetConfig+0x10a>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5c      	ldr	r2, [pc, #368]	; (8006094 <DMA_SetConfig+0x278>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d101      	bne.n	8005f2a <DMA_SetConfig+0x10e>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <DMA_SetConfig+0x110>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a39      	ldr	r2, [pc, #228]	; (8006038 <DMA_SetConfig+0x21c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04a      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a38      	ldr	r2, [pc, #224]	; (800603c <DMA_SetConfig+0x220>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d045      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a36      	ldr	r2, [pc, #216]	; (8006040 <DMA_SetConfig+0x224>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d040      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a35      	ldr	r2, [pc, #212]	; (8006044 <DMA_SetConfig+0x228>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d03b      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a33      	ldr	r2, [pc, #204]	; (8006048 <DMA_SetConfig+0x22c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d036      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a32      	ldr	r2, [pc, #200]	; (800604c <DMA_SetConfig+0x230>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a30      	ldr	r2, [pc, #192]	; (8006050 <DMA_SetConfig+0x234>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <DMA_SetConfig+0x238>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d027      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2d      	ldr	r2, [pc, #180]	; (8006058 <DMA_SetConfig+0x23c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2c      	ldr	r2, [pc, #176]	; (800605c <DMA_SetConfig+0x240>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <DMA_SetConfig+0x244>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a29      	ldr	r2, [pc, #164]	; (8006064 <DMA_SetConfig+0x248>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a27      	ldr	r2, [pc, #156]	; (8006068 <DMA_SetConfig+0x24c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a26      	ldr	r2, [pc, #152]	; (800606c <DMA_SetConfig+0x250>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a24      	ldr	r2, [pc, #144]	; (8006070 <DMA_SetConfig+0x254>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <DMA_SetConfig+0x1d0>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a23      	ldr	r2, [pc, #140]	; (8006074 <DMA_SetConfig+0x258>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <DMA_SetConfig+0x1d4>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <DMA_SetConfig+0x1d6>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d059      	beq.n	80060aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	223f      	movs	r2, #63	; 0x3f
 8006000:	409a      	lsls	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006014:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d138      	bne.n	8006098 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006036:	e086      	b.n	8006146 <DMA_SetConfig+0x32a>
 8006038:	40020010 	.word	0x40020010
 800603c:	40020028 	.word	0x40020028
 8006040:	40020040 	.word	0x40020040
 8006044:	40020058 	.word	0x40020058
 8006048:	40020070 	.word	0x40020070
 800604c:	40020088 	.word	0x40020088
 8006050:	400200a0 	.word	0x400200a0
 8006054:	400200b8 	.word	0x400200b8
 8006058:	40020410 	.word	0x40020410
 800605c:	40020428 	.word	0x40020428
 8006060:	40020440 	.word	0x40020440
 8006064:	40020458 	.word	0x40020458
 8006068:	40020470 	.word	0x40020470
 800606c:	40020488 	.word	0x40020488
 8006070:	400204a0 	.word	0x400204a0
 8006074:	400204b8 	.word	0x400204b8
 8006078:	58025408 	.word	0x58025408
 800607c:	5802541c 	.word	0x5802541c
 8006080:	58025430 	.word	0x58025430
 8006084:	58025444 	.word	0x58025444
 8006088:	58025458 	.word	0x58025458
 800608c:	5802546c 	.word	0x5802546c
 8006090:	58025480 	.word	0x58025480
 8006094:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]
}
 80060a8:	e04d      	b.n	8006146 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a29      	ldr	r2, [pc, #164]	; (8006154 <DMA_SetConfig+0x338>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a27      	ldr	r2, [pc, #156]	; (8006158 <DMA_SetConfig+0x33c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a26      	ldr	r2, [pc, #152]	; (800615c <DMA_SetConfig+0x340>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a24      	ldr	r2, [pc, #144]	; (8006160 <DMA_SetConfig+0x344>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a23      	ldr	r2, [pc, #140]	; (8006164 <DMA_SetConfig+0x348>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a21      	ldr	r2, [pc, #132]	; (8006168 <DMA_SetConfig+0x34c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a20      	ldr	r2, [pc, #128]	; (800616c <DMA_SetConfig+0x350>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <DMA_SetConfig+0x2de>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <DMA_SetConfig+0x354>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <DMA_SetConfig+0x2e2>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <DMA_SetConfig+0x2e4>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2201      	movs	r2, #1
 800610e:	409a      	lsls	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d108      	bne.n	8006136 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	60da      	str	r2, [r3, #12]
}
 8006134:	e007      	b.n	8006146 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	60da      	str	r2, [r3, #12]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	58025408 	.word	0x58025408
 8006158:	5802541c 	.word	0x5802541c
 800615c:	58025430 	.word	0x58025430
 8006160:	58025444 	.word	0x58025444
 8006164:	58025458 	.word	0x58025458
 8006168:	5802546c 	.word	0x5802546c
 800616c:	58025480 	.word	0x58025480
 8006170:	58025494 	.word	0x58025494

08006174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a42      	ldr	r2, [pc, #264]	; (800628c <DMA_CalcBaseAndBitshift+0x118>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d04a      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a41      	ldr	r2, [pc, #260]	; (8006290 <DMA_CalcBaseAndBitshift+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d045      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a3f      	ldr	r2, [pc, #252]	; (8006294 <DMA_CalcBaseAndBitshift+0x120>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d040      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a3e      	ldr	r2, [pc, #248]	; (8006298 <DMA_CalcBaseAndBitshift+0x124>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d03b      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a3c      	ldr	r2, [pc, #240]	; (800629c <DMA_CalcBaseAndBitshift+0x128>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d036      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a3b      	ldr	r2, [pc, #236]	; (80062a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d031      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <DMA_CalcBaseAndBitshift+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d02c      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a38      	ldr	r2, [pc, #224]	; (80062a8 <DMA_CalcBaseAndBitshift+0x134>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d027      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a36      	ldr	r2, [pc, #216]	; (80062ac <DMA_CalcBaseAndBitshift+0x138>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a35      	ldr	r2, [pc, #212]	; (80062b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d01d      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a33      	ldr	r2, [pc, #204]	; (80062b4 <DMA_CalcBaseAndBitshift+0x140>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a32      	ldr	r2, [pc, #200]	; (80062b8 <DMA_CalcBaseAndBitshift+0x144>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a30      	ldr	r2, [pc, #192]	; (80062bc <DMA_CalcBaseAndBitshift+0x148>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2f      	ldr	r2, [pc, #188]	; (80062c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <DMA_CalcBaseAndBitshift+0x150>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <DMA_CalcBaseAndBitshift+0xa8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <DMA_CalcBaseAndBitshift+0x154>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <DMA_CalcBaseAndBitshift+0xac>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <DMA_CalcBaseAndBitshift+0xae>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d024      	beq.n	8006270 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	3b10      	subs	r3, #16
 800622e:	4a27      	ldr	r2, [pc, #156]	; (80062cc <DMA_CalcBaseAndBitshift+0x158>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	4a24      	ldr	r2, [pc, #144]	; (80062d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006240:	5cd3      	ldrb	r3, [r2, r3]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d908      	bls.n	8006260 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006256:	4013      	ands	r3, r2
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	659a      	str	r2, [r3, #88]	; 0x58
 800625e:	e00d      	b.n	800627c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6593      	str	r3, [r2, #88]	; 0x58
 800626e:	e005      	b.n	800627c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
 80062cc:	aaaaaaab 	.word	0xaaaaaaab
 80062d0:	0800fb14 	.word	0x0800fb14
 80062d4:	fffffc00 	.word	0xfffffc00

080062d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d120      	bne.n	800632e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d858      	bhi.n	80063a6 <DMA_CheckFifoParam+0xce>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <DMA_CheckFifoParam+0x24>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800631f 	.word	0x0800631f
 8006304:	0800630d 	.word	0x0800630d
 8006308:	080063a7 	.word	0x080063a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d048      	beq.n	80063aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800631c:	e045      	b.n	80063aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006326:	d142      	bne.n	80063ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800632c:	e03f      	b.n	80063ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006336:	d123      	bne.n	8006380 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	2b03      	cmp	r3, #3
 800633e:	d838      	bhi.n	80063b2 <DMA_CheckFifoParam+0xda>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <DMA_CheckFifoParam+0x70>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006359 	.word	0x08006359
 800634c:	0800635f 	.word	0x0800635f
 8006350:	08006359 	.word	0x08006359
 8006354:	08006371 	.word	0x08006371
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
        break;
 800635c:	e030      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d025      	beq.n	80063b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800636e:	e022      	b.n	80063b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006378:	d11f      	bne.n	80063ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800637e:	e01c      	b.n	80063ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	2b02      	cmp	r3, #2
 8006386:	d902      	bls.n	800638e <DMA_CheckFifoParam+0xb6>
 8006388:	2b03      	cmp	r3, #3
 800638a:	d003      	beq.n	8006394 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800638c:	e018      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
        break;
 8006392:	e015      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
    break;
 80063a4:	e00b      	b.n	80063be <DMA_CheckFifoParam+0xe6>
        break;
 80063a6:	bf00      	nop
 80063a8:	e00a      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        break;
 80063aa:	bf00      	nop
 80063ac:	e008      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        break;
 80063ae:	bf00      	nop
 80063b0:	e006      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        break;
 80063b2:	bf00      	nop
 80063b4:	e004      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        break;
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
        break;
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
    break;
 80063be:	bf00      	nop
    }
  }

  return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a38      	ldr	r2, [pc, #224]	; (80064c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a36      	ldr	r2, [pc, #216]	; (80064c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01d      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a35      	ldr	r2, [pc, #212]	; (80064cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a33      	ldr	r2, [pc, #204]	; (80064d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a32      	ldr	r2, [pc, #200]	; (80064d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2f      	ldr	r2, [pc, #188]	; (80064dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2d      	ldr	r2, [pc, #180]	; (80064e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006432:	2300      	movs	r3, #0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01a      	beq.n	800646e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3b08      	subs	r3, #8
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a24      	ldr	r2, [pc, #144]	; (80064ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800645c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2201      	movs	r2, #1
 8006466:	409a      	lsls	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800646c:	e024      	b.n	80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	3b10      	subs	r3, #16
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d806      	bhi.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d902      	bls.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3308      	adds	r3, #8
 8006494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4b18      	ldr	r3, [pc, #96]	; (80064fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a16      	ldr	r2, [pc, #88]	; (8006500 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80064a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2201      	movs	r2, #1
 80064b2:	409a      	lsls	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	58025408 	.word	0x58025408
 80064c8:	5802541c 	.word	0x5802541c
 80064cc:	58025430 	.word	0x58025430
 80064d0:	58025444 	.word	0x58025444
 80064d4:	58025458 	.word	0x58025458
 80064d8:	5802546c 	.word	0x5802546c
 80064dc:	58025480 	.word	0x58025480
 80064e0:	58025494 	.word	0x58025494
 80064e4:	cccccccd 	.word	0xcccccccd
 80064e8:	16009600 	.word	0x16009600
 80064ec:	58025880 	.word	0x58025880
 80064f0:	aaaaaaab 	.word	0xaaaaaaab
 80064f4:	400204b8 	.word	0x400204b8
 80064f8:	4002040f 	.word	0x4002040f
 80064fc:	10008200 	.word	0x10008200
 8006500:	40020880 	.word	0x40020880

08006504 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d04a      	beq.n	80065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d847      	bhi.n	80065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a25      	ldr	r2, [pc, #148]	; (80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800658c:	671a      	str	r2, [r3, #112]	; 0x70
 800658e:	e009      	b.n	80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	2201      	movs	r2, #1
 80065aa:	409a      	lsls	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	58025408 	.word	0x58025408
 80065c0:	5802541c 	.word	0x5802541c
 80065c4:	58025430 	.word	0x58025430
 80065c8:	58025444 	.word	0x58025444
 80065cc:	58025458 	.word	0x58025458
 80065d0:	5802546c 	.word	0x5802546c
 80065d4:	58025480 	.word	0x58025480
 80065d8:	58025494 	.word	0x58025494
 80065dc:	1600963f 	.word	0x1600963f
 80065e0:	58025940 	.word	0x58025940
 80065e4:	1000823f 	.word	0x1000823f
 80065e8:	40020940 	.word	0x40020940

080065ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	; 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065fa:	4b89      	ldr	r3, [pc, #548]	; (8006820 <HAL_GPIO_Init+0x234>)
 80065fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065fe:	e194      	b.n	800692a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	2101      	movs	r1, #1
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	fa01 f303 	lsl.w	r3, r1, r3
 800660c:	4013      	ands	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8186 	beq.w	8006924 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d005      	beq.n	8006630 <HAL_GPIO_Init+0x44>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d130      	bne.n	8006692 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2203      	movs	r2, #3
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4013      	ands	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006666:	2201      	movs	r2, #1
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4013      	ands	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	091b      	lsrs	r3, r3, #4
 800667c:	f003 0201 	and.w	r2, r3, #1
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d017      	beq.n	80066ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	2203      	movs	r2, #3
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4013      	ands	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d123      	bne.n	8006722 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	08da      	lsrs	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3208      	adds	r2, #8
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	220f      	movs	r2, #15
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4313      	orrs	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	08da      	lsrs	r2, r3, #3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3208      	adds	r2, #8
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	2203      	movs	r2, #3
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43db      	mvns	r3, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4013      	ands	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f003 0203 	and.w	r2, r3, #3
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80e0 	beq.w	8006924 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006764:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <HAL_GPIO_Init+0x238>)
 8006766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800676a:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <HAL_GPIO_Init+0x238>)
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006774:	4b2b      	ldr	r3, [pc, #172]	; (8006824 <HAL_GPIO_Init+0x238>)
 8006776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006782:	4a29      	ldr	r2, [pc, #164]	; (8006828 <HAL_GPIO_Init+0x23c>)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	3302      	adds	r3, #2
 800678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	220f      	movs	r2, #15
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43db      	mvns	r3, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4013      	ands	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <HAL_GPIO_Init+0x240>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d052      	beq.n	8006854 <HAL_GPIO_Init+0x268>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <HAL_GPIO_Init+0x244>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d031      	beq.n	800681a <HAL_GPIO_Init+0x22e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_GPIO_Init+0x248>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d02b      	beq.n	8006816 <HAL_GPIO_Init+0x22a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <HAL_GPIO_Init+0x24c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d025      	beq.n	8006812 <HAL_GPIO_Init+0x226>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <HAL_GPIO_Init+0x250>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01f      	beq.n	800680e <HAL_GPIO_Init+0x222>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1b      	ldr	r2, [pc, #108]	; (8006840 <HAL_GPIO_Init+0x254>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d019      	beq.n	800680a <HAL_GPIO_Init+0x21e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <HAL_GPIO_Init+0x258>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_GPIO_Init+0x21a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <HAL_GPIO_Init+0x25c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00d      	beq.n	8006802 <HAL_GPIO_Init+0x216>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a18      	ldr	r2, [pc, #96]	; (800684c <HAL_GPIO_Init+0x260>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <HAL_GPIO_Init+0x212>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_GPIO_Init+0x264>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <HAL_GPIO_Init+0x20e>
 80067f6:	2309      	movs	r3, #9
 80067f8:	e02d      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 80067fa:	230a      	movs	r3, #10
 80067fc:	e02b      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 80067fe:	2308      	movs	r3, #8
 8006800:	e029      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 8006802:	2307      	movs	r3, #7
 8006804:	e027      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 8006806:	2306      	movs	r3, #6
 8006808:	e025      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 800680a:	2305      	movs	r3, #5
 800680c:	e023      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 800680e:	2304      	movs	r3, #4
 8006810:	e021      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 8006812:	2303      	movs	r3, #3
 8006814:	e01f      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 8006816:	2302      	movs	r3, #2
 8006818:	e01d      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 800681a:	2301      	movs	r3, #1
 800681c:	e01b      	b.n	8006856 <HAL_GPIO_Init+0x26a>
 800681e:	bf00      	nop
 8006820:	58000080 	.word	0x58000080
 8006824:	58024400 	.word	0x58024400
 8006828:	58000400 	.word	0x58000400
 800682c:	58020000 	.word	0x58020000
 8006830:	58020400 	.word	0x58020400
 8006834:	58020800 	.word	0x58020800
 8006838:	58020c00 	.word	0x58020c00
 800683c:	58021000 	.word	0x58021000
 8006840:	58021400 	.word	0x58021400
 8006844:	58021800 	.word	0x58021800
 8006848:	58021c00 	.word	0x58021c00
 800684c:	58022000 	.word	0x58022000
 8006850:	58022400 	.word	0x58022400
 8006854:	2300      	movs	r3, #0
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	f002 0203 	and.w	r2, r2, #3
 800685c:	0092      	lsls	r2, r2, #2
 800685e:	4093      	lsls	r3, r2
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4313      	orrs	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006866:	4938      	ldr	r1, [pc, #224]	; (8006948 <HAL_GPIO_Init+0x35c>)
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	3302      	adds	r3, #2
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	43db      	mvns	r3, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4013      	ands	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800689a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80068c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	43db      	mvns	r3, r3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4013      	ands	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	43db      	mvns	r3, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4013      	ands	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	3301      	adds	r3, #1
 8006928:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f ae63 	bne.w	8006600 <HAL_GPIO_Init+0x14>
  }
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	3724      	adds	r7, #36	; 0x24
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	58000400 	.word	0x58000400

0800694c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800695a:	4b75      	ldr	r3, [pc, #468]	; (8006b30 <HAL_GPIO_DeInit+0x1e4>)
 800695c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800695e:	e0d9      	b.n	8006b14 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006960:	2201      	movs	r2, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	4013      	ands	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80cc 	beq.w	8006b0e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006976:	4a6f      	ldr	r2, [pc, #444]	; (8006b34 <HAL_GPIO_DeInit+0x1e8>)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	089b      	lsrs	r3, r3, #2
 800697c:	3302      	adds	r3, #2
 800697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006982:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	220f      	movs	r2, #15
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a67      	ldr	r2, [pc, #412]	; (8006b38 <HAL_GPIO_DeInit+0x1ec>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d037      	beq.n	8006a10 <HAL_GPIO_DeInit+0xc4>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a66      	ldr	r2, [pc, #408]	; (8006b3c <HAL_GPIO_DeInit+0x1f0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d031      	beq.n	8006a0c <HAL_GPIO_DeInit+0xc0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a65      	ldr	r2, [pc, #404]	; (8006b40 <HAL_GPIO_DeInit+0x1f4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d02b      	beq.n	8006a08 <HAL_GPIO_DeInit+0xbc>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a64      	ldr	r2, [pc, #400]	; (8006b44 <HAL_GPIO_DeInit+0x1f8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d025      	beq.n	8006a04 <HAL_GPIO_DeInit+0xb8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a63      	ldr	r2, [pc, #396]	; (8006b48 <HAL_GPIO_DeInit+0x1fc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01f      	beq.n	8006a00 <HAL_GPIO_DeInit+0xb4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a62      	ldr	r2, [pc, #392]	; (8006b4c <HAL_GPIO_DeInit+0x200>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d019      	beq.n	80069fc <HAL_GPIO_DeInit+0xb0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a61      	ldr	r2, [pc, #388]	; (8006b50 <HAL_GPIO_DeInit+0x204>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_GPIO_DeInit+0xac>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a60      	ldr	r2, [pc, #384]	; (8006b54 <HAL_GPIO_DeInit+0x208>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00d      	beq.n	80069f4 <HAL_GPIO_DeInit+0xa8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a5f      	ldr	r2, [pc, #380]	; (8006b58 <HAL_GPIO_DeInit+0x20c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <HAL_GPIO_DeInit+0xa4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a5e      	ldr	r2, [pc, #376]	; (8006b5c <HAL_GPIO_DeInit+0x210>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d101      	bne.n	80069ec <HAL_GPIO_DeInit+0xa0>
 80069e8:	2309      	movs	r3, #9
 80069ea:	e012      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 80069ec:	230a      	movs	r3, #10
 80069ee:	e010      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	e00e      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 80069f4:	2307      	movs	r3, #7
 80069f6:	e00c      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 80069f8:	2306      	movs	r3, #6
 80069fa:	e00a      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 80069fc:	2305      	movs	r3, #5
 80069fe:	e008      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 8006a00:	2304      	movs	r3, #4
 8006a02:	e006      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 8006a04:	2303      	movs	r3, #3
 8006a06:	e004      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e002      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_GPIO_DeInit+0xc6>
 8006a10:	2300      	movs	r3, #0
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	f002 0203 	and.w	r2, r2, #3
 8006a18:	0092      	lsls	r2, r2, #2
 8006a1a:	4093      	lsls	r3, r2
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d136      	bne.n	8006a90 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	43db      	mvns	r3, r3
 8006a38:	401a      	ands	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a5e:	4013      	ands	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	220f      	movs	r2, #15
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a72:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_GPIO_DeInit+0x1e8>)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	3302      	adds	r3, #2
 8006a7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	482c      	ldr	r0, [pc, #176]	; (8006b34 <HAL_GPIO_DeInit+0x1e8>)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	400a      	ands	r2, r1
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	2103      	movs	r1, #3
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	08da      	lsrs	r2, r3, #3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3208      	adds	r2, #8
 8006aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	220f      	movs	r2, #15
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	08d2      	lsrs	r2, r2, #3
 8006ac4:	4019      	ands	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2103      	movs	r1, #3
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	2103      	movs	r1, #3
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	401a      	ands	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	3301      	adds	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f47f af1f 	bne.w	8006960 <HAL_GPIO_DeInit+0x14>
  }
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	58000080 	.word	0x58000080
 8006b34:	58000400 	.word	0x58000400
 8006b38:	58020000 	.word	0x58020000
 8006b3c:	58020400 	.word	0x58020400
 8006b40:	58020800 	.word	0x58020800
 8006b44:	58020c00 	.word	0x58020c00
 8006b48:	58021000 	.word	0x58021000
 8006b4c:	58021400 	.word	0x58021400
 8006b50:	58021800 	.word	0x58021800
 8006b54:	58021c00 	.word	0x58021c00
 8006b58:	58022000 	.word	0x58022000
 8006b5c:	58022400 	.word	0x58022400

08006b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b70:	787b      	ldrb	r3, [r7, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b7c:	e003      	b.n	8006b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b7e:	887b      	ldrh	r3, [r7, #2]
 8006b80:	041a      	lsls	r2, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	619a      	str	r2, [r3, #24]
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ba4:	887a      	ldrh	r2, [r7, #2]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	041a      	lsls	r2, r3, #16
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	43d9      	mvns	r1, r3
 8006bb0:	887b      	ldrh	r3, [r7, #2]
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	619a      	str	r2, [r3, #24]
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f804 	bl	8006bfa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006c18:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d00a      	beq.n	8006c3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c24:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d001      	beq.n	8006c36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e040      	b.n	8006cb8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e03e      	b.n	8006cb8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c3a:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006c42:	491f      	ldr	r1, [pc, #124]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c4a:	f7f9 fec3 	bl	80009d4 <HAL_GetTick>
 8006c4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c50:	e009      	b.n	8006c66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c52:	f7f9 febf 	bl	80009d4 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c60:	d901      	bls.n	8006c66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e028      	b.n	8006cb8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c72:	d1ee      	bne.n	8006c52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b1e      	cmp	r3, #30
 8006c78:	d008      	beq.n	8006c8c <HAL_PWREx_ConfigSupply+0x7c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7e:	d005      	beq.n	8006c8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b1d      	cmp	r3, #29
 8006c84:	d002      	beq.n	8006c8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b2d      	cmp	r3, #45	; 0x2d
 8006c8a:	d114      	bne.n	8006cb6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006c8c:	f7f9 fea2 	bl	80009d4 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c92:	e009      	b.n	8006ca8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c94:	f7f9 fe9e 	bl	80009d4 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca2:	d901      	bls.n	8006ca8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e007      	b.n	8006cb8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d1ee      	bne.n	8006c94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	58024800 	.word	0x58024800

08006cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08c      	sub	sp, #48	; 0x30
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f000 bc48 	b.w	8007568 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8088 	beq.w	8006df6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ce6:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cf0:	4b96      	ldr	r3, [pc, #600]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d007      	beq.n	8006d0c <HAL_RCC_OscConfig+0x48>
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	2b18      	cmp	r3, #24
 8006d00:	d111      	bne.n	8006d26 <HAL_RCC_OscConfig+0x62>
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d10c      	bne.n	8006d26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0c:	4b8f      	ldr	r3, [pc, #572]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d06d      	beq.n	8006df4 <HAL_RCC_OscConfig+0x130>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d169      	bne.n	8006df4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f000 bc21 	b.w	8007568 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x7a>
 8006d30:	4b86      	ldr	r3, [pc, #536]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a85      	ldr	r2, [pc, #532]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	e02e      	b.n	8006d9c <HAL_RCC_OscConfig+0xd8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x9c>
 8006d46:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a80      	ldr	r2, [pc, #512]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4b7e      	ldr	r3, [pc, #504]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7d      	ldr	r2, [pc, #500]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e01d      	b.n	8006d9c <HAL_RCC_OscConfig+0xd8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d68:	d10c      	bne.n	8006d84 <HAL_RCC_OscConfig+0xc0>
 8006d6a:	4b78      	ldr	r3, [pc, #480]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a77      	ldr	r2, [pc, #476]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	4b75      	ldr	r3, [pc, #468]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a74      	ldr	r2, [pc, #464]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e00b      	b.n	8006d9c <HAL_RCC_OscConfig+0xd8>
 8006d84:	4b71      	ldr	r3, [pc, #452]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a70      	ldr	r2, [pc, #448]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b6e      	ldr	r3, [pc, #440]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6d      	ldr	r2, [pc, #436]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7f9 fe16 	bl	80009d4 <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dac:	f7f9 fe12 	bl	80009d4 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b64      	cmp	r3, #100	; 0x64
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e3d4      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dbe:	4b63      	ldr	r3, [pc, #396]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0xe8>
 8006dca:	e014      	b.n	8006df6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7f9 fe02 	bl	80009d4 <HAL_GetTick>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd4:	f7f9 fdfe 	bl	80009d4 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e3c0      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006de6:	4b59      	ldr	r3, [pc, #356]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x110>
 8006df2:	e000      	b.n	8006df6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80ca 	beq.w	8006f98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e04:	4b51      	ldr	r3, [pc, #324]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e0e:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <HAL_RCC_OscConfig+0x166>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b18      	cmp	r3, #24
 8006e1e:	d156      	bne.n	8006ece <HAL_RCC_OscConfig+0x20a>
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d151      	bne.n	8006ece <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e2a:	4b48      	ldr	r3, [pc, #288]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_RCC_OscConfig+0x17e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e392      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e42:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f023 0219 	bic.w	r2, r3, #25
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	493f      	ldr	r1, [pc, #252]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7f9 fdbe 	bl	80009d4 <HAL_GetTick>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5c:	f7f9 fdba 	bl	80009d4 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e37c      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e6e:	4b37      	ldr	r3, [pc, #220]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7a:	f7f9 fddb 	bl	8000a34 <HAL_GetREVID>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d817      	bhi.n	8006eb8 <HAL_RCC_OscConfig+0x1f4>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d108      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x1de>
 8006e90:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e98:	4a2c      	ldr	r2, [pc, #176]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ea0:	e07a      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea2:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	031b      	lsls	r3, r3, #12
 8006eb0:	4926      	ldr	r1, [pc, #152]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb6:	e06f      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb8:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	061b      	lsls	r3, r3, #24
 8006ec6:	4921      	ldr	r1, [pc, #132]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ecc:	e064      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d047      	beq.n	8006f66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 0219 	bic.w	r2, r3, #25
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	491a      	ldr	r1, [pc, #104]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7f9 fd74 	bl	80009d4 <HAL_GetTick>
 8006eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef0:	f7f9 fd70 	bl	80009d4 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e332      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0e:	f7f9 fd91 	bl	8000a34 <HAL_GetREVID>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d819      	bhi.n	8006f50 <HAL_RCC_OscConfig+0x28c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d108      	bne.n	8006f36 <HAL_RCC_OscConfig+0x272>
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f2c:	4a07      	ldr	r2, [pc, #28]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f32:	6053      	str	r3, [r2, #4]
 8006f34:	e030      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	031b      	lsls	r3, r3, #12
 8006f44:	4901      	ldr	r1, [pc, #4]	; (8006f4c <HAL_RCC_OscConfig+0x288>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
 8006f4a:	e025      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	4b9a      	ldr	r3, [pc, #616]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	4997      	ldr	r1, [pc, #604]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
 8006f64:	e018      	b.n	8006f98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f66:	4b95      	ldr	r3, [pc, #596]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a94      	ldr	r2, [pc, #592]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f72:	f7f9 fd2f 	bl	80009d4 <HAL_GetTick>
 8006f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7a:	f7f9 fd2b 	bl	80009d4 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e2ed      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f8c:	4b8b      	ldr	r3, [pc, #556]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f0      	bne.n	8006f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80a9 	beq.w	80070f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa6:	4b85      	ldr	r3, [pc, #532]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fb0:	4b82      	ldr	r3, [pc, #520]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d007      	beq.n	8006fcc <HAL_RCC_OscConfig+0x308>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b18      	cmp	r3, #24
 8006fc0:	d13a      	bne.n	8007038 <HAL_RCC_OscConfig+0x374>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d135      	bne.n	8007038 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fcc:	4b7b      	ldr	r3, [pc, #492]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x320>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b80      	cmp	r3, #128	; 0x80
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e2c1      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fe4:	f7f9 fd26 	bl	8000a34 <HAL_GetREVID>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d817      	bhi.n	8007022 <HAL_RCC_OscConfig+0x35e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d108      	bne.n	800700c <HAL_RCC_OscConfig+0x348>
 8006ffa:	4b70      	ldr	r3, [pc, #448]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007002:	4a6e      	ldr	r2, [pc, #440]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007008:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800700a:	e075      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800700c:	4b6b      	ldr	r3, [pc, #428]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	069b      	lsls	r3, r3, #26
 800701a:	4968      	ldr	r1, [pc, #416]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800701c:	4313      	orrs	r3, r2
 800701e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007020:	e06a      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007022:	4b66      	ldr	r3, [pc, #408]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	4962      	ldr	r1, [pc, #392]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007032:	4313      	orrs	r3, r2
 8007034:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007036:	e05f      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d042      	beq.n	80070c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007040:	4b5e      	ldr	r3, [pc, #376]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a5d      	ldr	r2, [pc, #372]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7f9 fcc2 	bl	80009d4 <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007054:	f7f9 fcbe 	bl	80009d4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e280      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007066:	4b55      	ldr	r3, [pc, #340]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007072:	f7f9 fcdf 	bl	8000a34 <HAL_GetREVID>
 8007076:	4603      	mov	r3, r0
 8007078:	f241 0203 	movw	r2, #4099	; 0x1003
 800707c:	4293      	cmp	r3, r2
 800707e:	d817      	bhi.n	80070b0 <HAL_RCC_OscConfig+0x3ec>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	2b20      	cmp	r3, #32
 8007086:	d108      	bne.n	800709a <HAL_RCC_OscConfig+0x3d6>
 8007088:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007090:	4a4a      	ldr	r2, [pc, #296]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e02e      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
 800709a:	4b48      	ldr	r3, [pc, #288]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	069b      	lsls	r3, r3, #26
 80070a8:	4944      	ldr	r1, [pc, #272]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
 80070ae:	e023      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
 80070b0:	4b42      	ldr	r3, [pc, #264]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	061b      	lsls	r3, r3, #24
 80070be:	493f      	ldr	r1, [pc, #252]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60cb      	str	r3, [r1, #12]
 80070c4:	e018      	b.n	80070f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070c6:	4b3d      	ldr	r3, [pc, #244]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a3c      	ldr	r2, [pc, #240]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7f9 fc7f 	bl	80009d4 <HAL_GetTick>
 80070d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070da:	f7f9 fc7b 	bl	80009d4 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e23d      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070ec:	4b33      	ldr	r3, [pc, #204]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f0      	bne.n	80070da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d036      	beq.n	8007172 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d019      	beq.n	8007140 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800710c:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800710e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007110:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007118:	f7f9 fc5c 	bl	80009d4 <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007120:	f7f9 fc58 	bl	80009d4 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e21a      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x45c>
 800713e:	e018      	b.n	8007172 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714c:	f7f9 fc42 	bl	80009d4 <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007154:	f7f9 fc3e 	bl	80009d4 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e200      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d039      	beq.n	80071f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01c      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 800718c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007190:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007192:	f7f9 fc1f 	bl	80009d4 <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800719a:	f7f9 fc1b 	bl	80009d4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e1dd      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <HAL_RCC_OscConfig+0x4f8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCC_OscConfig+0x4d6>
 80071b8:	e01b      	b.n	80071f2 <HAL_RCC_OscConfig+0x52e>
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071c0:	4b9b      	ldr	r3, [pc, #620]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a9a      	ldr	r2, [pc, #616]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80071c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071cc:	f7f9 fc02 	bl	80009d4 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071d4:	f7f9 fbfe 	bl	80009d4 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e1c0      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071e6:	4b92      	ldr	r3, [pc, #584]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8081 	beq.w	8007302 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007200:	4b8c      	ldr	r3, [pc, #560]	; (8007434 <HAL_RCC_OscConfig+0x770>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a8b      	ldr	r2, [pc, #556]	; (8007434 <HAL_RCC_OscConfig+0x770>)
 8007206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800720c:	f7f9 fbe2 	bl	80009d4 <HAL_GetTick>
 8007210:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007214:	f7f9 fbde 	bl	80009d4 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b64      	cmp	r3, #100	; 0x64
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e1a0      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007226:	4b83      	ldr	r3, [pc, #524]	; (8007434 <HAL_RCC_OscConfig+0x770>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0f0      	beq.n	8007214 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d106      	bne.n	8007248 <HAL_RCC_OscConfig+0x584>
 800723a:	4b7d      	ldr	r3, [pc, #500]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	4a7c      	ldr	r2, [pc, #496]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6713      	str	r3, [r2, #112]	; 0x70
 8007246:	e02d      	b.n	80072a4 <HAL_RCC_OscConfig+0x5e0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10c      	bne.n	800726a <HAL_RCC_OscConfig+0x5a6>
 8007250:	4b77      	ldr	r3, [pc, #476]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	4a76      	ldr	r2, [pc, #472]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	6713      	str	r3, [r2, #112]	; 0x70
 800725c:	4b74      	ldr	r3, [pc, #464]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	4a73      	ldr	r2, [pc, #460]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007262:	f023 0304 	bic.w	r3, r3, #4
 8007266:	6713      	str	r3, [r2, #112]	; 0x70
 8007268:	e01c      	b.n	80072a4 <HAL_RCC_OscConfig+0x5e0>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d10c      	bne.n	800728c <HAL_RCC_OscConfig+0x5c8>
 8007272:	4b6f      	ldr	r3, [pc, #444]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	4a6e      	ldr	r2, [pc, #440]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007278:	f043 0304 	orr.w	r3, r3, #4
 800727c:	6713      	str	r3, [r2, #112]	; 0x70
 800727e:	4b6c      	ldr	r3, [pc, #432]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	4a6b      	ldr	r2, [pc, #428]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007284:	f043 0301 	orr.w	r3, r3, #1
 8007288:	6713      	str	r3, [r2, #112]	; 0x70
 800728a:	e00b      	b.n	80072a4 <HAL_RCC_OscConfig+0x5e0>
 800728c:	4b68      	ldr	r3, [pc, #416]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007290:	4a67      	ldr	r2, [pc, #412]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	6713      	str	r3, [r2, #112]	; 0x70
 8007298:	4b65      	ldr	r3, [pc, #404]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	4a64      	ldr	r2, [pc, #400]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800729e:	f023 0304 	bic.w	r3, r3, #4
 80072a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d015      	beq.n	80072d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ac:	f7f9 fb92 	bl	80009d4 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b2:	e00a      	b.n	80072ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b4:	f7f9 fb8e 	bl	80009d4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e14e      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ca:	4b59      	ldr	r3, [pc, #356]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0ee      	beq.n	80072b4 <HAL_RCC_OscConfig+0x5f0>
 80072d6:	e014      	b.n	8007302 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d8:	f7f9 fb7c 	bl	80009d4 <HAL_GetTick>
 80072dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072de:	e00a      	b.n	80072f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e0:	f7f9 fb78 	bl	80009d4 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e138      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072f6:	4b4e      	ldr	r3, [pc, #312]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1ee      	bne.n	80072e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 812d 	beq.w	8007566 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800730c:	4b48      	ldr	r3, [pc, #288]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007314:	2b18      	cmp	r3, #24
 8007316:	f000 80bd 	beq.w	8007494 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b02      	cmp	r3, #2
 8007320:	f040 809e 	bne.w	8007460 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007324:	4b42      	ldr	r3, [pc, #264]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a41      	ldr	r2, [pc, #260]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800732a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7f9 fb50 	bl	80009d4 <HAL_GetTick>
 8007334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007338:	f7f9 fb4c 	bl	80009d4 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e10e      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f0      	bne.n	8007338 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007356:	4b36      	ldr	r3, [pc, #216]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735a:	4b37      	ldr	r3, [pc, #220]	; (8007438 <HAL_RCC_OscConfig+0x774>)
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007366:	0112      	lsls	r2, r2, #4
 8007368:	430a      	orrs	r2, r1
 800736a:	4931      	ldr	r1, [pc, #196]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800736c:	4313      	orrs	r3, r2
 800736e:	628b      	str	r3, [r1, #40]	; 0x28
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007374:	3b01      	subs	r3, #1
 8007376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737e:	3b01      	subs	r3, #1
 8007380:	025b      	lsls	r3, r3, #9
 8007382:	b29b      	uxth	r3, r3
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	3b01      	subs	r3, #1
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	3b01      	subs	r3, #1
 800739a:	061b      	lsls	r3, r3, #24
 800739c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073a0:	4923      	ldr	r1, [pc, #140]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073a6:	4b22      	ldr	r3, [pc, #136]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a21      	ldr	r2, [pc, #132]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073b2:	4b1f      	ldr	r3, [pc, #124]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073be:	00d2      	lsls	r2, r2, #3
 80073c0:	491b      	ldr	r1, [pc, #108]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f023 020c 	bic.w	r2, r3, #12
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	4917      	ldr	r1, [pc, #92]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	f023 0202 	bic.w	r2, r3, #2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e4:	4912      	ldr	r1, [pc, #72]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073ea:	4b11      	ldr	r3, [pc, #68]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	4a10      	ldr	r2, [pc, #64]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	4a0d      	ldr	r2, [pc, #52]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 80073fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007402:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800740c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800740e:	4b08      	ldr	r3, [pc, #32]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a07      	ldr	r2, [pc, #28]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a04      	ldr	r2, [pc, #16]	; (8007430 <HAL_RCC_OscConfig+0x76c>)
 8007420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007426:	f7f9 fad5 	bl	80009d4 <HAL_GetTick>
 800742a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800742c:	e011      	b.n	8007452 <HAL_RCC_OscConfig+0x78e>
 800742e:	bf00      	nop
 8007430:	58024400 	.word	0x58024400
 8007434:	58024800 	.word	0x58024800
 8007438:	fffffc0c 	.word	0xfffffc0c
 800743c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007440:	f7f9 fac8 	bl	80009d4 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e08a      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007452:	4b47      	ldr	r3, [pc, #284]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x77c>
 800745e:	e082      	b.n	8007566 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007460:	4b43      	ldr	r3, [pc, #268]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a42      	ldr	r2, [pc, #264]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800746a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7f9 fab2 	bl	80009d4 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007474:	f7f9 faae 	bl	80009d4 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e070      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007486:	4b3a      	ldr	r3, [pc, #232]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x7b0>
 8007492:	e068      	b.n	8007566 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007494:	4b36      	ldr	r3, [pc, #216]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800749a:	4b35      	ldr	r3, [pc, #212]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d031      	beq.n	800750c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f003 0203 	and.w	r2, r3, #3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d12a      	bne.n	800750c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d122      	bne.n	800750c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d11a      	bne.n	800750c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	0a5b      	lsrs	r3, r3, #9
 80074da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d111      	bne.n	800750c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d108      	bne.n	800750c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	0e1b      	lsrs	r3, r3, #24
 80074fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007506:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007508:	429a      	cmp	r2, r3
 800750a:	d001      	beq.n	8007510 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e02b      	b.n	8007568 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007510:	4b17      	ldr	r3, [pc, #92]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800751a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	429a      	cmp	r2, r3
 8007524:	d01f      	beq.n	8007566 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	4a11      	ldr	r2, [pc, #68]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 800752c:	f023 0301 	bic.w	r3, r3, #1
 8007530:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007532:	f7f9 fa4f 	bl	80009d4 <HAL_GetTick>
 8007536:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007538:	bf00      	nop
 800753a:	f7f9 fa4b 	bl	80009d4 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	4293      	cmp	r3, r2
 8007544:	d0f9      	beq.n	800753a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <HAL_RCC_OscConfig+0x8b0>)
 800754c:	4013      	ands	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007552:	00d2      	lsls	r2, r2, #3
 8007554:	4906      	ldr	r1, [pc, #24]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007556:	4313      	orrs	r3, r2
 8007558:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	4a04      	ldr	r2, [pc, #16]	; (8007570 <HAL_RCC_OscConfig+0x8ac>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	; 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	58024400 	.word	0x58024400
 8007574:	ffff0007 	.word	0xffff0007

08007578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e19c      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800758c:	4b8a      	ldr	r3, [pc, #552]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d910      	bls.n	80075bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b87      	ldr	r3, [pc, #540]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f023 020f 	bic.w	r2, r3, #15
 80075a2:	4985      	ldr	r1, [pc, #532]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075aa:	4b83      	ldr	r3, [pc, #524]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d001      	beq.n	80075bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e184      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	4b7b      	ldr	r3, [pc, #492]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d908      	bls.n	80075ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075d8:	4b78      	ldr	r3, [pc, #480]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	4975      	ldr	r1, [pc, #468]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695a      	ldr	r2, [r3, #20]
 80075fa:	4b70      	ldr	r3, [pc, #448]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007602:	429a      	cmp	r2, r3
 8007604:	d908      	bls.n	8007618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007606:	4b6d      	ldr	r3, [pc, #436]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	496a      	ldr	r1, [pc, #424]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007614:	4313      	orrs	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	4b64      	ldr	r3, [pc, #400]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007630:	429a      	cmp	r2, r3
 8007632:	d908      	bls.n	8007646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007634:	4b61      	ldr	r3, [pc, #388]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	495e      	ldr	r1, [pc, #376]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007642:	4313      	orrs	r3, r2
 8007644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d010      	beq.n	8007674 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69da      	ldr	r2, [r3, #28]
 8007656:	4b59      	ldr	r3, [pc, #356]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800765e:	429a      	cmp	r2, r3
 8007660:	d908      	bls.n	8007674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007662:	4b56      	ldr	r3, [pc, #344]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	4953      	ldr	r1, [pc, #332]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007670:	4313      	orrs	r3, r2
 8007672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	4b4d      	ldr	r3, [pc, #308]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	429a      	cmp	r2, r3
 800768e:	d908      	bls.n	80076a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007690:	4b4a      	ldr	r3, [pc, #296]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f023 020f 	bic.w	r2, r3, #15
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4947      	ldr	r1, [pc, #284]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d055      	beq.n	800775a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076ae:	4b43      	ldr	r3, [pc, #268]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4940      	ldr	r1, [pc, #256]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076c8:	4b3c      	ldr	r3, [pc, #240]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d121      	bne.n	8007718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0f6      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d107      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076e0:	4b36      	ldr	r3, [pc, #216]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0ea      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d107      	bne.n	8007708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076f8:	4b30      	ldr	r3, [pc, #192]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0de      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007708:	4b2c      	ldr	r3, [pc, #176]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0d6      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007718:	4b28      	ldr	r3, [pc, #160]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	f023 0207 	bic.w	r2, r3, #7
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4925      	ldr	r1, [pc, #148]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007726:	4313      	orrs	r3, r2
 8007728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772a:	f7f9 f953 	bl	80009d4 <HAL_GetTick>
 800772e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007730:	e00a      	b.n	8007748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007732:	f7f9 f94f 	bl	80009d4 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e0be      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007748:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	429a      	cmp	r2, r3
 8007758:	d1eb      	bne.n	8007732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d010      	beq.n	8007788 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	429a      	cmp	r2, r3
 8007774:	d208      	bcs.n	8007788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f023 020f 	bic.w	r2, r3, #15
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	490e      	ldr	r1, [pc, #56]	; (80077bc <HAL_RCC_ClockConfig+0x244>)
 8007784:	4313      	orrs	r3, r2
 8007786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d214      	bcs.n	80077c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f023 020f 	bic.w	r2, r3, #15
 800779e:	4906      	ldr	r1, [pc, #24]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <HAL_RCC_ClockConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d005      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e086      	b.n	80078c6 <HAL_RCC_ClockConfig+0x34e>
 80077b8:	52002000 	.word	0x52002000
 80077bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d010      	beq.n	80077ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077d8:	429a      	cmp	r2, r3
 80077da:	d208      	bcs.n	80077ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077dc:	4b3c      	ldr	r3, [pc, #240]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	4939      	ldr	r1, [pc, #228]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d010      	beq.n	800781c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	4b34      	ldr	r3, [pc, #208]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007806:	429a      	cmp	r2, r3
 8007808:	d208      	bcs.n	800781c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800780a:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	492e      	ldr	r1, [pc, #184]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007818:	4313      	orrs	r3, r2
 800781a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007834:	429a      	cmp	r2, r3
 8007836:	d208      	bcs.n	800784a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	4922      	ldr	r1, [pc, #136]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007846:	4313      	orrs	r3, r2
 8007848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d010      	beq.n	8007878 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69da      	ldr	r2, [r3, #28]
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007862:	429a      	cmp	r2, r3
 8007864:	d208      	bcs.n	8007878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4917      	ldr	r1, [pc, #92]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007874:	4313      	orrs	r3, r2
 8007876:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007878:	f000 f834 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 800787c:	4602      	mov	r2, r0
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	4912      	ldr	r1, [pc, #72]	; (80078d4 <HAL_RCC_ClockConfig+0x35c>)
 800788a:	5ccb      	ldrb	r3, [r1, r3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
 8007894:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007896:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <HAL_RCC_ClockConfig+0x358>)
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	4a0d      	ldr	r2, [pc, #52]	; (80078d4 <HAL_RCC_ClockConfig+0x35c>)
 80078a0:	5cd3      	ldrb	r3, [r2, r3]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ac:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <HAL_RCC_ClockConfig+0x360>)
 80078ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078b0:	4a0a      	ldr	r2, [pc, #40]	; (80078dc <HAL_RCC_ClockConfig+0x364>)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80078b6:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <HAL_RCC_ClockConfig+0x368>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7f9 f840 	bl	8000940 <HAL_InitTick>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
 80078d4:	0800fb04 	.word	0x0800fb04
 80078d8:	24000010 	.word	0x24000010
 80078dc:	2400000c 	.word	0x2400000c
 80078e0:	24000014 	.word	0x24000014

080078e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b089      	sub	sp, #36	; 0x24
 80078e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078ea:	4bb3      	ldr	r3, [pc, #716]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078f2:	2b18      	cmp	r3, #24
 80078f4:	f200 8155 	bhi.w	8007ba2 <HAL_RCC_GetSysClockFreq+0x2be>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007965 	.word	0x08007965
 8007904:	08007ba3 	.word	0x08007ba3
 8007908:	08007ba3 	.word	0x08007ba3
 800790c:	08007ba3 	.word	0x08007ba3
 8007910:	08007ba3 	.word	0x08007ba3
 8007914:	08007ba3 	.word	0x08007ba3
 8007918:	08007ba3 	.word	0x08007ba3
 800791c:	08007ba3 	.word	0x08007ba3
 8007920:	0800798b 	.word	0x0800798b
 8007924:	08007ba3 	.word	0x08007ba3
 8007928:	08007ba3 	.word	0x08007ba3
 800792c:	08007ba3 	.word	0x08007ba3
 8007930:	08007ba3 	.word	0x08007ba3
 8007934:	08007ba3 	.word	0x08007ba3
 8007938:	08007ba3 	.word	0x08007ba3
 800793c:	08007ba3 	.word	0x08007ba3
 8007940:	08007991 	.word	0x08007991
 8007944:	08007ba3 	.word	0x08007ba3
 8007948:	08007ba3 	.word	0x08007ba3
 800794c:	08007ba3 	.word	0x08007ba3
 8007950:	08007ba3 	.word	0x08007ba3
 8007954:	08007ba3 	.word	0x08007ba3
 8007958:	08007ba3 	.word	0x08007ba3
 800795c:	08007ba3 	.word	0x08007ba3
 8007960:	08007997 	.word	0x08007997
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007964:	4b94      	ldr	r3, [pc, #592]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007970:	4b91      	ldr	r3, [pc, #580]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	08db      	lsrs	r3, r3, #3
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	4a90      	ldr	r2, [pc, #576]	; (8007bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800797c:	fa22 f303 	lsr.w	r3, r2, r3
 8007980:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007982:	e111      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007984:	4b8d      	ldr	r3, [pc, #564]	; (8007bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007986:	61bb      	str	r3, [r7, #24]
      break;
 8007988:	e10e      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800798a:	4b8d      	ldr	r3, [pc, #564]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800798c:	61bb      	str	r3, [r7, #24]
      break;
 800798e:	e10b      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007990:	4b8c      	ldr	r3, [pc, #560]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007992:	61bb      	str	r3, [r7, #24]
      break;
 8007994:	e108      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007996:	4b88      	ldr	r3, [pc, #544]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079a0:	4b85      	ldr	r3, [pc, #532]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	091b      	lsrs	r3, r3, #4
 80079a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079ac:	4b82      	ldr	r3, [pc, #520]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079b6:	4b80      	ldr	r3, [pc, #512]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ba:	08db      	lsrs	r3, r3, #3
 80079bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80e1 	beq.w	8007b9c <HAL_RCC_GetSysClockFreq+0x2b8>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	f000 8083 	beq.w	8007ae8 <HAL_RCC_GetSysClockFreq+0x204>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f200 80a1 	bhi.w	8007b2c <HAL_RCC_GetSysClockFreq+0x248>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_RCC_GetSysClockFreq+0x114>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d056      	beq.n	8007aa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80079f6:	e099      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f8:	4b6f      	ldr	r3, [pc, #444]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d02d      	beq.n	8007a60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a04:	4b6c      	ldr	r3, [pc, #432]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	4a6b      	ldr	r2, [pc, #428]	; (8007bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b62      	ldr	r3, [pc, #392]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a5e:	e087      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007bcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b51      	ldr	r3, [pc, #324]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aa2:	e065      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	4b40      	ldr	r3, [pc, #256]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ae6:	e043      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007bd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b2f      	ldr	r3, [pc, #188]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b2a:	e021      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	0a5b      	lsrs	r3, r3, #9
 8007b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b94:	ee17 3a90 	vmov	r3, s15
 8007b98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007b9a:	e005      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
      break;
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ba4:	61bb      	str	r3, [r7, #24]
      break;
 8007ba6:	bf00      	nop
  }

  return sysclockfreq;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	03d09000 	.word	0x03d09000
 8007bc0:	003d0900 	.word	0x003d0900
 8007bc4:	007a1200 	.word	0x007a1200
 8007bc8:	46000000 	.word	0x46000000
 8007bcc:	4c742400 	.word	0x4c742400
 8007bd0:	4a742400 	.word	0x4a742400
 8007bd4:	4af42400 	.word	0x4af42400

08007bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007bde:	f7ff fe81 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	490f      	ldr	r1, [pc, #60]	; (8007c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007bf0:	5ccb      	ldrb	r3, [r1, r3]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007c06:	5cd3      	ldrb	r3, [r2, r3]
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	4a07      	ldr	r2, [pc, #28]	; (8007c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c16:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	58024400 	.word	0x58024400
 8007c2c:	0800fb04 	.word	0x0800fb04
 8007c30:	24000010 	.word	0x24000010
 8007c34:	2400000c 	.word	0x2400000c

08007c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c3c:	f7ff ffcc 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 8007c40:	4602      	mov	r2, r0
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	091b      	lsrs	r3, r3, #4
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c4e:	5ccb      	ldrb	r3, [r1, r3]
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	0800fb04 	.word	0x0800fb04

08007c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c68:	f7ff ffb6 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	4904      	ldr	r1, [pc, #16]	; (8007c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c7a:	5ccb      	ldrb	r3, [r1, r3]
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	0800fb04 	.word	0x0800fb04

08007c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	223f      	movs	r2, #63	; 0x3f
 8007c9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f003 0207 	and.w	r2, r3, #7
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007cac:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007cb8:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 020f 	and.w	r2, r3, #15
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <HAL_RCC_GetClockConfig+0x7c>)
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <HAL_RCC_GetClockConfig+0x80>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 020f 	and.w	r2, r3, #15
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	601a      	str	r2, [r3, #0]
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	58024400 	.word	0x58024400
 8007d10:	52002000 	.word	0x52002000

08007d14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d18:	b0ca      	sub	sp, #296	; 0x128
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007d38:	2500      	movs	r5, #0
 8007d3a:	ea54 0305 	orrs.w	r3, r4, r5
 8007d3e:	d049      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4a:	d02f      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d50:	d828      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d56:	d01a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5c:	d822      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d66:	d007      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d68:	e01c      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6a:	4bb8      	ldr	r3, [pc, #736]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	4ab7      	ldr	r2, [pc, #732]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d76:	e01a      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	2102      	movs	r1, #2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 fb61 	bl	800a448 <RCCEx_PLL2_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00f      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d92:	3328      	adds	r3, #40	; 0x28
 8007d94:	2102      	movs	r1, #2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f002 fc08 	bl	800a5ac <RCCEx_PLL3_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007db6:	4ba5      	ldr	r3, [pc, #660]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	4aa1      	ldr	r2, [pc, #644]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8007dca:	e003      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007de0:	f04f 0900 	mov.w	r9, #0
 8007de4:	ea58 0309 	orrs.w	r3, r8, r9
 8007de8:	d047      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d82a      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e11 	.word	0x08007e11
 8007e00:	08007e1f 	.word	0x08007e1f
 8007e04:	08007e35 	.word	0x08007e35
 8007e08:	08007e53 	.word	0x08007e53
 8007e0c:	08007e53 	.word	0x08007e53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e10:	4b8e      	ldr	r3, [pc, #568]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a8d      	ldr	r2, [pc, #564]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e1c:	e01a      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e22:	3308      	adds	r3, #8
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f002 fb0e 	bl	800a448 <RCCEx_PLL2_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e32:	e00f      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e38:	3328      	adds	r3, #40	; 0x28
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f002 fbb5 	bl	800a5ac <RCCEx_PLL3_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e48:	e004      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e50:	e000      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e5c:	4b7b      	ldr	r3, [pc, #492]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	f023 0107 	bic.w	r1, r3, #7
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	4a78      	ldr	r2, [pc, #480]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6513      	str	r3, [r2, #80]	; 0x50
 8007e70:	e003      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007e86:	f04f 0b00 	mov.w	fp, #0
 8007e8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e8e:	d04c      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9a:	d030      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea0:	d829      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ea4:	d02d      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ea8:	d825      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d018      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007eae:	2b80      	cmp	r3, #128	; 0x80
 8007eb0:	d821      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d007      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007eba:	e01c      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebc:	4b63      	ldr	r3, [pc, #396]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	4a62      	ldr	r2, [pc, #392]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ec8:	e01c      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ece:	3308      	adds	r3, #8
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f002 fab8 	bl	800a448 <RCCEx_PLL2_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ede:	e011      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee4:	3328      	adds	r3, #40	; 0x28
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 fb5f 	bl	800a5ac <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ef4:	e006      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f0c:	4b4f      	ldr	r3, [pc, #316]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f10:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1a:	4a4c      	ldr	r2, [pc, #304]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6513      	str	r3, [r2, #80]	; 0x50
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007f36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007f44:	460b      	mov	r3, r1
 8007f46:	4313      	orrs	r3, r2
 8007f48:	d053      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f56:	d035      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f5c:	d82e      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f62:	d031      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f68:	d828      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f6e:	d01a      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f74:	d822      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f7e:	d007      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007f80:	e01c      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f82:	4b32      	ldr	r3, [pc, #200]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4a31      	ldr	r2, [pc, #196]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f8e:	e01c      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f94:	3308      	adds	r3, #8
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 fa55 	bl	800a448 <RCCEx_PLL2_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fa4:	e011      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	3328      	adds	r3, #40	; 0x28
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 fafc 	bl	800a5ac <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fba:	e006      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fc2:	e002      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007fc4:	bf00      	nop
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fd2:	4b1e      	ldr	r3, [pc, #120]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fe2:	4a1a      	ldr	r2, [pc, #104]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe8:	e003      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007ffe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008002:	2300      	movs	r3, #0
 8008004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008008:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800800c:	460b      	mov	r3, r1
 800800e:	4313      	orrs	r3, r2
 8008010:	d056      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800801a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800801e:	d038      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008024:	d831      	bhi.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008026:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800802a:	d034      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800802c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008030:	d82b      	bhi.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008036:	d01d      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800803c:	d825      	bhi.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d006      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008046:	d00a      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008048:	e01f      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008050:	4ba2      	ldr	r3, [pc, #648]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4aa1      	ldr	r2, [pc, #644]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800805c:	e01c      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	3308      	adds	r3, #8
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f002 f9ee 	bl	800a448 <RCCEx_PLL2_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008072:	e011      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008078:	3328      	adds	r3, #40	; 0x28
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f002 fa95 	bl	800a5ac <RCCEx_PLL3_Config>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008088:	e006      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008090:	e002      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008092:	bf00      	nop
 8008094:	e000      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080a0:	4b8e      	ldr	r3, [pc, #568]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080b0:	4a8a      	ldr	r2, [pc, #552]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6593      	str	r3, [r2, #88]	; 0x58
 80080b6:	e003      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80080cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80080da:	460b      	mov	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	d03a      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e6:	2b30      	cmp	r3, #48	; 0x30
 80080e8:	d01f      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80080ea:	2b30      	cmp	r3, #48	; 0x30
 80080ec:	d819      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	d00c      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d815      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d019      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80080fa:	2b10      	cmp	r3, #16
 80080fc:	d111      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080fe:	4b77      	ldr	r3, [pc, #476]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	4a76      	ldr	r2, [pc, #472]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008108:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800810a:	e011      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008110:	3308      	adds	r3, #8
 8008112:	2102      	movs	r1, #2
 8008114:	4618      	mov	r0, r3
 8008116:	f002 f997 	bl	800a448 <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008138:	4b68      	ldr	r3, [pc, #416]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800813a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008146:	4a65      	ldr	r2, [pc, #404]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008148:	430b      	orrs	r3, r1
 800814a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800814c:	e003      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008162:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800816c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d051      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008180:	d035      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008186:	d82e      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800818c:	d031      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800818e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008192:	d828      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008198:	d01a      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819e:	d822      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a8:	d007      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80081aa:	e01c      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ac:	4b4b      	ldr	r3, [pc, #300]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	4a4a      	ldr	r2, [pc, #296]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081b8:	e01c      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081be:	3308      	adds	r3, #8
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 f940 	bl	800a448 <RCCEx_PLL2_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081ce:	e011      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d4:	3328      	adds	r3, #40	; 0x28
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f002 f9e7 	bl	800a5ac <RCCEx_PLL3_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081e4:	e006      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ec:	e002      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80081f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081fc:	4b37      	ldr	r3, [pc, #220]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008200:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820a:	4a34      	ldr	r2, [pc, #208]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820c:	430b      	orrs	r3, r1
 800820e:	6513      	str	r3, [r2, #80]	; 0x50
 8008210:	e003      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008230:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d056      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008244:	d033      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800824a:	d82c      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800824c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008250:	d02f      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008256:	d826      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008258:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800825c:	d02b      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800825e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008262:	d820      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008268:	d012      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800826a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800826e:	d81a      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d022      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008278:	d115      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827e:	3308      	adds	r3, #8
 8008280:	2101      	movs	r1, #1
 8008282:	4618      	mov	r0, r3
 8008284:	f002 f8e0 	bl	800a448 <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800828e:	e015      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008294:	3328      	adds	r3, #40	; 0x28
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f002 f987 	bl	800a5ac <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082a4:	e00a      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082ae:	bf00      	nop
 80082b0:	e004      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082b2:	bf00      	nop
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10d      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d2:	4a02      	ldr	r2, [pc, #8]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6513      	str	r3, [r2, #80]	; 0x50
 80082d8:	e006      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80082da:	bf00      	nop
 80082dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80082f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008302:	460b      	mov	r3, r1
 8008304:	4313      	orrs	r3, r2
 8008306:	d055      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008314:	d033      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831a:	d82c      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800831c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008320:	d02f      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d826      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800832c:	d02b      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800832e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008332:	d820      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008338:	d012      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800833a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833e:	d81a      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d022      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008348:	d115      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834e:	3308      	adds	r3, #8
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f002 f878 	bl	800a448 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800835e:	e015      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008364:	3328      	adds	r3, #40	; 0x28
 8008366:	2101      	movs	r1, #1
 8008368:	4618      	mov	r0, r3
 800836a:	f002 f91f 	bl	800a5ac <RCCEx_PLL3_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008374:	e00a      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800837c:	e006      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800838a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008394:	4ba3      	ldr	r3, [pc, #652]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008398:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a4:	4a9f      	ldr	r2, [pc, #636]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a6:	430b      	orrs	r3, r1
 80083a8:	6593      	str	r3, [r2, #88]	; 0x58
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80083b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80083c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d037      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083de:	d00e      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80083e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e4:	d816      	bhi.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d018      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80083ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ee:	d111      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f0:	4b8c      	ldr	r3, [pc, #560]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	4a8b      	ldr	r2, [pc, #556]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083fc:	e00f      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008402:	3308      	adds	r3, #8
 8008404:	2101      	movs	r1, #1
 8008406:	4618      	mov	r0, r3
 8008408:	f002 f81e 	bl	800a448 <RCCEx_PLL2_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008412:	e004      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800841a:	e000      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800841c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008426:	4b7f      	ldr	r3, [pc, #508]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008434:	4a7b      	ldr	r2, [pc, #492]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008436:	430b      	orrs	r3, r1
 8008438:	6513      	str	r3, [r2, #80]	; 0x50
 800843a:	e003      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008454:	2300      	movs	r3, #0
 8008456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800845a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800845e:	460b      	mov	r3, r1
 8008460:	4313      	orrs	r3, r2
 8008462:	d039      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846a:	2b03      	cmp	r3, #3
 800846c:	d81c      	bhi.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	080084b1 	.word	0x080084b1
 8008478:	08008485 	.word	0x08008485
 800847c:	08008493 	.word	0x08008493
 8008480:	080084b1 	.word	0x080084b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008484:	4b67      	ldr	r3, [pc, #412]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4a66      	ldr	r2, [pc, #408]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800848e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008490:	e00f      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008496:	3308      	adds	r3, #8
 8008498:	2102      	movs	r1, #2
 800849a:	4618      	mov	r0, r3
 800849c:	f001 ffd4 	bl	800a448 <RCCEx_PLL2_Config>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084a6:	e004      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084ae:	e000      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80084b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084ba:	4b5a      	ldr	r3, [pc, #360]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084be:	f023 0103 	bic.w	r1, r3, #3
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c8:	4a56      	ldr	r2, [pc, #344]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ca:	430b      	orrs	r3, r1
 80084cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ce:	e003      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80084e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80084f2:	460b      	mov	r3, r1
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f000 809f 	beq.w	8008638 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084fa:	4b4b      	ldr	r3, [pc, #300]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a4a      	ldr	r2, [pc, #296]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008506:	f7f8 fa65 	bl	80009d4 <HAL_GetTick>
 800850a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800850e:	e00b      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008510:	f7f8 fa60 	bl	80009d4 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b64      	cmp	r3, #100	; 0x64
 800851e:	d903      	bls.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008526:	e005      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008528:	4b3f      	ldr	r3, [pc, #252]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0ed      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008538:	2b00      	cmp	r3, #0
 800853a:	d179      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800853c:	4b39      	ldr	r3, [pc, #228]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800853e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008548:	4053      	eors	r3, r2
 800854a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800854e:	2b00      	cmp	r3, #0
 8008550:	d015      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008552:	4b34      	ldr	r3, [pc, #208]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800855e:	4b31      	ldr	r3, [pc, #196]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	4a30      	ldr	r2, [pc, #192]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800856a:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856e:	4a2d      	ldr	r2, [pc, #180]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008574:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008576:	4a2b      	ldr	r2, [pc, #172]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800857c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008582:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858a:	d118      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7f8 fa22 	bl	80009d4 <HAL_GetTick>
 8008590:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008594:	e00d      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008596:	f7f8 fa1d 	bl	80009d4 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085a0:	1ad2      	subs	r2, r2, r3
 80085a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d903      	bls.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80085b0:	e005      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0eb      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80085be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d129      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085d6:	d10e      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80085e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085e8:	091a      	lsrs	r2, r3, #4
 80085ea:	4b10      	ldr	r3, [pc, #64]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6113      	str	r3, [r2, #16]
 80085f4:	e005      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008600:	6113      	str	r3, [r2, #16]
 8008602:	4b08      	ldr	r3, [pc, #32]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008604:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800860e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008612:	4a04      	ldr	r2, [pc, #16]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6713      	str	r3, [r2, #112]	; 0x70
 8008618:	e00e      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008622:	e009      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008624:	58024400 	.word	0x58024400
 8008628:	58024800 	.word	0x58024800
 800862c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f002 0301 	and.w	r3, r2, #1
 8008644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008652:	460b      	mov	r3, r1
 8008654:	4313      	orrs	r3, r2
 8008656:	f000 8089 	beq.w	800876c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008660:	2b28      	cmp	r3, #40	; 0x28
 8008662:	d86b      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008745 	.word	0x08008745
 8008670:	0800873d 	.word	0x0800873d
 8008674:	0800873d 	.word	0x0800873d
 8008678:	0800873d 	.word	0x0800873d
 800867c:	0800873d 	.word	0x0800873d
 8008680:	0800873d 	.word	0x0800873d
 8008684:	0800873d 	.word	0x0800873d
 8008688:	0800873d 	.word	0x0800873d
 800868c:	08008711 	.word	0x08008711
 8008690:	0800873d 	.word	0x0800873d
 8008694:	0800873d 	.word	0x0800873d
 8008698:	0800873d 	.word	0x0800873d
 800869c:	0800873d 	.word	0x0800873d
 80086a0:	0800873d 	.word	0x0800873d
 80086a4:	0800873d 	.word	0x0800873d
 80086a8:	0800873d 	.word	0x0800873d
 80086ac:	08008727 	.word	0x08008727
 80086b0:	0800873d 	.word	0x0800873d
 80086b4:	0800873d 	.word	0x0800873d
 80086b8:	0800873d 	.word	0x0800873d
 80086bc:	0800873d 	.word	0x0800873d
 80086c0:	0800873d 	.word	0x0800873d
 80086c4:	0800873d 	.word	0x0800873d
 80086c8:	0800873d 	.word	0x0800873d
 80086cc:	08008745 	.word	0x08008745
 80086d0:	0800873d 	.word	0x0800873d
 80086d4:	0800873d 	.word	0x0800873d
 80086d8:	0800873d 	.word	0x0800873d
 80086dc:	0800873d 	.word	0x0800873d
 80086e0:	0800873d 	.word	0x0800873d
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	0800873d 	.word	0x0800873d
 80086ec:	08008745 	.word	0x08008745
 80086f0:	0800873d 	.word	0x0800873d
 80086f4:	0800873d 	.word	0x0800873d
 80086f8:	0800873d 	.word	0x0800873d
 80086fc:	0800873d 	.word	0x0800873d
 8008700:	0800873d 	.word	0x0800873d
 8008704:	0800873d 	.word	0x0800873d
 8008708:	0800873d 	.word	0x0800873d
 800870c:	08008745 	.word	0x08008745
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008714:	3308      	adds	r3, #8
 8008716:	2101      	movs	r1, #1
 8008718:	4618      	mov	r0, r3
 800871a:	f001 fe95 	bl	800a448 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008724:	e00f      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872a:	3328      	adds	r3, #40	; 0x28
 800872c:	2101      	movs	r1, #1
 800872e:	4618      	mov	r0, r3
 8008730:	f001 ff3c 	bl	800a5ac <RCCEx_PLL3_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800873a:	e004      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800874e:	4bbf      	ldr	r3, [pc, #764]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875c:	4abb      	ldr	r2, [pc, #748]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800875e:	430b      	orrs	r3, r1
 8008760:	6553      	str	r3, [r2, #84]	; 0x54
 8008762:	e003      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f002 0302 	and.w	r3, r2, #2
 8008778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800877c:	2300      	movs	r3, #0
 800877e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008782:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008786:	460b      	mov	r3, r1
 8008788:	4313      	orrs	r3, r2
 800878a:	d041      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008792:	2b05      	cmp	r3, #5
 8008794:	d824      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087e9 	.word	0x080087e9
 80087a0:	080087b5 	.word	0x080087b5
 80087a4:	080087cb 	.word	0x080087cb
 80087a8:	080087e9 	.word	0x080087e9
 80087ac:	080087e9 	.word	0x080087e9
 80087b0:	080087e9 	.word	0x080087e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b8:	3308      	adds	r3, #8
 80087ba:	2101      	movs	r1, #1
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fe43 	bl	800a448 <RCCEx_PLL2_Config>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087c8:	e00f      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	3328      	adds	r3, #40	; 0x28
 80087d0:	2101      	movs	r1, #1
 80087d2:	4618      	mov	r0, r3
 80087d4:	f001 feea 	bl	800a5ac <RCCEx_PLL3_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087de:	e004      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087e6:	e000      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80087e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087f2:	4b96      	ldr	r3, [pc, #600]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	f023 0107 	bic.w	r1, r3, #7
 80087fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008800:	4a92      	ldr	r2, [pc, #584]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008802:	430b      	orrs	r3, r1
 8008804:	6553      	str	r3, [r2, #84]	; 0x54
 8008806:	e003      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800880c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f002 0304 	and.w	r3, r2, #4
 800881c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008820:	2300      	movs	r3, #0
 8008822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008826:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800882a:	460b      	mov	r3, r1
 800882c:	4313      	orrs	r3, r2
 800882e:	d044      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008838:	2b05      	cmp	r3, #5
 800883a:	d825      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008891 	.word	0x08008891
 8008848:	0800885d 	.word	0x0800885d
 800884c:	08008873 	.word	0x08008873
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800885c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008860:	3308      	adds	r3, #8
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fdef 	bl	800a448 <RCCEx_PLL2_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008870:	e00f      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008876:	3328      	adds	r3, #40	; 0x28
 8008878:	2101      	movs	r1, #1
 800887a:	4618      	mov	r0, r3
 800887c:	f001 fe96 	bl	800a5ac <RCCEx_PLL3_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008886:	e004      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800888e:	e000      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800889a:	4b6c      	ldr	r3, [pc, #432]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	f023 0107 	bic.w	r1, r3, #7
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088aa:	4a68      	ldr	r2, [pc, #416]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6593      	str	r3, [r2, #88]	; 0x58
 80088b0:	e003      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f002 0320 	and.w	r3, r2, #32
 80088c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088d4:	460b      	mov	r3, r1
 80088d6:	4313      	orrs	r3, r2
 80088d8:	d055      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e6:	d033      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80088e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ec:	d82c      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f2:	d02f      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f8:	d826      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088fe:	d02b      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008904:	d820      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890a:	d012      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008910:	d81a      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d022      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800891a:	d115      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008920:	3308      	adds	r3, #8
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f001 fd8f 	bl	800a448 <RCCEx_PLL2_Config>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008930:	e015      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008936:	3328      	adds	r3, #40	; 0x28
 8008938:	2102      	movs	r1, #2
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fe36 	bl	800a5ac <RCCEx_PLL3_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008946:	e00a      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800894e:	e006      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008950:	bf00      	nop
 8008952:	e004      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008954:	bf00      	nop
 8008956:	e002      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800895c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008966:	4b39      	ldr	r3, [pc, #228]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008976:	4a35      	ldr	r2, [pc, #212]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6553      	str	r3, [r2, #84]	; 0x54
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008996:	2300      	movs	r3, #0
 8008998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800899c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d058      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089b2:	d033      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80089b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089b8:	d82c      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089be:	d02f      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80089c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c4:	d826      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ca:	d02b      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80089cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089d0:	d820      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80089d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089dc:	d81a      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d022      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80089e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e6:	d115      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ec:	3308      	adds	r3, #8
 80089ee:	2100      	movs	r1, #0
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 fd29 	bl	800a448 <RCCEx_PLL2_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089fc:	e015      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3328      	adds	r3, #40	; 0x28
 8008a04:	2102      	movs	r1, #2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fdd0 	bl	800a5ac <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a12:	e00a      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a1a:	e006      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a1c:	bf00      	nop
 8008a1e:	e004      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a20:	bf00      	nop
 8008a22:	e002      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10e      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a32:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a42:	4a02      	ldr	r2, [pc, #8]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6593      	str	r3, [r2, #88]	; 0x58
 8008a48:	e006      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008a4a:	bf00      	nop
 8008a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008a72:	460b      	mov	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d055      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a84:	d033      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008a86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a8a:	d82c      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a90:	d02f      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a96:	d826      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a9c:	d02b      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008a9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008aa2:	d820      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aa8:	d012      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aae:	d81a      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab8:	d115      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abe:	3308      	adds	r3, #8
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fcc0 	bl	800a448 <RCCEx_PLL2_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ace:	e015      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad4:	3328      	adds	r3, #40	; 0x28
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f001 fd67 	bl	800a5ac <RCCEx_PLL3_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ae4:	e00a      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008aec:	e006      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008aee:	bf00      	nop
 8008af0:	e004      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008af2:	bf00      	nop
 8008af4:	e002      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008af6:	bf00      	nop
 8008af8:	e000      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b04:	4ba1      	ldr	r3, [pc, #644]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b08:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b14:	4a9d      	ldr	r2, [pc, #628]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	6593      	str	r3, [r2, #88]	; 0x58
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f002 0308 	and.w	r3, r2, #8
 8008b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b34:	2300      	movs	r3, #0
 8008b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d01e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b50:	d10c      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b56:	3328      	adds	r3, #40	; 0x28
 8008b58:	2102      	movs	r1, #2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fd26 	bl	800a5ac <RCCEx_PLL3_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b6c:	4b87      	ldr	r3, [pc, #540]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7c:	4a83      	ldr	r2, [pc, #524]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f002 0310 	and.w	r3, r2, #16
 8008b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b92:	2300      	movs	r3, #0
 8008b94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	d01e      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bae:	d10c      	bne.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb4:	3328      	adds	r3, #40	; 0x28
 8008bb6:	2102      	movs	r1, #2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 fcf7 	bl	800a5ac <RCCEx_PLL3_Config>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bca:	4b70      	ldr	r3, [pc, #448]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bda:	4a6c      	ldr	r2, [pc, #432]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bf6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d03e      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c0c:	d022      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c12:	d81b      	bhi.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1c:	d00b      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c1e:	e015      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c24:	3308      	adds	r3, #8
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 fc0d 	bl	800a448 <RCCEx_PLL2_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c34:	e00f      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	3328      	adds	r3, #40	; 0x28
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fcb4 	bl	800a5ac <RCCEx_PLL3_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c4a:	e004      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c52:	e000      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c5e:	4b4b      	ldr	r3, [pc, #300]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c6e:	4a47      	ldr	r2, [pc, #284]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c70:	430b      	orrs	r3, r1
 8008c72:	6593      	str	r3, [r2, #88]	; 0x58
 8008c74:	e003      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008c8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008c94:	460b      	mov	r3, r1
 8008c96:	4313      	orrs	r3, r2
 8008c98:	d03b      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ca6:	d01f      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ca8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cac:	d818      	bhi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb2:	d003      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cb8:	d007      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008cba:	e011      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cbc:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	4a32      	ldr	r2, [pc, #200]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cc8:	e00f      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cce:	3328      	adds	r3, #40	; 0x28
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fc6a 	bl	800a5ac <RCCEx_PLL3_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d02:	4a22      	ldr	r2, [pc, #136]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6553      	str	r3, [r2, #84]	; 0x54
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008d20:	2300      	movs	r3, #0
 8008d22:	677b      	str	r3, [r7, #116]	; 0x74
 8008d24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d034      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d3c:	d007      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d3e:	e011      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4a11      	ldr	r2, [pc, #68]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d4c:	e00e      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	3308      	adds	r3, #8
 8008d54:	2102      	movs	r1, #2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 fb76 	bl	800a448 <RCCEx_PLL2_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d62:	e003      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10d      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d82:	4a02      	ldr	r2, [pc, #8]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d84:	430b      	orrs	r3, r1
 8008d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d88:	e006      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008d8a:	bf00      	nop
 8008d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da6:	2300      	movs	r3, #0
 8008da8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008daa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d00c      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db8:	3328      	adds	r3, #40	; 0x28
 8008dba:	2102      	movs	r1, #2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 fbf5 	bl	800a5ac <RCCEx_PLL3_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008dda:	663b      	str	r3, [r7, #96]	; 0x60
 8008ddc:	2300      	movs	r3, #0
 8008dde:	667b      	str	r3, [r7, #100]	; 0x64
 8008de0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008de4:	460b      	mov	r3, r1
 8008de6:	4313      	orrs	r3, r2
 8008de8:	d038      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008df6:	d018      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfc:	d811      	bhi.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e02:	d014      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e08:	d80b      	bhi.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d011      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e12:	d106      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e14:	4bc3      	ldr	r3, [pc, #780]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	4ac2      	ldr	r2, [pc, #776]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e20:	e008      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e28:	e004      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e3c:	4bb9      	ldr	r3, [pc, #740]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e4c:	4ab5      	ldr	r2, [pc, #724]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	6553      	str	r3, [r2, #84]	; 0x54
 8008e52:	e003      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008e72:	460b      	mov	r3, r1
 8008e74:	4313      	orrs	r3, r2
 8008e76:	d009      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e78:	4baa      	ldr	r3, [pc, #680]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e86:	4aa7      	ldr	r2, [pc, #668]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008e98:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d00a      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ea8:	4b9e      	ldr	r3, [pc, #632]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008eb8:	4a9a      	ldr	r2, [pc, #616]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ecc:	2300      	movs	r3, #0
 8008ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d009      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008eda:	4b92      	ldr	r3, [pc, #584]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ede:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee8:	4a8e      	ldr	r2, [pc, #568]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eea:	430b      	orrs	r3, r1
 8008eec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008efa:	643b      	str	r3, [r7, #64]	; 0x40
 8008efc:	2300      	movs	r3, #0
 8008efe:	647b      	str	r3, [r7, #68]	; 0x44
 8008f00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008f04:	460b      	mov	r3, r1
 8008f06:	4313      	orrs	r3, r2
 8008f08:	d00e      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f0a:	4b86      	ldr	r3, [pc, #536]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	4a85      	ldr	r2, [pc, #532]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f14:	6113      	str	r3, [r2, #16]
 8008f16:	4b83      	ldr	r3, [pc, #524]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f18:	6919      	ldr	r1, [r3, #16]
 8008f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008f22:	4a80      	ldr	r2, [pc, #512]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f24:	430b      	orrs	r3, r1
 8008f26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f36:	2300      	movs	r3, #0
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4313      	orrs	r3, r2
 8008f42:	d009      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f44:	4b77      	ldr	r3, [pc, #476]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f48:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	4a74      	ldr	r2, [pc, #464]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f54:	430b      	orrs	r3, r1
 8008f56:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008f64:	633b      	str	r3, [r7, #48]	; 0x30
 8008f66:	2300      	movs	r3, #0
 8008f68:	637b      	str	r3, [r7, #52]	; 0x34
 8008f6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4313      	orrs	r3, r2
 8008f72:	d00a      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f74:	4b6b      	ldr	r3, [pc, #428]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f84:	4a67      	ldr	r2, [pc, #412]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	2100      	movs	r1, #0
 8008f94:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	d011      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008faa:	3308      	adds	r3, #8
 8008fac:	2100      	movs	r1, #0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fa4a 	bl	800a448 <RCCEx_PLL2_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6239      	str	r1, [r7, #32]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
 8008fdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	d011      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fea:	3308      	adds	r3, #8
 8008fec:	2101      	movs	r1, #1
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fa2a 	bl	800a448 <RCCEx_PLL2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	2100      	movs	r1, #0
 8009014:	61b9      	str	r1, [r7, #24]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009020:	460b      	mov	r3, r1
 8009022:	4313      	orrs	r3, r2
 8009024:	d011      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902a:	3308      	adds	r3, #8
 800902c:	2102      	movs	r1, #2
 800902e:	4618      	mov	r0, r3
 8009030:	f001 fa0a 	bl	800a448 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800903a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	2100      	movs	r1, #0
 8009054:	6139      	str	r1, [r7, #16]
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009060:	460b      	mov	r3, r1
 8009062:	4313      	orrs	r3, r2
 8009064:	d011      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906a:	3328      	adds	r3, #40	; 0x28
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f001 fa9c 	bl	800a5ac <RCCEx_PLL3_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800907a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	2100      	movs	r1, #0
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d011      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090aa:	3328      	adds	r3, #40	; 0x28
 80090ac:	2101      	movs	r1, #1
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fa7c 	bl	800a5ac <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80090ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	2100      	movs	r1, #0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090e0:	460b      	mov	r3, r1
 80090e2:	4313      	orrs	r3, r2
 80090e4:	d011      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ea:	3328      	adds	r3, #40	; 0x28
 80090ec:	2102      	movs	r1, #2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f001 fa5c 	bl	800a5ac <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80090fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800910a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	e000      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
}
 8009118:	4618      	mov	r0, r3
 800911a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800911e:	46bd      	mov	sp, r7
 8009120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009124:	58024400 	.word	0x58024400

08009128 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b090      	sub	sp, #64	; 0x40
 800912c:	af00      	add	r7, sp, #0
 800912e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009136:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800913a:	430b      	orrs	r3, r1
 800913c:	f040 8094 	bne.w	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009140:	4b9e      	ldr	r3, [pc, #632]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009144:	f003 0307 	and.w	r3, r3, #7
 8009148:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	2b04      	cmp	r3, #4
 800914e:	f200 8087 	bhi.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	0800916d 	.word	0x0800916d
 800915c:	08009195 	.word	0x08009195
 8009160:	080091bd 	.word	0x080091bd
 8009164:	08009259 	.word	0x08009259
 8009168:	080091e5 	.word	0x080091e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800916c:	4b93      	ldr	r3, [pc, #588]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009178:	d108      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800917a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f810 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009188:	f000 bd45 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009190:	f000 bd41 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009194:	4b89      	ldr	r3, [pc, #548]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800919c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a0:	d108      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a2:	f107 0318 	add.w	r3, r7, #24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd54 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091b0:	f000 bd31 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b8:	f000 bd2d 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091bc:	4b7f      	ldr	r3, [pc, #508]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c8:	d108      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fe94 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d8:	f000 bd1d 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	f000 bd19 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091e4:	4b75      	ldr	r3, [pc, #468]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091ee:	4b73      	ldr	r3, [pc, #460]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d10c      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d109      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009200:	4b6e      	ldr	r3, [pc, #440]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	08db      	lsrs	r3, r3, #3
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	4a6d      	ldr	r2, [pc, #436]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009212:	e01f      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009214:	4b69      	ldr	r3, [pc, #420]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009220:	d106      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009228:	d102      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800922a:	4b66      	ldr	r3, [pc, #408]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922e:	e011      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009230:	4b62      	ldr	r3, [pc, #392]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923c:	d106      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009244:	d102      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009246:	4b60      	ldr	r3, [pc, #384]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800924a:	e003      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009250:	f000 bce1 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009254:	f000 bcdf 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009258:	4b5c      	ldr	r3, [pc, #368]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800925c:	f000 bcdb 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009264:	f000 bcd7 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800926c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009270:	430b      	orrs	r3, r1
 8009272:	f040 80ad 	bne.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009276:	4b51      	ldr	r3, [pc, #324]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800927e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009286:	d056      	beq.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928e:	f200 8090 	bhi.w	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	2bc0      	cmp	r3, #192	; 0xc0
 8009296:	f000 8088 	beq.w	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	2bc0      	cmp	r3, #192	; 0xc0
 800929e:	f200 8088 	bhi.w	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d032      	beq.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	2b80      	cmp	r3, #128	; 0x80
 80092ac:	f200 8081 	bhi.w	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2b40      	cmp	r3, #64	; 0x40
 80092ba:	d014      	beq.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80092bc:	e079      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092be:	4b3f      	ldr	r3, [pc, #252]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ca:	d108      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 ff67 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092da:	f000 bc9c 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e2:	f000 bc98 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092e6:	4b35      	ldr	r3, [pc, #212]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092f2:	d108      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f4:	f107 0318 	add.w	r3, r7, #24
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 fcab 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009302:	f000 bc88 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800930a:	f000 bc84 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800930e:	4b2b      	ldr	r3, [pc, #172]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800931a:	d108      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fdeb 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800932a:	f000 bc74 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009332:	f000 bc70 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009336:	4b21      	ldr	r3, [pc, #132]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800933e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009340:	4b1e      	ldr	r3, [pc, #120]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b04      	cmp	r3, #4
 800934a:	d10c      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009352:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	4a18      	ldr	r2, [pc, #96]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800935e:	fa22 f303 	lsr.w	r3, r2, r3
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009364:	e01f      	b.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009366:	4b15      	ldr	r3, [pc, #84]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009372:	d106      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800937a:	d102      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009380:	e011      	b.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009382:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800938e:	d106      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009396:	d102      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800939a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800939c:	e003      	b.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093a2:	f000 bc38 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093a6:	f000 bc36 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093aa:	4b08      	ldr	r3, [pc, #32]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ae:	f000 bc32 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b6:	f000 bc2e 	b.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093ba:	bf00      	nop
 80093bc:	58024400 	.word	0x58024400
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	003d0900 	.word	0x003d0900
 80093c8:	007a1200 	.word	0x007a1200
 80093cc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80093d8:	430b      	orrs	r3, r1
 80093da:	f040 809c 	bne.w	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80093de:	4b9e      	ldr	r3, [pc, #632]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093ee:	d054      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093f6:	f200 808b 	bhi.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009400:	f000 8083 	beq.w	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800940a:	f200 8081 	bhi.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009414:	d02f      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800941c:	d878      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800942a:	d012      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800942c:	e070      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800942e:	4b8a      	ldr	r3, [pc, #552]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 feaf 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944a:	e3e4      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009450:	e3e1      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009452:	4b81      	ldr	r3, [pc, #516]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945e:	d107      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009460:	f107 0318 	add.w	r3, r7, #24
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fbf5 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946e:	e3d2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009474:	e3cf      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009476:	4b78      	ldr	r3, [pc, #480]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800947e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009482:	d107      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009484:	f107 030c 	add.w	r3, r7, #12
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fd37 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009492:	e3c0      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009498:	e3bd      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800949a:	4b6f      	ldr	r3, [pc, #444]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a4:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d10c      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80094b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094b6:	4b68      	ldr	r3, [pc, #416]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	08db      	lsrs	r3, r3, #3
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	4a66      	ldr	r2, [pc, #408]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80094c2:	fa22 f303 	lsr.w	r3, r2, r3
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c8:	e01e      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094ca:	4b63      	ldr	r3, [pc, #396]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d6:	d106      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094de:	d102      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094e0:	4b5f      	ldr	r3, [pc, #380]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e4:	e010      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e6:	4b5c      	ldr	r3, [pc, #368]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f2:	d106      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fa:	d102      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094fc:	4b59      	ldr	r3, [pc, #356]	; (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009500:	e002      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009506:	e386      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009508:	e385      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800950a:	4b57      	ldr	r3, [pc, #348]	; (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800950e:	e382      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009514:	e37f      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800951a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800951e:	430b      	orrs	r3, r1
 8009520:	f040 80a7 	bne.w	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009524:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009528:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800952c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009534:	d055      	beq.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800953c:	f200 8096 	bhi.w	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009546:	f000 8084 	beq.w	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009550:	f200 808c 	bhi.w	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800955a:	d030      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009562:	f200 8083 	bhi.w	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009572:	d012      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009574:	e07a      	b.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009576:	4b38      	ldr	r3, [pc, #224]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009582:	d107      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fe0b 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009592:	e340      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009598:	e33d      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800959a:	4b2f      	ldr	r3, [pc, #188]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a6:	d107      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a8:	f107 0318 	add.w	r3, r7, #24
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fb51 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b6:	e32e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095bc:	e32b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095be:	4b26      	ldr	r3, [pc, #152]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ca:	d107      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095cc:	f107 030c 	add.w	r3, r7, #12
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 fc93 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095da:	e31c      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e0:	e319      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095e2:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095ec:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d10c      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fe:	4b16      	ldr	r3, [pc, #88]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	4a14      	ldr	r2, [pc, #80]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800960a:	fa22 f303 	lsr.w	r3, r2, r3
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009610:	e01e      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961e:	d106      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009626:	d102      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009628:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962c:	e010      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800963a:	d106      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009642:	d102      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009644:	4b07      	ldr	r3, [pc, #28]	; (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009648:	e002      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800964e:	e2e2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009650:	e2e1      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009656:	e2de      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009658:	58024400 	.word	0x58024400
 800965c:	03d09000 	.word	0x03d09000
 8009660:	003d0900 	.word	0x003d0900
 8009664:	007a1200 	.word	0x007a1200
 8009668:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009670:	e2d1      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009676:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800967a:	430b      	orrs	r3, r1
 800967c:	f040 809c 	bne.w	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009680:	4b93      	ldr	r3, [pc, #588]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009684:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009688:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009690:	d054      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009698:	f200 808b 	bhi.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096a2:	f000 8083 	beq.w	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096ac:	f200 8081 	bhi.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b6:	d02f      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096be:	d878      	bhi.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d004      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096cc:	d012      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80096ce:	e070      	b.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096d0:	4b7f      	ldr	r3, [pc, #508]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096dc:	d107      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fd5e 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ec:	e293      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096f2:	e290      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096f4:	4b76      	ldr	r3, [pc, #472]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009700:	d107      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009702:	f107 0318 	add.w	r3, r7, #24
 8009706:	4618      	mov	r0, r3
 8009708:	f000 faa4 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009710:	e281      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009716:	e27e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009718:	4b6d      	ldr	r3, [pc, #436]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009724:	d107      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009726:	f107 030c 	add.w	r3, r7, #12
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fbe6 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009734:	e26f      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800973a:	e26c      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800973c:	4b64      	ldr	r3, [pc, #400]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800973e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009744:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009746:	4b62      	ldr	r3, [pc, #392]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0304 	and.w	r3, r3, #4
 800974e:	2b04      	cmp	r3, #4
 8009750:	d10c      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009758:	4b5d      	ldr	r3, [pc, #372]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	08db      	lsrs	r3, r3, #3
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	4a5c      	ldr	r2, [pc, #368]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976a:	e01e      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800976c:	4b58      	ldr	r3, [pc, #352]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009778:	d106      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009780:	d102      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009782:	4b55      	ldr	r3, [pc, #340]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009786:	e010      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009788:	4b51      	ldr	r3, [pc, #324]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009794:	d106      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979c:	d102      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800979e:	4b4f      	ldr	r3, [pc, #316]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097a2:	e002      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097a8:	e235      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097aa:	e234      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097ac:	4b4c      	ldr	r3, [pc, #304]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80097ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b0:	e231      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b6:	e22e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80097c0:	430b      	orrs	r3, r1
 80097c2:	f040 808f 	bne.w	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80097c6:	4b42      	ldr	r3, [pc, #264]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097d6:	d06b      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097de:	d874      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097e6:	d056      	beq.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097ee:	d86c      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097f6:	d03b      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097fe:	d864      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009806:	d021      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800980e:	d85c      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981c:	d004      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800981e:	e054      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009820:	f7fe fa0a 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 8009824:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009826:	e1f6      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009828:	4b29      	ldr	r3, [pc, #164]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fa0a 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009844:	e1e7      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984a:	e1e4      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009858:	d107      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fb4c 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009868:	e1d5      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800986e:	e1d2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b04      	cmp	r3, #4
 800987a:	d109      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	4a13      	ldr	r2, [pc, #76]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800988e:	e1c2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009894:	e1bf      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009896:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a2:	d102      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a8:	e1b5      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ae:	e1b2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098bc:	d102      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c2:	e1a8      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c8:	e1a5      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ce:	e1a2      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098d0:	58024400 	.word	0x58024400
 80098d4:	03d09000 	.word	0x03d09000
 80098d8:	003d0900 	.word	0x003d0900
 80098dc:	007a1200 	.word	0x007a1200
 80098e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80098e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80098ec:	430b      	orrs	r3, r1
 80098ee:	d173      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80098f0:	4b9c      	ldr	r3, [pc, #624]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009900:	d02f      	beq.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009908:	d863      	bhi.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009916:	d012      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009918:	e05b      	b.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800991a:	4b92      	ldr	r3, [pc, #584]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009926:	d107      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009928:	f107 0318 	add.w	r3, r7, #24
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f991 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009936:	e16e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993c:	e16b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800993e:	4b89      	ldr	r3, [pc, #548]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800994a:	d107      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800994c:	f107 030c 	add.w	r3, r7, #12
 8009950:	4618      	mov	r0, r3
 8009952:	f000 fad3 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995a:	e15c      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009960:	e159      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009962:	4b80      	ldr	r3, [pc, #512]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800996a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800996c:	4b7d      	ldr	r3, [pc, #500]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b04      	cmp	r3, #4
 8009976:	d10c      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800997e:	4b79      	ldr	r3, [pc, #484]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	08db      	lsrs	r3, r3, #3
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	4a77      	ldr	r2, [pc, #476]	; (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800998a:	fa22 f303 	lsr.w	r3, r2, r3
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009990:	e01e      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009992:	4b74      	ldr	r3, [pc, #464]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800999e:	d106      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a6:	d102      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099a8:	4b70      	ldr	r3, [pc, #448]	; (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ac:	e010      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099ae:	4b6d      	ldr	r3, [pc, #436]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ba:	d106      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80099bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c2:	d102      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099c4:	4b6a      	ldr	r3, [pc, #424]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80099ce:	e122      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099d0:	e121      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099d6:	e11e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099dc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80099e0:	430b      	orrs	r3, r1
 80099e2:	d133      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80099e4:	4b5f      	ldr	r3, [pc, #380]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099fa:	d012      	beq.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80099fc:	e023      	b.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099fe:	4b59      	ldr	r3, [pc, #356]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a0a:	d107      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 fbc7 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a1a:	e0fc      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a20:	e0f9      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a22:	4b50      	ldr	r3, [pc, #320]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a2e:	d107      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a30:	f107 0318 	add.w	r3, r7, #24
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f90d 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a3e:	e0ea      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a44:	e0e7      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a4a:	e0e4      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a50:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009a54:	430b      	orrs	r3, r1
 8009a56:	f040 808d 	bne.w	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a5a:	4b42      	ldr	r3, [pc, #264]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a62:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a6a:	d06b      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a72:	d874      	bhi.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d056      	beq.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a82:	d86c      	bhi.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a8a:	d03b      	beq.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a92:	d864      	bhi.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a9a:	d021      	beq.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa2:	d85c      	bhi.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ab0:	d004      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009ab2:	e054      	b.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ab4:	f000 f8b8 	bl	8009c28 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ab8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009aba:	e0ac      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009abc:	4b29      	ldr	r3, [pc, #164]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ac8:	d107      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aca:	f107 0318 	add.w	r3, r7, #24
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f8c0 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad8:	e09d      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ade:	e09a      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ae0:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aec:	d107      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aee:	f107 030c 	add.w	r3, r7, #12
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fa02 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009afc:	e08b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b02:	e088      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b04:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d109      	bne.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b10:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	08db      	lsrs	r3, r3, #3
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	4a13      	ldr	r2, [pc, #76]	; (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b22:	e078      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b28:	e075      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b36:	d102      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009b38:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b3c:	e06b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b42:	e068      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b50:	d102      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009b52:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b56:	e05e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b5c:	e05b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b62:	e058      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b64:	58024400 	.word	0x58024400
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b78:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	d148      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b90:	d02a      	beq.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b98:	d838      	bhi.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d004      	beq.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ba6:	d00d      	beq.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009ba8:	e030      	b.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009baa:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb6:	d102      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009bb8:	4b1a      	ldr	r3, [pc, #104]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bbc:	e02b      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc2:	e028      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bc4:	4b16      	ldr	r3, [pc, #88]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bd0:	d107      	bne.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fae4 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be0:	e019      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009be6:	e016      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009be8:	4b0d      	ldr	r3, [pc, #52]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bf4:	d107      	bne.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf6:	f107 0318 	add.w	r3, r7, #24
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f82a 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c04:	e007      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0a:	e004      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c10:	e001      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3740      	adds	r7, #64	; 0x40
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	58024400 	.word	0x58024400
 8009c24:	007a1200 	.word	0x007a1200

08009c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c2c:	f7fd ffd4 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	091b      	lsrs	r3, r3, #4
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	4904      	ldr	r1, [pc, #16]	; (8009c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c3e:	5ccb      	ldrb	r3, [r1, r3]
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	0800fb04 	.word	0x0800fb04

08009c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b089      	sub	sp, #36	; 0x24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c5c:	4ba1      	ldr	r3, [pc, #644]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c66:	4b9f      	ldr	r3, [pc, #636]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	0b1b      	lsrs	r3, r3, #12
 8009c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c72:	4b9c      	ldr	r3, [pc, #624]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c7e:	4b99      	ldr	r3, [pc, #612]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	08db      	lsrs	r3, r3, #3
 8009c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 8111 	beq.w	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	f000 8083 	beq.w	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f200 80a1 	bhi.w	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d056      	beq.n	8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cbe:	e099      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc0:	4b88      	ldr	r3, [pc, #544]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d02d      	beq.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ccc:	4b85      	ldr	r3, [pc, #532]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	4a84      	ldr	r2, [pc, #528]	; (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cdc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b7b      	ldr	r3, [pc, #492]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d26:	e087      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d6a:	e065      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dae:	e043      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df2:	e021      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e06:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e38:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	0a5b      	lsrs	r3, r3, #9
 8009e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5e:	ee17 2a90 	vmov	r2, s15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e66:	4b1f      	ldr	r3, [pc, #124]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eba:	ee17 2a90 	vmov	r2, s15
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	609a      	str	r2, [r3, #8]
}
 8009ed6:	bf00      	nop
 8009ed8:	3724      	adds	r7, #36	; 0x24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	03d09000 	.word	0x03d09000
 8009eec:	46000000 	.word	0x46000000
 8009ef0:	4c742400 	.word	0x4c742400
 8009ef4:	4a742400 	.word	0x4a742400
 8009ef8:	4af42400 	.word	0x4af42400

08009efc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	; 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f04:	4ba1      	ldr	r3, [pc, #644]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f0e:	4b9f      	ldr	r3, [pc, #636]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	0d1b      	lsrs	r3, r3, #20
 8009f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f1a:	4b9c      	ldr	r3, [pc, #624]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f26:	4b99      	ldr	r3, [pc, #612]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8111 	beq.w	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	f000 8083 	beq.w	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	f200 80a1 	bhi.w	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d056      	beq.n	800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f66:	e099      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f68:	4b88      	ldr	r3, [pc, #544]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0320 	and.w	r3, r3, #32
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d02d      	beq.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f74:	4b85      	ldr	r3, [pc, #532]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	4a84      	ldr	r2, [pc, #528]	; (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9e:	4b7b      	ldr	r3, [pc, #492]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fce:	e087      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe2:	4b6a      	ldr	r3, [pc, #424]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a012:	e065      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a026:	4b59      	ldr	r3, [pc, #356]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a056:	e043      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	4b48      	ldr	r3, [pc, #288]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09a:	e021      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ae:	4b37      	ldr	r3, [pc, #220]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a0e0:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	0a5b      	lsrs	r3, r3, #9
 800a0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a106:	ee17 2a90 	vmov	r2, s15
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a124:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a128:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	ee17 2a90 	vmov	r2, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a152:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a156:	edd7 6a07 	vldr	s13, [r7, #28]
 800a15a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a15e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a162:	ee17 2a90 	vmov	r2, s15
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a16a:	e008      	b.n	800a17e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	609a      	str	r2, [r3, #8]
}
 800a17e:	bf00      	nop
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	03d09000 	.word	0x03d09000
 800a194:	46000000 	.word	0x46000000
 800a198:	4c742400 	.word	0x4c742400
 800a19c:	4a742400 	.word	0x4a742400
 800a1a0:	4af42400 	.word	0x4af42400

0800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b089      	sub	sp, #36	; 0x24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1ac:	4ba0      	ldr	r3, [pc, #640]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a1b6:	4b9e      	ldr	r3, [pc, #632]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1c2:	4b9b      	ldr	r3, [pc, #620]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1cc:	4b98      	ldr	r3, [pc, #608]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	08db      	lsrs	r3, r3, #3
 800a1d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	fb02 f303 	mul.w	r3, r2, r3
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 8111 	beq.w	800a412 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	f000 8083 	beq.w	800a2fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	f200 80a1 	bhi.w	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d056      	beq.n	800a2ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a20c:	e099      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a20e:	4b88      	ldr	r3, [pc, #544]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d02d      	beq.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a21a:	4b85      	ldr	r3, [pc, #532]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	4a83      	ldr	r2, [pc, #524]	; (800a434 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a226:	fa22 f303 	lsr.w	r3, r2, r3
 800a22a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a244:	4b7a      	ldr	r3, [pc, #488]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a254:	ed97 6a03 	vldr	s12, [r7, #12]
 800a258:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a25c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a270:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a274:	e087      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a43c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a288:	4b69      	ldr	r3, [pc, #420]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a298:	ed97 6a03 	vldr	s12, [r7, #12]
 800a29c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2b8:	e065      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a440 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2cc:	4b58      	ldr	r3, [pc, #352]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2fc:	e043      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a310:	4b47      	ldr	r3, [pc, #284]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	ed97 6a03 	vldr	s12, [r7, #12]
 800a324:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a340:	e021      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a43c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a354:	4b36      	ldr	r3, [pc, #216]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a364:	ed97 6a03 	vldr	s12, [r7, #12]
 800a368:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a384:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a386:	4b2a      	ldr	r3, [pc, #168]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	0a5b      	lsrs	r3, r3, #9
 800a38c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a39c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ac:	ee17 2a90 	vmov	r2, s15
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3da:	ee17 2a90 	vmov	r2, s15
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e6:	0e1b      	lsrs	r3, r3, #24
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	ee07 3a90 	vmov	s15, r3
 800a3f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a408:	ee17 2a90 	vmov	r2, s15
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a410:	e008      	b.n	800a424 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	609a      	str	r2, [r3, #8]
}
 800a424:	bf00      	nop
 800a426:	3724      	adds	r7, #36	; 0x24
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	58024400 	.word	0x58024400
 800a434:	03d09000 	.word	0x03d09000
 800a438:	46000000 	.word	0x46000000
 800a43c:	4c742400 	.word	0x4c742400
 800a440:	4a742400 	.word	0x4a742400
 800a444:	4af42400 	.word	0x4af42400

0800a448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a456:	4b53      	ldr	r3, [pc, #332]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d101      	bne.n	800a466 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e099      	b.n	800a59a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a466:	4b4f      	ldr	r3, [pc, #316]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a4e      	ldr	r2, [pc, #312]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a46c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a472:	f7f6 faaf 	bl	80009d4 <HAL_GetTick>
 800a476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a478:	e008      	b.n	800a48c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a47a:	f7f6 faab 	bl	80009d4 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d901      	bls.n	800a48c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e086      	b.n	800a59a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a48c:	4b45      	ldr	r3, [pc, #276]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f0      	bne.n	800a47a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a498:	4b42      	ldr	r3, [pc, #264]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	493f      	ldr	r1, [pc, #252]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	025b      	lsls	r3, r3, #9
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	041b      	lsls	r3, r3, #16
 800a4ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	061b      	lsls	r3, r3, #24
 800a4d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4dc:	4931      	ldr	r1, [pc, #196]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a4e2:	4b30      	ldr	r3, [pc, #192]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	492d      	ldr	r1, [pc, #180]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a4f4:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	f023 0220 	bic.w	r2, r3, #32
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	4928      	ldr	r1, [pc, #160]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a502:	4313      	orrs	r3, r2
 800a504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a506:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a26      	ldr	r2, [pc, #152]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a50c:	f023 0310 	bic.w	r3, r3, #16
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a516:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <RCCEx_PLL2_Config+0x160>)
 800a518:	4013      	ands	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	69d2      	ldr	r2, [r2, #28]
 800a51e:	00d2      	lsls	r2, r2, #3
 800a520:	4920      	ldr	r1, [pc, #128]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a522:	4313      	orrs	r3, r2
 800a524:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a526:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	f043 0310 	orr.w	r3, r3, #16
 800a530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a538:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a19      	ldr	r2, [pc, #100]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a53e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a542:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a544:	e00f      	b.n	800a566 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d106      	bne.n	800a55a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a54c:	4b15      	ldr	r3, [pc, #84]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	4a14      	ldr	r2, [pc, #80]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a556:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a558:	e005      	b.n	800a566 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a55a:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a11      	ldr	r2, [pc, #68]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a572:	f7f6 fa2f 	bl	80009d4 <HAL_GetTick>
 800a576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a578:	e008      	b.n	800a58c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a57a:	f7f6 fa2b 	bl	80009d4 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e006      	b.n	800a59a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0f0      	beq.n	800a57a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	58024400 	.word	0x58024400
 800a5a8:	ffff0007 	.word	0xffff0007

0800a5ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5ba:	4b53      	ldr	r3, [pc, #332]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d101      	bne.n	800a5ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e099      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5ca:	4b4f      	ldr	r3, [pc, #316]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a4e      	ldr	r2, [pc, #312]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d6:	f7f6 f9fd 	bl	80009d4 <HAL_GetTick>
 800a5da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5dc:	e008      	b.n	800a5f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5de:	f7f6 f9f9 	bl	80009d4 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d901      	bls.n	800a5f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e086      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5f0:	4b45      	ldr	r3, [pc, #276]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f0      	bne.n	800a5de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5fc:	4b42      	ldr	r3, [pc, #264]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	051b      	lsls	r3, r3, #20
 800a60a:	493f      	ldr	r1, [pc, #252]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	628b      	str	r3, [r1, #40]	; 0x28
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	3b01      	subs	r3, #1
 800a616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	025b      	lsls	r3, r3, #9
 800a622:	b29b      	uxth	r3, r3
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	041b      	lsls	r3, r3, #16
 800a62e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	3b01      	subs	r3, #1
 800a63a:	061b      	lsls	r3, r3, #24
 800a63c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a640:	4931      	ldr	r1, [pc, #196]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a646:	4b30      	ldr	r3, [pc, #192]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	492d      	ldr	r1, [pc, #180]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a654:	4313      	orrs	r3, r2
 800a656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a658:	4b2b      	ldr	r3, [pc, #172]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	4928      	ldr	r1, [pc, #160]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a66a:	4b27      	ldr	r3, [pc, #156]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	4a26      	ldr	r2, [pc, #152]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a676:	4b24      	ldr	r3, [pc, #144]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <RCCEx_PLL3_Config+0x160>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	69d2      	ldr	r2, [r2, #28]
 800a682:	00d2      	lsls	r2, r2, #3
 800a684:	4920      	ldr	r1, [pc, #128]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a686:	4313      	orrs	r3, r2
 800a688:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a68a:	4b1f      	ldr	r3, [pc, #124]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	4a1e      	ldr	r2, [pc, #120]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a69c:	4b1a      	ldr	r3, [pc, #104]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	4a19      	ldr	r2, [pc, #100]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6a8:	e00f      	b.n	800a6ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d106      	bne.n	800a6be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	4a14      	ldr	r2, [pc, #80]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6bc:	e005      	b.n	800a6ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	4a11      	ldr	r2, [pc, #68]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a0e      	ldr	r2, [pc, #56]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d6:	f7f6 f97d 	bl	80009d4 <HAL_GetTick>
 800a6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6dc:	e008      	b.n	800a6f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6de:	f7f6 f979 	bl	80009d4 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d901      	bls.n	800a6f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e006      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f0      	beq.n	800a6de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	58024400 	.word	0x58024400
 800a70c:	ffff0007 	.word	0xffff0007

0800a710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e049      	b.n	800a7b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f004 fb14 	bl	800ed64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f000 fb5e 	bl	800ae10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d001      	beq.n	800a7d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e04c      	b.n	800a872 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a26      	ldr	r2, [pc, #152]	; (800a880 <HAL_TIM_Base_Start+0xc0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d022      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f2:	d01d      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a22      	ldr	r2, [pc, #136]	; (800a884 <HAL_TIM_Base_Start+0xc4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d018      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a21      	ldr	r2, [pc, #132]	; (800a888 <HAL_TIM_Base_Start+0xc8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d013      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a1f      	ldr	r2, [pc, #124]	; (800a88c <HAL_TIM_Base_Start+0xcc>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00e      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a1e      	ldr	r2, [pc, #120]	; (800a890 <HAL_TIM_Base_Start+0xd0>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d009      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a1c      	ldr	r2, [pc, #112]	; (800a894 <HAL_TIM_Base_Start+0xd4>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d004      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1b      	ldr	r2, [pc, #108]	; (800a898 <HAL_TIM_Base_Start+0xd8>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d115      	bne.n	800a85c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <HAL_TIM_Base_Start+0xdc>)
 800a838:	4013      	ands	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d015      	beq.n	800a86e <HAL_TIM_Base_Start+0xae>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a848:	d011      	beq.n	800a86e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f042 0201 	orr.w	r2, r2, #1
 800a858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85a:	e008      	b.n	800a86e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	e000      	b.n	800a870 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000
 800a884:	40000400 	.word	0x40000400
 800a888:	40000800 	.word	0x40000800
 800a88c:	40000c00 	.word	0x40000c00
 800a890:	40010400 	.word	0x40010400
 800a894:	40001800 	.word	0x40001800
 800a898:	40014000 	.word	0x40014000
 800a89c:	00010007 	.word	0x00010007

0800a8a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d001      	beq.n	800a8b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e054      	b.n	800a962 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a26      	ldr	r2, [pc, #152]	; (800a970 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d022      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e2:	d01d      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a22      	ldr	r2, [pc, #136]	; (800a974 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d018      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a21      	ldr	r2, [pc, #132]	; (800a978 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <HAL_TIM_Base_Start_IT+0xdc>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00e      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a1e      	ldr	r2, [pc, #120]	; (800a980 <HAL_TIM_Base_Start_IT+0xe0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <HAL_TIM_Base_Start_IT+0xe4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <HAL_TIM_Base_Start_IT+0xe8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d115      	bne.n	800a94c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <HAL_TIM_Base_Start_IT+0xec>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d015      	beq.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	d011      	beq.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0201 	orr.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a94a:	e008      	b.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	e000      	b.n	800a960 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40010000 	.word	0x40010000
 800a974:	40000400 	.word	0x40000400
 800a978:	40000800 	.word	0x40000800
 800a97c:	40000c00 	.word	0x40000c00
 800a980:	40010400 	.word	0x40010400
 800a984:	40001800 	.word	0x40001800
 800a988:	40014000 	.word	0x40014000
 800a98c:	00010007 	.word	0x00010007

0800a990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d122      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d11b      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f06f 0202 	mvn.w	r2, #2
 800a9bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f9fe 	bl	800add4 <HAL_TIM_IC_CaptureCallback>
 800a9d8:	e005      	b.n	800a9e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f9f0 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fa01 	bl	800ade8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d122      	bne.n	800aa40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d11b      	bne.n	800aa40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f06f 0204 	mvn.w	r2, #4
 800aa10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2202      	movs	r2, #2
 800aa16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f9d4 	bl	800add4 <HAL_TIM_IC_CaptureCallback>
 800aa2c:	e005      	b.n	800aa3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f9c6 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f9d7 	bl	800ade8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d122      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	f003 0308 	and.w	r3, r3, #8
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d11b      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f06f 0208 	mvn.w	r2, #8
 800aa64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2204      	movs	r2, #4
 800aa6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f9aa 	bl	800add4 <HAL_TIM_IC_CaptureCallback>
 800aa80:	e005      	b.n	800aa8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f99c 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f9ad 	bl	800ade8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f003 0310 	and.w	r3, r3, #16
 800aa9e:	2b10      	cmp	r3, #16
 800aaa0:	d122      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	2b10      	cmp	r3, #16
 800aaae:	d11b      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0210 	mvn.w	r2, #16
 800aab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2208      	movs	r2, #8
 800aabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f980 	bl	800add4 <HAL_TIM_IC_CaptureCallback>
 800aad4:	e005      	b.n	800aae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f972 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f983 	bl	800ade8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d10e      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d107      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0201 	mvn.w	r2, #1
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f003 f8d0 	bl	800dcb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1e:	2b80      	cmp	r3, #128	; 0x80
 800ab20:	d10e      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2c:	2b80      	cmp	r3, #128	; 0x80
 800ab2e:	d107      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fb38 	bl	800b1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4e:	d10e      	bne.n	800ab6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5a:	2b80      	cmp	r3, #128	; 0x80
 800ab5c:	d107      	bne.n	800ab6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb2b 	bl	800b1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab78:	2b40      	cmp	r3, #64	; 0x40
 800ab7a:	d10e      	bne.n	800ab9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab86:	2b40      	cmp	r3, #64	; 0x40
 800ab88:	d107      	bne.n	800ab9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f931 	bl	800adfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f003 0320 	and.w	r3, r3, #32
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d10e      	bne.n	800abc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	d107      	bne.n	800abc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f06f 0220 	mvn.w	r2, #32
 800abbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 faeb 	bl	800b19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <HAL_TIM_ConfigClockSource+0x1c>
 800abe8:	2302      	movs	r3, #2
 800abea:	e0dc      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x1d6>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	4b6a      	ldr	r3, [pc, #424]	; (800adb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a64      	ldr	r2, [pc, #400]	; (800adb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	f000 80a9 	beq.w	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ac28:	4a62      	ldr	r2, [pc, #392]	; (800adb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	f200 80ae 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac30:	4a61      	ldr	r2, [pc, #388]	; (800adb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	f000 80a1 	beq.w	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ac38:	4a5f      	ldr	r2, [pc, #380]	; (800adb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	f200 80a6 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac40:	4a5e      	ldr	r2, [pc, #376]	; (800adbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	f000 8099 	beq.w	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ac48:	4a5c      	ldr	r2, [pc, #368]	; (800adbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	f200 809e 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac54:	f000 8091 	beq.w	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ac58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac5c:	f200 8096 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac64:	f000 8089 	beq.w	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ac68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac6c:	f200 808e 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac74:	d03e      	beq.n	800acf4 <HAL_TIM_ConfigClockSource+0x124>
 800ac76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac7a:	f200 8087 	bhi.w	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac82:	f000 8086 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1c2>
 800ac86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac8a:	d87f      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac8c:	2b70      	cmp	r3, #112	; 0x70
 800ac8e:	d01a      	beq.n	800acc6 <HAL_TIM_ConfigClockSource+0xf6>
 800ac90:	2b70      	cmp	r3, #112	; 0x70
 800ac92:	d87b      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac94:	2b60      	cmp	r3, #96	; 0x60
 800ac96:	d050      	beq.n	800ad3a <HAL_TIM_ConfigClockSource+0x16a>
 800ac98:	2b60      	cmp	r3, #96	; 0x60
 800ac9a:	d877      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ac9c:	2b50      	cmp	r3, #80	; 0x50
 800ac9e:	d03c      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x14a>
 800aca0:	2b50      	cmp	r3, #80	; 0x50
 800aca2:	d873      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800aca4:	2b40      	cmp	r3, #64	; 0x40
 800aca6:	d058      	beq.n	800ad5a <HAL_TIM_ConfigClockSource+0x18a>
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	d86f      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800acac:	2b30      	cmp	r3, #48	; 0x30
 800acae:	d064      	beq.n	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800acb0:	2b30      	cmp	r3, #48	; 0x30
 800acb2:	d86b      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800acb4:	2b20      	cmp	r3, #32
 800acb6:	d060      	beq.n	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800acb8:	2b20      	cmp	r3, #32
 800acba:	d867      	bhi.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d05c      	beq.n	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800acc0:	2b10      	cmp	r3, #16
 800acc2:	d05a      	beq.n	800ad7a <HAL_TIM_ConfigClockSource+0x1aa>
 800acc4:	e062      	b.n	800ad8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acd6:	f000 f9b3 	bl	800b040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ace8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	609a      	str	r2, [r3, #8]
      break;
 800acf2:	e04f      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad04:	f000 f99c 	bl	800b040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689a      	ldr	r2, [r3, #8]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad16:	609a      	str	r2, [r3, #8]
      break;
 800ad18:	e03c      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad26:	461a      	mov	r2, r3
 800ad28:	f000 f90c 	bl	800af44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2150      	movs	r1, #80	; 0x50
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f966 	bl	800b004 <TIM_ITRx_SetConfig>
      break;
 800ad38:	e02c      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad46:	461a      	mov	r2, r3
 800ad48:	f000 f92b 	bl	800afa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2160      	movs	r1, #96	; 0x60
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f956 	bl	800b004 <TIM_ITRx_SetConfig>
      break;
 800ad58:	e01c      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad66:	461a      	mov	r2, r3
 800ad68:	f000 f8ec 	bl	800af44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2140      	movs	r1, #64	; 0x40
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f946 	bl	800b004 <TIM_ITRx_SetConfig>
      break;
 800ad78:	e00c      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4619      	mov	r1, r3
 800ad84:	4610      	mov	r0, r2
 800ad86:	f000 f93d 	bl	800b004 <TIM_ITRx_SetConfig>
      break;
 800ad8a:	e003      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad90:	e000      	b.n	800ad94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	ffceff88 	.word	0xffceff88
 800adb4:	00100040 	.word	0x00100040
 800adb8:	00100030 	.word	0x00100030
 800adbc:	00100020 	.word	0x00100020

0800adc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a40      	ldr	r2, [pc, #256]	; (800af24 <TIM_Base_SetConfig+0x114>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d013      	beq.n	800ae50 <TIM_Base_SetConfig+0x40>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae2e:	d00f      	beq.n	800ae50 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a3d      	ldr	r2, [pc, #244]	; (800af28 <TIM_Base_SetConfig+0x118>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00b      	beq.n	800ae50 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3c      	ldr	r2, [pc, #240]	; (800af2c <TIM_Base_SetConfig+0x11c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d007      	beq.n	800ae50 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3b      	ldr	r2, [pc, #236]	; (800af30 <TIM_Base_SetConfig+0x120>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d003      	beq.n	800ae50 <TIM_Base_SetConfig+0x40>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a3a      	ldr	r2, [pc, #232]	; (800af34 <TIM_Base_SetConfig+0x124>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d108      	bne.n	800ae62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a2f      	ldr	r2, [pc, #188]	; (800af24 <TIM_Base_SetConfig+0x114>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d01f      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae70:	d01b      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2c      	ldr	r2, [pc, #176]	; (800af28 <TIM_Base_SetConfig+0x118>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d017      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2b      	ldr	r2, [pc, #172]	; (800af2c <TIM_Base_SetConfig+0x11c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d013      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a2a      	ldr	r2, [pc, #168]	; (800af30 <TIM_Base_SetConfig+0x120>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00f      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a29      	ldr	r2, [pc, #164]	; (800af34 <TIM_Base_SetConfig+0x124>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d00b      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a28      	ldr	r2, [pc, #160]	; (800af38 <TIM_Base_SetConfig+0x128>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d007      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a27      	ldr	r2, [pc, #156]	; (800af3c <TIM_Base_SetConfig+0x12c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d003      	beq.n	800aeaa <TIM_Base_SetConfig+0x9a>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a26      	ldr	r2, [pc, #152]	; (800af40 <TIM_Base_SetConfig+0x130>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d108      	bne.n	800aebc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a10      	ldr	r2, [pc, #64]	; (800af24 <TIM_Base_SetConfig+0x114>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00f      	beq.n	800af08 <TIM_Base_SetConfig+0xf8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a12      	ldr	r2, [pc, #72]	; (800af34 <TIM_Base_SetConfig+0x124>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00b      	beq.n	800af08 <TIM_Base_SetConfig+0xf8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a11      	ldr	r2, [pc, #68]	; (800af38 <TIM_Base_SetConfig+0x128>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d007      	beq.n	800af08 <TIM_Base_SetConfig+0xf8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a10      	ldr	r2, [pc, #64]	; (800af3c <TIM_Base_SetConfig+0x12c>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d003      	beq.n	800af08 <TIM_Base_SetConfig+0xf8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a0f      	ldr	r2, [pc, #60]	; (800af40 <TIM_Base_SetConfig+0x130>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d103      	bne.n	800af10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	615a      	str	r2, [r3, #20]
}
 800af16:	bf00      	nop
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40010000 	.word	0x40010000
 800af28:	40000400 	.word	0x40000400
 800af2c:	40000800 	.word	0x40000800
 800af30:	40000c00 	.word	0x40000c00
 800af34:	40010400 	.word	0x40010400
 800af38:	40014000 	.word	0x40014000
 800af3c:	40014400 	.word	0x40014400
 800af40:	40014800 	.word	0x40014800

0800af44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	f023 0201 	bic.w	r2, r3, #1
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f023 030a 	bic.w	r3, r3, #10
 800af80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	4313      	orrs	r3, r2
 800af88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	621a      	str	r2, [r3, #32]
}
 800af96:	bf00      	nop
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b087      	sub	sp, #28
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	f023 0210 	bic.w	r2, r3, #16
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	031b      	lsls	r3, r3, #12
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	621a      	str	r2, [r3, #32]
}
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
	...

0800b004 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4b09      	ldr	r3, [pc, #36]	; (800b03c <TIM_ITRx_SetConfig+0x38>)
 800b018:	4013      	ands	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4313      	orrs	r3, r2
 800b022:	f043 0307 	orr.w	r3, r3, #7
 800b026:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	609a      	str	r2, [r3, #8]
}
 800b02e:	bf00      	nop
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	ffcfff8f 	.word	0xffcfff8f

0800b040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	021a      	lsls	r2, r3, #8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	431a      	orrs	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	4313      	orrs	r3, r2
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	609a      	str	r2, [r3, #8]
}
 800b074:	bf00      	nop
 800b076:	371c      	adds	r7, #28
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b094:	2302      	movs	r3, #2
 800b096:	e06d      	b.n	800b174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a30      	ldr	r2, [pc, #192]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d004      	beq.n	800b0cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a2f      	ldr	r2, [pc, #188]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d108      	bne.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a20      	ldr	r2, [pc, #128]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d022      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10a:	d01d      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1d      	ldr	r2, [pc, #116]	; (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d018      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d013      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a1a      	ldr	r2, [pc, #104]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00e      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a15      	ldr	r2, [pc, #84]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d009      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a16      	ldr	r2, [pc, #88]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d004      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a15      	ldr	r2, [pc, #84]	; (800b198 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d10c      	bne.n	800b162 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b14e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	4313      	orrs	r3, r2
 800b158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	40010000 	.word	0x40010000
 800b184:	40010400 	.word	0x40010400
 800b188:	40000400 	.word	0x40000400
 800b18c:	40000800 	.word	0x40000800
 800b190:	40000c00 	.word	0x40000c00
 800b194:	40001800 	.word	0x40001800
 800b198:	40014000 	.word	0x40014000

0800b19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e042      	b.n	800b270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d106      	bne.n	800b202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f003 fc7b 	bl	800eaf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2224      	movs	r2, #36	; 0x24
 800b206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0201 	bic.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fcd6 	bl	800bbcc <UART_SetConfig>
 800b220:	4603      	mov	r3, r0
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e022      	b.n	800b270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d002      	beq.n	800b238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 fa32 	bl	800c69c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f042 0201 	orr.w	r2, r2, #1
 800b266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 fab9 	bl	800c7e0 <UART_CheckIdleState>
 800b26e:	4603      	mov	r3, r0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08a      	sub	sp, #40	; 0x28
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d17b      	bne.n	800b38a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <HAL_UART_Transmit+0x26>
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e074      	b.n	800b38c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2221      	movs	r2, #33	; 0x21
 800b2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2b2:	f7f5 fb8f 	bl	80009d4 <HAL_GetTick>
 800b2b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	88fa      	ldrh	r2, [r7, #6]
 800b2bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	88fa      	ldrh	r2, [r7, #6]
 800b2c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d0:	d108      	bne.n	800b2e4 <HAL_UART_Transmit+0x6c>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d104      	bne.n	800b2e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	61bb      	str	r3, [r7, #24]
 800b2e2:	e003      	b.n	800b2ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2ec:	e030      	b.n	800b350 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2180      	movs	r1, #128	; 0x80
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f001 fb1b 	bl	800c934 <UART_WaitOnFlagUntilTimeout>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2220      	movs	r2, #32
 800b308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e03d      	b.n	800b38c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	3302      	adds	r3, #2
 800b32a:	61bb      	str	r3, [r7, #24]
 800b32c:	e007      	b.n	800b33e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	781a      	ldrb	r2, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	3301      	adds	r3, #1
 800b33c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b344:	b29b      	uxth	r3, r3
 800b346:	3b01      	subs	r3, #1
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b356:	b29b      	uxth	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1c8      	bne.n	800b2ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2200      	movs	r2, #0
 800b364:	2140      	movs	r1, #64	; 0x40
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f001 fae4 	bl	800c934 <UART_WaitOnFlagUntilTimeout>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2220      	movs	r2, #32
 800b376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e006      	b.n	800b38c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	e000      	b.n	800b38c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b38a:	2302      	movs	r3, #2
  }
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	; 0x28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d137      	bne.n	800b41c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <HAL_UART_Receive_IT+0x24>
 800b3b2:	88fb      	ldrh	r3, [r7, #6]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e030      	b.n	800b41e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <HAL_UART_Receive_IT+0x94>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d01f      	beq.n	800b40c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d018      	beq.n	800b40c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	623b      	str	r3, [r7, #32]
 800b3fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	69f9      	ldr	r1, [r7, #28]
 800b3fe:	6a3a      	ldr	r2, [r7, #32]
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	61bb      	str	r3, [r7, #24]
   return(result);
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e6      	bne.n	800b3da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b40c:	88fb      	ldrh	r3, [r7, #6]
 800b40e:	461a      	mov	r2, r3
 800b410:	68b9      	ldr	r1, [r7, #8]
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f001 faf6 	bl	800ca04 <UART_Start_Receive_IT>
 800b418:	4603      	mov	r3, r0
 800b41a:	e000      	b.n	800b41e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3728      	adds	r7, #40	; 0x28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	58000c00 	.word	0x58000c00

0800b42c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b0ba      	sub	sp, #232	; 0xe8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b456:	f640 030f 	movw	r3, #2063	; 0x80f
 800b45a:	4013      	ands	r3, r2
 800b45c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d11b      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46c:	f003 0320 	and.w	r3, r3, #32
 800b470:	2b00      	cmp	r3, #0
 800b472:	d015      	beq.n	800b4a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d105      	bne.n	800b48c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 8377 	beq.w	800bb84 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
      }
      return;
 800b49e:	e371      	b.n	800bb84 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 8123 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4ae:	4b8d      	ldr	r3, [pc, #564]	; (800b6e4 <HAL_UART_IRQHandler+0x2b8>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b4ba:	4b8b      	ldr	r3, [pc, #556]	; (800b6e8 <HAL_UART_IRQHandler+0x2bc>)
 800b4bc:	4013      	ands	r3, r2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 8116 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d011      	beq.n	800b4f4 <HAL_UART_IRQHandler+0xc8>
 800b4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ea:	f043 0201 	orr.w	r2, r3, #1
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d011      	beq.n	800b524 <HAL_UART_IRQHandler+0xf8>
 800b500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00b      	beq.n	800b524 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2202      	movs	r2, #2
 800b512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51a:	f043 0204 	orr.w	r2, r3, #4
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d011      	beq.n	800b554 <HAL_UART_IRQHandler+0x128>
 800b530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00b      	beq.n	800b554 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2204      	movs	r2, #4
 800b542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54a:	f043 0202 	orr.w	r2, r3, #2
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b558:	f003 0308 	and.w	r3, r3, #8
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d017      	beq.n	800b590 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b564:	f003 0320 	and.w	r3, r3, #32
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d105      	bne.n	800b578 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b56c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b570:	4b5c      	ldr	r3, [pc, #368]	; (800b6e4 <HAL_UART_IRQHandler+0x2b8>)
 800b572:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2208      	movs	r2, #8
 800b57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b586:	f043 0208 	orr.w	r2, r3, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d012      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x196>
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00c      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b8:	f043 0220 	orr.w	r2, r3, #32
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 82dd 	beq.w	800bb88 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d013      	beq.n	800b602 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d105      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d007      	beq.n	800b602 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b616:	2b40      	cmp	r3, #64	; 0x40
 800b618:	d005      	beq.n	800b626 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b61e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b622:	2b00      	cmp	r3, #0
 800b624:	d054      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fb0e 	bl	800cc48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b636:	2b40      	cmp	r3, #64	; 0x40
 800b638:	d146      	bne.n	800b6c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3308      	adds	r3, #8
 800b640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3308      	adds	r3, #8
 800b662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b666:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b66a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b67e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1d9      	bne.n	800b63a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d017      	beq.n	800b6c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b696:	4a15      	ldr	r2, [pc, #84]	; (800b6ec <HAL_UART_IRQHandler+0x2c0>)
 800b698:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f9 fa4b 	bl	8004b3c <HAL_DMA_Abort_IT>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d019      	beq.n	800b6e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6be:	e00f      	b.n	800b6e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f002 fae1 	bl	800dc88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6c6:	e00b      	b.n	800b6e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f002 fadd 	bl	800dc88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ce:	e007      	b.n	800b6e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f002 fad9 	bl	800dc88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b6de:	e253      	b.n	800bb88 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e0:	bf00      	nop
    return;
 800b6e2:	e251      	b.n	800bb88 <HAL_UART_IRQHandler+0x75c>
 800b6e4:	10000001 	.word	0x10000001
 800b6e8:	04000120 	.word	0x04000120
 800b6ec:	0800cd15 	.word	0x0800cd15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	f040 81e7 	bne.w	800bac8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 81e0 	beq.w	800bac8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 81d9 	beq.w	800bac8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2210      	movs	r2, #16
 800b71c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b728:	2b40      	cmp	r3, #64	; 0x40
 800b72a:	f040 8151 	bne.w	800b9d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a96      	ldr	r2, [pc, #600]	; (800b990 <HAL_UART_IRQHandler+0x564>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d068      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a93      	ldr	r2, [pc, #588]	; (800b994 <HAL_UART_IRQHandler+0x568>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d061      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a91      	ldr	r2, [pc, #580]	; (800b998 <HAL_UART_IRQHandler+0x56c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d05a      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a8e      	ldr	r2, [pc, #568]	; (800b99c <HAL_UART_IRQHandler+0x570>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d053      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a8c      	ldr	r2, [pc, #560]	; (800b9a0 <HAL_UART_IRQHandler+0x574>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d04c      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a89      	ldr	r2, [pc, #548]	; (800b9a4 <HAL_UART_IRQHandler+0x578>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d045      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a87      	ldr	r2, [pc, #540]	; (800b9a8 <HAL_UART_IRQHandler+0x57c>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d03e      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a84      	ldr	r2, [pc, #528]	; (800b9ac <HAL_UART_IRQHandler+0x580>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d037      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a82      	ldr	r2, [pc, #520]	; (800b9b0 <HAL_UART_IRQHandler+0x584>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d030      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a7f      	ldr	r2, [pc, #508]	; (800b9b4 <HAL_UART_IRQHandler+0x588>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d029      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a7d      	ldr	r2, [pc, #500]	; (800b9b8 <HAL_UART_IRQHandler+0x58c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d022      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a7a      	ldr	r2, [pc, #488]	; (800b9bc <HAL_UART_IRQHandler+0x590>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d01b      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a78      	ldr	r2, [pc, #480]	; (800b9c0 <HAL_UART_IRQHandler+0x594>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d014      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a75      	ldr	r2, [pc, #468]	; (800b9c4 <HAL_UART_IRQHandler+0x598>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00d      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a73      	ldr	r2, [pc, #460]	; (800b9c8 <HAL_UART_IRQHandler+0x59c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d006      	beq.n	800b80e <HAL_UART_IRQHandler+0x3e2>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a70      	ldr	r2, [pc, #448]	; (800b9cc <HAL_UART_IRQHandler+0x5a0>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d106      	bne.n	800b81c <HAL_UART_IRQHandler+0x3f0>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	e005      	b.n	800b828 <HAL_UART_IRQHandler+0x3fc>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	b29b      	uxth	r3, r3
 800b828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b82c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 81ab 	beq.w	800bb8c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b83c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b840:	429a      	cmp	r2, r3
 800b842:	f080 81a3 	bcs.w	800bb8c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b84c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85c:	f000 8087 	beq.w	800b96e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b87c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b88a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b88e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1da      	bne.n	800b860 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8bc:	f023 0301 	bic.w	r3, r3, #1
 800b8c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e1      	bne.n	800b8aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b90a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b90c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e3      	bne.n	800b8e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2220      	movs	r2, #32
 800b922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b93c:	f023 0310 	bic.w	r3, r3, #16
 800b940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b94e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b950:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e4      	bne.n	800b92c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b968:	4618      	mov	r0, r3
 800b96a:	f7f8 fdc9 	bl	8004500 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2202      	movs	r2, #2
 800b972:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b980:	b29b      	uxth	r3, r3
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	b29b      	uxth	r3, r3
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f913 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b98e:	e0fd      	b.n	800bb8c <HAL_UART_IRQHandler+0x760>
 800b990:	40020010 	.word	0x40020010
 800b994:	40020028 	.word	0x40020028
 800b998:	40020040 	.word	0x40020040
 800b99c:	40020058 	.word	0x40020058
 800b9a0:	40020070 	.word	0x40020070
 800b9a4:	40020088 	.word	0x40020088
 800b9a8:	400200a0 	.word	0x400200a0
 800b9ac:	400200b8 	.word	0x400200b8
 800b9b0:	40020410 	.word	0x40020410
 800b9b4:	40020428 	.word	0x40020428
 800b9b8:	40020440 	.word	0x40020440
 800b9bc:	40020458 	.word	0x40020458
 800b9c0:	40020470 	.word	0x40020470
 800b9c4:	40020488 	.word	0x40020488
 800b9c8:	400204a0 	.word	0x400204a0
 800b9cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 80cf 	beq.w	800bb90 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b9f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 80ca 	beq.w	800bb90 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba1e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e4      	bne.n	800b9fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	e853 3f00 	ldrex	r3, [r3]
 800ba40:	623b      	str	r3, [r7, #32]
   return(result);
 800ba42:	6a3a      	ldr	r2, [r7, #32]
 800ba44:	4b55      	ldr	r3, [pc, #340]	; (800bb9c <HAL_UART_IRQHandler+0x770>)
 800ba46:	4013      	ands	r3, r2
 800ba48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3308      	adds	r3, #8
 800ba52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba56:	633a      	str	r2, [r7, #48]	; 0x30
 800ba58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	e841 2300 	strex	r3, r2, [r1]
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e3      	bne.n	800ba32 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	e853 3f00 	ldrex	r3, [r3]
 800ba8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f023 0310 	bic.w	r3, r3, #16
 800ba92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	617b      	str	r3, [r7, #20]
   return(result);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e4      	bne.n	800ba7e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800baba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f877 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bac6:	e063      	b.n	800bb90 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bacc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00e      	beq.n	800baf2 <HAL_UART_IRQHandler+0x6c6>
 800bad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d008      	beq.n	800baf2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 fe70 	bl	800d7d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf0:	e051      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800baf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d014      	beq.n	800bb28 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d008      	beq.n	800bb28 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d03a      	beq.n	800bb94 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
    }
    return;
 800bb26:	e035      	b.n	800bb94 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <HAL_UART_IRQHandler+0x71c>
 800bb34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 f8fd 	bl	800cd40 <UART_EndTransmit_IT>
    return;
 800bb46:	e026      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <HAL_UART_IRQHandler+0x73c>
 800bb54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f001 fe49 	bl	800d7f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb66:	e016      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d010      	beq.n	800bb96 <HAL_UART_IRQHandler+0x76a>
 800bb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	da0c      	bge.n	800bb96 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 fe31 	bl	800d7e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb82:	e008      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb84:	bf00      	nop
 800bb86:	e006      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb88:	bf00      	nop
 800bb8a:	e004      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb8c:	bf00      	nop
 800bb8e:	e002      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb90:	bf00      	nop
 800bb92:	e000      	b.n	800bb96 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb94:	bf00      	nop
  }
}
 800bb96:	37e8      	adds	r7, #232	; 0xe8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	effffffe 	.word	0xeffffffe

0800bba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbd0:	b092      	sub	sp, #72	; 0x48
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	689a      	ldr	r2, [r3, #8]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4bbe      	ldr	r3, [pc, #760]	; (800bef4 <UART_SetConfig+0x328>)
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	6812      	ldr	r2, [r2, #0]
 800bc02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4ab3      	ldr	r2, [pc, #716]	; (800bef8 <UART_SetConfig+0x32c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d004      	beq.n	800bc38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc34:	4313      	orrs	r3, r2
 800bc36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	4baf      	ldr	r3, [pc, #700]	; (800befc <UART_SetConfig+0x330>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc52:	f023 010f 	bic.w	r1, r3, #15
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4aa6      	ldr	r2, [pc, #664]	; (800bf00 <UART_SetConfig+0x334>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d177      	bne.n	800bd5c <UART_SetConfig+0x190>
 800bc6c:	4ba5      	ldr	r3, [pc, #660]	; (800bf04 <UART_SetConfig+0x338>)
 800bc6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc74:	2b28      	cmp	r3, #40	; 0x28
 800bc76:	d86d      	bhi.n	800bd54 <UART_SetConfig+0x188>
 800bc78:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <UART_SetConfig+0xb4>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bd25 	.word	0x0800bd25
 800bc84:	0800bd55 	.word	0x0800bd55
 800bc88:	0800bd55 	.word	0x0800bd55
 800bc8c:	0800bd55 	.word	0x0800bd55
 800bc90:	0800bd55 	.word	0x0800bd55
 800bc94:	0800bd55 	.word	0x0800bd55
 800bc98:	0800bd55 	.word	0x0800bd55
 800bc9c:	0800bd55 	.word	0x0800bd55
 800bca0:	0800bd2d 	.word	0x0800bd2d
 800bca4:	0800bd55 	.word	0x0800bd55
 800bca8:	0800bd55 	.word	0x0800bd55
 800bcac:	0800bd55 	.word	0x0800bd55
 800bcb0:	0800bd55 	.word	0x0800bd55
 800bcb4:	0800bd55 	.word	0x0800bd55
 800bcb8:	0800bd55 	.word	0x0800bd55
 800bcbc:	0800bd55 	.word	0x0800bd55
 800bcc0:	0800bd35 	.word	0x0800bd35
 800bcc4:	0800bd55 	.word	0x0800bd55
 800bcc8:	0800bd55 	.word	0x0800bd55
 800bccc:	0800bd55 	.word	0x0800bd55
 800bcd0:	0800bd55 	.word	0x0800bd55
 800bcd4:	0800bd55 	.word	0x0800bd55
 800bcd8:	0800bd55 	.word	0x0800bd55
 800bcdc:	0800bd55 	.word	0x0800bd55
 800bce0:	0800bd3d 	.word	0x0800bd3d
 800bce4:	0800bd55 	.word	0x0800bd55
 800bce8:	0800bd55 	.word	0x0800bd55
 800bcec:	0800bd55 	.word	0x0800bd55
 800bcf0:	0800bd55 	.word	0x0800bd55
 800bcf4:	0800bd55 	.word	0x0800bd55
 800bcf8:	0800bd55 	.word	0x0800bd55
 800bcfc:	0800bd55 	.word	0x0800bd55
 800bd00:	0800bd45 	.word	0x0800bd45
 800bd04:	0800bd55 	.word	0x0800bd55
 800bd08:	0800bd55 	.word	0x0800bd55
 800bd0c:	0800bd55 	.word	0x0800bd55
 800bd10:	0800bd55 	.word	0x0800bd55
 800bd14:	0800bd55 	.word	0x0800bd55
 800bd18:	0800bd55 	.word	0x0800bd55
 800bd1c:	0800bd55 	.word	0x0800bd55
 800bd20:	0800bd4d 	.word	0x0800bd4d
 800bd24:	2301      	movs	r3, #1
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2a:	e222      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd32:	e21e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd34:	2308      	movs	r3, #8
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3a:	e21a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd3c:	2310      	movs	r3, #16
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd42:	e216      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd44:	2320      	movs	r3, #32
 800bd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4a:	e212      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd4c:	2340      	movs	r3, #64	; 0x40
 800bd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd52:	e20e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd54:	2380      	movs	r3, #128	; 0x80
 800bd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd5a:	e20a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a69      	ldr	r2, [pc, #420]	; (800bf08 <UART_SetConfig+0x33c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d130      	bne.n	800bdc8 <UART_SetConfig+0x1fc>
 800bd66:	4b67      	ldr	r3, [pc, #412]	; (800bf04 <UART_SetConfig+0x338>)
 800bd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6a:	f003 0307 	and.w	r3, r3, #7
 800bd6e:	2b05      	cmp	r3, #5
 800bd70:	d826      	bhi.n	800bdc0 <UART_SetConfig+0x1f4>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <UART_SetConfig+0x1ac>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bd91 	.word	0x0800bd91
 800bd7c:	0800bd99 	.word	0x0800bd99
 800bd80:	0800bda1 	.word	0x0800bda1
 800bd84:	0800bda9 	.word	0x0800bda9
 800bd88:	0800bdb1 	.word	0x0800bdb1
 800bd8c:	0800bdb9 	.word	0x0800bdb9
 800bd90:	2300      	movs	r3, #0
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd96:	e1ec      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bd98:	2304      	movs	r3, #4
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9e:	e1e8      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bda0:	2308      	movs	r3, #8
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda6:	e1e4      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bda8:	2310      	movs	r3, #16
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdae:	e1e0      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bdb0:	2320      	movs	r3, #32
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb6:	e1dc      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdbe:	e1d8      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bdc0:	2380      	movs	r3, #128	; 0x80
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdc6:	e1d4      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a4f      	ldr	r2, [pc, #316]	; (800bf0c <UART_SetConfig+0x340>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d130      	bne.n	800be34 <UART_SetConfig+0x268>
 800bdd2:	4b4c      	ldr	r3, [pc, #304]	; (800bf04 <UART_SetConfig+0x338>)
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	d826      	bhi.n	800be2c <UART_SetConfig+0x260>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <UART_SetConfig+0x218>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	0800be0d 	.word	0x0800be0d
 800bdf0:	0800be15 	.word	0x0800be15
 800bdf4:	0800be1d 	.word	0x0800be1d
 800bdf8:	0800be25 	.word	0x0800be25
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be02:	e1b6      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be04:	2304      	movs	r3, #4
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0a:	e1b2      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be0c:	2308      	movs	r3, #8
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be12:	e1ae      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be14:	2310      	movs	r3, #16
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1a:	e1aa      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be1c:	2320      	movs	r3, #32
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be22:	e1a6      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be24:	2340      	movs	r3, #64	; 0x40
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2a:	e1a2      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be2c:	2380      	movs	r3, #128	; 0x80
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be32:	e19e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a35      	ldr	r2, [pc, #212]	; (800bf10 <UART_SetConfig+0x344>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d130      	bne.n	800bea0 <UART_SetConfig+0x2d4>
 800be3e:	4b31      	ldr	r3, [pc, #196]	; (800bf04 <UART_SetConfig+0x338>)
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b05      	cmp	r3, #5
 800be48:	d826      	bhi.n	800be98 <UART_SetConfig+0x2cc>
 800be4a:	a201      	add	r2, pc, #4	; (adr r2, 800be50 <UART_SetConfig+0x284>)
 800be4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be50:	0800be69 	.word	0x0800be69
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be79 	.word	0x0800be79
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be91 	.word	0x0800be91
 800be68:	2300      	movs	r3, #0
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e180      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be70:	2304      	movs	r3, #4
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e17c      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be78:	2308      	movs	r3, #8
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7e:	e178      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be80:	2310      	movs	r3, #16
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be86:	e174      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be88:	2320      	movs	r3, #32
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8e:	e170      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be90:	2340      	movs	r3, #64	; 0x40
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be96:	e16c      	b.n	800c172 <UART_SetConfig+0x5a6>
 800be98:	2380      	movs	r3, #128	; 0x80
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9e:	e168      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1b      	ldr	r2, [pc, #108]	; (800bf14 <UART_SetConfig+0x348>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d142      	bne.n	800bf30 <UART_SetConfig+0x364>
 800beaa:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <UART_SetConfig+0x338>)
 800beac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	d838      	bhi.n	800bf28 <UART_SetConfig+0x35c>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <UART_SetConfig+0x2f0>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bed5 	.word	0x0800bed5
 800bec0:	0800bedd 	.word	0x0800bedd
 800bec4:	0800bee5 	.word	0x0800bee5
 800bec8:	0800beed 	.word	0x0800beed
 800becc:	0800bf19 	.word	0x0800bf19
 800bed0:	0800bf21 	.word	0x0800bf21
 800bed4:	2300      	movs	r3, #0
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e14a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bedc:	2304      	movs	r3, #4
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e146      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bee4:	2308      	movs	r3, #8
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beea:	e142      	b.n	800c172 <UART_SetConfig+0x5a6>
 800beec:	2310      	movs	r3, #16
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e13e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bef4:	cfff69f3 	.word	0xcfff69f3
 800bef8:	58000c00 	.word	0x58000c00
 800befc:	11fff4ff 	.word	0x11fff4ff
 800bf00:	40011000 	.word	0x40011000
 800bf04:	58024400 	.word	0x58024400
 800bf08:	40004400 	.word	0x40004400
 800bf0c:	40004800 	.word	0x40004800
 800bf10:	40004c00 	.word	0x40004c00
 800bf14:	40005000 	.word	0x40005000
 800bf18:	2320      	movs	r3, #32
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1e:	e128      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf26:	e124      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bf28:	2380      	movs	r3, #128	; 0x80
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2e:	e120      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4acb      	ldr	r2, [pc, #812]	; (800c264 <UART_SetConfig+0x698>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d176      	bne.n	800c028 <UART_SetConfig+0x45c>
 800bf3a:	4bcb      	ldr	r3, [pc, #812]	; (800c268 <UART_SetConfig+0x69c>)
 800bf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf42:	2b28      	cmp	r3, #40	; 0x28
 800bf44:	d86c      	bhi.n	800c020 <UART_SetConfig+0x454>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <UART_SetConfig+0x380>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bff1 	.word	0x0800bff1
 800bf50:	0800c021 	.word	0x0800c021
 800bf54:	0800c021 	.word	0x0800c021
 800bf58:	0800c021 	.word	0x0800c021
 800bf5c:	0800c021 	.word	0x0800c021
 800bf60:	0800c021 	.word	0x0800c021
 800bf64:	0800c021 	.word	0x0800c021
 800bf68:	0800c021 	.word	0x0800c021
 800bf6c:	0800bff9 	.word	0x0800bff9
 800bf70:	0800c021 	.word	0x0800c021
 800bf74:	0800c021 	.word	0x0800c021
 800bf78:	0800c021 	.word	0x0800c021
 800bf7c:	0800c021 	.word	0x0800c021
 800bf80:	0800c021 	.word	0x0800c021
 800bf84:	0800c021 	.word	0x0800c021
 800bf88:	0800c021 	.word	0x0800c021
 800bf8c:	0800c001 	.word	0x0800c001
 800bf90:	0800c021 	.word	0x0800c021
 800bf94:	0800c021 	.word	0x0800c021
 800bf98:	0800c021 	.word	0x0800c021
 800bf9c:	0800c021 	.word	0x0800c021
 800bfa0:	0800c021 	.word	0x0800c021
 800bfa4:	0800c021 	.word	0x0800c021
 800bfa8:	0800c021 	.word	0x0800c021
 800bfac:	0800c009 	.word	0x0800c009
 800bfb0:	0800c021 	.word	0x0800c021
 800bfb4:	0800c021 	.word	0x0800c021
 800bfb8:	0800c021 	.word	0x0800c021
 800bfbc:	0800c021 	.word	0x0800c021
 800bfc0:	0800c021 	.word	0x0800c021
 800bfc4:	0800c021 	.word	0x0800c021
 800bfc8:	0800c021 	.word	0x0800c021
 800bfcc:	0800c011 	.word	0x0800c011
 800bfd0:	0800c021 	.word	0x0800c021
 800bfd4:	0800c021 	.word	0x0800c021
 800bfd8:	0800c021 	.word	0x0800c021
 800bfdc:	0800c021 	.word	0x0800c021
 800bfe0:	0800c021 	.word	0x0800c021
 800bfe4:	0800c021 	.word	0x0800c021
 800bfe8:	0800c021 	.word	0x0800c021
 800bfec:	0800c019 	.word	0x0800c019
 800bff0:	2301      	movs	r3, #1
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff6:	e0bc      	b.n	800c172 <UART_SetConfig+0x5a6>
 800bff8:	2304      	movs	r3, #4
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffe:	e0b8      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c000:	2308      	movs	r3, #8
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c006:	e0b4      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c008:	2310      	movs	r3, #16
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00e:	e0b0      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c010:	2320      	movs	r3, #32
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c016:	e0ac      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c018:	2340      	movs	r3, #64	; 0x40
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01e:	e0a8      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c020:	2380      	movs	r3, #128	; 0x80
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c026:	e0a4      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a8f      	ldr	r2, [pc, #572]	; (800c26c <UART_SetConfig+0x6a0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d130      	bne.n	800c094 <UART_SetConfig+0x4c8>
 800c032:	4b8d      	ldr	r3, [pc, #564]	; (800c268 <UART_SetConfig+0x69c>)
 800c034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	d826      	bhi.n	800c08c <UART_SetConfig+0x4c0>
 800c03e:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <UART_SetConfig+0x478>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c05d 	.word	0x0800c05d
 800c048:	0800c065 	.word	0x0800c065
 800c04c:	0800c06d 	.word	0x0800c06d
 800c050:	0800c075 	.word	0x0800c075
 800c054:	0800c07d 	.word	0x0800c07d
 800c058:	0800c085 	.word	0x0800c085
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c062:	e086      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c064:	2304      	movs	r3, #4
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06a:	e082      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c06c:	2308      	movs	r3, #8
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c072:	e07e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c074:	2310      	movs	r3, #16
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07a:	e07a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c07c:	2320      	movs	r3, #32
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c082:	e076      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c084:	2340      	movs	r3, #64	; 0x40
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08a:	e072      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c08c:	2380      	movs	r3, #128	; 0x80
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c092:	e06e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a75      	ldr	r2, [pc, #468]	; (800c270 <UART_SetConfig+0x6a4>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d130      	bne.n	800c100 <UART_SetConfig+0x534>
 800c09e:	4b72      	ldr	r3, [pc, #456]	; (800c268 <UART_SetConfig+0x69c>)
 800c0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d826      	bhi.n	800c0f8 <UART_SetConfig+0x52c>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <UART_SetConfig+0x4e4>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0c9 	.word	0x0800c0c9
 800c0b4:	0800c0d1 	.word	0x0800c0d1
 800c0b8:	0800c0d9 	.word	0x0800c0d9
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e9 	.word	0x0800c0e9
 800c0c4:	0800c0f1 	.word	0x0800c0f1
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e050      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e04c      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0d8:	2308      	movs	r3, #8
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e048      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0e0:	2310      	movs	r3, #16
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e044      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0e8:	2320      	movs	r3, #32
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e040      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e03c      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c0f8:	2380      	movs	r3, #128	; 0x80
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e038      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a5b      	ldr	r2, [pc, #364]	; (800c274 <UART_SetConfig+0x6a8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d130      	bne.n	800c16c <UART_SetConfig+0x5a0>
 800c10a:	4b57      	ldr	r3, [pc, #348]	; (800c268 <UART_SetConfig+0x69c>)
 800c10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b05      	cmp	r3, #5
 800c114:	d826      	bhi.n	800c164 <UART_SetConfig+0x598>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <UART_SetConfig+0x550>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c135 	.word	0x0800c135
 800c120:	0800c13d 	.word	0x0800c13d
 800c124:	0800c145 	.word	0x0800c145
 800c128:	0800c14d 	.word	0x0800c14d
 800c12c:	0800c155 	.word	0x0800c155
 800c130:	0800c15d 	.word	0x0800c15d
 800c134:	2302      	movs	r3, #2
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e01a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c13c:	2304      	movs	r3, #4
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e016      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c144:	2308      	movs	r3, #8
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e012      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c14c:	2310      	movs	r3, #16
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e00e      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c154:	2320      	movs	r3, #32
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e00a      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c15c:	2340      	movs	r3, #64	; 0x40
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e006      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c164:	2380      	movs	r3, #128	; 0x80
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e002      	b.n	800c172 <UART_SetConfig+0x5a6>
 800c16c:	2380      	movs	r3, #128	; 0x80
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a3f      	ldr	r2, [pc, #252]	; (800c274 <UART_SetConfig+0x6a8>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	f040 80f8 	bne.w	800c36e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c17e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c182:	2b20      	cmp	r3, #32
 800c184:	dc46      	bgt.n	800c214 <UART_SetConfig+0x648>
 800c186:	2b02      	cmp	r3, #2
 800c188:	f2c0 8082 	blt.w	800c290 <UART_SetConfig+0x6c4>
 800c18c:	3b02      	subs	r3, #2
 800c18e:	2b1e      	cmp	r3, #30
 800c190:	d87e      	bhi.n	800c290 <UART_SetConfig+0x6c4>
 800c192:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <UART_SetConfig+0x5cc>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c21b 	.word	0x0800c21b
 800c19c:	0800c291 	.word	0x0800c291
 800c1a0:	0800c223 	.word	0x0800c223
 800c1a4:	0800c291 	.word	0x0800c291
 800c1a8:	0800c291 	.word	0x0800c291
 800c1ac:	0800c291 	.word	0x0800c291
 800c1b0:	0800c233 	.word	0x0800c233
 800c1b4:	0800c291 	.word	0x0800c291
 800c1b8:	0800c291 	.word	0x0800c291
 800c1bc:	0800c291 	.word	0x0800c291
 800c1c0:	0800c291 	.word	0x0800c291
 800c1c4:	0800c291 	.word	0x0800c291
 800c1c8:	0800c291 	.word	0x0800c291
 800c1cc:	0800c291 	.word	0x0800c291
 800c1d0:	0800c243 	.word	0x0800c243
 800c1d4:	0800c291 	.word	0x0800c291
 800c1d8:	0800c291 	.word	0x0800c291
 800c1dc:	0800c291 	.word	0x0800c291
 800c1e0:	0800c291 	.word	0x0800c291
 800c1e4:	0800c291 	.word	0x0800c291
 800c1e8:	0800c291 	.word	0x0800c291
 800c1ec:	0800c291 	.word	0x0800c291
 800c1f0:	0800c291 	.word	0x0800c291
 800c1f4:	0800c291 	.word	0x0800c291
 800c1f8:	0800c291 	.word	0x0800c291
 800c1fc:	0800c291 	.word	0x0800c291
 800c200:	0800c291 	.word	0x0800c291
 800c204:	0800c291 	.word	0x0800c291
 800c208:	0800c291 	.word	0x0800c291
 800c20c:	0800c291 	.word	0x0800c291
 800c210:	0800c283 	.word	0x0800c283
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	d037      	beq.n	800c288 <UART_SetConfig+0x6bc>
 800c218:	e03a      	b.n	800c290 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c21a:	f7fd fd05 	bl	8009c28 <HAL_RCCEx_GetD3PCLK1Freq>
 800c21e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c220:	e03c      	b.n	800c29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fd14 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c230:	e034      	b.n	800c29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c232:	f107 0318 	add.w	r3, r7, #24
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd fe60 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c240:	e02c      	b.n	800c29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <UART_SetConfig+0x69c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d016      	beq.n	800c27c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <UART_SetConfig+0x69c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	08db      	lsrs	r3, r3, #3
 800c254:	f003 0303 	and.w	r3, r3, #3
 800c258:	4a07      	ldr	r2, [pc, #28]	; (800c278 <UART_SetConfig+0x6ac>)
 800c25a:	fa22 f303 	lsr.w	r3, r2, r3
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c260:	e01c      	b.n	800c29c <UART_SetConfig+0x6d0>
 800c262:	bf00      	nop
 800c264:	40011400 	.word	0x40011400
 800c268:	58024400 	.word	0x58024400
 800c26c:	40007800 	.word	0x40007800
 800c270:	40007c00 	.word	0x40007c00
 800c274:	58000c00 	.word	0x58000c00
 800c278:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c27c:	4b9d      	ldr	r3, [pc, #628]	; (800c4f4 <UART_SetConfig+0x928>)
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c280:	e00c      	b.n	800c29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c282:	4b9d      	ldr	r3, [pc, #628]	; (800c4f8 <UART_SetConfig+0x92c>)
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c286:	e009      	b.n	800c29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28e:	e005      	b.n	800c29c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c29a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 81de 	beq.w	800c660 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	4a94      	ldr	r2, [pc, #592]	; (800c4fc <UART_SetConfig+0x930>)
 800c2aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	4413      	add	r3, r2
 800c2c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d305      	bcc.n	800c2d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d903      	bls.n	800c2dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c2da:	e1c1      	b.n	800c660 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2de:	2200      	movs	r2, #0
 800c2e0:	60bb      	str	r3, [r7, #8]
 800c2e2:	60fa      	str	r2, [r7, #12]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e8:	4a84      	ldr	r2, [pc, #528]	; (800c4fc <UART_SetConfig+0x930>)
 800c2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2fe:	f7f4 f847 	bl	8000390 <__aeabi_uldivmod>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	f04f 0200 	mov.w	r2, #0
 800c30e:	f04f 0300 	mov.w	r3, #0
 800c312:	020b      	lsls	r3, r1, #8
 800c314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c318:	0202      	lsls	r2, r0, #8
 800c31a:	6979      	ldr	r1, [r7, #20]
 800c31c:	6849      	ldr	r1, [r1, #4]
 800c31e:	0849      	lsrs	r1, r1, #1
 800c320:	2000      	movs	r0, #0
 800c322:	460c      	mov	r4, r1
 800c324:	4605      	mov	r5, r0
 800c326:	eb12 0804 	adds.w	r8, r2, r4
 800c32a:	eb43 0905 	adc.w	r9, r3, r5
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	469a      	mov	sl, r3
 800c336:	4693      	mov	fp, r2
 800c338:	4652      	mov	r2, sl
 800c33a:	465b      	mov	r3, fp
 800c33c:	4640      	mov	r0, r8
 800c33e:	4649      	mov	r1, r9
 800c340:	f7f4 f826 	bl	8000390 <__aeabi_uldivmod>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4613      	mov	r3, r2
 800c34a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c352:	d308      	bcc.n	800c366 <UART_SetConfig+0x79a>
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c35a:	d204      	bcs.n	800c366 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c362:	60da      	str	r2, [r3, #12]
 800c364:	e17c      	b.n	800c660 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c36c:	e178      	b.n	800c660 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c376:	f040 80c5 	bne.w	800c504 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c37a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c37e:	2b20      	cmp	r3, #32
 800c380:	dc48      	bgt.n	800c414 <UART_SetConfig+0x848>
 800c382:	2b00      	cmp	r3, #0
 800c384:	db7b      	blt.n	800c47e <UART_SetConfig+0x8b2>
 800c386:	2b20      	cmp	r3, #32
 800c388:	d879      	bhi.n	800c47e <UART_SetConfig+0x8b2>
 800c38a:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x7c4>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c41b 	.word	0x0800c41b
 800c394:	0800c423 	.word	0x0800c423
 800c398:	0800c47f 	.word	0x0800c47f
 800c39c:	0800c47f 	.word	0x0800c47f
 800c3a0:	0800c42b 	.word	0x0800c42b
 800c3a4:	0800c47f 	.word	0x0800c47f
 800c3a8:	0800c47f 	.word	0x0800c47f
 800c3ac:	0800c47f 	.word	0x0800c47f
 800c3b0:	0800c43b 	.word	0x0800c43b
 800c3b4:	0800c47f 	.word	0x0800c47f
 800c3b8:	0800c47f 	.word	0x0800c47f
 800c3bc:	0800c47f 	.word	0x0800c47f
 800c3c0:	0800c47f 	.word	0x0800c47f
 800c3c4:	0800c47f 	.word	0x0800c47f
 800c3c8:	0800c47f 	.word	0x0800c47f
 800c3cc:	0800c47f 	.word	0x0800c47f
 800c3d0:	0800c44b 	.word	0x0800c44b
 800c3d4:	0800c47f 	.word	0x0800c47f
 800c3d8:	0800c47f 	.word	0x0800c47f
 800c3dc:	0800c47f 	.word	0x0800c47f
 800c3e0:	0800c47f 	.word	0x0800c47f
 800c3e4:	0800c47f 	.word	0x0800c47f
 800c3e8:	0800c47f 	.word	0x0800c47f
 800c3ec:	0800c47f 	.word	0x0800c47f
 800c3f0:	0800c47f 	.word	0x0800c47f
 800c3f4:	0800c47f 	.word	0x0800c47f
 800c3f8:	0800c47f 	.word	0x0800c47f
 800c3fc:	0800c47f 	.word	0x0800c47f
 800c400:	0800c47f 	.word	0x0800c47f
 800c404:	0800c47f 	.word	0x0800c47f
 800c408:	0800c47f 	.word	0x0800c47f
 800c40c:	0800c47f 	.word	0x0800c47f
 800c410:	0800c471 	.word	0x0800c471
 800c414:	2b40      	cmp	r3, #64	; 0x40
 800c416:	d02e      	beq.n	800c476 <UART_SetConfig+0x8aa>
 800c418:	e031      	b.n	800c47e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c41a:	f7fb fc0d 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800c41e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c420:	e033      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c422:	f7fb fc1f 	bl	8007c64 <HAL_RCC_GetPCLK2Freq>
 800c426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c428:	e02f      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd fc10 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c438:	e027      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c43a:	f107 0318 	add.w	r3, r7, #24
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fd fd5c 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e01f      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c44a:	4b2d      	ldr	r3, [pc, #180]	; (800c500 <UART_SetConfig+0x934>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f003 0320 	and.w	r3, r3, #32
 800c452:	2b00      	cmp	r3, #0
 800c454:	d009      	beq.n	800c46a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c456:	4b2a      	ldr	r3, [pc, #168]	; (800c500 <UART_SetConfig+0x934>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	08db      	lsrs	r3, r3, #3
 800c45c:	f003 0303 	and.w	r3, r3, #3
 800c460:	4a24      	ldr	r2, [pc, #144]	; (800c4f4 <UART_SetConfig+0x928>)
 800c462:	fa22 f303 	lsr.w	r3, r2, r3
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c468:	e00f      	b.n	800c48a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c46a:	4b22      	ldr	r3, [pc, #136]	; (800c4f4 <UART_SetConfig+0x928>)
 800c46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46e:	e00c      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c470:	4b21      	ldr	r3, [pc, #132]	; (800c4f8 <UART_SetConfig+0x92c>)
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c474:	e009      	b.n	800c48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e005      	b.n	800c48a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 80e7 	beq.w	800c660 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	4a19      	ldr	r2, [pc, #100]	; (800c4fc <UART_SetConfig+0x930>)
 800c498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c49c:	461a      	mov	r2, r3
 800c49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a4:	005a      	lsls	r2, r3, #1
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	085b      	lsrs	r3, r3, #1
 800c4ac:	441a      	add	r2, r3
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	2b0f      	cmp	r3, #15
 800c4bc:	d916      	bls.n	800c4ec <UART_SetConfig+0x920>
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c4:	d212      	bcs.n	800c4ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	f023 030f 	bic.w	r3, r3, #15
 800c4ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	085b      	lsrs	r3, r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c4e8:	60da      	str	r2, [r3, #12]
 800c4ea:	e0b9      	b.n	800c660 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c4f2:	e0b5      	b.n	800c660 <UART_SetConfig+0xa94>
 800c4f4:	03d09000 	.word	0x03d09000
 800c4f8:	003d0900 	.word	0x003d0900
 800c4fc:	0800fb1c 	.word	0x0800fb1c
 800c500:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c508:	2b20      	cmp	r3, #32
 800c50a:	dc49      	bgt.n	800c5a0 <UART_SetConfig+0x9d4>
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	db7c      	blt.n	800c60a <UART_SetConfig+0xa3e>
 800c510:	2b20      	cmp	r3, #32
 800c512:	d87a      	bhi.n	800c60a <UART_SetConfig+0xa3e>
 800c514:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <UART_SetConfig+0x950>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c5a7 	.word	0x0800c5a7
 800c520:	0800c5af 	.word	0x0800c5af
 800c524:	0800c60b 	.word	0x0800c60b
 800c528:	0800c60b 	.word	0x0800c60b
 800c52c:	0800c5b7 	.word	0x0800c5b7
 800c530:	0800c60b 	.word	0x0800c60b
 800c534:	0800c60b 	.word	0x0800c60b
 800c538:	0800c60b 	.word	0x0800c60b
 800c53c:	0800c5c7 	.word	0x0800c5c7
 800c540:	0800c60b 	.word	0x0800c60b
 800c544:	0800c60b 	.word	0x0800c60b
 800c548:	0800c60b 	.word	0x0800c60b
 800c54c:	0800c60b 	.word	0x0800c60b
 800c550:	0800c60b 	.word	0x0800c60b
 800c554:	0800c60b 	.word	0x0800c60b
 800c558:	0800c60b 	.word	0x0800c60b
 800c55c:	0800c5d7 	.word	0x0800c5d7
 800c560:	0800c60b 	.word	0x0800c60b
 800c564:	0800c60b 	.word	0x0800c60b
 800c568:	0800c60b 	.word	0x0800c60b
 800c56c:	0800c60b 	.word	0x0800c60b
 800c570:	0800c60b 	.word	0x0800c60b
 800c574:	0800c60b 	.word	0x0800c60b
 800c578:	0800c60b 	.word	0x0800c60b
 800c57c:	0800c60b 	.word	0x0800c60b
 800c580:	0800c60b 	.word	0x0800c60b
 800c584:	0800c60b 	.word	0x0800c60b
 800c588:	0800c60b 	.word	0x0800c60b
 800c58c:	0800c60b 	.word	0x0800c60b
 800c590:	0800c60b 	.word	0x0800c60b
 800c594:	0800c60b 	.word	0x0800c60b
 800c598:	0800c60b 	.word	0x0800c60b
 800c59c:	0800c5fd 	.word	0x0800c5fd
 800c5a0:	2b40      	cmp	r3, #64	; 0x40
 800c5a2:	d02e      	beq.n	800c602 <UART_SetConfig+0xa36>
 800c5a4:	e031      	b.n	800c60a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5a6:	f7fb fb47 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800c5aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5ac:	e033      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5ae:	f7fb fb59 	bl	8007c64 <HAL_RCC_GetPCLK2Freq>
 800c5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5b4:	e02f      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd fb4a 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e027      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c6:	f107 0318 	add.w	r3, r7, #24
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fd fc96 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e01f      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5d6:	4b2d      	ldr	r3, [pc, #180]	; (800c68c <UART_SetConfig+0xac0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d009      	beq.n	800c5f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5e2:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <UART_SetConfig+0xac0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	08db      	lsrs	r3, r3, #3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	4a28      	ldr	r2, [pc, #160]	; (800c690 <UART_SetConfig+0xac4>)
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5f4:	e00f      	b.n	800c616 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c5f6:	4b26      	ldr	r3, [pc, #152]	; (800c690 <UART_SetConfig+0xac4>)
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e00c      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5fc:	4b25      	ldr	r3, [pc, #148]	; (800c694 <UART_SetConfig+0xac8>)
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c600:	e009      	b.n	800c616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	e005      	b.n	800c616 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c614:	bf00      	nop
    }

    if (pclk != 0U)
 800c616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d021      	beq.n	800c660 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c620:	4a1d      	ldr	r2, [pc, #116]	; (800c698 <UART_SetConfig+0xacc>)
 800c622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c626:	461a      	mov	r2, r3
 800c628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	441a      	add	r2, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	2b0f      	cmp	r3, #15
 800c644:	d909      	bls.n	800c65a <UART_SetConfig+0xa8e>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c64c:	d205      	bcs.n	800c65a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	b29a      	uxth	r2, r3
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60da      	str	r2, [r3, #12]
 800c658:	e002      	b.n	800c660 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	2201      	movs	r2, #1
 800c664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2200      	movs	r2, #0
 800c674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2200      	movs	r2, #0
 800c67a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c67c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c680:	4618      	mov	r0, r3
 800c682:	3748      	adds	r7, #72	; 0x48
 800c684:	46bd      	mov	sp, r7
 800c686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c68a:	bf00      	nop
 800c68c:	58024400 	.word	0x58024400
 800c690:	03d09000 	.word	0x03d09000
 800c694:	003d0900 	.word	0x003d0900
 800c698:	0800fb1c 	.word	0x0800fb1c

0800c69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00a      	beq.n	800c6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	430a      	orrs	r2, r1
 800c6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00a      	beq.n	800c70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	f003 0308 	and.w	r3, r3, #8
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00a      	beq.n	800c72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c730:	f003 0310 	and.w	r3, r3, #16
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	430a      	orrs	r2, r1
 800c74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00a      	beq.n	800c770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01a      	beq.n	800c7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	430a      	orrs	r2, r1
 800c790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79a:	d10a      	bne.n	800c7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	430a      	orrs	r2, r1
 800c7d2:	605a      	str	r2, [r3, #4]
  }
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b098      	sub	sp, #96	; 0x60
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7f0:	f7f4 f8f0 	bl	80009d4 <HAL_GetTick>
 800c7f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 0308 	and.w	r3, r3, #8
 800c800:	2b08      	cmp	r3, #8
 800c802:	d12f      	bne.n	800c864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80c:	2200      	movs	r2, #0
 800c80e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f88e 	bl	800c934 <UART_WaitOnFlagUntilTimeout>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d022      	beq.n	800c864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c832:	653b      	str	r3, [r7, #80]	; 0x50
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	461a      	mov	r2, r3
 800c83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c83c:	647b      	str	r3, [r7, #68]	; 0x44
 800c83e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e6      	bne.n	800c81e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c860:	2303      	movs	r3, #3
 800c862:	e063      	b.n	800c92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0304 	and.w	r3, r3, #4
 800c86e:	2b04      	cmp	r3, #4
 800c870:	d149      	bne.n	800c906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c87a:	2200      	movs	r2, #0
 800c87c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f857 	bl	800c934 <UART_WaitOnFlagUntilTimeout>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d03c      	beq.n	800c906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	e853 3f00 	ldrex	r3, [r3]
 800c898:	623b      	str	r3, [r7, #32]
   return(result);
 800c89a:	6a3b      	ldr	r3, [r7, #32]
 800c89c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e6      	bne.n	800c88c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3308      	adds	r3, #8
 800c8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f023 0301 	bic.w	r3, r3, #1
 800c8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3308      	adds	r3, #8
 800c8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8de:	61fa      	str	r2, [r7, #28]
 800c8e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e2:	69b9      	ldr	r1, [r7, #24]
 800c8e4:	69fa      	ldr	r2, [r7, #28]
 800c8e6:	e841 2300 	strex	r3, r2, [r1]
 800c8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1e5      	bne.n	800c8be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e012      	b.n	800c92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2220      	movs	r2, #32
 800c90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2220      	movs	r2, #32
 800c912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3758      	adds	r7, #88	; 0x58
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	603b      	str	r3, [r7, #0]
 800c940:	4613      	mov	r3, r2
 800c942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c944:	e049      	b.n	800c9da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94c:	d045      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c94e:	f7f4 f841 	bl	80009d4 <HAL_GetTick>
 800c952:	4602      	mov	r2, r0
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	69ba      	ldr	r2, [r7, #24]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d302      	bcc.n	800c964 <UART_WaitOnFlagUntilTimeout+0x30>
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e048      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0304 	and.w	r3, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	d031      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b08      	cmp	r3, #8
 800c982:	d110      	bne.n	800c9a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2208      	movs	r2, #8
 800c98a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 f95b 	bl	800cc48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2208      	movs	r2, #8
 800c996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e029      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9b4:	d111      	bne.n	800c9da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 f941 	bl	800cc48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e00f      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69da      	ldr	r2, [r3, #28]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	bf0c      	ite	eq
 800c9ea:	2301      	moveq	r3, #1
 800c9ec:	2300      	movne	r3, #0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d0a6      	beq.n	800c946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b0a3      	sub	sp, #140	; 0x8c
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	88fa      	ldrh	r2, [r7, #6]
 800ca1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	88fa      	ldrh	r2, [r7, #6]
 800ca24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca36:	d10e      	bne.n	800ca56 <UART_Start_Receive_IT+0x52>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d105      	bne.n	800ca4c <UART_Start_Receive_IT+0x48>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca4a:	e02d      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	22ff      	movs	r2, #255	; 0xff
 800ca50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca54:	e028      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10d      	bne.n	800ca7a <UART_Start_Receive_IT+0x76>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d104      	bne.n	800ca70 <UART_Start_Receive_IT+0x6c>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	22ff      	movs	r2, #255	; 0xff
 800ca6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca6e:	e01b      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	227f      	movs	r2, #127	; 0x7f
 800ca74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca78:	e016      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca82:	d10d      	bne.n	800caa0 <UART_Start_Receive_IT+0x9c>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d104      	bne.n	800ca96 <UART_Start_Receive_IT+0x92>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	227f      	movs	r2, #127	; 0x7f
 800ca90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca94:	e008      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	223f      	movs	r2, #63	; 0x3f
 800ca9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca9e:	e003      	b.n	800caa8 <UART_Start_Receive_IT+0xa4>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2222      	movs	r2, #34	; 0x22
 800cab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3308      	adds	r3, #8
 800cabe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cac2:	e853 3f00 	ldrex	r3, [r3]
 800cac6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800caca:	f043 0301 	orr.w	r3, r3, #1
 800cace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	3308      	adds	r3, #8
 800cad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cadc:	673a      	str	r2, [r7, #112]	; 0x70
 800cade:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cae2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cae4:	e841 2300 	strex	r3, r2, [r1]
 800cae8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800caea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caec:	2b00      	cmp	r3, #0
 800caee:	d1e3      	bne.n	800cab8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf8:	d14f      	bne.n	800cb9a <UART_Start_Receive_IT+0x196>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb00:	88fa      	ldrh	r2, [r7, #6]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d349      	bcc.n	800cb9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb0e:	d107      	bne.n	800cb20 <UART_Start_Receive_IT+0x11c>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d103      	bne.n	800cb20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4a47      	ldr	r2, [pc, #284]	; (800cc38 <UART_Start_Receive_IT+0x234>)
 800cb1c:	675a      	str	r2, [r3, #116]	; 0x74
 800cb1e:	e002      	b.n	800cb26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4a46      	ldr	r2, [pc, #280]	; (800cc3c <UART_Start_Receive_IT+0x238>)
 800cb24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d01a      	beq.n	800cb64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb36:	e853 3f00 	ldrex	r3, [r3]
 800cb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e4      	bne.n	800cb2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3308      	adds	r3, #8
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	3308      	adds	r3, #8
 800cb82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb84:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e5      	bne.n	800cb64 <UART_Start_Receive_IT+0x160>
 800cb98:	e046      	b.n	800cc28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba2:	d107      	bne.n	800cbb4 <UART_Start_Receive_IT+0x1b0>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4a24      	ldr	r2, [pc, #144]	; (800cc40 <UART_Start_Receive_IT+0x23c>)
 800cbb0:	675a      	str	r2, [r3, #116]	; 0x74
 800cbb2:	e002      	b.n	800cbba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4a23      	ldr	r2, [pc, #140]	; (800cc44 <UART_Start_Receive_IT+0x240>)
 800cbb8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d019      	beq.n	800cbf6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	e853 3f00 	ldrex	r3, [r3]
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cbd6:	677b      	str	r3, [r7, #116]	; 0x74
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe8:	e841 2300 	strex	r3, r2, [r1]
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e6      	bne.n	800cbc2 <UART_Start_Receive_IT+0x1be>
 800cbf4:	e018      	b.n	800cc28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	e853 3f00 	ldrex	r3, [r3]
 800cc02:	613b      	str	r3, [r7, #16]
   return(result);
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f043 0320 	orr.w	r3, r3, #32
 800cc0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	461a      	mov	r2, r3
 800cc12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc14:	623b      	str	r3, [r7, #32]
 800cc16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc18:	69f9      	ldr	r1, [r7, #28]
 800cc1a:	6a3a      	ldr	r2, [r7, #32]
 800cc1c:	e841 2300 	strex	r3, r2, [r1]
 800cc20:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e6      	bne.n	800cbf6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	378c      	adds	r7, #140	; 0x8c
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	0800d469 	.word	0x0800d469
 800cc3c:	0800d109 	.word	0x0800d109
 800cc40:	0800cf51 	.word	0x0800cf51
 800cc44:	0800cd99 	.word	0x0800cd99

0800cc48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b095      	sub	sp, #84	; 0x54
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	e853 3f00 	ldrex	r3, [r3]
 800cc5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6e:	643b      	str	r3, [r7, #64]	; 0x40
 800cc70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc76:	e841 2300 	strex	r3, r2, [r1]
 800cc7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1e6      	bne.n	800cc50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3308      	adds	r3, #8
 800cc88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	e853 3f00 	ldrex	r3, [r3]
 800cc90:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <UART_EndRxTransfer+0xc8>)
 800cc96:	4013      	ands	r3, r2
 800cc98:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccaa:	e841 2300 	strex	r3, r2, [r1]
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e5      	bne.n	800cc82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d118      	bne.n	800ccf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	e853 3f00 	ldrex	r3, [r3]
 800ccca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	f023 0310 	bic.w	r3, r3, #16
 800ccd2:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccdc:	61bb      	str	r3, [r7, #24]
 800ccde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce0:	6979      	ldr	r1, [r7, #20]
 800cce2:	69ba      	ldr	r2, [r7, #24]
 800cce4:	e841 2300 	strex	r3, r2, [r1]
 800cce8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1e6      	bne.n	800ccbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cd04:	bf00      	nop
 800cd06:	3754      	adds	r7, #84	; 0x54
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	effffffe 	.word	0xeffffffe

0800cd14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 ffa8 	bl	800dc88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd38:	bf00      	nop
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd5c:	61fb      	str	r3, [r7, #28]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	61bb      	str	r3, [r7, #24]
 800cd68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	6979      	ldr	r1, [r7, #20]
 800cd6c:	69ba      	ldr	r2, [r7, #24]
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	613b      	str	r3, [r7, #16]
   return(result);
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e6      	bne.n	800cd48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7fe ff09 	bl	800bba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd8e:	bf00      	nop
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b09c      	sub	sp, #112	; 0x70
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cda6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb0:	2b22      	cmp	r3, #34	; 0x22
 800cdb2:	f040 80be 	bne.w	800cf32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cdc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cdc4:	b2d9      	uxtb	r1, r3
 800cdc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd0:	400a      	ands	r2, r1
 800cdd2:	b2d2      	uxtb	r2, r2
 800cdd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3b01      	subs	r3, #1
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f040 80a1 	bne.w	800cf42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce08:	e853 3f00 	ldrex	r3, [r3]
 800ce0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce26:	e841 2300 	strex	r3, r2, [r1]
 800ce2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1e6      	bne.n	800ce00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3308      	adds	r3, #8
 800ce38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	e853 3f00 	ldrex	r3, [r3]
 800ce40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	f023 0301 	bic.w	r3, r3, #1
 800ce48:	667b      	str	r3, [r7, #100]	; 0x64
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	3308      	adds	r3, #8
 800ce50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce52:	647a      	str	r2, [r7, #68]	; 0x44
 800ce54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce5a:	e841 2300 	strex	r3, r2, [r1]
 800ce5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1e5      	bne.n	800ce32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a33      	ldr	r2, [pc, #204]	; (800cf4c <UART_RxISR_8BIT+0x1b4>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d01f      	beq.n	800cec4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d018      	beq.n	800cec4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	e853 3f00 	ldrex	r3, [r3]
 800ce9e:	623b      	str	r3, [r7, #32]
   return(result);
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cea6:	663b      	str	r3, [r7, #96]	; 0x60
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceb0:	633b      	str	r3, [r7, #48]	; 0x30
 800ceb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb8:	e841 2300 	strex	r3, r2, [r1]
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e6      	bne.n	800ce92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d12e      	bne.n	800cf2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	e853 3f00 	ldrex	r3, [r3]
 800cede:	60fb      	str	r3, [r7, #12]
   return(result);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 0310 	bic.w	r3, r3, #16
 800cee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	461a      	mov	r2, r3
 800ceee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef4:	69b9      	ldr	r1, [r7, #24]
 800cef6:	69fa      	ldr	r2, [r7, #28]
 800cef8:	e841 2300 	strex	r3, r2, [r1]
 800cefc:	617b      	str	r3, [r7, #20]
   return(result);
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1e6      	bne.n	800ced2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	f003 0310 	and.w	r3, r3, #16
 800cf0e:	2b10      	cmp	r3, #16
 800cf10:	d103      	bne.n	800cf1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2210      	movs	r2, #16
 800cf18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fe fe46 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf28:	e00b      	b.n	800cf42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fe80 	bl	800dc30 <HAL_UART_RxCpltCallback>
}
 800cf30:	e007      	b.n	800cf42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	699a      	ldr	r2, [r3, #24]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f042 0208 	orr.w	r2, r2, #8
 800cf40:	619a      	str	r2, [r3, #24]
}
 800cf42:	bf00      	nop
 800cf44:	3770      	adds	r7, #112	; 0x70
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	58000c00 	.word	0x58000c00

0800cf50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b09c      	sub	sp, #112	; 0x70
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf68:	2b22      	cmp	r3, #34	; 0x22
 800cf6a:	f040 80be 	bne.w	800d0ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cf7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cf82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cf86:	4013      	ands	r3, r2
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf92:	1c9a      	adds	r2, r3, #2
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f040 80a1 	bne.w	800d0fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc0:	e853 3f00 	ldrex	r3, [r3]
 800cfc4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cfc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfcc:	667b      	str	r3, [r7, #100]	; 0x64
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd6:	657b      	str	r3, [r7, #84]	; 0x54
 800cfd8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfde:	e841 2300 	strex	r3, r2, [r1]
 800cfe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1e6      	bne.n	800cfb8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3308      	adds	r3, #8
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	e853 3f00 	ldrex	r3, [r3]
 800cff8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	f023 0301 	bic.w	r3, r3, #1
 800d000:	663b      	str	r3, [r7, #96]	; 0x60
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d00a:	643a      	str	r2, [r7, #64]	; 0x40
 800d00c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d012:	e841 2300 	strex	r3, r2, [r1]
 800d016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1e5      	bne.n	800cfea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a33      	ldr	r2, [pc, #204]	; (800d104 <UART_RxISR_16BIT+0x1b4>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d01f      	beq.n	800d07c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d018      	beq.n	800d07c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	e853 3f00 	ldrex	r3, [r3]
 800d056:	61fb      	str	r3, [r7, #28]
   return(result);
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	461a      	mov	r2, r3
 800d066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d06a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d06e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e6      	bne.n	800d04a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d080:	2b01      	cmp	r3, #1
 800d082:	d12e      	bne.n	800d0e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	e853 3f00 	ldrex	r3, [r3]
 800d096:	60bb      	str	r3, [r7, #8]
   return(result);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f023 0310 	bic.w	r3, r3, #16
 800d09e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0a8:	61bb      	str	r3, [r7, #24]
 800d0aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ac:	6979      	ldr	r1, [r7, #20]
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	e841 2300 	strex	r3, r2, [r1]
 800d0b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1e6      	bne.n	800d08a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	69db      	ldr	r3, [r3, #28]
 800d0c2:	f003 0310 	and.w	r3, r3, #16
 800d0c6:	2b10      	cmp	r3, #16
 800d0c8:	d103      	bne.n	800d0d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2210      	movs	r2, #16
 800d0d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7fe fd6a 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0e0:	e00b      	b.n	800d0fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fda4 	bl	800dc30 <HAL_UART_RxCpltCallback>
}
 800d0e8:	e007      	b.n	800d0fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	699a      	ldr	r2, [r3, #24]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f042 0208 	orr.w	r2, r2, #8
 800d0f8:	619a      	str	r2, [r3, #24]
}
 800d0fa:	bf00      	nop
 800d0fc:	3770      	adds	r7, #112	; 0x70
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	58000c00 	.word	0x58000c00

0800d108 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b0ac      	sub	sp, #176	; 0xb0
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d116:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d13e:	2b22      	cmp	r3, #34	; 0x22
 800d140:	f040 8180 	bne.w	800d444 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d14a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d14e:	e123      	b.n	800d398 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d15a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d15e:	b2d9      	uxtb	r1, r3
 800d160:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d16a:	400a      	ands	r2, r1
 800d16c:	b2d2      	uxtb	r2, r2
 800d16e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d180:	b29b      	uxth	r3, r3
 800d182:	3b01      	subs	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d19a:	f003 0307 	and.w	r3, r3, #7
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d053      	beq.n	800d24a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d011      	beq.n	800d1d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d1ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c8:	f043 0201 	orr.w	r2, r3, #1
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d011      	beq.n	800d202 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d1de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00b      	beq.n	800d202 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2202      	movs	r2, #2
 800d1f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f8:	f043 0204 	orr.w	r2, r3, #4
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d206:	f003 0304 	and.w	r3, r3, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d011      	beq.n	800d232 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00b      	beq.n	800d232 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2204      	movs	r2, #4
 800d220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d228:	f043 0202 	orr.w	r2, r3, #2
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fd23 	bl	800dc88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d250:	b29b      	uxth	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 80a0 	bne.w	800d398 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d27a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d27c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d280:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d282:	e841 2300 	strex	r3, r2, [r1]
 800d286:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e4      	bne.n	800d258 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3308      	adds	r3, #8
 800d294:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d29e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2a0:	4b6e      	ldr	r3, [pc, #440]	; (800d45c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d2b2:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d2b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2ba:	e841 2300 	strex	r3, r2, [r1]
 800d2be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d2c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e3      	bne.n	800d28e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a60      	ldr	r2, [pc, #384]	; (800d460 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d021      	beq.n	800d328 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d01a      	beq.n	800d328 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2fa:	e853 3f00 	ldrex	r3, [r3]
 800d2fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d314:	657b      	str	r3, [r7, #84]	; 0x54
 800d316:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d318:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d31a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d31c:	e841 2300 	strex	r3, r2, [r1]
 800d320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e4      	bne.n	800d2f2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d130      	bne.n	800d392 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33e:	e853 3f00 	ldrex	r3, [r3]
 800d342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	f023 0310 	bic.w	r3, r3, #16
 800d34a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	461a      	mov	r2, r3
 800d354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d358:	643b      	str	r3, [r7, #64]	; 0x40
 800d35a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d35e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d360:	e841 2300 	strex	r3, r2, [r1]
 800d364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1e4      	bne.n	800d336 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b10      	cmp	r3, #16
 800d378:	d103      	bne.n	800d382 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2210      	movs	r2, #16
 800d380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7fe fc12 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
 800d390:	e002      	b.n	800d398 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fc4c 	bl	800dc30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d398:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d006      	beq.n	800d3ae <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d3a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3a4:	f003 0320 	and.w	r3, r3, #32
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f47f aed1 	bne.w	800d150 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d3b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d049      	beq.n	800d454 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d242      	bcs.n	800d454 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d6:	6a3b      	ldr	r3, [r7, #32]
 800d3d8:	e853 3f00 	ldrex	r3, [r3]
 800d3dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d3f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3fa:	e841 2300 	strex	r3, r2, [r1]
 800d3fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e3      	bne.n	800d3ce <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a16      	ldr	r2, [pc, #88]	; (800d464 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d40a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	e853 3f00 	ldrex	r3, [r3]
 800d418:	60bb      	str	r3, [r7, #8]
   return(result);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	f043 0320 	orr.w	r3, r3, #32
 800d420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d42e:	61bb      	str	r3, [r7, #24]
 800d430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6979      	ldr	r1, [r7, #20]
 800d434:	69ba      	ldr	r2, [r7, #24]
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	613b      	str	r3, [r7, #16]
   return(result);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e4      	bne.n	800d40c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d442:	e007      	b.n	800d454 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	699a      	ldr	r2, [r3, #24]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f042 0208 	orr.w	r2, r2, #8
 800d452:	619a      	str	r2, [r3, #24]
}
 800d454:	bf00      	nop
 800d456:	37b0      	adds	r7, #176	; 0xb0
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	effffffe 	.word	0xeffffffe
 800d460:	58000c00 	.word	0x58000c00
 800d464:	0800cd99 	.word	0x0800cd99

0800d468 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b0ae      	sub	sp, #184	; 0xb8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d476:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d49e:	2b22      	cmp	r3, #34	; 0x22
 800d4a0:	f040 8184 	bne.w	800d7ac <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4ae:	e127      	b.n	800d700 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d4c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d4c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4d8:	1c9a      	adds	r2, r3, #2
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d4fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4fe:	f003 0307 	and.w	r3, r3, #7
 800d502:	2b00      	cmp	r3, #0
 800d504:	d053      	beq.n	800d5ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d011      	beq.n	800d536 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2201      	movs	r2, #1
 800d524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d52c:	f043 0201 	orr.w	r2, r3, #1
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d011      	beq.n	800d566 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00b      	beq.n	800d566 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2202      	movs	r2, #2
 800d554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d55c:	f043 0204 	orr.w	r2, r3, #4
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d56a:	f003 0304 	and.w	r3, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d011      	beq.n	800d596 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00b      	beq.n	800d596 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2204      	movs	r2, #4
 800d584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d58c:	f043 0202 	orr.w	r2, r3, #2
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d006      	beq.n	800d5ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fb71 	bl	800dc88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f040 80a2 	bne.w	800d700 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c4:	e853 3f00 	ldrex	r3, [r3]
 800d5c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d5ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d5f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e2      	bne.n	800d5bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d600:	e853 3f00 	ldrex	r3, [r3]
 800d604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d606:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d608:	4b6e      	ldr	r3, [pc, #440]	; (800d7c4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d60a:	4013      	ands	r3, r2
 800d60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3308      	adds	r3, #8
 800d616:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d61a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d61c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d622:	e841 2300 	strex	r3, r2, [r1]
 800d626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1e3      	bne.n	800d5f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2220      	movs	r2, #32
 800d632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a60      	ldr	r2, [pc, #384]	; (800d7c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d021      	beq.n	800d690 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01a      	beq.n	800d690 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	e853 3f00 	ldrex	r3, [r3]
 800d666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d66e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	461a      	mov	r2, r3
 800d678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d67c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d67e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d684:	e841 2300 	strex	r3, r2, [r1]
 800d688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e4      	bne.n	800d65a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d694:	2b01      	cmp	r3, #1
 800d696:	d130      	bne.n	800d6fa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	e853 3f00 	ldrex	r3, [r3]
 800d6aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ae:	f023 0310 	bic.w	r3, r3, #16
 800d6b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6c0:	647b      	str	r3, [r7, #68]	; 0x44
 800d6c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6c8:	e841 2300 	strex	r3, r2, [r1]
 800d6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e4      	bne.n	800d69e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	69db      	ldr	r3, [r3, #28]
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	2b10      	cmp	r3, #16
 800d6e0:	d103      	bne.n	800d6ea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2210      	movs	r2, #16
 800d6e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fa5e 	bl	800bbb4 <HAL_UARTEx_RxEventCallback>
 800d6f8:	e002      	b.n	800d700 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa98 	bl	800dc30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d700:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d70c:	f003 0320 	and.w	r3, r3, #32
 800d710:	2b00      	cmp	r3, #0
 800d712:	f47f aecd 	bne.w	800d4b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d71c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d720:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d724:	2b00      	cmp	r3, #0
 800d726:	d049      	beq.n	800d7bc <UART_RxISR_16BIT_FIFOEN+0x354>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d72e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d732:	429a      	cmp	r2, r3
 800d734:	d242      	bcs.n	800d7bc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3308      	adds	r3, #8
 800d73c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	e853 3f00 	ldrex	r3, [r3]
 800d744:	623b      	str	r3, [r7, #32]
   return(result);
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d74c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3308      	adds	r3, #8
 800d756:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d75a:	633a      	str	r2, [r7, #48]	; 0x30
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d762:	e841 2300 	strex	r3, r2, [r1]
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1e3      	bne.n	800d736 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a16      	ldr	r2, [pc, #88]	; (800d7cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d772:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	60fb      	str	r3, [r7, #12]
   return(result);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f043 0320 	orr.w	r3, r3, #32
 800d788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	461a      	mov	r2, r3
 800d792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d796:	61fb      	str	r3, [r7, #28]
 800d798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	69b9      	ldr	r1, [r7, #24]
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	e841 2300 	strex	r3, r2, [r1]
 800d7a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1e4      	bne.n	800d774 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7aa:	e007      	b.n	800d7bc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	699a      	ldr	r2, [r3, #24]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f042 0208 	orr.w	r2, r2, #8
 800d7ba:	619a      	str	r2, [r3, #24]
}
 800d7bc:	bf00      	nop
 800d7be:	37b8      	adds	r7, #184	; 0xb8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	effffffe 	.word	0xeffffffe
 800d7c8:	58000c00 	.word	0x58000c00
 800d7cc:	0800cf51 	.word	0x0800cf51

0800d7d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7ec:	bf00      	nop
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d101      	bne.n	800d822 <HAL_UARTEx_DisableFifoMode+0x16>
 800d81e:	2302      	movs	r3, #2
 800d820:	e027      	b.n	800d872 <HAL_UARTEx_DisableFifoMode+0x66>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2224      	movs	r2, #36	; 0x24
 800d82e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f022 0201 	bic.w	r2, r2, #1
 800d848:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2220      	movs	r2, #32
 800d864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d101      	bne.n	800d896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d892:	2302      	movs	r3, #2
 800d894:	e02d      	b.n	800d8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2224      	movs	r2, #36	; 0x24
 800d8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f022 0201 	bic.w	r2, r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	430a      	orrs	r2, r1
 800d8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f850 	bl	800d978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2220      	movs	r2, #32
 800d8e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b084      	sub	sp, #16
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d101      	bne.n	800d912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d90e:	2302      	movs	r3, #2
 800d910:	e02d      	b.n	800d96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2224      	movs	r2, #36	; 0x24
 800d91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0201 	bic.w	r2, r2, #1
 800d938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	430a      	orrs	r2, r1
 800d94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f812 	bl	800d978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2220      	movs	r2, #32
 800d960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d984:	2b00      	cmp	r3, #0
 800d986:	d108      	bne.n	800d99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d998:	e031      	b.n	800d9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d99a:	2310      	movs	r3, #16
 800d99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d99e:	2310      	movs	r3, #16
 800d9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	0e5b      	lsrs	r3, r3, #25
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0307 	and.w	r3, r3, #7
 800d9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	0f5b      	lsrs	r3, r3, #29
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	f003 0307 	and.w	r3, r3, #7
 800d9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	7b3a      	ldrb	r2, [r7, #12]
 800d9c6:	4911      	ldr	r1, [pc, #68]	; (800da0c <UARTEx_SetNbDataToProcess+0x94>)
 800d9c8:	5c8a      	ldrb	r2, [r1, r2]
 800d9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9ce:	7b3a      	ldrb	r2, [r7, #12]
 800d9d0:	490f      	ldr	r1, [pc, #60]	; (800da10 <UARTEx_SetNbDataToProcess+0x98>)
 800d9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	7b7a      	ldrb	r2, [r7, #13]
 800d9e4:	4909      	ldr	r1, [pc, #36]	; (800da0c <UARTEx_SetNbDataToProcess+0x94>)
 800d9e6:	5c8a      	ldrb	r2, [r1, r2]
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9ec:	7b7a      	ldrb	r2, [r7, #13]
 800d9ee:	4908      	ldr	r1, [pc, #32]	; (800da10 <UARTEx_SetNbDataToProcess+0x98>)
 800d9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9fe:	bf00      	nop
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	0800fb34 	.word	0x0800fb34
 800da10:	0800fb3c 	.word	0x0800fb3c

0800da14 <FindPeak>:
volatile int gidxA = 0;

volatile uint32_t relative_sawtooth_voltage = 0;

int FindPeak(uint32_t *sig)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]

	if((sig[0] < sig[1]) && (sig[2] < sig[1]))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3304      	adds	r3, #4
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	429a      	cmp	r2, r3
 800da28:	d209      	bcs.n	800da3e <FindPeak+0x2a>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3308      	adds	r3, #8
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3304      	adds	r3, #4
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d201      	bcs.n	800da3e <FindPeak+0x2a>
	{
		return 1;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e000      	b.n	800da40 <FindPeak+0x2c>
	}
	else
	{
		return 0;
 800da3e:	2300      	movs	r3, #0
	}
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <kalman_filter>:
static float P_k_k1 = 0.5;
static float kalman_adc_old=0;
static int kalman_adc_int = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b087      	sub	sp, #28
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	ee07 3a90 	vmov	s15, r3
 800da5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da5e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 800da62:	4b32      	ldr	r3, [pc, #200]	; (800db2c <kalman_filter+0xe0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 800da6c:	4b30      	ldr	r3, [pc, #192]	; (800db30 <kalman_filter+0xe4>)
 800da6e:	ed93 7a00 	vldr	s14, [r3]
 800da72:	4b30      	ldr	r3, [pc, #192]	; (800db34 <kalman_filter+0xe8>)
 800da74:	edd3 7a00 	vldr	s15, [r3]
 800da78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da7c:	4b2e      	ldr	r3, [pc, #184]	; (800db38 <kalman_filter+0xec>)
 800da7e:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 800da82:	4b2d      	ldr	r3, [pc, #180]	; (800db38 <kalman_filter+0xec>)
 800da84:	edd3 6a00 	vldr	s13, [r3]
 800da88:	4b2b      	ldr	r3, [pc, #172]	; (800db38 <kalman_filter+0xec>)
 800da8a:	ed93 7a00 	vldr	s14, [r3]
 800da8e:	4b2b      	ldr	r3, [pc, #172]	; (800db3c <kalman_filter+0xf0>)
 800da90:	edd3 7a00 	vldr	s15, [r3]
 800da94:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da9c:	4b28      	ldr	r3, [pc, #160]	; (800db40 <kalman_filter+0xf4>)
 800da9e:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <kalman_filter+0xe0>)
 800daa4:	edd3 7a00 	vldr	s15, [r3]
 800daa8:	ed97 7a05 	vldr	s14, [r7, #20]
 800daac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dab0:	4b23      	ldr	r3, [pc, #140]	; (800db40 <kalman_filter+0xf4>)
 800dab2:	edd3 7a00 	vldr	s15, [r3]
 800dab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daba:	ed97 7a03 	vldr	s14, [r7, #12]
 800dabe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dac2:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 800dac6:	4b1e      	ldr	r3, [pc, #120]	; (800db40 <kalman_filter+0xf4>)
 800dac8:	edd3 7a00 	vldr	s15, [r3]
 800dacc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dad4:	4b18      	ldr	r3, [pc, #96]	; (800db38 <kalman_filter+0xec>)
 800dad6:	edd3 7a00 	vldr	s15, [r3]
 800dada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dade:	4b14      	ldr	r3, [pc, #80]	; (800db30 <kalman_filter+0xe4>)
 800dae0:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 800dae4:	4b12      	ldr	r3, [pc, #72]	; (800db30 <kalman_filter+0xe4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a13      	ldr	r2, [pc, #76]	; (800db38 <kalman_filter+0xec>)
 800daea:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	ee07 3a90 	vmov	s15, r3
 800daf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daf6:	4b13      	ldr	r3, [pc, #76]	; (800db44 <kalman_filter+0xf8>)
 800daf8:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800dafc:	4a0b      	ldr	r2, [pc, #44]	; (800db2c <kalman_filter+0xe0>)
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 800db02:	edd7 7a02 	vldr	s15, [r7, #8]
 800db06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db0a:	ee17 2a90 	vmov	r2, s15
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <kalman_filter+0xfc>)
 800db10:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 800db12:	edd7 7a02 	vldr	s15, [r7, #8]
 800db16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1a:	ee17 3a90 	vmov	r3, s15
}
 800db1e:	4618      	mov	r0, r3
 800db20:	371c      	adds	r7, #28
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	24001c84 	.word	0x24001c84
 800db30:	24001c7c 	.word	0x24001c7c
 800db34:	24000020 	.word	0x24000020
 800db38:	24000028 	.word	0x24000028
 800db3c:	24000024 	.word	0x24000024
 800db40:	24001c80 	.word	0x24001c80
 800db44:	24001c78 	.word	0x24001c78
 800db48:	24001c88 	.word	0x24001c88

0800db4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800db50:	4b22      	ldr	r3, [pc, #136]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db52:	4a23      	ldr	r2, [pc, #140]	; (800dbe0 <MX_USART3_UART_Init+0x94>)
 800db54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800db56:	4b21      	ldr	r3, [pc, #132]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800db5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db5e:	4b1f      	ldr	r3, [pc, #124]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db60:	2200      	movs	r2, #0
 800db62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800db64:	4b1d      	ldr	r3, [pc, #116]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db66:	2200      	movs	r2, #0
 800db68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800db6a:	4b1c      	ldr	r3, [pc, #112]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800db70:	4b1a      	ldr	r3, [pc, #104]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db72:	220c      	movs	r2, #12
 800db74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db76:	4b19      	ldr	r3, [pc, #100]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db78:	2200      	movs	r2, #0
 800db7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800db7c:	4b17      	ldr	r3, [pc, #92]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db7e:	2200      	movs	r2, #0
 800db80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800db82:	4b16      	ldr	r3, [pc, #88]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db84:	2200      	movs	r2, #0
 800db86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800db88:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db90:	2200      	movs	r2, #0
 800db92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800db94:	4811      	ldr	r0, [pc, #68]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800db96:	f7fd fb1f 	bl	800b1d8 <HAL_UART_Init>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800dba0:	f000 ff06 	bl	800e9b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dba4:	2100      	movs	r1, #0
 800dba6:	480d      	ldr	r0, [pc, #52]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800dba8:	f7ff fe69 	bl	800d87e <HAL_UARTEx_SetTxFifoThreshold>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800dbb2:	f000 fefd 	bl	800e9b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	4808      	ldr	r0, [pc, #32]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800dbba:	f7ff fe9e 	bl	800d8fa <HAL_UARTEx_SetRxFifoThreshold>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800dbc4:	f000 fef4 	bl	800e9b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800dbc8:	4804      	ldr	r0, [pc, #16]	; (800dbdc <MX_USART3_UART_Init+0x90>)
 800dbca:	f7ff fe1f 	bl	800d80c <HAL_UARTEx_DisableFifoMode>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800dbd4:	f000 feec 	bl	800e9b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800dbd8:	bf00      	nop
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	240002ac 	.word	0x240002ac
 800dbe0:	40004800 	.word	0x40004800

0800dbe4 <myprintf>:

void myprintf(const char *fmt, ...) {
 800dbe4:	b40f      	push	{r0, r1, r2, r3}
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 800dbec:	f107 0314 	add.w	r3, r7, #20
 800dbf0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	2164      	movs	r1, #100	; 0x64
 800dbf8:	480b      	ldr	r0, [pc, #44]	; (800dc28 <myprintf+0x44>)
 800dbfa:	f001 fac5 	bl	800f188 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800dbfe:	480a      	ldr	r0, [pc, #40]	; (800dc28 <myprintf+0x44>)
 800dc00:	f7f2 fb6e 	bl	80002e0 <strlen>
 800dc04:	4603      	mov	r3, r0
 800dc06:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc10:	4905      	ldr	r1, [pc, #20]	; (800dc28 <myprintf+0x44>)
 800dc12:	4806      	ldr	r0, [pc, #24]	; (800dc2c <myprintf+0x48>)
 800dc14:	f7fd fb30 	bl	800b278 <HAL_UART_Transmit>

}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc22:	b004      	add	sp, #16
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	24001ca4 	.word	0x24001ca4
 800dc2c:	240002ac 	.word	0x240002ac

0800dc30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a0e      	ldr	r2, [pc, #56]	; (800dc74 <HAL_UART_RxCpltCallback+0x44>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d110      	bne.n	800dc62 <HAL_UART_RxCpltCallback+0x32>
	{
		if(uart3_raw[0] == 'a')
 800dc40:	4b0d      	ldr	r3, [pc, #52]	; (800dc78 <HAL_UART_RxCpltCallback+0x48>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b61      	cmp	r3, #97	; 0x61
 800dc46:	d102      	bne.n	800dc4e <HAL_UART_RxCpltCallback+0x1e>
		{
			rx_flagA = 1;
 800dc48:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <HAL_UART_RxCpltCallback+0x4c>)
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		if(uart3_raw[0] == 'b')
 800dc4e:	4b0a      	ldr	r3, [pc, #40]	; (800dc78 <HAL_UART_RxCpltCallback+0x48>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b62      	cmp	r3, #98	; 0x62
 800dc54:	d102      	bne.n	800dc5c <HAL_UART_RxCpltCallback+0x2c>
		{
			rx_flagB = 1;
 800dc56:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <HAL_UART_RxCpltCallback+0x50>)
 800dc58:	2201      	movs	r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		rx_flagG = 1;
 800dc5c:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <HAL_UART_RxCpltCallback+0x54>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 800dc62:	2201      	movs	r2, #1
 800dc64:	4904      	ldr	r1, [pc, #16]	; (800dc78 <HAL_UART_RxCpltCallback+0x48>)
 800dc66:	4803      	ldr	r0, [pc, #12]	; (800dc74 <HAL_UART_RxCpltCallback+0x44>)
 800dc68:	f7fd fb94 	bl	800b394 <HAL_UART_Receive_IT>
}
 800dc6c:	bf00      	nop
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	240002ac 	.word	0x240002ac
 800dc78:	24000340 	.word	0x24000340
 800dc7c:	2400034c 	.word	0x2400034c
 800dc80:	24000350 	.word	0x24000350
 800dc84:	24000354 	.word	0x24000354

0800dc88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	int loop_A = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_Delay(1000);
 800dc94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc98:	f7f2 fea8 	bl	80009ec <HAL_Delay>
		loop_A++;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	60fb      	str	r3, [r7, #12]

		if(loop_A > 10)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b0a      	cmp	r3, #10
 800dca6:	dc00      	bgt.n	800dcaa <HAL_UART_ErrorCallback+0x22>
		HAL_Delay(1000);
 800dca8:	e7f4      	b.n	800dc94 <HAL_UART_ErrorCallback+0xc>
		{
			break;
 800dcaa:	bf00      	nop
		}
	}
}
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	if(htim == &Tim4Handle)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	4a14      	ldr	r2, [pc, #80]	; (800dd10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d11f      	bne.n	800dd04 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(__t2_cntr < 3)
 800dcc4:	4b13      	ldr	r3, [pc, #76]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d805      	bhi.n	800dcd8 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			__t2_cntr++;
 800dccc:	4b11      	ldr	r3, [pc, #68]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	4a10      	ldr	r2, [pc, #64]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800dcd4:	6013      	str	r3, [r2, #0]
 800dcd6:	e002      	b.n	800dcde <HAL_TIM_PeriodElapsedCallback+0x2a>
		}
		else
		{
			__t2_cntr = 0;
 800dcd8:	4b0e      	ldr	r3, [pc, #56]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
		}

		if(__dripA > 0)
 800dcde:	4b0e      	ldr	r3, [pc, #56]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00e      	beq.n	800dd04 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			__dripA++;
 800dce6:	4b0c      	ldr	r3, [pc, #48]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	4a0a      	ldr	r2, [pc, #40]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800dcee:	6013      	str	r3, [r2, #0]

			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

			if(__dripA > 16) // 500uS
 800dcf0:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b10      	cmp	r3, #16
 800dcf6:	d905      	bls.n	800dd04 <HAL_TIM_PeriodElapsedCallback+0x50>
			{
				flag_FallingEdge = 0;
 800dcf8:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
				__dripA = 0;
 800dcfe:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
				//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
			}
		}
	}
}
 800dd04:	bf00      	nop
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	240001b4 	.word	0x240001b4
 800dd14:	24001c9c 	.word	0x24001c9c
 800dd18:	24001ca0 	.word	0x24001ca0
 800dd1c:	24001c74 	.word	0x24001c74

0800dd20 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af02      	add	r7, sp, #8
  int32_t timeout;

  int lidxA = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	603b      	str	r3, [r7, #0]
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes */
  MPU_Config();
 800dd2a:	f000 fe4b 	bl	800e9c4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800dd2e:	f000 fe6f 	bl	800ea10 <CPU_CACHE_Enable>

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800dd32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd36:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800dd38:	bf00      	nop
 800dd3a:	4b5f      	ldr	r3, [pc, #380]	; (800deb8 <main+0x198>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d004      	beq.n	800dd50 <main+0x30>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	1e5a      	subs	r2, r3, #1
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dcf4      	bgt.n	800dd3a <main+0x1a>
  if ( timeout < 0 )
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	da01      	bge.n	800dd5a <main+0x3a>
  {
    Error_Handler();
 800dd56:	f000 fe2b 	bl	800e9b0 <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800dd5a:	f7f2 fdad 	bl	80008b8 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800dd5e:	f000 f8df 	bl	800df20 <SystemClock_Config>

  /*## Configure peripherals #################################################*/

  /* Initialize LEDs on board */
  BSP_LED_Init(LED3);
 800dd62:	2002      	movs	r0, #2
 800dd64:	f7f2 fc92 	bl	800068c <BSP_LED_Init>
  BSP_LED_Init(LED1);
 800dd68:	2000      	movs	r0, #0
 800dd6a:	f7f2 fc8f 	bl	800068c <BSP_LED_Init>

  //BSP_LED_On(LED1);


  /* Configure the ADCx and ADCy peripherals */
  ADC_Config();
 800dd6e:	f000 f955 	bl	800e01c <ADC_Config>

#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Configure the TIM peripheral */
  TIM_Config();
 800dd72:	f000 fa95 	bl	800e2a0 <TIM_Config>
#endif

  TIM4_Config();
 800dd76:	f000 fa19 	bl	800e1ac <TIM4_Config>

  /*## Enable peripherals ####################################################*/
#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Timer enable */
  if (HAL_TIM_Base_Start(&TimHandle) != HAL_OK)
 800dd7a:	4850      	ldr	r0, [pc, #320]	; (800debc <main+0x19c>)
 800dd7c:	f7fc fd20 	bl	800a7c0 <HAL_TIM_Base_Start>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <main+0x6a>
  {
    /* Counter Enable Error */
    Error_Handler();
 800dd86:	f000 fe13 	bl	800e9b0 <Error_Handler>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

if (HAL_TIM_Base_Start_IT(&Tim4Handle) != HAL_OK)
 800dd8a:	484d      	ldr	r0, [pc, #308]	; (800dec0 <main+0x1a0>)
 800dd8c:	f7fc fd88 	bl	800a8a0 <HAL_TIM_Base_Start_IT>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <main+0x7a>
{
  /* Counter Enable Error */
  Error_Handler();
 800dd96:	f000 fe0b 	bl	800e9b0 <Error_Handler>
}

#if defined(WAVEFORM_VOLTAGE_GENERATION_FOR_TEST)
  /* Generate a periodic signal on a spare DAC channel */
  WaveformVoltageGenerationForTest();
 800dd9a:	f000 fae5 	bl	800e368 <WaveformVoltageGenerationForTest>


  /*## Start ADC conversions #################################################*/

  /* Start ADCx and ADCy multimode conversion on regular group with transfer by DMA */
  if (HAL_ADCEx_MultiModeStart_DMA(&AdcHandle_master,
 800dd9e:	2204      	movs	r2, #4
 800dda0:	4948      	ldr	r1, [pc, #288]	; (800dec4 <main+0x1a4>)
 800dda2:	4849      	ldr	r0, [pc, #292]	; (800dec8 <main+0x1a8>)
 800dda4:	f7f4 fd52 	bl	800284c <HAL_ADCEx_MultiModeStart_DMA>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <main+0x92>
                                   (uint32_t *)aADCDualConvertedValues,
                                    ADCCONVERTEDVALUES_BUFFER_SIZE
                                  ) != HAL_OK)
  {
    /* Start Error */
    Error_Handler();
 800ddae:	f000 fdff 	bl	800e9b0 <Error_Handler>
  }

  MX_USART3_UART_Init();
 800ddb2:	f7ff fecb 	bl	800db4c <MX_USART3_UART_Init>

  HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	4944      	ldr	r1, [pc, #272]	; (800decc <main+0x1ac>)
 800ddba:	4845      	ldr	r0, [pc, #276]	; (800ded0 <main+0x1b0>)
 800ddbc:	f7fd faea 	bl	800b394 <HAL_UART_Receive_IT>

  myprintf("Starting ... \r\n");
 800ddc0:	4844      	ldr	r0, [pc, #272]	; (800ded4 <main+0x1b4>)
 800ddc2:	f7ff ff0f 	bl	800dbe4 <myprintf>
  HAL_Delay(500);
 800ddc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ddca:	f7f2 fe0f 	bl	80009ec <HAL_Delay>
  myprintf("After Delay ... \r\n");
 800ddce:	4842      	ldr	r0, [pc, #264]	; (800ded8 <main+0x1b8>)
 800ddd0:	f7ff ff08 	bl	800dbe4 <myprintf>

  /* Array "aADCDualConvertedValues" contains both ADC results on 32 bits:    */
  /*  - ADC master results in the 16 LSB [15:0]                               */
  /*  - ADC slave results in the 16 MSB [31:16]                               */

  aShot  = HAL_GetTick();
 800ddd4:	f7f2 fdfe 	bl	80009d4 <HAL_GetTick>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	461a      	mov	r2, r3
 800dddc:	4b3f      	ldr	r3, [pc, #252]	; (800dedc <main+0x1bc>)
 800ddde:	601a      	str	r2, [r3, #0]
//    else
//    {
//      ; //BSP_LED_On(LED1);
//    }

    if(HAL_GetTick() > (aShot + 500))
 800dde0:	f7f2 fdf8 	bl	80009d4 <HAL_GetTick>
 800dde4:	4602      	mov	r2, r0
 800dde6:	4b3d      	ldr	r3, [pc, #244]	; (800dedc <main+0x1bc>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d9f6      	bls.n	800dde0 <main+0xc0>
    {
    	aShot  = HAL_GetTick();
 800ddf2:	f7f2 fdef 	bl	80009d4 <HAL_GetTick>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4b38      	ldr	r3, [pc, #224]	; (800dedc <main+0x1bc>)
 800ddfc:	601a      	str	r2, [r3, #0]

//    	myprintf("ADC[1] = %d  ADC[2] = %d \r\n", aADCxConvertedValues[0], aADCyConvertedValues[0]);
//    	myprintf("Rate : %d\r\n", convrate);
    	convrate = 0;
 800ddfe:	4b38      	ldr	r3, [pc, #224]	; (800dee0 <main+0x1c0>)
 800de00:	2200      	movs	r2, #0
 800de02:	601a      	str	r2, [r3, #0]

    	if(rx_flagA == 1)
 800de04:	4b37      	ldr	r3, [pc, #220]	; (800dee4 <main+0x1c4>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d1e9      	bne.n	800dde0 <main+0xc0>
    	{
    		if(adcConversionComplete == 1)
 800de0c:	4b36      	ldr	r3, [pc, #216]	; (800dee8 <main+0x1c8>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d142      	bne.n	800de9a <main+0x17a>
			{
			  adcConversionComplete = 0;
 800de14:	4b34      	ldr	r3, [pc, #208]	; (800dee8 <main+0x1c8>)
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
			  for(lidxA=0;lidxA<200;lidxA++)
 800de1a:	2300      	movs	r3, #0
 800de1c:	603b      	str	r3, [r7, #0]
 800de1e:	e039      	b.n	800de94 <main+0x174>
			  {
				  //myprintf("A0:%d, A1:%d\n", signal_buf[lidxA], sawtooth_buf[lidxA]);
				  if(signal_buffer_in_queue == 2)
 800de20:	4b32      	ldr	r3, [pc, #200]	; (800deec <main+0x1cc>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b02      	cmp	r3, #2
 800de26:	d119      	bne.n	800de5c <main+0x13c>
				  {
					  //myprintf("A0:%d\n", signal_buf1[lidxA]);
					  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf1[lidxA], sawtooth_buf1[lidxA], kalman_buf1[lidxA], peaks_buff1[lidxA], midlineA); //GetMidLine(kalman_buf1, 200));
 800de28:	4a31      	ldr	r2, [pc, #196]	; (800def0 <main+0x1d0>)
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de30:	4a30      	ldr	r2, [pc, #192]	; (800def4 <main+0x1d4>)
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800de38:	4a2f      	ldr	r2, [pc, #188]	; (800def8 <main+0x1d8>)
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de40:	4a2e      	ldr	r2, [pc, #184]	; (800defc <main+0x1dc>)
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de48:	4a2d      	ldr	r2, [pc, #180]	; (800df00 <main+0x1e0>)
 800de4a:	6812      	ldr	r2, [r2, #0]
 800de4c:	9201      	str	r2, [sp, #4]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	4623      	mov	r3, r4
 800de52:	4602      	mov	r2, r0
 800de54:	482b      	ldr	r0, [pc, #172]	; (800df04 <main+0x1e4>)
 800de56:	f7ff fec5 	bl	800dbe4 <myprintf>
 800de5a:	e018      	b.n	800de8e <main+0x16e>
				  }
				  else
				  {
					  //myprintf("A0:%d\n", signal_buf2[lidxA]);
					  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf2[lidxA], sawtooth_buf2[lidxA], kalman_buf2[lidxA], peaks_buff2[lidxA], midlineA); // GetMidLine(kalman_buf2, 200));
 800de5c:	4a2a      	ldr	r2, [pc, #168]	; (800df08 <main+0x1e8>)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de64:	4a29      	ldr	r2, [pc, #164]	; (800df0c <main+0x1ec>)
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800de6c:	4a28      	ldr	r2, [pc, #160]	; (800df10 <main+0x1f0>)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de74:	4a27      	ldr	r2, [pc, #156]	; (800df14 <main+0x1f4>)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de7c:	4a20      	ldr	r2, [pc, #128]	; (800df00 <main+0x1e0>)
 800de7e:	6812      	ldr	r2, [r2, #0]
 800de80:	9201      	str	r2, [sp, #4]
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	4623      	mov	r3, r4
 800de86:	4602      	mov	r2, r0
 800de88:	481e      	ldr	r0, [pc, #120]	; (800df04 <main+0x1e4>)
 800de8a:	f7ff feab 	bl	800dbe4 <myprintf>
			  for(lidxA=0;lidxA<200;lidxA++)
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	3301      	adds	r3, #1
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2bc7      	cmp	r3, #199	; 0xc7
 800de98:	ddc2      	ble.n	800de20 <main+0x100>
				  }
			  }
			}
			HAL_Delay(2500);
 800de9a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800de9e:	f7f2 fda5 	bl	80009ec <HAL_Delay>
			gidxB = 0; // Fresh Copy of ADC
 800dea2:	4b1d      	ldr	r3, [pc, #116]	; (800df18 <main+0x1f8>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]
			rx_flagA = 0;
 800dea8:	4b0e      	ldr	r3, [pc, #56]	; (800dee4 <main+0x1c4>)
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]
			rx_flagB = 0;
 800deae:	4b1b      	ldr	r3, [pc, #108]	; (800df1c <main+0x1fc>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]
    if(HAL_GetTick() > (aShot + 500))
 800deb4:	e794      	b.n	800dde0 <main+0xc0>
 800deb6:	bf00      	nop
 800deb8:	58024400 	.word	0x58024400
 800debc:	24000168 	.word	0x24000168
 800dec0:	240001b4 	.word	0x240001b4
 800dec4:	24000260 	.word	0x24000260
 800dec8:	240000a0 	.word	0x240000a0
 800decc:	24000340 	.word	0x24000340
 800ded0:	240002ac 	.word	0x240002ac
 800ded4:	0800fac4 	.word	0x0800fac4
 800ded8:	0800fad4 	.word	0x0800fad4
 800dedc:	24000358 	.word	0x24000358
 800dee0:	2400035c 	.word	0x2400035c
 800dee4:	2400034c 	.word	0x2400034c
 800dee8:	24000360 	.word	0x24000360
 800deec:	2400001c 	.word	0x2400001c
 800def0:	240009ac 	.word	0x240009ac
 800def4:	2400036c 	.word	0x2400036c
 800def8:	24000fec 	.word	0x24000fec
 800defc:	2400162c 	.word	0x2400162c
 800df00:	24001c94 	.word	0x24001c94
 800df04:	0800fae8 	.word	0x0800fae8
 800df08:	24000ccc 	.word	0x24000ccc
 800df0c:	2400068c 	.word	0x2400068c
 800df10:	2400130c 	.word	0x2400130c
 800df14:	2400194c 	.word	0x2400194c
 800df18:	24001c6c 	.word	0x24001c6c
 800df1c:	24000350 	.word	0x24000350

0800df20 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b09e      	sub	sp, #120	; 0x78
 800df24:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800df2c:	2004      	movs	r0, #4
 800df2e:	f7f8 fe6f 	bl	8006c10 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800df32:	2300      	movs	r3, #0
 800df34:	607b      	str	r3, [r7, #4]
 800df36:	4b37      	ldr	r3, [pc, #220]	; (800e014 <SystemClock_Config+0xf4>)
 800df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3a:	4a36      	ldr	r2, [pc, #216]	; (800e014 <SystemClock_Config+0xf4>)
 800df3c:	f023 0301 	bic.w	r3, r3, #1
 800df40:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df42:	4b34      	ldr	r3, [pc, #208]	; (800e014 <SystemClock_Config+0xf4>)
 800df44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	607b      	str	r3, [r7, #4]
 800df4c:	4b32      	ldr	r3, [pc, #200]	; (800e018 <SystemClock_Config+0xf8>)
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	4a31      	ldr	r2, [pc, #196]	; (800e018 <SystemClock_Config+0xf8>)
 800df52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df56:	6193      	str	r3, [r2, #24]
 800df58:	4b2f      	ldr	r3, [pc, #188]	; (800e018 <SystemClock_Config+0xf8>)
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800df64:	bf00      	nop
 800df66:	4b2c      	ldr	r3, [pc, #176]	; (800e018 <SystemClock_Config+0xf8>)
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df72:	d1f8      	bne.n	800df66 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800df74:	2301      	movs	r3, #1
 800df76:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800df78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800df7c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800df7e:	2300      	movs	r3, #0
 800df80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800df82:	2300      	movs	r3, #0
 800df84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800df86:	2302      	movs	r3, #2
 800df88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800df8a:	2302      	movs	r3, #2
 800df8c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 800df8e:	2304      	movs	r3, #4
 800df90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800df92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800df9c:	2302      	movs	r3, #2
 800df9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800dfa4:	2304      	movs	r3, #4
 800dfa6:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800dfac:	2304      	movs	r3, #4
 800dfae:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800dfb0:	f107 0308 	add.w	r3, r7, #8
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7f8 fe85 	bl	8006cc4 <HAL_RCC_OscConfig>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800dfc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <SystemClock_Config+0xac>
  {
    Error_Handler();
 800dfc8:	f000 fcf2 	bl	800e9b0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800dfcc:	233f      	movs	r3, #63	; 0x3f
 800dfce:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800dfd8:	2308      	movs	r3, #8
 800dfda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800dfdc:	2340      	movs	r3, #64	; 0x40
 800dfde:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800dfe0:	2340      	movs	r3, #64	; 0x40
 800dfe2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800dfe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800dfea:	2340      	movs	r3, #64	; 0x40
 800dfec:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800dfee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dff2:	2104      	movs	r1, #4
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f9 fabf 	bl	8007578 <HAL_RCC_ClockConfig>
 800dffa:	4603      	mov	r3, r0
 800dffc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800e000:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <SystemClock_Config+0xec>
  {
    Error_Handler();
 800e008:	f000 fcd2 	bl	800e9b0 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800e00c:	bf00      	nop
 800e00e:	3778      	adds	r7, #120	; 0x78
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	58000400 	.word	0x58000400
 800e018:	58024800 	.word	0x58024800

0800e01c <ADC_Config>:
  * @brief  ADC configuration
  * @param  None
  * @retval None
  */
static void ADC_Config(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08a      	sub	sp, #40	; 0x28
 800e020:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef   sConfig;
  ADC_MultiModeTypeDef     MultiModeInit;

  /* Configuration of ADC (master) init structure: ADC parameters and regular group */
  AdcHandle_master.Instance = ADCx;
 800e022:	4b5c      	ldr	r3, [pc, #368]	; (800e194 <ADC_Config+0x178>)
 800e024:	4a5c      	ldr	r2, [pc, #368]	; (800e198 <ADC_Config+0x17c>)
 800e026:	601a      	str	r2, [r3, #0]

  if (HAL_ADC_DeInit(&AdcHandle_master) != HAL_OK)
 800e028:	485a      	ldr	r0, [pc, #360]	; (800e194 <ADC_Config+0x178>)
 800e02a:	f7f3 f8e3 	bl	80011f4 <HAL_ADC_DeInit>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <ADC_Config+0x1c>
  {
    /* ADC initialization error */
    Error_Handler();
 800e034:	f000 fcbc 	bl	800e9b0 <Error_Handler>
  }
  AdcHandle_slave.Instance = ADCy;
 800e038:	4b58      	ldr	r3, [pc, #352]	; (800e19c <ADC_Config+0x180>)
 800e03a:	4a59      	ldr	r2, [pc, #356]	; (800e1a0 <ADC_Config+0x184>)
 800e03c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_DeInit(&AdcHandle_slave) != HAL_OK)
 800e03e:	4857      	ldr	r0, [pc, #348]	; (800e19c <ADC_Config+0x180>)
 800e040:	f7f3 f8d8 	bl	80011f4 <HAL_ADC_DeInit>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <ADC_Config+0x32>
  {
    /* ADC initialization error */
    Error_Handler();
 800e04a:	f000 fcb1 	bl	800e9b0 <Error_Handler>
}

  AdcHandle_master.Init.ClockPrescaler           = ADC_CLOCK_ASYNC_DIV2;            /* Asynchronous clock mode, input ADC clock divided by 2*/
 800e04e:	4b51      	ldr	r3, [pc, #324]	; (800e194 <ADC_Config+0x178>)
 800e050:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e054:	605a      	str	r2, [r3, #4]
  AdcHandle_master.Init.Resolution               = ADC_RESOLUTION_16B;              /* 16-bit resolution for converted data */
 800e056:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <ADC_Config+0x178>)
 800e058:	2200      	movs	r2, #0
 800e05a:	609a      	str	r2, [r3, #8]
  AdcHandle_master.Init.ScanConvMode             = DISABLE;                         /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 800e05c:	4b4d      	ldr	r3, [pc, #308]	; (800e194 <ADC_Config+0x178>)
 800e05e:	2200      	movs	r2, #0
 800e060:	60da      	str	r2, [r3, #12]
  AdcHandle_master.Init.EOCSelection             = ADC_EOC_SINGLE_CONV;             /* EOC flag picked-up to indicate conversion end */
 800e062:	4b4c      	ldr	r3, [pc, #304]	; (800e194 <ADC_Config+0x178>)
 800e064:	2204      	movs	r2, #4
 800e066:	611a      	str	r2, [r3, #16]
  AdcHandle_master.Init.LowPowerAutoWait         = DISABLE;                         /* Auto-delayed conversion feature disabled */
 800e068:	4b4a      	ldr	r3, [pc, #296]	; (800e194 <ADC_Config+0x178>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	751a      	strb	r2, [r3, #20]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ContinuousConvMode       = DISABLE;                         /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 800e06e:	4b49      	ldr	r3, [pc, #292]	; (800e194 <ADC_Config+0x178>)
 800e070:	2200      	movs	r2, #0
 800e072:	755a      	strb	r2, [r3, #21]
#else
  AdcHandle_master.Init.ContinuousConvMode       = ENABLE;                          /* Continuous mode to have maximum conversion speed (no delay between conversions) */
#endif
  AdcHandle_master.Init.NbrOfConversion          = 1;                               /* Parameter discarded because sequencer is disabled */
 800e074:	4b47      	ldr	r3, [pc, #284]	; (800e194 <ADC_Config+0x178>)
 800e076:	2201      	movs	r2, #1
 800e078:	619a      	str	r2, [r3, #24]
  AdcHandle_master.Init.DiscontinuousConvMode    = DISABLE;                         /* Parameter discarded because sequencer is disabled */
 800e07a:	4b46      	ldr	r3, [pc, #280]	; (800e194 <ADC_Config+0x178>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	771a      	strb	r2, [r3, #28]
  AdcHandle_master.Init.NbrOfDiscConversion      = 1;                               /* Parameter discarded because sequencer is disabled */
 800e080:	4b44      	ldr	r3, [pc, #272]	; (800e194 <ADC_Config+0x178>)
 800e082:	2201      	movs	r2, #1
 800e084:	621a      	str	r2, [r3, #32]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ExternalTrigConv         = ADC_EXTERNALTRIG_T3_TRGO;        /* Timer 3 external event triggering the conversion */
 800e086:	4b43      	ldr	r3, [pc, #268]	; (800e194 <ADC_Config+0x178>)
 800e088:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800e08c:	625a      	str	r2, [r3, #36]	; 0x24
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e08e:	4b41      	ldr	r3, [pc, #260]	; (800e194 <ADC_Config+0x178>)
 800e090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e094:	629a      	str	r2, [r3, #40]	; 0x28
#else
  AdcHandle_master.Init.ExternalTrigConv         = ADC_SOFTWARE_START;              /* Software start to trigger the 1st conversion manually, without external event */
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_NONE;   /* Parameter discarded because trigger of conversion by software start (no external event) */
#endif
  AdcHandle_master.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR; /* DMA circular mode selected */
 800e096:	4b3f      	ldr	r3, [pc, #252]	; (800e194 <ADC_Config+0x178>)
 800e098:	2203      	movs	r2, #3
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c
  AdcHandle_master.Init.Overrun                  = ADC_OVR_DATA_OVERWRITTEN;        /* DR register is overwritten with the last conversion result in case of overrun */
 800e09c:	4b3d      	ldr	r3, [pc, #244]	; (800e194 <ADC_Config+0x178>)
 800e09e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e0a2:	631a      	str	r2, [r3, #48]	; 0x30
  AdcHandle_master.Init.OversamplingMode         = DISABLE;                         /* No oversampling */
 800e0a4:	4b3b      	ldr	r3, [pc, #236]	; (800e194 <ADC_Config+0x178>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (HAL_ADC_Init(&AdcHandle_master) != HAL_OK)
 800e0ac:	4839      	ldr	r0, [pc, #228]	; (800e194 <ADC_Config+0x178>)
 800e0ae:	f7f2 feff 	bl	8000eb0 <HAL_ADC_Init>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <ADC_Config+0xa0>
  {
    /* ADC initialization error */
    Error_Handler();
 800e0b8:	f000 fc7a 	bl	800e9b0 <Error_Handler>
  }

  /* Configuration of ADC (slave) init structure: ADC parameters and regular group */
  AdcHandle_slave.Instance = ADCy;
 800e0bc:	4b37      	ldr	r3, [pc, #220]	; (800e19c <ADC_Config+0x180>)
 800e0be:	4a38      	ldr	r2, [pc, #224]	; (800e1a0 <ADC_Config+0x184>)
 800e0c0:	601a      	str	r2, [r3, #0]

  /* Same configuration as ADC master, with continuous mode and external      */
  /* trigger disabled since ADC master is triggering the ADC slave            */
  /* conversions                                                              */
  AdcHandle_slave.Init = AdcHandle_master.Init;
 800e0c2:	4b36      	ldr	r3, [pc, #216]	; (800e19c <ADC_Config+0x180>)
 800e0c4:	4a33      	ldr	r2, [pc, #204]	; (800e194 <ADC_Config+0x178>)
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	1d11      	adds	r1, r2, #4
 800e0ca:	2248      	movs	r2, #72	; 0x48
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f001 f89d 	bl	800f20c <memcpy>
  AdcHandle_slave.Init.ContinuousConvMode    = DISABLE;
 800e0d2:	4b32      	ldr	r3, [pc, #200]	; (800e19c <ADC_Config+0x180>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	755a      	strb	r2, [r3, #21]
  AdcHandle_slave.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 800e0d8:	4b30      	ldr	r3, [pc, #192]	; (800e19c <ADC_Config+0x180>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_ADC_Init(&AdcHandle_slave) != HAL_OK)
 800e0de:	482f      	ldr	r0, [pc, #188]	; (800e19c <ADC_Config+0x180>)
 800e0e0:	f7f2 fee6 	bl	8000eb0 <HAL_ADC_Init>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <ADC_Config+0xd2>
  {
    /* ADC initialization error */
    Error_Handler();
 800e0ea:	f000 fc61 	bl	800e9b0 <Error_Handler>
  /* Configuration of channel on ADC (master) regular group on sequencer rank 1 */
  /* Note: Considering IT occurring after each number of                      */
  /*       "ADCCONVERTEDVALUES_BUFFER_SIZE" ADC conversions (IT by DMA end    */
  /*       of transfer), select sampling time and ADC clock with sufficient   */
  /*       duration to not create an overhead situation in IRQHandler.        */
  sConfig.Channel      = ADCx_CHANNELa;                /* Sampled channel number */
 800e0ee:	4b2d      	ldr	r3, [pc, #180]	; (800e1a4 <ADC_Config+0x188>)
 800e0f0:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;          /* Rank of sampled channel number ADCx_CHANNEL */
 800e0f2:	2306      	movs	r3, #6
 800e0f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;    /* Minimum sampling time */
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;            /* Single-ended input channel */
 800e0fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e0fe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;             /* No offset subtraction */
 800e100:	2304      	movs	r3, #4
 800e102:	61fb      	str	r3, [r7, #28]
  sConfig.Offset = 0;                                 /* Parameter discarded because offset correction is disabled */
 800e104:	2300      	movs	r3, #0
 800e106:	623b      	str	r3, [r7, #32]

  if (HAL_ADC_ConfigChannel(&AdcHandle_master, &sConfig) != HAL_OK)
 800e108:	f107 030c 	add.w	r3, r7, #12
 800e10c:	4619      	mov	r1, r3
 800e10e:	4821      	ldr	r0, [pc, #132]	; (800e194 <ADC_Config+0x178>)
 800e110:	f7f3 fc34 	bl	800197c <HAL_ADC_ConfigChannel>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <ADC_Config+0x102>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800e11a:	f000 fc49 	bl	800e9b0 <Error_Handler>
  }

  /* Configuration of channel on ADC (slave) regular group on sequencer rank 1 */
  /* Same channel as ADCx for dual mode interleaved: both ADC are converting   */
  /* the same channel.                                                         */
  sConfig.Channel = ADCy_CHANNELa;
 800e11e:	4b22      	ldr	r3, [pc, #136]	; (800e1a8 <ADC_Config+0x18c>)
 800e120:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&AdcHandle_slave, &sConfig) != HAL_OK)
 800e122:	f107 030c 	add.w	r3, r7, #12
 800e126:	4619      	mov	r1, r3
 800e128:	481c      	ldr	r0, [pc, #112]	; (800e19c <ADC_Config+0x180>)
 800e12a:	f7f3 fc27 	bl	800197c <HAL_ADC_ConfigChannel>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <ADC_Config+0x11c>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800e134:	f000 fc3c 	bl	800e9b0 <Error_Handler>
  }

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle_master, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800e138:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e13c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e140:	4814      	ldr	r0, [pc, #80]	; (800e194 <ADC_Config+0x178>)
 800e142:	f7f4 fb1f 	bl	8002784 <HAL_ADCEx_Calibration_Start>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <ADC_Config+0x134>
  {
    /* Calibration Error */
    Error_Handler();
 800e14c:	f000 fc30 	bl	800e9b0 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&AdcHandle_slave, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800e150:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e158:	4810      	ldr	r0, [pc, #64]	; (800e19c <ADC_Config+0x180>)
 800e15a:	f7f4 fb13 	bl	8002784 <HAL_ADCEx_Calibration_Start>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <ADC_Config+0x14c>
  {
    /* Calibration Error */
    Error_Handler();
 800e164:	f000 fc24 	bl	800e9b0 <Error_Handler>
  }

  /* Configuration of multimode */
  /* Multimode parameters settings and set ADCy (slave) under control of      */
  /* ADCx (master).                                                           */
  MultiModeInit.Mode = ADC_DUALMODE_INTERL;
 800e168:	2307      	movs	r3, #7
 800e16a:	603b      	str	r3, [r7, #0]
  MultiModeInit.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;  /* ADC and DMA configured in resolution 32 bits to match with both ADC master and slave resolution */
 800e16c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e170:	607b      	str	r3, [r7, #4]
  MultiModeInit.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800e172:	2300      	movs	r3, #0
 800e174:	60bb      	str	r3, [r7, #8]

  if (HAL_ADCEx_MultiModeConfigChannel(&AdcHandle_master, &MultiModeInit) != HAL_OK)
 800e176:	463b      	mov	r3, r7
 800e178:	4619      	mov	r1, r3
 800e17a:	4806      	ldr	r0, [pc, #24]	; (800e194 <ADC_Config+0x178>)
 800e17c:	f7f4 fc48 	bl	8002a10 <HAL_ADCEx_MultiModeConfigChannel>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d001      	beq.n	800e18a <ADC_Config+0x16e>
  {
    /* Multimode Configuration Error */
    Error_Handler();
 800e186:	f000 fc13 	bl	800e9b0 <Error_Handler>
  }

}
 800e18a:	bf00      	nop
 800e18c:	3728      	adds	r7, #40	; 0x28
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	240000a0 	.word	0x240000a0
 800e198:	40022000 	.word	0x40022000
 800e19c:	24000104 	.word	0x24000104
 800e1a0:	40022100 	.word	0x40022100
 800e1a4:	0c900008 	.word	0x0c900008
 800e1a8:	1d500080 	.word	0x1d500080

0800e1ac <TIM4_Config>:
  * @brief  TIM configuration
  * @param  None
  * @retval None
  */
static void TIM4_Config(void)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b092      	sub	sp, #72	; 0x48
 800e1b0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e1b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	605a      	str	r2, [r3, #4]
 800e1bc:	609a      	str	r2, [r3, #8]
 800e1be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800e1c0:	1d3b      	adds	r3, r7, #4
 800e1c2:	2220      	movs	r2, #32
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f000 ffec 	bl	800f1a4 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	643b      	str	r3, [r7, #64]	; 0x40
  /* - TIMER_FREQUENCY_RANGE_MIN: timer minimum frequency possible            */
  /*   (unit: Hz).                                                            */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800e1d4:	463a      	mov	r2, r7
 800e1d6:	1d3b      	adds	r3, r7, #4
 800e1d8:	4611      	mov	r1, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f9 fd58 	bl	8007c90 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <TIM4_Config+0x42>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800e1e6:	f7f9 fd27 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e1ea:	6478      	str	r0, [r7, #68]	; 0x44
 800e1ec:	e004      	b.n	800e1f8 <TIM4_Config+0x4c>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800e1ee:	f7f9 fd23 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800e1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1fa:	085b      	lsrs	r3, r3, #1
 800e1fc:	4a25      	ldr	r2, [pc, #148]	; (800e294 <TIM4_Config+0xe8>)
 800e1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e202:	0b9b      	lsrs	r3, r3, #14
 800e204:	3301      	adds	r3, #1
 800e206:	643b      	str	r3, [r7, #64]	; 0x40

  /* Set timer instance */
  Tim4Handle.Instance = TIM4;
 800e208:	4b23      	ldr	r3, [pc, #140]	; (800e298 <TIM4_Config+0xec>)
 800e20a:	4a24      	ldr	r2, [pc, #144]	; (800e29c <TIM4_Config+0xf0>)
 800e20c:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  Tim4Handle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER4_FREQUENCY)) - 1);
 800e20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e210:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800e214:	fb02 f303 	mul.w	r3, r2, r3
 800e218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e21e:	3b01      	subs	r3, #1
 800e220:	4a1d      	ldr	r2, [pc, #116]	; (800e298 <TIM4_Config+0xec>)
 800e222:	60d3      	str	r3, [r2, #12]
  Tim4Handle.Init.Prescaler         = (timer_prescaler - 1);
 800e224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e226:	3b01      	subs	r3, #1
 800e228:	4a1b      	ldr	r2, [pc, #108]	; (800e298 <TIM4_Config+0xec>)
 800e22a:	6053      	str	r3, [r2, #4]
  Tim4Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800e22c:	4b1a      	ldr	r3, [pc, #104]	; (800e298 <TIM4_Config+0xec>)
 800e22e:	2200      	movs	r2, #0
 800e230:	611a      	str	r2, [r3, #16]
  Tim4Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <TIM4_Config+0xec>)
 800e234:	2200      	movs	r2, #0
 800e236:	609a      	str	r2, [r3, #8]
  Tim4Handle.Init.RepetitionCounter = 0x0;
 800e238:	4b17      	ldr	r3, [pc, #92]	; (800e298 <TIM4_Config+0xec>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	615a      	str	r2, [r3, #20]
  Tim4Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e23e:	4b16      	ldr	r3, [pc, #88]	; (800e298 <TIM4_Config+0xec>)
 800e240:	2280      	movs	r2, #128	; 0x80
 800e242:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&Tim4Handle) != HAL_OK)
 800e244:	4814      	ldr	r0, [pc, #80]	; (800e298 <TIM4_Config+0xec>)
 800e246:	f7fc fa63 	bl	800a710 <HAL_TIM_Base_Init>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d001      	beq.n	800e254 <TIM4_Config+0xa8>
  {
    /* Timer initialization Error */
    Error_Handler();
 800e250:	f000 fbae 	bl	800e9b0 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e258:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&Tim4Handle, &sClockSourceConfig) != HAL_OK)
 800e25a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e25e:	4619      	mov	r1, r3
 800e260:	480d      	ldr	r0, [pc, #52]	; (800e298 <TIM4_Config+0xec>)
 800e262:	f7fc fcb5 	bl	800abd0 <HAL_TIM_ConfigClockSource>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d001      	beq.n	800e270 <TIM4_Config+0xc4>
	{
	  Error_Handler();
 800e26c:	f000 fba0 	bl	800e9b0 <Error_Handler>
	}

  /* Timer TRGO selection */
  //master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
  //master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e270:	2300      	movs	r3, #0
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_TIMEx_MasterConfigSynchronization(&Tim4Handle, &master_timer_config) != HAL_OK)
 800e274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e278:	4619      	mov	r1, r3
 800e27a:	4807      	ldr	r0, [pc, #28]	; (800e298 <TIM4_Config+0xec>)
 800e27c:	f7fc ff00 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <TIM4_Config+0xde>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800e286:	f000 fb93 	bl	800e9b0 <Error_Handler>
  }
}
 800e28a:	bf00      	nop
 800e28c:	3748      	adds	r7, #72	; 0x48
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	80010003 	.word	0x80010003
 800e298:	240001b4 	.word	0x240001b4
 800e29c:	40000800 	.word	0x40000800

0800e2a0 <TIM_Config>:
  * @brief  TIM configuration
  * @param  None
  * @retval None
  */
static void TIM_Config(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08e      	sub	sp, #56	; 0x38
 800e2a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800e2a6:	1d3b      	adds	r3, r7, #4
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f000 ff79 	bl	800f1a4 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	633b      	str	r3, [r7, #48]	; 0x30
  /* - TIMER_FREQUENCY_RANGE_MIN: timer minimum frequency possible            */
  /*   (unit: Hz).                                                            */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800e2ba:	463a      	mov	r2, r7
 800e2bc:	1d3b      	adds	r3, r7, #4
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7f9 fce5 	bl	8007c90 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <TIM_Config+0x34>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800e2cc:	f7f9 fcb4 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e2d0:	6378      	str	r0, [r7, #52]	; 0x34
 800e2d2:	e004      	b.n	800e2de <TIM_Config+0x3e>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800e2d4:	f7f9 fcb0 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800e2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e0:	085b      	lsrs	r3, r3, #1
 800e2e2:	4a1e      	ldr	r2, [pc, #120]	; (800e35c <TIM_Config+0xbc>)
 800e2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e8:	0b9b      	lsrs	r3, r3, #14
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set timer instance */
  TimHandle.Instance = TIMx;
 800e2ee:	4b1c      	ldr	r3, [pc, #112]	; (800e360 <TIM_Config+0xc0>)
 800e2f0:	4a1c      	ldr	r2, [pc, #112]	; (800e364 <TIM_Config+0xc4>)
 800e2f2:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  TimHandle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800e2fa:	fb02 f303 	mul.w	r3, r2, r3
 800e2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e300:	fbb2 f3f3 	udiv	r3, r2, r3
 800e304:	3b01      	subs	r3, #1
 800e306:	4a16      	ldr	r2, [pc, #88]	; (800e360 <TIM_Config+0xc0>)
 800e308:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler         = 40; //(timer_prescaler - 1);
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <TIM_Config+0xc0>)
 800e30c:	2228      	movs	r2, #40	; 0x28
 800e30e:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800e310:	4b13      	ldr	r3, [pc, #76]	; (800e360 <TIM_Config+0xc0>)
 800e312:	2200      	movs	r2, #0
 800e314:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800e316:	4b12      	ldr	r3, [pc, #72]	; (800e360 <TIM_Config+0xc0>)
 800e318:	2200      	movs	r2, #0
 800e31a:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0x0;
 800e31c:	4b10      	ldr	r3, [pc, #64]	; (800e360 <TIM_Config+0xc0>)
 800e31e:	2200      	movs	r2, #0
 800e320:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800e322:	480f      	ldr	r0, [pc, #60]	; (800e360 <TIM_Config+0xc0>)
 800e324:	f7fc f9f4 	bl	800a710 <HAL_TIM_Base_Init>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <TIM_Config+0x92>
  {
    /* Timer initialization Error */
    Error_Handler();
 800e32e:	f000 fb3f 	bl	800e9b0 <Error_Handler>
  }

  /* Timer TRGO selection */
  master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e332:	2320      	movs	r3, #32
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
  master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e336:	2300      	movs	r3, #0
 800e338:	62bb      	str	r3, [r7, #40]	; 0x28
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandle, &master_timer_config) != HAL_OK)
 800e33e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e342:	4619      	mov	r1, r3
 800e344:	4806      	ldr	r0, [pc, #24]	; (800e360 <TIM_Config+0xc0>)
 800e346:	f7fc fe9b 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <TIM_Config+0xb4>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800e350:	f000 fb2e 	bl	800e9b0 <Error_Handler>
  }

}
 800e354:	bf00      	nop
 800e356:	3738      	adds	r7, #56	; 0x38
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	80010003 	.word	0x80010003
 800e360:	24000168 	.word	0x24000168
 800e364:	40000400 	.word	0x40000400

0800e368 <WaveformVoltageGenerationForTest>:
  *         (this prevents the user from resorting to an external signal generator)
  * @param  None
  * @retval None
  */
static void WaveformVoltageGenerationForTest(void)
  {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b09a      	sub	sp, #104	; 0x68
 800e36c:	af02      	add	r7, sp, #8
  DAC_ChannelConfTypeDef sConfig;
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800e36e:	f107 0308 	add.w	r3, r7, #8
 800e372:	2220      	movs	r2, #32
 800e374:	2100      	movs	r1, #0
 800e376:	4618      	mov	r0, r3
 800e378:	f000 ff14 	bl	800f1a4 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800e37c:	2300      	movs	r3, #0
 800e37e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800e380:	2300      	movs	r3, #0
 800e382:	65bb      	str	r3, [r7, #88]	; 0x58
  /* - TIMER_FOR_WAVEFORM_TEST_FREQUENCY_RANGE_MIN: time base minimum         */
  /*   frequency possible (unit: Hz).                                         */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800e384:	1d3a      	adds	r2, r7, #4
 800e386:	f107 0308 	add.w	r3, r7, #8
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7f9 fc7f 	bl	8007c90 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d103      	bne.n	800e3a0 <WaveformVoltageGenerationForTest+0x38>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800e398:	f7f9 fc4e 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e39c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800e39e:	e004      	b.n	800e3aa <WaveformVoltageGenerationForTest+0x42>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800e3a0:	f7f9 fc4a 	bl	8007c38 <HAL_RCC_GetPCLK1Freq>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_FOR_WAVEFORM_TEST_PRESCALER_MAX_VALUE * TIMER_FOR_WAVEFORM_TEST_FREQUENCY_RANGE_MIN)) +1;
 800e3aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3ac:	085b      	lsrs	r3, r3, #1
 800e3ae:	4a3e      	ldr	r2, [pc, #248]	; (800e4a8 <WaveformVoltageGenerationForTest+0x140>)
 800e3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b4:	0b9b      	lsrs	r3, r3, #14
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Set timer instance */
  TimForWaveformTestHandle.Instance = TIMy;
 800e3ba:	4b3c      	ldr	r3, [pc, #240]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3bc:	4a3c      	ldr	r2, [pc, #240]	; (800e4b0 <WaveformVoltageGenerationForTest+0x148>)
 800e3be:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  TimForWaveformTestHandle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER_FOR_WAVEFORM_TEST_FREQUENCY)) - 1);
 800e3c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e3c6:	fb02 f303 	mul.w	r3, r2, r3
 800e3ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	4a36      	ldr	r2, [pc, #216]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3d4:	60d3      	str	r3, [r2, #12]
  TimForWaveformTestHandle.Init.Prescaler         = (timer_prescaler - 1);
 800e3d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	4a34      	ldr	r2, [pc, #208]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3dc:	6053      	str	r3, [r2, #4]
  TimForWaveformTestHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800e3de:	4b33      	ldr	r3, [pc, #204]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	611a      	str	r2, [r3, #16]
  TimForWaveformTestHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800e3e4:	4b31      	ldr	r3, [pc, #196]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	609a      	str	r2, [r3, #8]
  TimForWaveformTestHandle.Init.RepetitionCounter = 0x0;
 800e3ea:	4b30      	ldr	r3, [pc, #192]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&TimForWaveformTestHandle) != HAL_OK)
 800e3f0:	482e      	ldr	r0, [pc, #184]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e3f2:	f7fc f98d 	bl	800a710 <HAL_TIM_Base_Init>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <WaveformVoltageGenerationForTest+0x98>
  {
    /* Timer initialization Error */
    Error_Handler();
 800e3fc:	f000 fad8 	bl	800e9b0 <Error_Handler>
  }

  /* Timer TRGO selection */
  master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e400:	2320      	movs	r3, #32
 800e402:	62bb      	str	r3, [r7, #40]	; 0x28
  master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e404:	2300      	movs	r3, #0
 800e406:	62fb      	str	r3, [r7, #44]	; 0x2c
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e408:	2300      	movs	r3, #0
 800e40a:	633b      	str	r3, [r7, #48]	; 0x30

  if (HAL_TIMEx_MasterConfigSynchronization(&TimForWaveformTestHandle, &master_timer_config) != HAL_OK)
 800e40c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e410:	4619      	mov	r1, r3
 800e412:	4826      	ldr	r0, [pc, #152]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e414:	f7fc fe34 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <WaveformVoltageGenerationForTest+0xba>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800e41e:	f000 fac7 	bl	800e9b0 <Error_Handler>
  }


  /* Configuration of DACx peripheral */
  DacForWaveformTestHandle.Instance = DACx;
 800e422:	4b24      	ldr	r3, [pc, #144]	; (800e4b4 <WaveformVoltageGenerationForTest+0x14c>)
 800e424:	4a24      	ldr	r2, [pc, #144]	; (800e4b8 <WaveformVoltageGenerationForTest+0x150>)
 800e426:	601a      	str	r2, [r3, #0]

  /* DeInitialize the DAC peripheral */
  if (HAL_DAC_DeInit(&DacForWaveformTestHandle) != HAL_OK)
 800e428:	4822      	ldr	r0, [pc, #136]	; (800e4b4 <WaveformVoltageGenerationForTest+0x14c>)
 800e42a:	f7f4 fdaf 	bl	8002f8c <HAL_DAC_DeInit>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <WaveformVoltageGenerationForTest+0xd0>
  {
    /* Initialization Error */
    Error_Handler();
 800e434:	f000 fabc 	bl	800e9b0 <Error_Handler>
  }
  /* Initialize the DAC peripheral */
  if (HAL_DAC_Init(&DacForWaveformTestHandle) != HAL_OK)
 800e438:	481e      	ldr	r0, [pc, #120]	; (800e4b4 <WaveformVoltageGenerationForTest+0x14c>)
 800e43a:	f7f4 fd85 	bl	8002f48 <HAL_DAC_Init>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <WaveformVoltageGenerationForTest+0xe0>
  {
    /* Initialization Error */
    Error_Handler();
 800e444:	f000 fab4 	bl	800e9b0 <Error_Handler>
}
  /* Configuration of DAC channel */
  sConfig.DAC_Trigger = DACx_TRIGGER_Tx_TRGO;
 800e448:	2316      	movs	r3, #22
 800e44a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800e44c:	2300      	movs	r3, #0
 800e44e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800e450:	2300      	movs	r3, #0
 800e452:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800e454:	2301      	movs	r3, #1
 800e456:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800e458:	2300      	movs	r3, #0
 800e45a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_DAC_ConfigChannel(&DacForWaveformTestHandle, &sConfig, DACx_CHANNELa) != HAL_OK)
 800e45c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e460:	2200      	movs	r2, #0
 800e462:	4619      	mov	r1, r3
 800e464:	4813      	ldr	r0, [pc, #76]	; (800e4b4 <WaveformVoltageGenerationForTest+0x14c>)
 800e466:	f7f4 fefd 	bl	8003264 <HAL_DAC_ConfigChannel>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <WaveformVoltageGenerationForTest+0x10c>
  {
    /* Channel configuration error */
    Error_Handler();
 800e470:	f000 fa9e 	bl	800e9b0 <Error_Handler>


  /*## Enable peripherals ####################################################*/

  /* Timer counter enable */
  if (HAL_TIM_Base_Start(&TimForWaveformTestHandle) != HAL_OK)
 800e474:	480d      	ldr	r0, [pc, #52]	; (800e4ac <WaveformVoltageGenerationForTest+0x144>)
 800e476:	f7fc f9a3 	bl	800a7c0 <HAL_TIM_Base_Start>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <WaveformVoltageGenerationForTest+0x11c>
  {
    /* Counter Enable Error */
    Error_Handler();
 800e480:	f000 fa96 	bl	800e9b0 <Error_Handler>
  }

  /* Enable DAC Channel1 and associated DMA */
  if (HAL_DAC_Start_DMA(&DacForWaveformTestHandle, DACx_CHANNELa, (uint32_t *)Waveform_8bits, WAVEFORM_TEST_SAMPLES_NUMBER, DAC_ALIGN_8B_R) != HAL_OK)
 800e484:	2308      	movs	r3, #8
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	2305      	movs	r3, #5
 800e48a:	4a0c      	ldr	r2, [pc, #48]	; (800e4bc <WaveformVoltageGenerationForTest+0x154>)
 800e48c:	2100      	movs	r1, #0
 800e48e:	4809      	ldr	r0, [pc, #36]	; (800e4b4 <WaveformVoltageGenerationForTest+0x14c>)
 800e490:	f7f4 fd9a 	bl	8002fc8 <HAL_DAC_Start_DMA>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <WaveformVoltageGenerationForTest+0x136>
  {
    /* Start DMA Error */
    Error_Handler();
 800e49a:	f000 fa89 	bl	800e9b0 <Error_Handler>
  }

}
 800e49e:	bf00      	nop
 800e4a0:	3760      	adds	r7, #96	; 0x60
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	80010003 	.word	0x80010003
 800e4ac:	24000214 	.word	0x24000214
 800e4b0:	40001000 	.word	0x40001000
 800e4b4:	24000200 	.word	0x24000200
 800e4b8:	40007400 	.word	0x40007400
 800e4bc:	0800fb44 	.word	0x0800fb44

0800e4c0 <HAL_ADC_ConvCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b088      	sub	sp, #32
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	4b97      	ldr	r3, [pc, #604]	; (800e728 <HAL_ADC_ConvCpltCallback+0x268>)
 800e4ca:	61bb      	str	r3, [r7, #24]
 800e4cc:	2308      	movs	r3, #8
 800e4ce:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	dd1d      	ble.n	800e512 <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	f003 021f 	and.w	r2, r3, #31
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	4413      	add	r3, r2
 800e4e0:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e4e6:	f3bf 8f4f 	dsb	sy
}
 800e4ea:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e4ec:	4a8f      	ldr	r2, [pc, #572]	; (800e72c <HAL_ADC_ConvCpltCallback+0x26c>)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	3320      	adds	r3, #32
 800e4f8:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	3b20      	subs	r3, #32
 800e4fe:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dcf2      	bgt.n	800e4ec <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 800e506:	f3bf 8f4f 	dsb	sy
}
 800e50a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e50c:	f3bf 8f6f 	isb	sy
}
 800e510:	bf00      	nop
}
 800e512:	bf00      	nop

   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[ADCCONVERTEDVALUES_BUFFER_SIZE/2], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if defined(ADC_TRIGGER_FROM_TIMER)
  uint32_t tmp_index = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	61fb      	str	r3, [r7, #28]

  convrate++;
 800e518:	4b85      	ldr	r3, [pc, #532]	; (800e730 <HAL_ADC_ConvCpltCallback+0x270>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3301      	adds	r3, #1
 800e51e:	4a84      	ldr	r2, [pc, #528]	; (800e730 <HAL_ADC_ConvCpltCallback+0x270>)
 800e520:	6013      	str	r3, [r2, #0]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800e522:	2302      	movs	r3, #2
 800e524:	61fb      	str	r3, [r7, #28]
 800e526:	e015      	b.n	800e554 <HAL_ADC_ConvCpltCallback+0x94>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800e528:	4a82      	ldr	r2, [pc, #520]	; (800e734 <HAL_ADC_ConvCpltCallback+0x274>)
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e530:	b299      	uxth	r1, r3
 800e532:	4a81      	ldr	r2, [pc, #516]	; (800e738 <HAL_ADC_ConvCpltCallback+0x278>)
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800e53a:	4a7e      	ldr	r2, [pc, #504]	; (800e734 <HAL_ADC_ConvCpltCallback+0x274>)
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e542:	0c1b      	lsrs	r3, r3, #16
 800e544:	b299      	uxth	r1, r3
 800e546:	4a7d      	ldr	r2, [pc, #500]	; (800e73c <HAL_ADC_ConvCpltCallback+0x27c>)
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	3301      	adds	r3, #1
 800e552:	61fb      	str	r3, [r7, #28]
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	2b03      	cmp	r3, #3
 800e558:	d9e6      	bls.n	800e528 <HAL_ADC_ConvCpltCallback+0x68>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  adcConversionComplete = 1;
 800e55a:	4b79      	ldr	r3, [pc, #484]	; (800e740 <HAL_ADC_ConvCpltCallback+0x280>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	601a      	str	r2, [r3, #0]

  for (tmp_index = 0; tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800e560:	2300      	movs	r3, #0
 800e562:	61fb      	str	r3, [r7, #28]
 800e564:	e198      	b.n	800e898 <HAL_ADC_ConvCpltCallback+0x3d8>
  {
	  ad1 = aADCxConvertedValues[tmp_index];
 800e566:	4a74      	ldr	r2, [pc, #464]	; (800e738 <HAL_ADC_ConvCpltCallback+0x278>)
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	461a      	mov	r2, r3
 800e572:	4b74      	ldr	r3, [pc, #464]	; (800e744 <HAL_ADC_ConvCpltCallback+0x284>)
 800e574:	601a      	str	r2, [r3, #0]
	  ad2 = aADCyConvertedValues[tmp_index];
 800e576:	4a71      	ldr	r2, [pc, #452]	; (800e73c <HAL_ADC_ConvCpltCallback+0x27c>)
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	461a      	mov	r2, r3
 800e582:	4b71      	ldr	r3, [pc, #452]	; (800e748 <HAL_ADC_ConvCpltCallback+0x288>)
 800e584:	601a      	str	r2, [r3, #0]

	  	if(rx_flagA == 0)
 800e586:	4b71      	ldr	r3, [pc, #452]	; (800e74c <HAL_ADC_ConvCpltCallback+0x28c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f040 8181 	bne.w	800e892 <HAL_ADC_ConvCpltCallback+0x3d2>
	  	{
	  		if(gidxB == 200)
 800e590:	4b6f      	ldr	r3, [pc, #444]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2bc8      	cmp	r3, #200	; 0xc8
 800e596:	d10d      	bne.n	800e5b4 <HAL_ADC_ConvCpltCallback+0xf4>
	  		{
	  			if(signal_buffer_in_queue == 1)
 800e598:	4b6e      	ldr	r3, [pc, #440]	; (800e754 <HAL_ADC_ConvCpltCallback+0x294>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d103      	bne.n	800e5a8 <HAL_ADC_ConvCpltCallback+0xe8>
	  			{
	  				signal_buffer_in_queue = 2;
 800e5a0:	4b6c      	ldr	r3, [pc, #432]	; (800e754 <HAL_ADC_ConvCpltCallback+0x294>)
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	e002      	b.n	800e5ae <HAL_ADC_ConvCpltCallback+0xee>
	  			}
	  			else
	  			{
	  				signal_buffer_in_queue = 1;
 800e5a8:	4b6a      	ldr	r3, [pc, #424]	; (800e754 <HAL_ADC_ConvCpltCallback+0x294>)
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	601a      	str	r2, [r3, #0]
	  			}
	  			gidxB = 0;
 800e5ae:	4b68      	ldr	r3, [pc, #416]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
	  		}

	  		if(gidxB > 5)
 800e5b4:	4b66      	ldr	r3, [pc, #408]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b05      	cmp	r3, #5
 800e5ba:	dd1f      	ble.n	800e5fc <HAL_ADC_ConvCpltCallback+0x13c>
	  		{
	  			if(gmaxA < kalman_buf1[gidxB])
 800e5bc:	4b64      	ldr	r3, [pc, #400]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a65      	ldr	r2, [pc, #404]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e5c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e5c6:	4b65      	ldr	r3, [pc, #404]	; (800e75c <HAL_ADC_ConvCpltCallback+0x29c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	dd06      	ble.n	800e5dc <HAL_ADC_ConvCpltCallback+0x11c>
	  			{
	  				gmaxA = kalman_buf1[gidxB];
 800e5ce:	4b60      	ldr	r3, [pc, #384]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a61      	ldr	r2, [pc, #388]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d8:	4a60      	ldr	r2, [pc, #384]	; (800e75c <HAL_ADC_ConvCpltCallback+0x29c>)
 800e5da:	6013      	str	r3, [r2, #0]
	  			}

	  			if(gminA > kalman_buf1[gidxB])
 800e5dc:	4b5c      	ldr	r3, [pc, #368]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a5d      	ldr	r2, [pc, #372]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e5e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e5e6:	4b5e      	ldr	r3, [pc, #376]	; (800e760 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	da06      	bge.n	800e5fc <HAL_ADC_ConvCpltCallback+0x13c>
	  			{
	  				gminA = kalman_buf1[gidxB];
 800e5ee:	4b58      	ldr	r3, [pc, #352]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a59      	ldr	r2, [pc, #356]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5f8:	4a59      	ldr	r2, [pc, #356]	; (800e760 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800e5fa:	6013      	str	r3, [r2, #0]
	  			}
	  		}

	  		if(gidxB == 195)
 800e5fc:	4b54      	ldr	r3, [pc, #336]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2bc3      	cmp	r3, #195	; 0xc3
 800e602:	d10e      	bne.n	800e622 <HAL_ADC_ConvCpltCallback+0x162>
	  		{
	  			midlineA = (((gmaxA - gminA)/2) + gminA);
 800e604:	4b55      	ldr	r3, [pc, #340]	; (800e75c <HAL_ADC_ConvCpltCallback+0x29c>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	4b55      	ldr	r3, [pc, #340]	; (800e760 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	da00      	bge.n	800e614 <HAL_ADC_ConvCpltCallback+0x154>
 800e612:	3301      	adds	r3, #1
 800e614:	105b      	asrs	r3, r3, #1
 800e616:	461a      	mov	r2, r3
 800e618:	4b51      	ldr	r3, [pc, #324]	; (800e760 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4413      	add	r3, r2
 800e61e:	4a51      	ldr	r2, [pc, #324]	; (800e764 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800e620:	6013      	str	r3, [r2, #0]
	  		}

	  		if(signal_buffer_in_queue == 1)
 800e622:	4b4c      	ldr	r3, [pc, #304]	; (800e754 <HAL_ADC_ConvCpltCallback+0x294>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b01      	cmp	r3, #1
 800e628:	f040 80a8 	bne.w	800e77c <HAL_ADC_ConvCpltCallback+0x2bc>
	  		{
	  			signal_buf1[gidxB] = ad1;
 800e62c:	4b45      	ldr	r3, [pc, #276]	; (800e744 <HAL_ADC_ConvCpltCallback+0x284>)
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	4b47      	ldr	r3, [pc, #284]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4611      	mov	r1, r2
 800e636:	4a4c      	ldr	r2, [pc, #304]	; (800e768 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800e638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			sawtooth_buf1[gidxB] = ad2;
 800e63c:	4b42      	ldr	r3, [pc, #264]	; (800e748 <HAL_ADC_ConvCpltCallback+0x288>)
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	4b43      	ldr	r3, [pc, #268]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4611      	mov	r1, r2
 800e646:	4a49      	ldr	r2, [pc, #292]	; (800e76c <HAL_ADC_ConvCpltCallback+0x2ac>)
 800e648:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			kalman_buf1[gidxB] = kalman_filter(signal_buf1[gidxB]);
 800e64c:	4b40      	ldr	r3, [pc, #256]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a45      	ldr	r2, [pc, #276]	; (800e768 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800e652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff f9f8 	bl	800da4c <kalman_filter>
 800e65c:	4602      	mov	r2, r0
 800e65e:	4b3c      	ldr	r3, [pc, #240]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4611      	mov	r1, r2
 800e664:	4a3c      	ldr	r2, [pc, #240]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  			if(gidxB==0)
 800e66a:	4b39      	ldr	r3, [pc, #228]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d107      	bne.n	800e682 <HAL_ADC_ConvCpltCallback+0x1c2>
	  			{
	  				gminA = kalman_buf1[0];
 800e672:	4b39      	ldr	r3, [pc, #228]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a3a      	ldr	r2, [pc, #232]	; (800e760 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800e678:	6013      	str	r3, [r2, #0]
	  				gmaxA = kalman_buf1[0];
 800e67a:	4b37      	ldr	r3, [pc, #220]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a37      	ldr	r2, [pc, #220]	; (800e75c <HAL_ADC_ConvCpltCallback+0x29c>)
 800e680:	6013      	str	r3, [r2, #0]
	  			}

	  			if((gidxB >= 5) && (gidxB < 190))
 800e682:	4b33      	ldr	r3, [pc, #204]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b04      	cmp	r3, #4
 800e688:	dd46      	ble.n	800e718 <HAL_ADC_ConvCpltCallback+0x258>
 800e68a:	4b31      	ldr	r3, [pc, #196]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2bbd      	cmp	r3, #189	; 0xbd
 800e690:	dc42      	bgt.n	800e718 <HAL_ADC_ConvCpltCallback+0x258>
	  			{

	  				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 800e692:	4b2f      	ldr	r3, [pc, #188]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3b03      	subs	r3, #3
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4a2f      	ldr	r2, [pc, #188]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e69c:	4413      	add	r3, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7ff f9b8 	bl	800da14 <FindPeak>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d02d      	beq.n	800e706 <HAL_ADC_ConvCpltCallback+0x246>
 800e6aa:	4b29      	ldr	r3, [pc, #164]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3b03      	subs	r3, #3
 800e6b0:	4a29      	ldr	r2, [pc, #164]	; (800e758 <HAL_ADC_ConvCpltCallback+0x298>)
 800e6b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e6b6:	4b2b      	ldr	r3, [pc, #172]	; (800e764 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	dd23      	ble.n	800e706 <HAL_ADC_ConvCpltCallback+0x246>
	  				{
	  					if(dripOff == 0)
 800e6be:	4b2c      	ldr	r3, [pc, #176]	; (800e770 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d117      	bne.n	800e6f6 <HAL_ADC_ConvCpltCallback+0x236>
	  					{
	  						peaks_buff1[gidxB] = 2000;
 800e6c6:	4b22      	ldr	r3, [pc, #136]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a2a      	ldr	r2, [pc, #168]	; (800e774 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800e6cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e6d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  						dripOff = 20;
 800e6d4:	4b26      	ldr	r3, [pc, #152]	; (800e770 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800e6d6:	2214      	movs	r2, #20
 800e6d8:	601a      	str	r2, [r3, #0]
	  						relative_sawtooth_voltage = (3300000 / 4096) * sawtooth_buf1[gidxB-3]; // sawtooth_buf1[gidxB-3]; //
 800e6da:	4b1d      	ldr	r3, [pc, #116]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3b03      	subs	r3, #3
 800e6e0:	4a22      	ldr	r2, [pc, #136]	; (800e76c <HAL_ADC_ConvCpltCallback+0x2ac>)
 800e6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6e6:	f240 3225 	movw	r2, #805	; 0x325
 800e6ea:	fb02 f303 	mul.w	r3, r2, r3
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	4b21      	ldr	r3, [pc, #132]	; (800e778 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800e6f2:	601a      	str	r2, [r3, #0]
	  					if(dripOff == 0)
 800e6f4:	e00f      	b.n	800e716 <HAL_ADC_ConvCpltCallback+0x256>
	  					}
	  					else
	  					{
	  						peaks_buff1[gidxB] = 500;
 800e6f6:	4b16      	ldr	r3, [pc, #88]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a1e      	ldr	r2, [pc, #120]	; (800e774 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800e6fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  					if(dripOff == 0)
 800e704:	e007      	b.n	800e716 <HAL_ADC_ConvCpltCallback+0x256>
	  					}
	  				}
	  				else
	  				{
	  					peaks_buff1[gidxB] = 500;
 800e706:	4b12      	ldr	r3, [pc, #72]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a1a      	ldr	r2, [pc, #104]	; (800e774 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800e70c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 800e714:	e0af      	b.n	800e876 <HAL_ADC_ConvCpltCallback+0x3b6>
 800e716:	e0ae      	b.n	800e876 <HAL_ADC_ConvCpltCallback+0x3b6>
	  				}
	  			}
	  			else
	  			{
	  				peaks_buff1[gidxB] = 500;
 800e718:	4b0d      	ldr	r3, [pc, #52]	; (800e750 <HAL_ADC_ConvCpltCallback+0x290>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a15      	ldr	r2, [pc, #84]	; (800e774 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800e71e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e726:	e0a6      	b.n	800e876 <HAL_ADC_ConvCpltCallback+0x3b6>
 800e728:	24000268 	.word	0x24000268
 800e72c:	e000ed00 	.word	0xe000ed00
 800e730:	2400035c 	.word	0x2400035c
 800e734:	24000260 	.word	0x24000260
 800e738:	24000280 	.word	0x24000280
 800e73c:	240002a0 	.word	0x240002a0
 800e740:	24000360 	.word	0x24000360
 800e744:	24000364 	.word	0x24000364
 800e748:	24000368 	.word	0x24000368
 800e74c:	2400034c 	.word	0x2400034c
 800e750:	24001c6c 	.word	0x24001c6c
 800e754:	2400001c 	.word	0x2400001c
 800e758:	24000fec 	.word	0x24000fec
 800e75c:	24001c8c 	.word	0x24001c8c
 800e760:	24001c90 	.word	0x24001c90
 800e764:	24001c94 	.word	0x24001c94
 800e768:	240009ac 	.word	0x240009ac
 800e76c:	2400036c 	.word	0x2400036c
 800e770:	24001c98 	.word	0x24001c98
 800e774:	2400162c 	.word	0x2400162c
 800e778:	24001c70 	.word	0x24001c70
	  			}
	  		}
	  		else
	  		{
	  			signal_buf2[gidxB] = ad1;
 800e77c:	4b4c      	ldr	r3, [pc, #304]	; (800e8b0 <HAL_ADC_ConvCpltCallback+0x3f0>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	4b4c      	ldr	r3, [pc, #304]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4611      	mov	r1, r2
 800e786:	4a4c      	ldr	r2, [pc, #304]	; (800e8b8 <HAL_ADC_ConvCpltCallback+0x3f8>)
 800e788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			sawtooth_buf2[gidxB] = ad2;
 800e78c:	4b4b      	ldr	r3, [pc, #300]	; (800e8bc <HAL_ADC_ConvCpltCallback+0x3fc>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	4b48      	ldr	r3, [pc, #288]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4611      	mov	r1, r2
 800e796:	4a4a      	ldr	r2, [pc, #296]	; (800e8c0 <HAL_ADC_ConvCpltCallback+0x400>)
 800e798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			kalman_buf2[gidxB] = kalman_filter(signal_buf2[gidxB]);
 800e79c:	4b45      	ldr	r3, [pc, #276]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a45      	ldr	r2, [pc, #276]	; (800e8b8 <HAL_ADC_ConvCpltCallback+0x3f8>)
 800e7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff f950 	bl	800da4c <kalman_filter>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	4b41      	ldr	r3, [pc, #260]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4a43      	ldr	r2, [pc, #268]	; (800e8c4 <HAL_ADC_ConvCpltCallback+0x404>)
 800e7b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  			if(gidxB==0)
 800e7ba:	4b3e      	ldr	r3, [pc, #248]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d107      	bne.n	800e7d2 <HAL_ADC_ConvCpltCallback+0x312>
	  			{
	  				gminA = kalman_buf2[0];
 800e7c2:	4b40      	ldr	r3, [pc, #256]	; (800e8c4 <HAL_ADC_ConvCpltCallback+0x404>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a40      	ldr	r2, [pc, #256]	; (800e8c8 <HAL_ADC_ConvCpltCallback+0x408>)
 800e7c8:	6013      	str	r3, [r2, #0]
	  				gmaxA = kalman_buf2[0];
 800e7ca:	4b3e      	ldr	r3, [pc, #248]	; (800e8c4 <HAL_ADC_ConvCpltCallback+0x404>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a3f      	ldr	r2, [pc, #252]	; (800e8cc <HAL_ADC_ConvCpltCallback+0x40c>)
 800e7d0:	6013      	str	r3, [r2, #0]
	  			}

	  			if((gidxB >= 5) && (gidxB < 190))
 800e7d2:	4b38      	ldr	r3, [pc, #224]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b04      	cmp	r3, #4
 800e7d8:	dd46      	ble.n	800e868 <HAL_ADC_ConvCpltCallback+0x3a8>
 800e7da:	4b36      	ldr	r3, [pc, #216]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2bbd      	cmp	r3, #189	; 0xbd
 800e7e0:	dc42      	bgt.n	800e868 <HAL_ADC_ConvCpltCallback+0x3a8>
	  			{
	  				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 800e7e2:	4b34      	ldr	r3, [pc, #208]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3b03      	subs	r3, #3
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4a36      	ldr	r2, [pc, #216]	; (800e8c4 <HAL_ADC_ConvCpltCallback+0x404>)
 800e7ec:	4413      	add	r3, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff f910 	bl	800da14 <FindPeak>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d02d      	beq.n	800e856 <HAL_ADC_ConvCpltCallback+0x396>
 800e7fa:	4b2e      	ldr	r3, [pc, #184]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3b03      	subs	r3, #3
 800e800:	4a30      	ldr	r2, [pc, #192]	; (800e8c4 <HAL_ADC_ConvCpltCallback+0x404>)
 800e802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e806:	4b32      	ldr	r3, [pc, #200]	; (800e8d0 <HAL_ADC_ConvCpltCallback+0x410>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	dd23      	ble.n	800e856 <HAL_ADC_ConvCpltCallback+0x396>
	  				{
	  					if(dripOff == 0)
 800e80e:	4b31      	ldr	r3, [pc, #196]	; (800e8d4 <HAL_ADC_ConvCpltCallback+0x414>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d117      	bne.n	800e846 <HAL_ADC_ConvCpltCallback+0x386>
	  					{
	  						peaks_buff2[gidxB] = 2000;
 800e816:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a2f      	ldr	r2, [pc, #188]	; (800e8d8 <HAL_ADC_ConvCpltCallback+0x418>)
 800e81c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  						relative_sawtooth_voltage = (3300000 / 4096) * sawtooth_buf2[gidxB-3]; // sawtooth_buf2[gidxB-3]; //
 800e824:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3b03      	subs	r3, #3
 800e82a:	4a25      	ldr	r2, [pc, #148]	; (800e8c0 <HAL_ADC_ConvCpltCallback+0x400>)
 800e82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e830:	f240 3225 	movw	r2, #805	; 0x325
 800e834:	fb02 f303 	mul.w	r3, r2, r3
 800e838:	461a      	mov	r2, r3
 800e83a:	4b28      	ldr	r3, [pc, #160]	; (800e8dc <HAL_ADC_ConvCpltCallback+0x41c>)
 800e83c:	601a      	str	r2, [r3, #0]
	  						dripOff = 20;
 800e83e:	4b25      	ldr	r3, [pc, #148]	; (800e8d4 <HAL_ADC_ConvCpltCallback+0x414>)
 800e840:	2214      	movs	r2, #20
 800e842:	601a      	str	r2, [r3, #0]
	  					if(dripOff == 0)
 800e844:	e00f      	b.n	800e866 <HAL_ADC_ConvCpltCallback+0x3a6>
	  					}
	  					else
	  					{
	  						peaks_buff2[gidxB] = 500;
 800e846:	4b1b      	ldr	r3, [pc, #108]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a23      	ldr	r2, [pc, #140]	; (800e8d8 <HAL_ADC_ConvCpltCallback+0x418>)
 800e84c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e850:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  					if(dripOff == 0)
 800e854:	e007      	b.n	800e866 <HAL_ADC_ConvCpltCallback+0x3a6>
	  					}
	  				}
	  				else
	  				{
	  					peaks_buff2[gidxB] = 500;
 800e856:	4b17      	ldr	r3, [pc, #92]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a1f      	ldr	r2, [pc, #124]	; (800e8d8 <HAL_ADC_ConvCpltCallback+0x418>)
 800e85c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 800e864:	e007      	b.n	800e876 <HAL_ADC_ConvCpltCallback+0x3b6>
 800e866:	e006      	b.n	800e876 <HAL_ADC_ConvCpltCallback+0x3b6>
	  				}
	  			}
	  			else
	  			{
	  				peaks_buff2[gidxB] = 500;
 800e868:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a1a      	ldr	r2, [pc, #104]	; (800e8d8 <HAL_ADC_ConvCpltCallback+0x418>)
 800e86e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			}
	  		}
	  		gidxB++;
 800e876:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3301      	adds	r3, #1
 800e87c:	4a0d      	ldr	r2, [pc, #52]	; (800e8b4 <HAL_ADC_ConvCpltCallback+0x3f4>)
 800e87e:	6013      	str	r3, [r2, #0]
	  		if(dripOff > 0)
 800e880:	4b14      	ldr	r3, [pc, #80]	; (800e8d4 <HAL_ADC_ConvCpltCallback+0x414>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd04      	ble.n	800e892 <HAL_ADC_ConvCpltCallback+0x3d2>
	  		{
	  			dripOff--;
 800e888:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <HAL_ADC_ConvCpltCallback+0x414>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	4a11      	ldr	r2, [pc, #68]	; (800e8d4 <HAL_ADC_ConvCpltCallback+0x414>)
 800e890:	6013      	str	r3, [r2, #0]
  for (tmp_index = 0; tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	3301      	adds	r3, #1
 800e896:	61fb      	str	r3, [r7, #28]
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	f67f ae63 	bls.w	800e566 <HAL_ADC_ConvCpltCallback+0xa6>
	  		}
	  	}
  }

  /* Set variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = SET;
 800e8a0:	4b0f      	ldr	r3, [pc, #60]	; (800e8e0 <HAL_ADC_ConvCpltCallback+0x420>)
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	701a      	strb	r2, [r3, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	3720      	adds	r7, #32
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	24000364 	.word	0x24000364
 800e8b4:	24001c6c 	.word	0x24001c6c
 800e8b8:	24000ccc 	.word	0x24000ccc
 800e8bc:	24000368 	.word	0x24000368
 800e8c0:	2400068c 	.word	0x2400068c
 800e8c4:	2400130c 	.word	0x2400130c
 800e8c8:	24001c90 	.word	0x24001c90
 800e8cc:	24001c8c 	.word	0x24001c8c
 800e8d0:	24001c94 	.word	0x24001c94
 800e8d4:	24001c98 	.word	0x24001c98
 800e8d8:	2400194c 	.word	0x2400194c
 800e8dc:	24001c70 	.word	0x24001c70
 800e8e0:	240002a8 	.word	0x240002a8

0800e8e4 <HAL_ADC_ConvHalfCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b089      	sub	sp, #36	; 0x24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	4b26      	ldr	r3, [pc, #152]	; (800e988 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800e8ee:	61bb      	str	r3, [r7, #24]
 800e8f0:	2308      	movs	r3, #8
 800e8f2:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dd1d      	ble.n	800e936 <HAL_ADC_ConvHalfCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	f003 021f 	and.w	r2, r3, #31
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	4413      	add	r3, r2
 800e904:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e90a:	f3bf 8f4f 	dsb	sy
}
 800e90e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e910:	4a1e      	ldr	r2, [pc, #120]	; (800e98c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	3320      	adds	r3, #32
 800e91c:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	3b20      	subs	r3, #32
 800e922:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	2b00      	cmp	r3, #0
 800e928:	dcf2      	bgt.n	800e910 <HAL_ADC_ConvHalfCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 800e92a:	f3bf 8f4f 	dsb	sy
}
 800e92e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e930:	f3bf 8f6f 	isb	sy
}
 800e934:	bf00      	nop
}
 800e936:	bf00      	nop
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if(defined(ADC_TRIGGER_FROM_TIMER))
  uint32_t tmp_index = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800e93c:	2300      	movs	r3, #0
 800e93e:	61fb      	str	r3, [r7, #28]
 800e940:	e015      	b.n	800e96e <HAL_ADC_ConvHalfCpltCallback+0x8a>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800e942:	4a11      	ldr	r2, [pc, #68]	; (800e988 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e94a:	b299      	uxth	r1, r3
 800e94c:	4a10      	ldr	r2, [pc, #64]	; (800e990 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800e954:	4a0c      	ldr	r2, [pc, #48]	; (800e988 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e95c:	0c1b      	lsrs	r3, r3, #16
 800e95e:	b299      	uxth	r1, r3
 800e960:	4a0c      	ldr	r2, [pc, #48]	; (800e994 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	3301      	adds	r3, #1
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	2b01      	cmp	r3, #1
 800e972:	d9e6      	bls.n	800e942 <HAL_ADC_ConvHalfCpltCallback+0x5e>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  /* Reset variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = RESET;
 800e974:	4b08      	ldr	r3, [pc, #32]	; (800e998 <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 800e976:	2200      	movs	r2, #0
 800e978:	701a      	strb	r2, [r3, #0]
}
 800e97a:	bf00      	nop
 800e97c:	3724      	adds	r7, #36	; 0x24
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	24000260 	.word	0x24000260
 800e98c:	e000ed00 	.word	0xe000ed00
 800e990:	24000280 	.word	0x24000280
 800e994:	240002a0 	.word	0x240002a0
 800e998:	240002a8 	.word	0x240002a8

0800e99c <HAL_ADC_ErrorCallback>:
  *         avoid ending up in the infinite loop of Error_Handler(), no call to this
  *         latter is done in case of HAL_ADC_ERROR_OVR error.
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
#if !defined(ADC_TRIGGER_FROM_TIMER)
  /* In case of ADC error, call main error handler */
  if (HAL_IS_BIT_CLR(hadc->ErrorCode, HAL_ADC_ERROR_OVR))
  {
#endif /* ADC_TRIGGER_FROM_TIMER */
  Error_Handler();
 800e9a4:	f000 f804 	bl	800e9b0 <Error_Handler>
#if !defined(ADC_TRIGGER_FROM_TIMER)
  }
#endif /* ADC_TRIGGER_FROM_TIMER */
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0

  /* In case of error, LED3 is toggling at a frequency of 1Hz */
  while(1)
  {
    /* Toggle LED3 */
    BSP_LED_Toggle(LED3);
 800e9b4:	2002      	movs	r0, #2
 800e9b6:	f7f1 fedf 	bl	8000778 <BSP_LED_Toggle>
    HAL_Delay(500);
 800e9ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9be:	f7f2 f815 	bl	80009ec <HAL_Delay>
    BSP_LED_Toggle(LED3);
 800e9c2:	e7f7      	b.n	800e9b4 <Error_Handler+0x4>

0800e9c4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800e9ca:	f7f4 fa41 	bl	8002e50 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800e9d6:	231f      	movs	r3, #31
 800e9d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800e9f2:	2387      	movs	r3, #135	; 0x87
 800e9f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e9fa:	463b      	mov	r3, r7
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f4 fa5f 	bl	8002ec0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ea02:	2004      	movs	r0, #4
 800ea04:	f7f4 fa3c 	bl	8002e80 <HAL_MPU_Enable>
}
 800ea08:	bf00      	nop
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ea16:	4b34      	ldr	r3, [pc, #208]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d11b      	bne.n	800ea5a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800ea22:	f3bf 8f4f 	dsb	sy
}
 800ea26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ea28:	f3bf 8f6f 	isb	sy
}
 800ea2c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ea2e:	4b2e      	ldr	r3, [pc, #184]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ea36:	f3bf 8f4f 	dsb	sy
}
 800ea3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ea3c:	f3bf 8f6f 	isb	sy
}
 800ea40:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ea42:	4b29      	ldr	r3, [pc, #164]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	4a28      	ldr	r2, [pc, #160]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ea4e:	f3bf 8f4f 	dsb	sy
}
 800ea52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ea54:	f3bf 8f6f 	isb	sy
}
 800ea58:	e000      	b.n	800ea5c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ea5a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800ea5c:	4b22      	ldr	r3, [pc, #136]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d138      	bne.n	800eada <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ea68:	4b1f      	ldr	r3, [pc, #124]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ea70:	f3bf 8f4f 	dsb	sy
}
 800ea74:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800ea76:	4b1c      	ldr	r3, [pc, #112]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800ea78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea7c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	0b5b      	lsrs	r3, r3, #13
 800ea82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ea86:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	08db      	lsrs	r3, r3, #3
 800ea8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea90:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	015a      	lsls	r2, r3, #5
 800ea96:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ea9a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800eaa0:	4911      	ldr	r1, [pc, #68]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	1e5a      	subs	r2, r3, #1
 800eaac:	607a      	str	r2, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1ef      	bne.n	800ea92 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	1e5a      	subs	r2, r3, #1
 800eab6:	60ba      	str	r2, [r7, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e5      	bne.n	800ea88 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800eabc:	f3bf 8f4f 	dsb	sy
}
 800eac0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800eac2:	4b09      	ldr	r3, [pc, #36]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800eac4:	695b      	ldr	r3, [r3, #20]
 800eac6:	4a08      	ldr	r2, [pc, #32]	; (800eae8 <CPU_CACHE_Enable+0xd8>)
 800eac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eacc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800eace:	f3bf 8f4f 	dsb	sy
}
 800ead2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ead4:	f3bf 8f6f 	isb	sy
}
 800ead8:	e000      	b.n	800eadc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800eada:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800eadc:	bf00      	nop
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	e000ed00 	.word	0xe000ed00

0800eaec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800eaec:	b480      	push	{r7}
 800eaee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800eaf0:	b672      	cpsid	i
}
 800eaf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800eaf4:	e7fe      	b.n	800eaf4 <Error_Handler+0x8>
	...

0800eaf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b0ba      	sub	sp, #232	; 0xe8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800eb04:	2200      	movs	r2, #0
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	605a      	str	r2, [r3, #4]
 800eb0a:	609a      	str	r2, [r3, #8]
 800eb0c:	60da      	str	r2, [r3, #12]
 800eb0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eb10:	f107 0310 	add.w	r3, r7, #16
 800eb14:	22c0      	movs	r2, #192	; 0xc0
 800eb16:	2100      	movs	r1, #0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 fb43 	bl	800f1a4 <memset>
  if(huart->Instance==USART3)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a2b      	ldr	r2, [pc, #172]	; (800ebd0 <HAL_UART_MspInit+0xd8>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d14e      	bne.n	800ebc6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800eb28:	f04f 0202 	mov.w	r2, #2
 800eb2c:	f04f 0300 	mov.w	r3, #0
 800eb30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800eb34:	2300      	movs	r3, #0
 800eb36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eb3a:	f107 0310 	add.w	r3, r7, #16
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7f9 f8e8 	bl	8007d14 <HAL_RCCEx_PeriphCLKConfig>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800eb4a:	f7ff ffcf 	bl	800eaec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800eb4e:	4b21      	ldr	r3, [pc, #132]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb54:	4a1f      	ldr	r2, [pc, #124]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eb5e:	4b1d      	ldr	r3, [pc, #116]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb68:	60fb      	str	r3, [r7, #12]
 800eb6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800eb6c:	4b19      	ldr	r3, [pc, #100]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb72:	4a18      	ldr	r2, [pc, #96]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb74:	f043 0308 	orr.w	r3, r3, #8
 800eb78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eb7c:	4b15      	ldr	r3, [pc, #84]	; (800ebd4 <HAL_UART_MspInit+0xdc>)
 800eb7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb82:	f003 0308 	and.w	r3, r3, #8
 800eb86:	60bb      	str	r3, [r7, #8]
 800eb88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800eb8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eb8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb92:	2302      	movs	r3, #2
 800eb94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800eba4:	2307      	movs	r3, #7
 800eba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ebaa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4809      	ldr	r0, [pc, #36]	; (800ebd8 <HAL_UART_MspInit+0xe0>)
 800ebb2:	f7f7 fd1b 	bl	80065ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2100      	movs	r1, #0
 800ebba:	2027      	movs	r0, #39	; 0x27
 800ebbc:	f7f4 f905 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ebc0:	2027      	movs	r0, #39	; 0x27
 800ebc2:	f7f4 f91c 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ebc6:	bf00      	nop
 800ebc8:	37e8      	adds	r7, #232	; 0xe8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	40004800 	.word	0x40004800
 800ebd4:	58024400 	.word	0x58024400
 800ebd8:	58020c00 	.word	0x58020c00

0800ebdc <HAL_ADC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08a      	sub	sp, #40	; 0x28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  DmaHandle;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable clock of GPIO associated to the peripheral channels */
  ADCx_CHANNELa_GPIO_CLK_ENABLE();
 800ebe4:	4b42      	ldr	r3, [pc, #264]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ebe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebea:	4a41      	ldr	r2, [pc, #260]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ebec:	f043 0301 	orr.w	r3, r3, #1
 800ebf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ebf4:	4b3e      	ldr	r3, [pc, #248]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ebf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	613b      	str	r3, [r7, #16]
 800ec00:	693b      	ldr	r3, [r7, #16]
  
  /* Enable clock of ADCx peripheral */
  ADCx_CLK_ENABLE();
 800ec02:	4b3b      	ldr	r3, [pc, #236]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec08:	4a39      	ldr	r2, [pc, #228]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec0a:	f043 0320 	orr.w	r3, r3, #32
 800ec0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ec12:	4b37      	ldr	r3, [pc, #220]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec18:	f003 0320 	and.w	r3, r3, #32
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_CLKP);
 800ec20:	4b33      	ldr	r3, [pc, #204]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec24:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ec28:	4a31      	ldr	r2, [pc, #196]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec2e:	6593      	str	r3, [r2, #88]	; 0x58
  

  if (hadc->Instance == ADCx)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a2f      	ldr	r2, [pc, #188]	; (800ecf4 <HAL_ADC_MspInit+0x118>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d14e      	bne.n	800ecd8 <HAL_ADC_MspInit+0xfc>
  { 
    /* Enable clock of DMA associated to the peripheral */
    ADCx_DMA_CLK_ENABLE();
 800ec3a:	4b2d      	ldr	r3, [pc, #180]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec40:	4a2b      	ldr	r2, [pc, #172]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec42:	f043 0301 	orr.w	r3, r3, #1
 800ec46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ec4a:	4b29      	ldr	r3, [pc, #164]	; (800ecf0 <HAL_ADC_MspInit+0x114>)
 800ec4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	60bb      	str	r3, [r7, #8]
 800ec56:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/ 
    /* Configure GPIO pins of the selected ADC channels */
    GPIO_InitStruct.Pin = ADCx_CHANNELa_PIN;
 800ec58:	2340      	movs	r3, #64	; 0x40
 800ec5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADCx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 800ec64:	f107 0314 	add.w	r3, r7, #20
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4823      	ldr	r0, [pc, #140]	; (800ecf8 <HAL_ADC_MspInit+0x11c>)
 800ec6c:	f7f7 fcbe 	bl	80065ec <HAL_GPIO_Init>
    /*       the same clock domain, same GPIO pins (interleaved on the same     */
    /*       channel) and same DMA as ADC master.                               */
  
    /*##-3- Configure the DMA ##################################################*/
    /* Configure DMA parameters (ADC master) */
    DmaHandle.Instance = ADCx_DMA;
 800ec70:	4b22      	ldr	r3, [pc, #136]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec72:	4a23      	ldr	r2, [pc, #140]	; (800ed00 <HAL_ADC_MspInit+0x124>)
 800ec74:	601a      	str	r2, [r3, #0]

    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 800ec76:	4b21      	ldr	r3, [pc, #132]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec78:	2209      	movs	r2, #9
 800ec7a:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800ec7c:	4b1f      	ldr	r3, [pc, #124]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ec82:	4b1e      	ldr	r3, [pc, #120]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800ec88:	4b1c      	ldr	r3, [pc, #112]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ec8e:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;       /* Transfer from ADC by word to match with ADC configuration: Dual mode, ADC master contains conversion results on data register (32 bits) of ADC master and ADC slave  */
 800ec90:	4b1a      	ldr	r3, [pc, #104]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec96:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;       /* Transfer to memory by word to match with buffer variable type: word */
 800ec98:	4b18      	ldr	r3, [pc, #96]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ec9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ec9e:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;              /* DMA in circular mode to match with ADC configuration: DMA continuous requests */
 800eca0:	4b16      	ldr	r3, [pc, #88]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800eca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eca6:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800eca8:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ecaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ecae:	621a      	str	r2, [r3, #32]
  
   /* Deinitialize  & Initialize the DMA for new transfer */
    HAL_DMA_DeInit(&DmaHandle);
 800ecb0:	4812      	ldr	r0, [pc, #72]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ecb2:	f7f5 f805 	bl	8003cc0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&DmaHandle);
 800ecb6:	4811      	ldr	r0, [pc, #68]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ecb8:	f7f4 fca6 	bl	8003608 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a0f      	ldr	r2, [pc, #60]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ecc0:	64da      	str	r2, [r3, #76]	; 0x4c
 800ecc2:	4a0e      	ldr	r2, [pc, #56]	; (800ecfc <HAL_ADC_MspInit+0x120>)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6393      	str	r3, [r2, #56]	; 0x38
  
    /*##-4- Configure the NVIC #################################################*/

     /* NVIC configuration for DMA interrupt (transfer completion or error) */
    /* Priority: high-priority */
    HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 1, 0);
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2101      	movs	r1, #1
 800eccc:	200c      	movs	r0, #12
 800ecce:	f7f4 f87c 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 800ecd2:	200c      	movs	r0, #12
 800ecd4:	f7f4 f893 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  }
  
  /* NVIC configuration for ADC interrupt */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(ADCx_IRQn, 0, 0);
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	2012      	movs	r0, #18
 800ecde:	f7f4 f874 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
 800ece2:	2012      	movs	r0, #18
 800ece4:	f7f4 f88b 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  
  //HAL_NVIC_SetPriority(ADCy_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(ADCy_IRQn);

}
 800ece8:	bf00      	nop
 800ecea:	3728      	adds	r7, #40	; 0x28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	58024400 	.word	0x58024400
 800ecf4:	40022000 	.word	0x40022000
 800ecf8:	58020000 	.word	0x58020000
 800ecfc:	24001d08 	.word	0x24001d08
 800ed00:	40020028 	.word	0x40020028

0800ed04 <HAL_ADC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
  { 
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  ADCx_FORCE_RESET();
 800ed0c:	4b13      	ldr	r3, [pc, #76]	; (800ed5c <HAL_ADC_MspDeInit+0x58>)
 800ed0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed12:	4a12      	ldr	r2, [pc, #72]	; (800ed5c <HAL_ADC_MspDeInit+0x58>)
 800ed14:	f043 0320 	orr.w	r3, r3, #32
 800ed18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  ADCx_RELEASE_RESET();
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <HAL_ADC_MspDeInit+0x58>)
 800ed1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed22:	4a0e      	ldr	r2, [pc, #56]	; (800ed5c <HAL_ADC_MspDeInit+0x58>)
 800ed24:	f023 0320 	bic.w	r3, r3, #32
 800ed28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize GPIO pin of the selected ADC channel */
  HAL_GPIO_DeInit(ADCx_CHANNELa_GPIO_PORT, ADCx_CHANNELa_PIN);
 800ed2c:	2140      	movs	r1, #64	; 0x40
 800ed2e:	480c      	ldr	r0, [pc, #48]	; (800ed60 <HAL_ADC_MspDeInit+0x5c>)
 800ed30:	f7f7 fe0c 	bl	800694c <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA ####################################################*/
  /* De-Initialize the DMA associated to the peripheral */
  if(hadc->DMA_Handle != NULL)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <HAL_ADC_MspDeInit+0x42>
  {
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7f4 ffbd 	bl	8003cc0 <HAL_DMA_DeInit>
  }
  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(ADCx_DMA_IRQn);
 800ed46:	200c      	movs	r0, #12
 800ed48:	f7f4 f867 	bl	8002e1a <HAL_NVIC_DisableIRQ>
  
  /* Disable the NVIC configuration for ADC interrupt */
  HAL_NVIC_DisableIRQ(ADCx_IRQn);
 800ed4c:	2012      	movs	r0, #18
 800ed4e:	f7f4 f864 	bl	8002e1a <HAL_NVIC_DisableIRQ>
}
 800ed52:	bf00      	nop
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	58024400 	.word	0x58024400
 800ed60:	58020000 	.word	0x58020000

0800ed64 <HAL_TIM_Base_MspInit>:
  *          - Enable clock of peripheral
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
  { 
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  /* TIM peripheral clock enable */
  if (htim->Instance == TIMx)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a23      	ldr	r2, [pc, #140]	; (800ee00 <HAL_TIM_Base_MspInit+0x9c>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d10e      	bne.n	800ed94 <HAL_TIM_Base_MspInit+0x30>
  {
    TIMx_CLK_ENABLE();
 800ed76:	4b23      	ldr	r3, [pc, #140]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800ed78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ed7c:	4a21      	ldr	r2, [pc, #132]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800ed7e:	f043 0302 	orr.w	r3, r3, #2
 800ed82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ed86:	4b1f      	ldr	r3, [pc, #124]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800ed88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	697b      	ldr	r3, [r7, #20]
  }

  if(htim->Instance == TIM4)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a1b      	ldr	r2, [pc, #108]	; (800ee08 <HAL_TIM_Base_MspInit+0xa4>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d117      	bne.n	800edce <HAL_TIM_Base_MspInit+0x6a>
  {
	  // TIMz_CLK_ENABLE();
	  __HAL_RCC_TIM4_CLK_ENABLE();
 800ed9e:	4b19      	ldr	r3, [pc, #100]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800eda0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eda4:	4a17      	ldr	r2, [pc, #92]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800eda6:	f043 0304 	orr.w	r3, r3, #4
 800edaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800edae:	4b15      	ldr	r3, [pc, #84]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800edb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800edb4:	f003 0304 	and.w	r3, r3, #4
 800edb8:	613b      	str	r3, [r7, #16]
 800edba:	693b      	ldr	r3, [r7, #16]
	  /* TIM4 interrupt Init */
	  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800edbc:	2200      	movs	r2, #0
 800edbe:	2100      	movs	r1, #0
 800edc0:	201e      	movs	r0, #30
 800edc2:	f7f4 f802 	bl	8002dca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800edc6:	201e      	movs	r0, #30
 800edc8:	f7f4 f819 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  else
  { 
    /* Error management can be implemented here */
  }

}
 800edcc:	e013      	b.n	800edf6 <HAL_TIM_Base_MspInit+0x92>
  else if (htim->Instance == TIMy)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a0e      	ldr	r2, [pc, #56]	; (800ee0c <HAL_TIM_Base_MspInit+0xa8>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d10e      	bne.n	800edf6 <HAL_TIM_Base_MspInit+0x92>
    TIMy_CLK_ENABLE();
 800edd8:	4b0a      	ldr	r3, [pc, #40]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800edda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800edde:	4a09      	ldr	r2, [pc, #36]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800ede0:	f043 0310 	orr.w	r3, r3, #16
 800ede4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ede8:	4b06      	ldr	r3, [pc, #24]	; (800ee04 <HAL_TIM_Base_MspInit+0xa0>)
 800edea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800edee:	f003 0310 	and.w	r3, r3, #16
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	68fb      	ldr	r3, [r7, #12]
}
 800edf6:	bf00      	nop
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	40000400 	.word	0x40000400
 800ee04:	58024400 	.word	0x58024400
 800ee08:	40000800 	.word	0x40000800
 800ee0c:	40001000 	.word	0x40001000

0800ee10 <HAL_DAC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b08a      	sub	sp, #40	; 0x28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef  DmaHandle;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  DACx_CHANNEL_GPIO_CLK_ENABLE();
 800ee18:	4b3d      	ldr	r3, [pc, #244]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee1e:	4a3c      	ldr	r2, [pc, #240]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee20:	f043 0301 	orr.w	r3, r3, #1
 800ee24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee28:	4b39      	ldr	r3, [pc, #228]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	613b      	str	r3, [r7, #16]
 800ee34:	693b      	ldr	r3, [r7, #16]
  /* DAC peripheral clock enable */
  DACx_CLK_ENABLE();
 800ee36:	4b36      	ldr	r3, [pc, #216]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee3c:	4a34      	ldr	r2, [pc, #208]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ee46:	4b32      	ldr	r3, [pc, #200]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	68fb      	ldr	r3, [r7, #12]

  /* Enable clock of DMA associated to the peripheral */
  DACx_CHANNELa_DMA_CLK_ENABLE();
 800ee54:	4b2e      	ldr	r3, [pc, #184]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ee5a:	4a2d      	ldr	r2, [pc, #180]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee5c:	f043 0301 	orr.w	r3, r3, #1
 800ee60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ee64:	4b2a      	ldr	r3, [pc, #168]	; (800ef10 <HAL_DAC_MspInit+0x100>)
 800ee66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ee6a:	f003 0301 	and.w	r3, r3, #1
 800ee6e:	60bb      	str	r3, [r7, #8]
 800ee70:	68bb      	ldr	r3, [r7, #8]


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* DAC Channel1 GPIO pin configuration */
  GPIO_InitStruct.Pin = DACx_CHANNELa_PIN;
 800ee72:	2310      	movs	r3, #16
 800ee74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee76:	2303      	movs	r3, #3
 800ee78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DACx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 800ee7e:	f107 0314 	add.w	r3, r7, #20
 800ee82:	4619      	mov	r1, r3
 800ee84:	4823      	ldr	r0, [pc, #140]	; (800ef14 <HAL_DAC_MspInit+0x104>)
 800ee86:	f7f7 fbb1 	bl	80065ec <HAL_GPIO_Init>
  
  
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure DMA parameters */
  DmaHandle.Instance = DACx_CHANNELa_DMA;
 800ee8a:	4b23      	ldr	r3, [pc, #140]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800ee8c:	4a23      	ldr	r2, [pc, #140]	; (800ef1c <HAL_DAC_MspInit+0x10c>)
 800ee8e:	601a      	str	r2, [r3, #0]

  DmaHandle.Init.Request             = DMA_REQUEST_DAC1;
 800ee90:	4b21      	ldr	r3, [pc, #132]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800ee92:	2243      	movs	r2, #67	; 0x43
 800ee94:	605a      	str	r2, [r3, #4]
  DmaHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800ee96:	4b20      	ldr	r3, [pc, #128]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800ee98:	2240      	movs	r2, #64	; 0x40
 800ee9a:	609a      	str	r2, [r3, #8]
  DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ee9c:	4b1e      	ldr	r3, [pc, #120]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	60da      	str	r2, [r3, #12]
  DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800eea2:	4b1d      	ldr	r3, [pc, #116]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eea8:	611a      	str	r2, [r3, #16]
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;   /* Transfer to DAC by byte to match with DAC configuration: DAC resolution 8 bits */
 800eeaa:	4b1b      	ldr	r3, [pc, #108]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	615a      	str	r2, [r3, #20]
  DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;   /* Transfer to DAC by byte to match with DAC configuration: DAC resolution 8 bits */
 800eeb0:	4b19      	ldr	r3, [pc, #100]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	619a      	str	r2, [r3, #24]
  DmaHandle.Init.Mode                = DMA_CIRCULAR;
 800eeb6:	4b18      	ldr	r3, [pc, #96]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eeb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eebc:	61da      	str	r2, [r3, #28]
  DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800eebe:	4b16      	ldr	r3, [pc, #88]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eec4:	621a      	str	r2, [r3, #32]
  
  /* Deinitialize  & Initialize the DMA for new transfer */
  HAL_DMA_DeInit(&DmaHandle);  
 800eec6:	4814      	ldr	r0, [pc, #80]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eec8:	f7f4 fefa 	bl	8003cc0 <HAL_DMA_DeInit>
  HAL_DMA_Init(&DmaHandle);
 800eecc:	4812      	ldr	r0, [pc, #72]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eece:	f7f4 fb9b 	bl	8003608 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the DAC handle */
  if (DmaHandle.Instance == DACx_CHANNELa_DMA)
 800eed2:	4b11      	ldr	r3, [pc, #68]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a11      	ldr	r2, [pc, #68]	; (800ef1c <HAL_DAC_MspInit+0x10c>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d105      	bne.n	800eee8 <HAL_DAC_MspInit+0xd8>
  {
    __HAL_LINKDMA(hdac, DMA_Handle1, DmaHandle);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a0e      	ldr	r2, [pc, #56]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eee0:	609a      	str	r2, [r3, #8]
 800eee2:	4a0d      	ldr	r2, [pc, #52]	; (800ef18 <HAL_DAC_MspInit+0x108>)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC #################################################*/

  /* NVIC configuration for DMA interrupt (transfer completion or error) */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(DACx_CHANNELa_DMA_IRQn, 1, 0);
 800eee8:	2200      	movs	r2, #0
 800eeea:	2101      	movs	r1, #1
 800eeec:	200e      	movs	r0, #14
 800eeee:	f7f3 ff6c 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DACx_CHANNELa_DMA_IRQn);
 800eef2:	200e      	movs	r0, #14
 800eef4:	f7f3 ff83 	bl	8002dfe <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DAC interrupt */
  /* Priority: mid-priority */
  HAL_NVIC_SetPriority(DACx_IRQn, 3, 0);
 800eef8:	2200      	movs	r2, #0
 800eefa:	2103      	movs	r1, #3
 800eefc:	2036      	movs	r0, #54	; 0x36
 800eefe:	f7f3 ff64 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DACx_IRQn);
 800ef02:	2036      	movs	r0, #54	; 0x36
 800ef04:	f7f3 ff7b 	bl	8002dfe <HAL_NVIC_EnableIRQ>
}
 800ef08:	bf00      	nop
 800ef0a:	3728      	adds	r7, #40	; 0x28
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	58024400 	.word	0x58024400
 800ef14:	58020000 	.word	0x58020000
 800ef18:	24001d80 	.word	0x24001d80
 800ef1c:	40020058 	.word	0x40020058

0800ef20 <HAL_DAC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  DACx_FORCE_RESET();
 800ef28:	4b13      	ldr	r3, [pc, #76]	; (800ef78 <HAL_DAC_MspDeInit+0x58>)
 800ef2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef2e:	4a12      	ldr	r2, [pc, #72]	; (800ef78 <HAL_DAC_MspDeInit+0x58>)
 800ef30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DACx_RELEASE_RESET();
 800ef38:	4b0f      	ldr	r3, [pc, #60]	; (800ef78 <HAL_DAC_MspDeInit+0x58>)
 800ef3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef3e:	4a0e      	ldr	r2, [pc, #56]	; (800ef78 <HAL_DAC_MspDeInit+0x58>)
 800ef40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ef44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize the ADC Channel GPIO pin */
  HAL_GPIO_DeInit(DACx_CHANNELa_GPIO_PORT, DACx_CHANNELa_PIN);
 800ef48:	2110      	movs	r1, #16
 800ef4a:	480c      	ldr	r0, [pc, #48]	; (800ef7c <HAL_DAC_MspDeInit+0x5c>)
 800ef4c:	f7f7 fcfe 	bl	800694c <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA streams ############################################*/
  /* De-Initialize the DMA associated to transmission process */
  HAL_DMA_DeInit(hdac->DMA_Handle1);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f4 feb3 	bl	8003cc0 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(hdac->DMA_Handle2);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7f4 feae 	bl	8003cc0 <HAL_DMA_DeInit>

  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(DACx_CHANNELa_DMA_IRQn);
 800ef64:	200e      	movs	r0, #14
 800ef66:	f7f3 ff58 	bl	8002e1a <HAL_NVIC_DisableIRQ>

  /* Disable the NVIC configuration for DAC interrupt */
  HAL_NVIC_DisableIRQ(DACx_IRQn);
 800ef6a:	2036      	movs	r0, #54	; 0x36
 800ef6c:	f7f3 ff55 	bl	8002e1a <HAL_NVIC_DisableIRQ>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	58024400 	.word	0x58024400
 800ef7c:	58020000 	.word	0x58020000

0800ef80 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800ef80:	b480      	push	{r7}
 800ef82:	af00      	add	r7, sp, #0
}
 800ef84:	bf00      	nop
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800ef92:	e7fe      	b.n	800ef92 <HardFault_Handler+0x4>

0800ef94 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800ef94:	b480      	push	{r7}
 800ef96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800ef98:	e7fe      	b.n	800ef98 <MemManage_Handler+0x4>

0800ef9a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800ef9a:	b480      	push	{r7}
 800ef9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800ef9e:	e7fe      	b.n	800ef9e <BusFault_Handler+0x4>

0800efa0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800efa0:	b480      	push	{r7}
 800efa2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800efa4:	e7fe      	b.n	800efa4 <UsageFault_Handler+0x4>

0800efa6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800efa6:	b480      	push	{r7}
 800efa8:	af00      	add	r7, sp, #0
}
 800efaa:	bf00      	nop
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800efb4:	b480      	push	{r7}
 800efb6:	af00      	add	r7, sp, #0
}
 800efb8:	bf00      	nop
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr

0800efc2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800efc2:	b480      	push	{r7}
 800efc4:	af00      	add	r7, sp, #0
}
 800efc6:	bf00      	nop
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800efd4:	f7f1 fcea 	bl	80009ac <HAL_IncTick>
}
 800efd8:	bf00      	nop
 800efda:	bd80      	pop	{r7, pc}

0800efdc <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800efe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800efe4:	f7f7 fdef 	bl	8006bc6 <HAL_GPIO_EXTI_IRQHandler>
}
 800efe8:	bf00      	nop
 800efea:	bd80      	pop	{r7, pc}

0800efec <ADC_IRQHandler>:
  */
/* Note: On STM32H7xx, ADC2 IRQ handler is the same as ADC1.                  */
/*       Therefore, expected IRQ handler "ADCy_IRQHandler()" is not present   */
/*       and managed by IRQ handler "ADCx_IRQHandler()".                      */
void ADCx_IRQHandler(void)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&AdcHandle_master);
 800eff0:	4803      	ldr	r0, [pc, #12]	; (800f000 <ADC_IRQHandler+0x14>)
 800eff2:	f7f2 fa7f 	bl	80014f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&AdcHandle_slave);
 800eff6:	4803      	ldr	r0, [pc, #12]	; (800f004 <ADC_IRQHandler+0x18>)
 800eff8:	f7f2 fa7c 	bl	80014f4 <HAL_ADC_IRQHandler>
}
 800effc:	bf00      	nop
 800effe:	bd80      	pop	{r7, pc}
 800f000:	240000a0 	.word	0x240000a0
 800f004:	24000104 	.word	0x24000104

0800f008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800f00c:	4802      	ldr	r0, [pc, #8]	; (800f018 <USART3_IRQHandler+0x10>)
 800f00e:	f7fc fa0d 	bl	800b42c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800f012:	bf00      	nop
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	240002ac 	.word	0x240002ac

0800f01c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&Tim4Handle);
 800f020:	4802      	ldr	r0, [pc, #8]	; (800f02c <TIM4_IRQHandler+0x10>)
 800f022:	f7fb fcb5 	bl	800a990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800f026:	bf00      	nop
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	240001b4 	.word	0x240001b4

0800f030 <DMA1_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle_master.DMA_Handle);
 800f034:	4b03      	ldr	r3, [pc, #12]	; (800f044 <DMA1_Stream1_IRQHandler+0x14>)
 800f036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f5 ffc5 	bl	8004fc8 <HAL_DMA_IRQHandler>
}
 800f03e:	bf00      	nop
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	240000a0 	.word	0x240000a0

0800f048 <DMA1_Stream3_IRQHandler>:


#if defined(WAVEFORM_VOLTAGE_GENERATION_FOR_TEST)

void DACx_CHANNELa_DMA_IRQHandler(void)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(DacForWaveformTestHandle.DMA_Handle1);
 800f04c:	4b03      	ldr	r3, [pc, #12]	; (800f05c <DMA1_Stream3_IRQHandler+0x14>)
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	4618      	mov	r0, r3
 800f052:	f7f5 ffb9 	bl	8004fc8 <HAL_DMA_IRQHandler>
}
 800f056:	bf00      	nop
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	24000200 	.word	0x24000200

0800f060 <TIM6_DAC_IRQHandler>:
* @brief  This function handles DAC interrupt request.
* @param  None
* @retval None
*/
void TIM6_DAC_IRQHandler(void)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	af00      	add	r7, sp, #0
  HAL_DAC_IRQHandler(&DacForWaveformTestHandle);
 800f064:	4802      	ldr	r0, [pc, #8]	; (800f070 <TIM6_DAC_IRQHandler+0x10>)
 800f066:	f7f4 f87b 	bl	8003160 <HAL_DAC_IRQHandler>
}
 800f06a:	bf00      	nop
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	24000200 	.word	0x24000200

0800f074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f07c:	4a14      	ldr	r2, [pc, #80]	; (800f0d0 <_sbrk+0x5c>)
 800f07e:	4b15      	ldr	r3, [pc, #84]	; (800f0d4 <_sbrk+0x60>)
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f088:	4b13      	ldr	r3, [pc, #76]	; (800f0d8 <_sbrk+0x64>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f090:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <_sbrk+0x64>)
 800f092:	4a12      	ldr	r2, [pc, #72]	; (800f0dc <_sbrk+0x68>)
 800f094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f096:	4b10      	ldr	r3, [pc, #64]	; (800f0d8 <_sbrk+0x64>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4413      	add	r3, r2
 800f09e:	693a      	ldr	r2, [r7, #16]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d207      	bcs.n	800f0b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f0a4:	f000 f886 	bl	800f1b4 <__errno>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	220c      	movs	r2, #12
 800f0ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b2:	e009      	b.n	800f0c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f0b4:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <_sbrk+0x64>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f0ba:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <_sbrk+0x64>)
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	4a05      	ldr	r2, [pc, #20]	; (800f0d8 <_sbrk+0x64>)
 800f0c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	24080000 	.word	0x24080000
 800f0d4:	00000400 	.word	0x00000400
 800f0d8:	24001df8 	.word	0x24001df8
 800f0dc:	24001f48 	.word	0x24001f48

0800f0e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800f0e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f118 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f0e4:	f7f1 fb72 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f0e8:	480c      	ldr	r0, [pc, #48]	; (800f11c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f0ea:	490d      	ldr	r1, [pc, #52]	; (800f120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f0ec:	4a0d      	ldr	r2, [pc, #52]	; (800f124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f0ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f0f0:	e002      	b.n	800f0f8 <LoopCopyDataInit>

0800f0f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f0f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f0f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f0f6:	3304      	adds	r3, #4

0800f0f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f0f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f0fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f0fc:	d3f9      	bcc.n	800f0f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f0fe:	4a0a      	ldr	r2, [pc, #40]	; (800f128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f100:	4c0a      	ldr	r4, [pc, #40]	; (800f12c <LoopFillZerobss+0x22>)
  movs r3, #0
 800f102:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f104:	e001      	b.n	800f10a <LoopFillZerobss>

0800f106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f108:	3204      	adds	r2, #4

0800f10a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f10a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f10c:	d3fb      	bcc.n	800f106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f10e:	f000 f857 	bl	800f1c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f112:	f7fe fe05 	bl	800dd20 <main>
  bx  lr
 800f116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f118:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800f11c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800f120:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800f124:	0800fb8c 	.word	0x0800fb8c
  ldr r2, =_sbss
 800f128:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800f12c:	24001f44 	.word	0x24001f44

0800f130 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f130:	e7fe      	b.n	800f130 <ADC3_IRQHandler>

0800f132 <_vsniprintf_r>:
 800f132:	b530      	push	{r4, r5, lr}
 800f134:	4614      	mov	r4, r2
 800f136:	2c00      	cmp	r4, #0
 800f138:	b09b      	sub	sp, #108	; 0x6c
 800f13a:	4605      	mov	r5, r0
 800f13c:	461a      	mov	r2, r3
 800f13e:	da05      	bge.n	800f14c <_vsniprintf_r+0x1a>
 800f140:	238b      	movs	r3, #139	; 0x8b
 800f142:	6003      	str	r3, [r0, #0]
 800f144:	f04f 30ff 	mov.w	r0, #4294967295
 800f148:	b01b      	add	sp, #108	; 0x6c
 800f14a:	bd30      	pop	{r4, r5, pc}
 800f14c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f150:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f154:	bf14      	ite	ne
 800f156:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f15a:	4623      	moveq	r3, r4
 800f15c:	9302      	str	r3, [sp, #8]
 800f15e:	9305      	str	r3, [sp, #20]
 800f160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f164:	9100      	str	r1, [sp, #0]
 800f166:	9104      	str	r1, [sp, #16]
 800f168:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f16c:	4669      	mov	r1, sp
 800f16e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f170:	f000 f9ac 	bl	800f4cc <_svfiprintf_r>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	bfbc      	itt	lt
 800f178:	238b      	movlt	r3, #139	; 0x8b
 800f17a:	602b      	strlt	r3, [r5, #0]
 800f17c:	2c00      	cmp	r4, #0
 800f17e:	d0e3      	beq.n	800f148 <_vsniprintf_r+0x16>
 800f180:	9b00      	ldr	r3, [sp, #0]
 800f182:	2200      	movs	r2, #0
 800f184:	701a      	strb	r2, [r3, #0]
 800f186:	e7df      	b.n	800f148 <_vsniprintf_r+0x16>

0800f188 <vsniprintf>:
 800f188:	b507      	push	{r0, r1, r2, lr}
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	4613      	mov	r3, r2
 800f18e:	460a      	mov	r2, r1
 800f190:	4601      	mov	r1, r0
 800f192:	4803      	ldr	r0, [pc, #12]	; (800f1a0 <vsniprintf+0x18>)
 800f194:	6800      	ldr	r0, [r0, #0]
 800f196:	f7ff ffcc 	bl	800f132 <_vsniprintf_r>
 800f19a:	b003      	add	sp, #12
 800f19c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1a0:	24000078 	.word	0x24000078

0800f1a4 <memset>:
 800f1a4:	4402      	add	r2, r0
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d100      	bne.n	800f1ae <memset+0xa>
 800f1ac:	4770      	bx	lr
 800f1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f1b2:	e7f9      	b.n	800f1a8 <memset+0x4>

0800f1b4 <__errno>:
 800f1b4:	4b01      	ldr	r3, [pc, #4]	; (800f1bc <__errno+0x8>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	24000078 	.word	0x24000078

0800f1c0 <__libc_init_array>:
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	4d0d      	ldr	r5, [pc, #52]	; (800f1f8 <__libc_init_array+0x38>)
 800f1c4:	4c0d      	ldr	r4, [pc, #52]	; (800f1fc <__libc_init_array+0x3c>)
 800f1c6:	1b64      	subs	r4, r4, r5
 800f1c8:	10a4      	asrs	r4, r4, #2
 800f1ca:	2600      	movs	r6, #0
 800f1cc:	42a6      	cmp	r6, r4
 800f1ce:	d109      	bne.n	800f1e4 <__libc_init_array+0x24>
 800f1d0:	4d0b      	ldr	r5, [pc, #44]	; (800f200 <__libc_init_array+0x40>)
 800f1d2:	4c0c      	ldr	r4, [pc, #48]	; (800f204 <__libc_init_array+0x44>)
 800f1d4:	f000 fc6a 	bl	800faac <_init>
 800f1d8:	1b64      	subs	r4, r4, r5
 800f1da:	10a4      	asrs	r4, r4, #2
 800f1dc:	2600      	movs	r6, #0
 800f1de:	42a6      	cmp	r6, r4
 800f1e0:	d105      	bne.n	800f1ee <__libc_init_array+0x2e>
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e8:	4798      	blx	r3
 800f1ea:	3601      	adds	r6, #1
 800f1ec:	e7ee      	b.n	800f1cc <__libc_init_array+0xc>
 800f1ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f2:	4798      	blx	r3
 800f1f4:	3601      	adds	r6, #1
 800f1f6:	e7f2      	b.n	800f1de <__libc_init_array+0x1e>
 800f1f8:	0800fb84 	.word	0x0800fb84
 800f1fc:	0800fb84 	.word	0x0800fb84
 800f200:	0800fb84 	.word	0x0800fb84
 800f204:	0800fb88 	.word	0x0800fb88

0800f208 <__retarget_lock_acquire_recursive>:
 800f208:	4770      	bx	lr

0800f20a <__retarget_lock_release_recursive>:
 800f20a:	4770      	bx	lr

0800f20c <memcpy>:
 800f20c:	440a      	add	r2, r1
 800f20e:	4291      	cmp	r1, r2
 800f210:	f100 33ff 	add.w	r3, r0, #4294967295
 800f214:	d100      	bne.n	800f218 <memcpy+0xc>
 800f216:	4770      	bx	lr
 800f218:	b510      	push	{r4, lr}
 800f21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f21e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f222:	4291      	cmp	r1, r2
 800f224:	d1f9      	bne.n	800f21a <memcpy+0xe>
 800f226:	bd10      	pop	{r4, pc}

0800f228 <_free_r>:
 800f228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f22a:	2900      	cmp	r1, #0
 800f22c:	d044      	beq.n	800f2b8 <_free_r+0x90>
 800f22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f232:	9001      	str	r0, [sp, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f1a1 0404 	sub.w	r4, r1, #4
 800f23a:	bfb8      	it	lt
 800f23c:	18e4      	addlt	r4, r4, r3
 800f23e:	f000 f8df 	bl	800f400 <__malloc_lock>
 800f242:	4a1e      	ldr	r2, [pc, #120]	; (800f2bc <_free_r+0x94>)
 800f244:	9801      	ldr	r0, [sp, #4]
 800f246:	6813      	ldr	r3, [r2, #0]
 800f248:	b933      	cbnz	r3, 800f258 <_free_r+0x30>
 800f24a:	6063      	str	r3, [r4, #4]
 800f24c:	6014      	str	r4, [r2, #0]
 800f24e:	b003      	add	sp, #12
 800f250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f254:	f000 b8da 	b.w	800f40c <__malloc_unlock>
 800f258:	42a3      	cmp	r3, r4
 800f25a:	d908      	bls.n	800f26e <_free_r+0x46>
 800f25c:	6825      	ldr	r5, [r4, #0]
 800f25e:	1961      	adds	r1, r4, r5
 800f260:	428b      	cmp	r3, r1
 800f262:	bf01      	itttt	eq
 800f264:	6819      	ldreq	r1, [r3, #0]
 800f266:	685b      	ldreq	r3, [r3, #4]
 800f268:	1949      	addeq	r1, r1, r5
 800f26a:	6021      	streq	r1, [r4, #0]
 800f26c:	e7ed      	b.n	800f24a <_free_r+0x22>
 800f26e:	461a      	mov	r2, r3
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	b10b      	cbz	r3, 800f278 <_free_r+0x50>
 800f274:	42a3      	cmp	r3, r4
 800f276:	d9fa      	bls.n	800f26e <_free_r+0x46>
 800f278:	6811      	ldr	r1, [r2, #0]
 800f27a:	1855      	adds	r5, r2, r1
 800f27c:	42a5      	cmp	r5, r4
 800f27e:	d10b      	bne.n	800f298 <_free_r+0x70>
 800f280:	6824      	ldr	r4, [r4, #0]
 800f282:	4421      	add	r1, r4
 800f284:	1854      	adds	r4, r2, r1
 800f286:	42a3      	cmp	r3, r4
 800f288:	6011      	str	r1, [r2, #0]
 800f28a:	d1e0      	bne.n	800f24e <_free_r+0x26>
 800f28c:	681c      	ldr	r4, [r3, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	6053      	str	r3, [r2, #4]
 800f292:	440c      	add	r4, r1
 800f294:	6014      	str	r4, [r2, #0]
 800f296:	e7da      	b.n	800f24e <_free_r+0x26>
 800f298:	d902      	bls.n	800f2a0 <_free_r+0x78>
 800f29a:	230c      	movs	r3, #12
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	e7d6      	b.n	800f24e <_free_r+0x26>
 800f2a0:	6825      	ldr	r5, [r4, #0]
 800f2a2:	1961      	adds	r1, r4, r5
 800f2a4:	428b      	cmp	r3, r1
 800f2a6:	bf04      	itt	eq
 800f2a8:	6819      	ldreq	r1, [r3, #0]
 800f2aa:	685b      	ldreq	r3, [r3, #4]
 800f2ac:	6063      	str	r3, [r4, #4]
 800f2ae:	bf04      	itt	eq
 800f2b0:	1949      	addeq	r1, r1, r5
 800f2b2:	6021      	streq	r1, [r4, #0]
 800f2b4:	6054      	str	r4, [r2, #4]
 800f2b6:	e7ca      	b.n	800f24e <_free_r+0x26>
 800f2b8:	b003      	add	sp, #12
 800f2ba:	bd30      	pop	{r4, r5, pc}
 800f2bc:	24001f3c 	.word	0x24001f3c

0800f2c0 <sbrk_aligned>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4e0e      	ldr	r6, [pc, #56]	; (800f2fc <sbrk_aligned+0x3c>)
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	6831      	ldr	r1, [r6, #0]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	b911      	cbnz	r1, 800f2d2 <sbrk_aligned+0x12>
 800f2cc:	f000 fba6 	bl	800fa1c <_sbrk_r>
 800f2d0:	6030      	str	r0, [r6, #0]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 fba1 	bl	800fa1c <_sbrk_r>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d00a      	beq.n	800f2f4 <sbrk_aligned+0x34>
 800f2de:	1cc4      	adds	r4, r0, #3
 800f2e0:	f024 0403 	bic.w	r4, r4, #3
 800f2e4:	42a0      	cmp	r0, r4
 800f2e6:	d007      	beq.n	800f2f8 <sbrk_aligned+0x38>
 800f2e8:	1a21      	subs	r1, r4, r0
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f000 fb96 	bl	800fa1c <_sbrk_r>
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d101      	bne.n	800f2f8 <sbrk_aligned+0x38>
 800f2f4:	f04f 34ff 	mov.w	r4, #4294967295
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	24001f40 	.word	0x24001f40

0800f300 <_malloc_r>:
 800f300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f304:	1ccd      	adds	r5, r1, #3
 800f306:	f025 0503 	bic.w	r5, r5, #3
 800f30a:	3508      	adds	r5, #8
 800f30c:	2d0c      	cmp	r5, #12
 800f30e:	bf38      	it	cc
 800f310:	250c      	movcc	r5, #12
 800f312:	2d00      	cmp	r5, #0
 800f314:	4607      	mov	r7, r0
 800f316:	db01      	blt.n	800f31c <_malloc_r+0x1c>
 800f318:	42a9      	cmp	r1, r5
 800f31a:	d905      	bls.n	800f328 <_malloc_r+0x28>
 800f31c:	230c      	movs	r3, #12
 800f31e:	603b      	str	r3, [r7, #0]
 800f320:	2600      	movs	r6, #0
 800f322:	4630      	mov	r0, r6
 800f324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f328:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3fc <_malloc_r+0xfc>
 800f32c:	f000 f868 	bl	800f400 <__malloc_lock>
 800f330:	f8d8 3000 	ldr.w	r3, [r8]
 800f334:	461c      	mov	r4, r3
 800f336:	bb5c      	cbnz	r4, 800f390 <_malloc_r+0x90>
 800f338:	4629      	mov	r1, r5
 800f33a:	4638      	mov	r0, r7
 800f33c:	f7ff ffc0 	bl	800f2c0 <sbrk_aligned>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	4604      	mov	r4, r0
 800f344:	d155      	bne.n	800f3f2 <_malloc_r+0xf2>
 800f346:	f8d8 4000 	ldr.w	r4, [r8]
 800f34a:	4626      	mov	r6, r4
 800f34c:	2e00      	cmp	r6, #0
 800f34e:	d145      	bne.n	800f3dc <_malloc_r+0xdc>
 800f350:	2c00      	cmp	r4, #0
 800f352:	d048      	beq.n	800f3e6 <_malloc_r+0xe6>
 800f354:	6823      	ldr	r3, [r4, #0]
 800f356:	4631      	mov	r1, r6
 800f358:	4638      	mov	r0, r7
 800f35a:	eb04 0903 	add.w	r9, r4, r3
 800f35e:	f000 fb5d 	bl	800fa1c <_sbrk_r>
 800f362:	4581      	cmp	r9, r0
 800f364:	d13f      	bne.n	800f3e6 <_malloc_r+0xe6>
 800f366:	6821      	ldr	r1, [r4, #0]
 800f368:	1a6d      	subs	r5, r5, r1
 800f36a:	4629      	mov	r1, r5
 800f36c:	4638      	mov	r0, r7
 800f36e:	f7ff ffa7 	bl	800f2c0 <sbrk_aligned>
 800f372:	3001      	adds	r0, #1
 800f374:	d037      	beq.n	800f3e6 <_malloc_r+0xe6>
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	442b      	add	r3, r5
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	f8d8 3000 	ldr.w	r3, [r8]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d038      	beq.n	800f3f6 <_malloc_r+0xf6>
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	42a2      	cmp	r2, r4
 800f388:	d12b      	bne.n	800f3e2 <_malloc_r+0xe2>
 800f38a:	2200      	movs	r2, #0
 800f38c:	605a      	str	r2, [r3, #4]
 800f38e:	e00f      	b.n	800f3b0 <_malloc_r+0xb0>
 800f390:	6822      	ldr	r2, [r4, #0]
 800f392:	1b52      	subs	r2, r2, r5
 800f394:	d41f      	bmi.n	800f3d6 <_malloc_r+0xd6>
 800f396:	2a0b      	cmp	r2, #11
 800f398:	d917      	bls.n	800f3ca <_malloc_r+0xca>
 800f39a:	1961      	adds	r1, r4, r5
 800f39c:	42a3      	cmp	r3, r4
 800f39e:	6025      	str	r5, [r4, #0]
 800f3a0:	bf18      	it	ne
 800f3a2:	6059      	strne	r1, [r3, #4]
 800f3a4:	6863      	ldr	r3, [r4, #4]
 800f3a6:	bf08      	it	eq
 800f3a8:	f8c8 1000 	streq.w	r1, [r8]
 800f3ac:	5162      	str	r2, [r4, r5]
 800f3ae:	604b      	str	r3, [r1, #4]
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	f104 060b 	add.w	r6, r4, #11
 800f3b6:	f000 f829 	bl	800f40c <__malloc_unlock>
 800f3ba:	f026 0607 	bic.w	r6, r6, #7
 800f3be:	1d23      	adds	r3, r4, #4
 800f3c0:	1af2      	subs	r2, r6, r3
 800f3c2:	d0ae      	beq.n	800f322 <_malloc_r+0x22>
 800f3c4:	1b9b      	subs	r3, r3, r6
 800f3c6:	50a3      	str	r3, [r4, r2]
 800f3c8:	e7ab      	b.n	800f322 <_malloc_r+0x22>
 800f3ca:	42a3      	cmp	r3, r4
 800f3cc:	6862      	ldr	r2, [r4, #4]
 800f3ce:	d1dd      	bne.n	800f38c <_malloc_r+0x8c>
 800f3d0:	f8c8 2000 	str.w	r2, [r8]
 800f3d4:	e7ec      	b.n	800f3b0 <_malloc_r+0xb0>
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	6864      	ldr	r4, [r4, #4]
 800f3da:	e7ac      	b.n	800f336 <_malloc_r+0x36>
 800f3dc:	4634      	mov	r4, r6
 800f3de:	6876      	ldr	r6, [r6, #4]
 800f3e0:	e7b4      	b.n	800f34c <_malloc_r+0x4c>
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	e7cc      	b.n	800f380 <_malloc_r+0x80>
 800f3e6:	230c      	movs	r3, #12
 800f3e8:	603b      	str	r3, [r7, #0]
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	f000 f80e 	bl	800f40c <__malloc_unlock>
 800f3f0:	e797      	b.n	800f322 <_malloc_r+0x22>
 800f3f2:	6025      	str	r5, [r4, #0]
 800f3f4:	e7dc      	b.n	800f3b0 <_malloc_r+0xb0>
 800f3f6:	605b      	str	r3, [r3, #4]
 800f3f8:	deff      	udf	#255	; 0xff
 800f3fa:	bf00      	nop
 800f3fc:	24001f3c 	.word	0x24001f3c

0800f400 <__malloc_lock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_lock+0x8>)
 800f402:	f7ff bf01 	b.w	800f208 <__retarget_lock_acquire_recursive>
 800f406:	bf00      	nop
 800f408:	24001f38 	.word	0x24001f38

0800f40c <__malloc_unlock>:
 800f40c:	4801      	ldr	r0, [pc, #4]	; (800f414 <__malloc_unlock+0x8>)
 800f40e:	f7ff befc 	b.w	800f20a <__retarget_lock_release_recursive>
 800f412:	bf00      	nop
 800f414:	24001f38 	.word	0x24001f38

0800f418 <__ssputs_r>:
 800f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	688e      	ldr	r6, [r1, #8]
 800f41e:	461f      	mov	r7, r3
 800f420:	42be      	cmp	r6, r7
 800f422:	680b      	ldr	r3, [r1, #0]
 800f424:	4682      	mov	sl, r0
 800f426:	460c      	mov	r4, r1
 800f428:	4690      	mov	r8, r2
 800f42a:	d82c      	bhi.n	800f486 <__ssputs_r+0x6e>
 800f42c:	898a      	ldrh	r2, [r1, #12]
 800f42e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f432:	d026      	beq.n	800f482 <__ssputs_r+0x6a>
 800f434:	6965      	ldr	r5, [r4, #20]
 800f436:	6909      	ldr	r1, [r1, #16]
 800f438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f43c:	eba3 0901 	sub.w	r9, r3, r1
 800f440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f444:	1c7b      	adds	r3, r7, #1
 800f446:	444b      	add	r3, r9
 800f448:	106d      	asrs	r5, r5, #1
 800f44a:	429d      	cmp	r5, r3
 800f44c:	bf38      	it	cc
 800f44e:	461d      	movcc	r5, r3
 800f450:	0553      	lsls	r3, r2, #21
 800f452:	d527      	bpl.n	800f4a4 <__ssputs_r+0x8c>
 800f454:	4629      	mov	r1, r5
 800f456:	f7ff ff53 	bl	800f300 <_malloc_r>
 800f45a:	4606      	mov	r6, r0
 800f45c:	b360      	cbz	r0, 800f4b8 <__ssputs_r+0xa0>
 800f45e:	6921      	ldr	r1, [r4, #16]
 800f460:	464a      	mov	r2, r9
 800f462:	f7ff fed3 	bl	800f20c <memcpy>
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	6126      	str	r6, [r4, #16]
 800f474:	6165      	str	r5, [r4, #20]
 800f476:	444e      	add	r6, r9
 800f478:	eba5 0509 	sub.w	r5, r5, r9
 800f47c:	6026      	str	r6, [r4, #0]
 800f47e:	60a5      	str	r5, [r4, #8]
 800f480:	463e      	mov	r6, r7
 800f482:	42be      	cmp	r6, r7
 800f484:	d900      	bls.n	800f488 <__ssputs_r+0x70>
 800f486:	463e      	mov	r6, r7
 800f488:	6820      	ldr	r0, [r4, #0]
 800f48a:	4632      	mov	r2, r6
 800f48c:	4641      	mov	r1, r8
 800f48e:	f000 faab 	bl	800f9e8 <memmove>
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	1b9b      	subs	r3, r3, r6
 800f496:	60a3      	str	r3, [r4, #8]
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	4433      	add	r3, r6
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a4:	462a      	mov	r2, r5
 800f4a6:	f000 fac9 	bl	800fa3c <_realloc_r>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d1e0      	bne.n	800f472 <__ssputs_r+0x5a>
 800f4b0:	6921      	ldr	r1, [r4, #16]
 800f4b2:	4650      	mov	r0, sl
 800f4b4:	f7ff feb8 	bl	800f228 <_free_r>
 800f4b8:	230c      	movs	r3, #12
 800f4ba:	f8ca 3000 	str.w	r3, [sl]
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ca:	e7e9      	b.n	800f4a0 <__ssputs_r+0x88>

0800f4cc <_svfiprintf_r>:
 800f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	4698      	mov	r8, r3
 800f4d2:	898b      	ldrh	r3, [r1, #12]
 800f4d4:	061b      	lsls	r3, r3, #24
 800f4d6:	b09d      	sub	sp, #116	; 0x74
 800f4d8:	4607      	mov	r7, r0
 800f4da:	460d      	mov	r5, r1
 800f4dc:	4614      	mov	r4, r2
 800f4de:	d50e      	bpl.n	800f4fe <_svfiprintf_r+0x32>
 800f4e0:	690b      	ldr	r3, [r1, #16]
 800f4e2:	b963      	cbnz	r3, 800f4fe <_svfiprintf_r+0x32>
 800f4e4:	2140      	movs	r1, #64	; 0x40
 800f4e6:	f7ff ff0b 	bl	800f300 <_malloc_r>
 800f4ea:	6028      	str	r0, [r5, #0]
 800f4ec:	6128      	str	r0, [r5, #16]
 800f4ee:	b920      	cbnz	r0, 800f4fa <_svfiprintf_r+0x2e>
 800f4f0:	230c      	movs	r3, #12
 800f4f2:	603b      	str	r3, [r7, #0]
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	e0d0      	b.n	800f69c <_svfiprintf_r+0x1d0>
 800f4fa:	2340      	movs	r3, #64	; 0x40
 800f4fc:	616b      	str	r3, [r5, #20]
 800f4fe:	2300      	movs	r3, #0
 800f500:	9309      	str	r3, [sp, #36]	; 0x24
 800f502:	2320      	movs	r3, #32
 800f504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f508:	f8cd 800c 	str.w	r8, [sp, #12]
 800f50c:	2330      	movs	r3, #48	; 0x30
 800f50e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f6b4 <_svfiprintf_r+0x1e8>
 800f512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f516:	f04f 0901 	mov.w	r9, #1
 800f51a:	4623      	mov	r3, r4
 800f51c:	469a      	mov	sl, r3
 800f51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f522:	b10a      	cbz	r2, 800f528 <_svfiprintf_r+0x5c>
 800f524:	2a25      	cmp	r2, #37	; 0x25
 800f526:	d1f9      	bne.n	800f51c <_svfiprintf_r+0x50>
 800f528:	ebba 0b04 	subs.w	fp, sl, r4
 800f52c:	d00b      	beq.n	800f546 <_svfiprintf_r+0x7a>
 800f52e:	465b      	mov	r3, fp
 800f530:	4622      	mov	r2, r4
 800f532:	4629      	mov	r1, r5
 800f534:	4638      	mov	r0, r7
 800f536:	f7ff ff6f 	bl	800f418 <__ssputs_r>
 800f53a:	3001      	adds	r0, #1
 800f53c:	f000 80a9 	beq.w	800f692 <_svfiprintf_r+0x1c6>
 800f540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f542:	445a      	add	r2, fp
 800f544:	9209      	str	r2, [sp, #36]	; 0x24
 800f546:	f89a 3000 	ldrb.w	r3, [sl]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f000 80a1 	beq.w	800f692 <_svfiprintf_r+0x1c6>
 800f550:	2300      	movs	r3, #0
 800f552:	f04f 32ff 	mov.w	r2, #4294967295
 800f556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f55a:	f10a 0a01 	add.w	sl, sl, #1
 800f55e:	9304      	str	r3, [sp, #16]
 800f560:	9307      	str	r3, [sp, #28]
 800f562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f566:	931a      	str	r3, [sp, #104]	; 0x68
 800f568:	4654      	mov	r4, sl
 800f56a:	2205      	movs	r2, #5
 800f56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f570:	4850      	ldr	r0, [pc, #320]	; (800f6b4 <_svfiprintf_r+0x1e8>)
 800f572:	f7f0 febd 	bl	80002f0 <memchr>
 800f576:	9a04      	ldr	r2, [sp, #16]
 800f578:	b9d8      	cbnz	r0, 800f5b2 <_svfiprintf_r+0xe6>
 800f57a:	06d0      	lsls	r0, r2, #27
 800f57c:	bf44      	itt	mi
 800f57e:	2320      	movmi	r3, #32
 800f580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f584:	0711      	lsls	r1, r2, #28
 800f586:	bf44      	itt	mi
 800f588:	232b      	movmi	r3, #43	; 0x2b
 800f58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f58e:	f89a 3000 	ldrb.w	r3, [sl]
 800f592:	2b2a      	cmp	r3, #42	; 0x2a
 800f594:	d015      	beq.n	800f5c2 <_svfiprintf_r+0xf6>
 800f596:	9a07      	ldr	r2, [sp, #28]
 800f598:	4654      	mov	r4, sl
 800f59a:	2000      	movs	r0, #0
 800f59c:	f04f 0c0a 	mov.w	ip, #10
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5a6:	3b30      	subs	r3, #48	; 0x30
 800f5a8:	2b09      	cmp	r3, #9
 800f5aa:	d94d      	bls.n	800f648 <_svfiprintf_r+0x17c>
 800f5ac:	b1b0      	cbz	r0, 800f5dc <_svfiprintf_r+0x110>
 800f5ae:	9207      	str	r2, [sp, #28]
 800f5b0:	e014      	b.n	800f5dc <_svfiprintf_r+0x110>
 800f5b2:	eba0 0308 	sub.w	r3, r0, r8
 800f5b6:	fa09 f303 	lsl.w	r3, r9, r3
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	46a2      	mov	sl, r4
 800f5c0:	e7d2      	b.n	800f568 <_svfiprintf_r+0x9c>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	1d19      	adds	r1, r3, #4
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	9103      	str	r1, [sp, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	bfbb      	ittet	lt
 800f5ce:	425b      	neglt	r3, r3
 800f5d0:	f042 0202 	orrlt.w	r2, r2, #2
 800f5d4:	9307      	strge	r3, [sp, #28]
 800f5d6:	9307      	strlt	r3, [sp, #28]
 800f5d8:	bfb8      	it	lt
 800f5da:	9204      	strlt	r2, [sp, #16]
 800f5dc:	7823      	ldrb	r3, [r4, #0]
 800f5de:	2b2e      	cmp	r3, #46	; 0x2e
 800f5e0:	d10c      	bne.n	800f5fc <_svfiprintf_r+0x130>
 800f5e2:	7863      	ldrb	r3, [r4, #1]
 800f5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f5e6:	d134      	bne.n	800f652 <_svfiprintf_r+0x186>
 800f5e8:	9b03      	ldr	r3, [sp, #12]
 800f5ea:	1d1a      	adds	r2, r3, #4
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	9203      	str	r2, [sp, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bfb8      	it	lt
 800f5f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5f8:	3402      	adds	r4, #2
 800f5fa:	9305      	str	r3, [sp, #20]
 800f5fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f6c4 <_svfiprintf_r+0x1f8>
 800f600:	7821      	ldrb	r1, [r4, #0]
 800f602:	2203      	movs	r2, #3
 800f604:	4650      	mov	r0, sl
 800f606:	f7f0 fe73 	bl	80002f0 <memchr>
 800f60a:	b138      	cbz	r0, 800f61c <_svfiprintf_r+0x150>
 800f60c:	9b04      	ldr	r3, [sp, #16]
 800f60e:	eba0 000a 	sub.w	r0, r0, sl
 800f612:	2240      	movs	r2, #64	; 0x40
 800f614:	4082      	lsls	r2, r0
 800f616:	4313      	orrs	r3, r2
 800f618:	3401      	adds	r4, #1
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f620:	4825      	ldr	r0, [pc, #148]	; (800f6b8 <_svfiprintf_r+0x1ec>)
 800f622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f626:	2206      	movs	r2, #6
 800f628:	f7f0 fe62 	bl	80002f0 <memchr>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d038      	beq.n	800f6a2 <_svfiprintf_r+0x1d6>
 800f630:	4b22      	ldr	r3, [pc, #136]	; (800f6bc <_svfiprintf_r+0x1f0>)
 800f632:	bb1b      	cbnz	r3, 800f67c <_svfiprintf_r+0x1b0>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	3307      	adds	r3, #7
 800f638:	f023 0307 	bic.w	r3, r3, #7
 800f63c:	3308      	adds	r3, #8
 800f63e:	9303      	str	r3, [sp, #12]
 800f640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f642:	4433      	add	r3, r6
 800f644:	9309      	str	r3, [sp, #36]	; 0x24
 800f646:	e768      	b.n	800f51a <_svfiprintf_r+0x4e>
 800f648:	fb0c 3202 	mla	r2, ip, r2, r3
 800f64c:	460c      	mov	r4, r1
 800f64e:	2001      	movs	r0, #1
 800f650:	e7a6      	b.n	800f5a0 <_svfiprintf_r+0xd4>
 800f652:	2300      	movs	r3, #0
 800f654:	3401      	adds	r4, #1
 800f656:	9305      	str	r3, [sp, #20]
 800f658:	4619      	mov	r1, r3
 800f65a:	f04f 0c0a 	mov.w	ip, #10
 800f65e:	4620      	mov	r0, r4
 800f660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f664:	3a30      	subs	r2, #48	; 0x30
 800f666:	2a09      	cmp	r2, #9
 800f668:	d903      	bls.n	800f672 <_svfiprintf_r+0x1a6>
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d0c6      	beq.n	800f5fc <_svfiprintf_r+0x130>
 800f66e:	9105      	str	r1, [sp, #20]
 800f670:	e7c4      	b.n	800f5fc <_svfiprintf_r+0x130>
 800f672:	fb0c 2101 	mla	r1, ip, r1, r2
 800f676:	4604      	mov	r4, r0
 800f678:	2301      	movs	r3, #1
 800f67a:	e7f0      	b.n	800f65e <_svfiprintf_r+0x192>
 800f67c:	ab03      	add	r3, sp, #12
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	462a      	mov	r2, r5
 800f682:	4b0f      	ldr	r3, [pc, #60]	; (800f6c0 <_svfiprintf_r+0x1f4>)
 800f684:	a904      	add	r1, sp, #16
 800f686:	4638      	mov	r0, r7
 800f688:	f3af 8000 	nop.w
 800f68c:	1c42      	adds	r2, r0, #1
 800f68e:	4606      	mov	r6, r0
 800f690:	d1d6      	bne.n	800f640 <_svfiprintf_r+0x174>
 800f692:	89ab      	ldrh	r3, [r5, #12]
 800f694:	065b      	lsls	r3, r3, #25
 800f696:	f53f af2d 	bmi.w	800f4f4 <_svfiprintf_r+0x28>
 800f69a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f69c:	b01d      	add	sp, #116	; 0x74
 800f69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a2:	ab03      	add	r3, sp, #12
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	462a      	mov	r2, r5
 800f6a8:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <_svfiprintf_r+0x1f4>)
 800f6aa:	a904      	add	r1, sp, #16
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	f000 f879 	bl	800f7a4 <_printf_i>
 800f6b2:	e7eb      	b.n	800f68c <_svfiprintf_r+0x1c0>
 800f6b4:	0800fb49 	.word	0x0800fb49
 800f6b8:	0800fb53 	.word	0x0800fb53
 800f6bc:	00000000 	.word	0x00000000
 800f6c0:	0800f419 	.word	0x0800f419
 800f6c4:	0800fb4f 	.word	0x0800fb4f

0800f6c8 <_printf_common>:
 800f6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6cc:	4616      	mov	r6, r2
 800f6ce:	4699      	mov	r9, r3
 800f6d0:	688a      	ldr	r2, [r1, #8]
 800f6d2:	690b      	ldr	r3, [r1, #16]
 800f6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	bfb8      	it	lt
 800f6dc:	4613      	movlt	r3, r2
 800f6de:	6033      	str	r3, [r6, #0]
 800f6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	b10a      	cbz	r2, 800f6ee <_printf_common+0x26>
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	6033      	str	r3, [r6, #0]
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	0699      	lsls	r1, r3, #26
 800f6f2:	bf42      	ittt	mi
 800f6f4:	6833      	ldrmi	r3, [r6, #0]
 800f6f6:	3302      	addmi	r3, #2
 800f6f8:	6033      	strmi	r3, [r6, #0]
 800f6fa:	6825      	ldr	r5, [r4, #0]
 800f6fc:	f015 0506 	ands.w	r5, r5, #6
 800f700:	d106      	bne.n	800f710 <_printf_common+0x48>
 800f702:	f104 0a19 	add.w	sl, r4, #25
 800f706:	68e3      	ldr	r3, [r4, #12]
 800f708:	6832      	ldr	r2, [r6, #0]
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dc26      	bgt.n	800f75e <_printf_common+0x96>
 800f710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f714:	1e13      	subs	r3, r2, #0
 800f716:	6822      	ldr	r2, [r4, #0]
 800f718:	bf18      	it	ne
 800f71a:	2301      	movne	r3, #1
 800f71c:	0692      	lsls	r2, r2, #26
 800f71e:	d42b      	bmi.n	800f778 <_printf_common+0xb0>
 800f720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f724:	4649      	mov	r1, r9
 800f726:	4638      	mov	r0, r7
 800f728:	47c0      	blx	r8
 800f72a:	3001      	adds	r0, #1
 800f72c:	d01e      	beq.n	800f76c <_printf_common+0xa4>
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	6922      	ldr	r2, [r4, #16]
 800f732:	f003 0306 	and.w	r3, r3, #6
 800f736:	2b04      	cmp	r3, #4
 800f738:	bf02      	ittt	eq
 800f73a:	68e5      	ldreq	r5, [r4, #12]
 800f73c:	6833      	ldreq	r3, [r6, #0]
 800f73e:	1aed      	subeq	r5, r5, r3
 800f740:	68a3      	ldr	r3, [r4, #8]
 800f742:	bf0c      	ite	eq
 800f744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f748:	2500      	movne	r5, #0
 800f74a:	4293      	cmp	r3, r2
 800f74c:	bfc4      	itt	gt
 800f74e:	1a9b      	subgt	r3, r3, r2
 800f750:	18ed      	addgt	r5, r5, r3
 800f752:	2600      	movs	r6, #0
 800f754:	341a      	adds	r4, #26
 800f756:	42b5      	cmp	r5, r6
 800f758:	d11a      	bne.n	800f790 <_printf_common+0xc8>
 800f75a:	2000      	movs	r0, #0
 800f75c:	e008      	b.n	800f770 <_printf_common+0xa8>
 800f75e:	2301      	movs	r3, #1
 800f760:	4652      	mov	r2, sl
 800f762:	4649      	mov	r1, r9
 800f764:	4638      	mov	r0, r7
 800f766:	47c0      	blx	r8
 800f768:	3001      	adds	r0, #1
 800f76a:	d103      	bne.n	800f774 <_printf_common+0xac>
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f774:	3501      	adds	r5, #1
 800f776:	e7c6      	b.n	800f706 <_printf_common+0x3e>
 800f778:	18e1      	adds	r1, r4, r3
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	2030      	movs	r0, #48	; 0x30
 800f77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f782:	4422      	add	r2, r4
 800f784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f78c:	3302      	adds	r3, #2
 800f78e:	e7c7      	b.n	800f720 <_printf_common+0x58>
 800f790:	2301      	movs	r3, #1
 800f792:	4622      	mov	r2, r4
 800f794:	4649      	mov	r1, r9
 800f796:	4638      	mov	r0, r7
 800f798:	47c0      	blx	r8
 800f79a:	3001      	adds	r0, #1
 800f79c:	d0e6      	beq.n	800f76c <_printf_common+0xa4>
 800f79e:	3601      	adds	r6, #1
 800f7a0:	e7d9      	b.n	800f756 <_printf_common+0x8e>
	...

0800f7a4 <_printf_i>:
 800f7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a8:	7e0f      	ldrb	r7, [r1, #24]
 800f7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7ac:	2f78      	cmp	r7, #120	; 0x78
 800f7ae:	4691      	mov	r9, r2
 800f7b0:	4680      	mov	r8, r0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	469a      	mov	sl, r3
 800f7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7ba:	d807      	bhi.n	800f7cc <_printf_i+0x28>
 800f7bc:	2f62      	cmp	r7, #98	; 0x62
 800f7be:	d80a      	bhi.n	800f7d6 <_printf_i+0x32>
 800f7c0:	2f00      	cmp	r7, #0
 800f7c2:	f000 80d4 	beq.w	800f96e <_printf_i+0x1ca>
 800f7c6:	2f58      	cmp	r7, #88	; 0x58
 800f7c8:	f000 80c0 	beq.w	800f94c <_printf_i+0x1a8>
 800f7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7d4:	e03a      	b.n	800f84c <_printf_i+0xa8>
 800f7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7da:	2b15      	cmp	r3, #21
 800f7dc:	d8f6      	bhi.n	800f7cc <_printf_i+0x28>
 800f7de:	a101      	add	r1, pc, #4	; (adr r1, 800f7e4 <_printf_i+0x40>)
 800f7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7e4:	0800f83d 	.word	0x0800f83d
 800f7e8:	0800f851 	.word	0x0800f851
 800f7ec:	0800f7cd 	.word	0x0800f7cd
 800f7f0:	0800f7cd 	.word	0x0800f7cd
 800f7f4:	0800f7cd 	.word	0x0800f7cd
 800f7f8:	0800f7cd 	.word	0x0800f7cd
 800f7fc:	0800f851 	.word	0x0800f851
 800f800:	0800f7cd 	.word	0x0800f7cd
 800f804:	0800f7cd 	.word	0x0800f7cd
 800f808:	0800f7cd 	.word	0x0800f7cd
 800f80c:	0800f7cd 	.word	0x0800f7cd
 800f810:	0800f955 	.word	0x0800f955
 800f814:	0800f87d 	.word	0x0800f87d
 800f818:	0800f90f 	.word	0x0800f90f
 800f81c:	0800f7cd 	.word	0x0800f7cd
 800f820:	0800f7cd 	.word	0x0800f7cd
 800f824:	0800f977 	.word	0x0800f977
 800f828:	0800f7cd 	.word	0x0800f7cd
 800f82c:	0800f87d 	.word	0x0800f87d
 800f830:	0800f7cd 	.word	0x0800f7cd
 800f834:	0800f7cd 	.word	0x0800f7cd
 800f838:	0800f917 	.word	0x0800f917
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	1d1a      	adds	r2, r3, #4
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	602a      	str	r2, [r5, #0]
 800f844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f84c:	2301      	movs	r3, #1
 800f84e:	e09f      	b.n	800f990 <_printf_i+0x1ec>
 800f850:	6820      	ldr	r0, [r4, #0]
 800f852:	682b      	ldr	r3, [r5, #0]
 800f854:	0607      	lsls	r7, r0, #24
 800f856:	f103 0104 	add.w	r1, r3, #4
 800f85a:	6029      	str	r1, [r5, #0]
 800f85c:	d501      	bpl.n	800f862 <_printf_i+0xbe>
 800f85e:	681e      	ldr	r6, [r3, #0]
 800f860:	e003      	b.n	800f86a <_printf_i+0xc6>
 800f862:	0646      	lsls	r6, r0, #25
 800f864:	d5fb      	bpl.n	800f85e <_printf_i+0xba>
 800f866:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f86a:	2e00      	cmp	r6, #0
 800f86c:	da03      	bge.n	800f876 <_printf_i+0xd2>
 800f86e:	232d      	movs	r3, #45	; 0x2d
 800f870:	4276      	negs	r6, r6
 800f872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f876:	485a      	ldr	r0, [pc, #360]	; (800f9e0 <_printf_i+0x23c>)
 800f878:	230a      	movs	r3, #10
 800f87a:	e012      	b.n	800f8a2 <_printf_i+0xfe>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	6820      	ldr	r0, [r4, #0]
 800f880:	1d19      	adds	r1, r3, #4
 800f882:	6029      	str	r1, [r5, #0]
 800f884:	0605      	lsls	r5, r0, #24
 800f886:	d501      	bpl.n	800f88c <_printf_i+0xe8>
 800f888:	681e      	ldr	r6, [r3, #0]
 800f88a:	e002      	b.n	800f892 <_printf_i+0xee>
 800f88c:	0641      	lsls	r1, r0, #25
 800f88e:	d5fb      	bpl.n	800f888 <_printf_i+0xe4>
 800f890:	881e      	ldrh	r6, [r3, #0]
 800f892:	4853      	ldr	r0, [pc, #332]	; (800f9e0 <_printf_i+0x23c>)
 800f894:	2f6f      	cmp	r7, #111	; 0x6f
 800f896:	bf0c      	ite	eq
 800f898:	2308      	moveq	r3, #8
 800f89a:	230a      	movne	r3, #10
 800f89c:	2100      	movs	r1, #0
 800f89e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8a2:	6865      	ldr	r5, [r4, #4]
 800f8a4:	60a5      	str	r5, [r4, #8]
 800f8a6:	2d00      	cmp	r5, #0
 800f8a8:	bfa2      	ittt	ge
 800f8aa:	6821      	ldrge	r1, [r4, #0]
 800f8ac:	f021 0104 	bicge.w	r1, r1, #4
 800f8b0:	6021      	strge	r1, [r4, #0]
 800f8b2:	b90e      	cbnz	r6, 800f8b8 <_printf_i+0x114>
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	d04b      	beq.n	800f950 <_printf_i+0x1ac>
 800f8b8:	4615      	mov	r5, r2
 800f8ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8be:	fb03 6711 	mls	r7, r3, r1, r6
 800f8c2:	5dc7      	ldrb	r7, [r0, r7]
 800f8c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8c8:	4637      	mov	r7, r6
 800f8ca:	42bb      	cmp	r3, r7
 800f8cc:	460e      	mov	r6, r1
 800f8ce:	d9f4      	bls.n	800f8ba <_printf_i+0x116>
 800f8d0:	2b08      	cmp	r3, #8
 800f8d2:	d10b      	bne.n	800f8ec <_printf_i+0x148>
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	07de      	lsls	r6, r3, #31
 800f8d8:	d508      	bpl.n	800f8ec <_printf_i+0x148>
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	6861      	ldr	r1, [r4, #4]
 800f8de:	4299      	cmp	r1, r3
 800f8e0:	bfde      	ittt	le
 800f8e2:	2330      	movle	r3, #48	; 0x30
 800f8e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8ec:	1b52      	subs	r2, r2, r5
 800f8ee:	6122      	str	r2, [r4, #16]
 800f8f0:	f8cd a000 	str.w	sl, [sp]
 800f8f4:	464b      	mov	r3, r9
 800f8f6:	aa03      	add	r2, sp, #12
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	f7ff fee4 	bl	800f6c8 <_printf_common>
 800f900:	3001      	adds	r0, #1
 800f902:	d14a      	bne.n	800f99a <_printf_i+0x1f6>
 800f904:	f04f 30ff 	mov.w	r0, #4294967295
 800f908:	b004      	add	sp, #16
 800f90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	f043 0320 	orr.w	r3, r3, #32
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	4833      	ldr	r0, [pc, #204]	; (800f9e4 <_printf_i+0x240>)
 800f918:	2778      	movs	r7, #120	; 0x78
 800f91a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	6829      	ldr	r1, [r5, #0]
 800f922:	061f      	lsls	r7, r3, #24
 800f924:	f851 6b04 	ldr.w	r6, [r1], #4
 800f928:	d402      	bmi.n	800f930 <_printf_i+0x18c>
 800f92a:	065f      	lsls	r7, r3, #25
 800f92c:	bf48      	it	mi
 800f92e:	b2b6      	uxthmi	r6, r6
 800f930:	07df      	lsls	r7, r3, #31
 800f932:	bf48      	it	mi
 800f934:	f043 0320 	orrmi.w	r3, r3, #32
 800f938:	6029      	str	r1, [r5, #0]
 800f93a:	bf48      	it	mi
 800f93c:	6023      	strmi	r3, [r4, #0]
 800f93e:	b91e      	cbnz	r6, 800f948 <_printf_i+0x1a4>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	f023 0320 	bic.w	r3, r3, #32
 800f946:	6023      	str	r3, [r4, #0]
 800f948:	2310      	movs	r3, #16
 800f94a:	e7a7      	b.n	800f89c <_printf_i+0xf8>
 800f94c:	4824      	ldr	r0, [pc, #144]	; (800f9e0 <_printf_i+0x23c>)
 800f94e:	e7e4      	b.n	800f91a <_printf_i+0x176>
 800f950:	4615      	mov	r5, r2
 800f952:	e7bd      	b.n	800f8d0 <_printf_i+0x12c>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	6826      	ldr	r6, [r4, #0]
 800f958:	6961      	ldr	r1, [r4, #20]
 800f95a:	1d18      	adds	r0, r3, #4
 800f95c:	6028      	str	r0, [r5, #0]
 800f95e:	0635      	lsls	r5, r6, #24
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	d501      	bpl.n	800f968 <_printf_i+0x1c4>
 800f964:	6019      	str	r1, [r3, #0]
 800f966:	e002      	b.n	800f96e <_printf_i+0x1ca>
 800f968:	0670      	lsls	r0, r6, #25
 800f96a:	d5fb      	bpl.n	800f964 <_printf_i+0x1c0>
 800f96c:	8019      	strh	r1, [r3, #0]
 800f96e:	2300      	movs	r3, #0
 800f970:	6123      	str	r3, [r4, #16]
 800f972:	4615      	mov	r5, r2
 800f974:	e7bc      	b.n	800f8f0 <_printf_i+0x14c>
 800f976:	682b      	ldr	r3, [r5, #0]
 800f978:	1d1a      	adds	r2, r3, #4
 800f97a:	602a      	str	r2, [r5, #0]
 800f97c:	681d      	ldr	r5, [r3, #0]
 800f97e:	6862      	ldr	r2, [r4, #4]
 800f980:	2100      	movs	r1, #0
 800f982:	4628      	mov	r0, r5
 800f984:	f7f0 fcb4 	bl	80002f0 <memchr>
 800f988:	b108      	cbz	r0, 800f98e <_printf_i+0x1ea>
 800f98a:	1b40      	subs	r0, r0, r5
 800f98c:	6060      	str	r0, [r4, #4]
 800f98e:	6863      	ldr	r3, [r4, #4]
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	2300      	movs	r3, #0
 800f994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f998:	e7aa      	b.n	800f8f0 <_printf_i+0x14c>
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	462a      	mov	r2, r5
 800f99e:	4649      	mov	r1, r9
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	47d0      	blx	sl
 800f9a4:	3001      	adds	r0, #1
 800f9a6:	d0ad      	beq.n	800f904 <_printf_i+0x160>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	079b      	lsls	r3, r3, #30
 800f9ac:	d413      	bmi.n	800f9d6 <_printf_i+0x232>
 800f9ae:	68e0      	ldr	r0, [r4, #12]
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	4298      	cmp	r0, r3
 800f9b4:	bfb8      	it	lt
 800f9b6:	4618      	movlt	r0, r3
 800f9b8:	e7a6      	b.n	800f908 <_printf_i+0x164>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	4632      	mov	r2, r6
 800f9be:	4649      	mov	r1, r9
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	47d0      	blx	sl
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d09d      	beq.n	800f904 <_printf_i+0x160>
 800f9c8:	3501      	adds	r5, #1
 800f9ca:	68e3      	ldr	r3, [r4, #12]
 800f9cc:	9903      	ldr	r1, [sp, #12]
 800f9ce:	1a5b      	subs	r3, r3, r1
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	dcf2      	bgt.n	800f9ba <_printf_i+0x216>
 800f9d4:	e7eb      	b.n	800f9ae <_printf_i+0x20a>
 800f9d6:	2500      	movs	r5, #0
 800f9d8:	f104 0619 	add.w	r6, r4, #25
 800f9dc:	e7f5      	b.n	800f9ca <_printf_i+0x226>
 800f9de:	bf00      	nop
 800f9e0:	0800fb5a 	.word	0x0800fb5a
 800f9e4:	0800fb6b 	.word	0x0800fb6b

0800f9e8 <memmove>:
 800f9e8:	4288      	cmp	r0, r1
 800f9ea:	b510      	push	{r4, lr}
 800f9ec:	eb01 0402 	add.w	r4, r1, r2
 800f9f0:	d902      	bls.n	800f9f8 <memmove+0x10>
 800f9f2:	4284      	cmp	r4, r0
 800f9f4:	4623      	mov	r3, r4
 800f9f6:	d807      	bhi.n	800fa08 <memmove+0x20>
 800f9f8:	1e43      	subs	r3, r0, #1
 800f9fa:	42a1      	cmp	r1, r4
 800f9fc:	d008      	beq.n	800fa10 <memmove+0x28>
 800f9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa06:	e7f8      	b.n	800f9fa <memmove+0x12>
 800fa08:	4402      	add	r2, r0
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	428a      	cmp	r2, r1
 800fa0e:	d100      	bne.n	800fa12 <memmove+0x2a>
 800fa10:	bd10      	pop	{r4, pc}
 800fa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa1a:	e7f7      	b.n	800fa0c <memmove+0x24>

0800fa1c <_sbrk_r>:
 800fa1c:	b538      	push	{r3, r4, r5, lr}
 800fa1e:	4d06      	ldr	r5, [pc, #24]	; (800fa38 <_sbrk_r+0x1c>)
 800fa20:	2300      	movs	r3, #0
 800fa22:	4604      	mov	r4, r0
 800fa24:	4608      	mov	r0, r1
 800fa26:	602b      	str	r3, [r5, #0]
 800fa28:	f7ff fb24 	bl	800f074 <_sbrk>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_sbrk_r+0x1a>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_sbrk_r+0x1a>
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	24001f34 	.word	0x24001f34

0800fa3c <_realloc_r>:
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	4680      	mov	r8, r0
 800fa42:	4614      	mov	r4, r2
 800fa44:	460e      	mov	r6, r1
 800fa46:	b921      	cbnz	r1, 800fa52 <_realloc_r+0x16>
 800fa48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	f7ff bc57 	b.w	800f300 <_malloc_r>
 800fa52:	b92a      	cbnz	r2, 800fa60 <_realloc_r+0x24>
 800fa54:	f7ff fbe8 	bl	800f228 <_free_r>
 800fa58:	4625      	mov	r5, r4
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa60:	f000 f81b 	bl	800fa9a <_malloc_usable_size_r>
 800fa64:	4284      	cmp	r4, r0
 800fa66:	4607      	mov	r7, r0
 800fa68:	d802      	bhi.n	800fa70 <_realloc_r+0x34>
 800fa6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa6e:	d812      	bhi.n	800fa96 <_realloc_r+0x5a>
 800fa70:	4621      	mov	r1, r4
 800fa72:	4640      	mov	r0, r8
 800fa74:	f7ff fc44 	bl	800f300 <_malloc_r>
 800fa78:	4605      	mov	r5, r0
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d0ed      	beq.n	800fa5a <_realloc_r+0x1e>
 800fa7e:	42bc      	cmp	r4, r7
 800fa80:	4622      	mov	r2, r4
 800fa82:	4631      	mov	r1, r6
 800fa84:	bf28      	it	cs
 800fa86:	463a      	movcs	r2, r7
 800fa88:	f7ff fbc0 	bl	800f20c <memcpy>
 800fa8c:	4631      	mov	r1, r6
 800fa8e:	4640      	mov	r0, r8
 800fa90:	f7ff fbca 	bl	800f228 <_free_r>
 800fa94:	e7e1      	b.n	800fa5a <_realloc_r+0x1e>
 800fa96:	4635      	mov	r5, r6
 800fa98:	e7df      	b.n	800fa5a <_realloc_r+0x1e>

0800fa9a <_malloc_usable_size_r>:
 800fa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa9e:	1f18      	subs	r0, r3, #4
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	bfbc      	itt	lt
 800faa4:	580b      	ldrlt	r3, [r1, r0]
 800faa6:	18c0      	addlt	r0, r0, r3
 800faa8:	4770      	bx	lr
	...

0800faac <_init>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	bf00      	nop
 800fab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fab2:	bc08      	pop	{r3}
 800fab4:	469e      	mov	lr, r3
 800fab6:	4770      	bx	lr

0800fab8 <_fini>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	bf00      	nop
 800fabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fabe:	bc08      	pop	{r3}
 800fac0:	469e      	mov	lr, r3
 800fac2:	4770      	bx	lr
