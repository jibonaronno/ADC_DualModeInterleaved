
ADC_DualModeInterleaved_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c334  0800c334  0001c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c33c  0800c33c  0001c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800c344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c00  24000080  0800c3b0  00020080  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000c80  0800c3b0  00020c80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c5c8  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000301e  00000000  00000000  0003c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015c0  00000000  00000000  0003f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001100  00000000  00000000  00040c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c959  00000000  00000000  00041d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d303  00000000  00000000  0007e6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001987fb  00000000  00000000  0009b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006334  00000000  00000000  002341e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  0023a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c260 	.word	0x0800c260

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800c260 	.word	0x0800c260

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d009      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d006      	beq.n	80006b4 <BSP_LED_Init+0x28>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d003      	beq.n	80006b4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006ac:	f06f 0301 	mvn.w	r3, #1
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b2:	e055      	b.n	8000760 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10f      	bne.n	80006da <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <BSP_LED_Init+0xe0>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <BSP_LED_Init+0xe0>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <BSP_LED_Init+0xe0>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	e021      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10f      	bne.n	8000700 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <BSP_LED_Init+0xe0>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <BSP_LED_Init+0xe0>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <BSP_LED_Init+0xe0>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	e00e      	b.n	800071e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <BSP_LED_Init+0xe0>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <BSP_LED_Init+0xe0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <BSP_LED_Init+0xe0>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <BSP_LED_Init+0xe4>)
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <BSP_LED_Init+0xe8>)
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	f107 0218 	add.w	r2, r7, #24
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fee2 	bl	800550c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <BSP_LED_Init+0xe8>)
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <BSP_LED_Init+0xe4>)
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 f990 	bl	8005a80 <HAL_GPIO_WritePin>
  }

  return ret;
 8000760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000762:	4618      	mov	r0, r3
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	0800c2b8 	.word	0x0800c2b8
 8000774:	24000000 	.word	0x24000000

08000778 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d009      	beq.n	80007a0 <BSP_LED_On+0x28>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d006      	beq.n	80007a0 <BSP_LED_On+0x28>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d003      	beq.n	80007a0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000798:	f06f 0301 	mvn.w	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e00b      	b.n	80007b8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <BSP_LED_On+0x4c>)
 80007a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <BSP_LED_On+0x50>)
 80007ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f005 f964 	bl	8005a80 <HAL_GPIO_WritePin>
  }

  return ret;
 80007b8:	68fb      	ldr	r3, [r7, #12]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000000 	.word	0x24000000
 80007c8:	0800c2b8 	.word	0x0800c2b8

080007cc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d009      	beq.n	80007f4 <BSP_LED_Off+0x28>
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d006      	beq.n	80007f4 <BSP_LED_Off+0x28>
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d003      	beq.n	80007f4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80007ec:	f06f 0301 	mvn.w	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e00b      	b.n	800080c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <BSP_LED_Off+0x4c>)
 80007f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <BSP_LED_Off+0x50>)
 8000800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	f005 f93a 	bl	8005a80 <HAL_GPIO_WritePin>
  }

  return ret;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000000 	.word	0x24000000
 800081c:	0800c2b8 	.word	0x0800c2b8

08000820 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d009      	beq.n	8000848 <BSP_LED_Toggle+0x28>
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d006      	beq.n	8000848 <BSP_LED_Toggle+0x28>
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000840:	f06f 0301 	mvn.w	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e00b      	b.n	8000860 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <BSP_LED_Toggle+0x4c>)
 800084c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4907      	ldr	r1, [pc, #28]	; (8000870 <BSP_LED_Toggle+0x50>)
 8000854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f005 f929 	bl	8005ab2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000860:	68fb      	ldr	r3, [r7, #12]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000000 	.word	0x24000000
 8000870:	0800c2b8 	.word	0x0800c2b8

08000874 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <SystemInit+0xcc>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a30      	ldr	r2, [pc, #192]	; (8000940 <SystemInit+0xcc>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <SystemInit+0xcc>)
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <SystemInit+0xcc>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SystemInit+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <SystemInit+0xd0>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemInit+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemInit+0xd0>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4926      	ldr	r1, [pc, #152]	; (8000944 <SystemInit+0xd0>)
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <SystemInit+0xd4>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemInit+0xd0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemInit+0xd0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <SystemInit+0xd0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemInit+0xd0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemInit+0xd0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <SystemInit+0xd0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <SystemInit+0xd0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <SystemInit+0xd0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <SystemInit+0xd0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <SystemInit+0xd0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <SystemInit+0xd0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <SystemInit+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a12      	ldr	r2, [pc, #72]	; (8000944 <SystemInit+0xd0>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <SystemInit+0xd0>)
 8000902:	2200      	movs	r2, #0
 8000904:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <SystemInit+0xd8>)
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <SystemInit+0xd8>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <SystemInit+0xdc>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <SystemInit+0xe0>)
 8000918:	4013      	ands	r3, r2
 800091a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800091e:	d202      	bcs.n	8000926 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <SystemInit+0xe4>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemInit+0xe8>)
 8000928:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800092c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0xcc>)
 8000930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000934:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	58024400 	.word	0x58024400
 8000948:	eaf6ed7f 	.word	0xeaf6ed7f
 800094c:	580000c0 	.word	0x580000c0
 8000950:	5c001000 	.word	0x5c001000
 8000954:	ffff0000 	.word	0xffff0000
 8000958:	51008108 	.word	0x51008108
 800095c:	52004000 	.word	0x52004000

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000966:	2003      	movs	r0, #3
 8000968:	f002 fa78 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800096c:	f005 ff4a 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 8000970:	4602      	mov	r2, r0
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_Init+0x68>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	4913      	ldr	r1, [pc, #76]	; (80009cc <HAL_Init+0x6c>)
 800097e:	5ccb      	ldrb	r3, [r1, r3]
 8000980:	f003 031f 	and.w	r3, r3, #31
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_Init+0x68>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_Init+0x6c>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <HAL_Init+0x70>)
 80009a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <HAL_Init+0x74>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f81c 	bl	80009e8 <HAL_InitTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e002      	b.n	80009c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ba:	f000 f80d 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58024400 	.word	0x58024400
 80009cc:	0800c2c0 	.word	0x0800c2c0
 80009d0:	24000010 	.word	0x24000010
 80009d4:	2400000c 	.word	0x2400000c

080009d8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_InitTick+0x60>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e021      	b.n	8000a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_InitTick+0x64>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fa63 	bl	8002ede <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f002 fa1f 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x68>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000018 	.word	0x24000018
 8000a4c:	2400000c 	.word	0x2400000c
 8000a50:	24000014 	.word	0x24000014

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	24000018 	.word	0x24000018
 8000a78:	2400009c 	.word	0x2400009c

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2400009c 	.word	0x2400009c

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000018 	.word	0x24000018

08000adc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetREVID+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0c1b      	lsrs	r3, r3, #16
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	5c001000 	.word	0x5c001000

08000af4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3360      	adds	r3, #96	; 0x60
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3360      	adds	r3, #96	; 0x60
 8000bde:	461a      	mov	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	601a      	str	r2, [r3, #0]
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b087      	sub	sp, #28
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	211f      	movs	r1, #31
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0e9b      	lsrs	r3, r3, #26
 8000c62:	f003 011f 	and.w	r1, r3, #31
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c76:	bf00      	nop
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3314      	adds	r3, #20
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0e5b      	lsrs	r3, r3, #25
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	4413      	add	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	0d1b      	lsrs	r3, r3, #20
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	0d1b      	lsrs	r3, r3, #20
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0318 	and.w	r3, r3, #24
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	400b      	ands	r3, r1
 8000d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	000fffff 	.word	0x000fffff

08000d48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 031f 	and.w	r3, r3, #31
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6093      	str	r3, [r2, #8]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	5fffffc0 	.word	0x5fffffc0

08000da4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000db8:	d101      	bne.n	8000dbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	6fffffc0 	.word	0x6fffffc0

08000df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e08:	d101      	bne.n	8000e0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LL_ADC_Enable+0x24>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	7fffffc0 	.word	0x7fffffc0

08000e44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <LL_ADC_Disable+0x24>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	f043 0202 	orr.w	r2, r3, #2
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	7fffffc0 	.word	0x7fffffc0

08000e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <LL_ADC_IsEnabled+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_ADC_IsEnabled+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d101      	bne.n	8000eaa <LL_ADC_IsDisableOngoing+0x18>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <LL_ADC_IsDisableOngoing+0x1a>
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <LL_ADC_REG_StopConversion+0x24>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0210 	orr.w	r2, r3, #16
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	7fffffc0 	.word	0x7fffffc0

08000ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d101      	bne.n	8000ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <LL_ADC_INJ_StopConversion+0x24>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	f043 0220 	orr.w	r2, r3, #32
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	7fffffc0 	.word	0x7fffffc0

08000f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d101      	bne.n	8000f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e18f      	b.n	8001292 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f00a fb1b 	bl	800b5bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff03 	bl	8000da4 <LL_ADC_IsDeepPowerDownEnabled>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fee9 	bl	8000d80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff1e 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d114      	bne.n	8000fe8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff02 	bl	8000dcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fc8:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <HAL_ADC_Init+0x290>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	4a87      	ldr	r2, [pc, #540]	; (80011ec <HAL_ADC_Init+0x294>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	099b      	lsrs	r3, r3, #6
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fda:	e002      	b.n	8000fe2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f9      	bne.n	8000fdc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff01 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffc:	f043 0210 	orr.w	r2, r3, #16
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff61 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 800101e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 8129 	bne.w	8001280 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 8125 	bne.w	8001280 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800103e:	f043 0202 	orr.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff0e 	bl	8000e6c <LL_ADC_IsEnabled>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d136      	bne.n	80010c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a65      	ldr	r2, [pc, #404]	; (80011f0 <HAL_ADC_Init+0x298>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d004      	beq.n	800106a <HAL_ADC_Init+0x112>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a63      	ldr	r2, [pc, #396]	; (80011f4 <HAL_ADC_Init+0x29c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10e      	bne.n	8001088 <HAL_ADC_Init+0x130>
 800106a:	4861      	ldr	r0, [pc, #388]	; (80011f0 <HAL_ADC_Init+0x298>)
 800106c:	f7ff fefe 	bl	8000e6c <LL_ADC_IsEnabled>
 8001070:	4604      	mov	r4, r0
 8001072:	4860      	ldr	r0, [pc, #384]	; (80011f4 <HAL_ADC_Init+0x29c>)
 8001074:	f7ff fefa 	bl	8000e6c <LL_ADC_IsEnabled>
 8001078:	4603      	mov	r3, r0
 800107a:	4323      	orrs	r3, r4
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	e008      	b.n	800109a <HAL_ADC_Init+0x142>
 8001088:	485b      	ldr	r0, [pc, #364]	; (80011f8 <HAL_ADC_Init+0x2a0>)
 800108a:	f7ff feef 	bl	8000e6c <LL_ADC_IsEnabled>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_ADC_Init+0x298>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x15a>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <HAL_ADC_Init+0x29c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_Init+0x15e>
 80010b2:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_ADC_Init+0x2a4>)
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_Init+0x160>
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_ADC_Init+0x2a8>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f7ff fd18 	bl	8000af4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80010c4:	f7ff fd0a 	bl	8000adc <HAL_GetREVID>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d914      	bls.n	80010fc <HAL_ADC_Init+0x1a4>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d110      	bne.n	80010fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80010ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7f1b      	ldrb	r3, [r3, #28]
 80010f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80010f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010f4:	f043 030c 	orr.w	r3, r3, #12
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	e00d      	b.n	8001118 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7d5b      	ldrb	r3, [r3, #21]
 8001100:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001106:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800110c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7f1b      	ldrb	r3, [r3, #28]
 8001112:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7f1b      	ldrb	r3, [r3, #28]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	3b01      	subs	r3, #1
 8001126:	045b      	lsls	r3, r3, #17
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_ADC_Init+0x2ac>)
 8001152:	4013      	ands	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	69b9      	ldr	r1, [r7, #24]
 800115a:	430b      	orrs	r3, r1
 800115c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff febc 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001168:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fede 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001174:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15f      	bne.n	800123c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d15c      	bne.n	800123c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7d1b      	ldrb	r3, [r3, #20]
 8001186:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_ADC_Init+0x2b0>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d130      	bne.n	8001210 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_ADC_Init+0x2b4>)
 80011bc:	4013      	ands	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011c2:	3a01      	subs	r2, #1
 80011c4:	0411      	lsls	r1, r2, #16
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011ca:	4311      	orrs	r1, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011d0:	4311      	orrs	r1, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011d6:	430a      	orrs	r2, r1
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	e01c      	b.n	8001220 <HAL_ADC_Init+0x2c8>
 80011e6:	bf00      	nop
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	053e2d63 	.word	0x053e2d63
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022100 	.word	0x40022100
 80011f8:	58026000 	.word	0x58026000
 80011fc:	40022300 	.word	0x40022300
 8001200:	58026300 	.word	0x58026300
 8001204:	fff0c003 	.word	0xfff0c003
 8001208:	ffffbffc 	.word	0xffffbffc
 800120c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 f97e 	bl	8002538 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10c      	bne.n	800125e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f023 010f 	bic.w	r1, r3, #15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 020f 	bic.w	r2, r2, #15
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f023 0303 	bic.w	r3, r3, #3
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
 800127e:	e007      	b.n	8001290 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001290:	7ffb      	ldrb	r3, [r7, #31]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop

0800129c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e16e      	b.n	800158c <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80012ba:	2103      	movs	r1, #3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 ff01 	bl	80020c4 <ADC_ConversionStop>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80012d4:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f001 f837 	bl	8002350 <ADC_Disable>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_ADC_DeInit+0x294>)
 80012fe:	400b      	ands	r3, r1
 8001300:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800130a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 800131a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800132a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 800133a:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800134a:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6919      	ldr	r1, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_ADC_DeInit+0x298>)
 8001358:	400b      	ands	r3, r1
 800135a:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800136a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 800137a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800138a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80013e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_ADC_DeInit+0x29c>)
 80013f8:	400b      	ands	r3, r1
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_ADC_DeInit+0x2a0>)
 8001408:	400b      	ands	r3, r1
 800140a:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_ADC_DeInit+0x2a0>)
 8001418:	400b      	ands	r3, r1
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_ADC_DeInit+0x2a4>)
 8001428:	400b      	ands	r3, r1
 800142a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	661a      	str	r2, [r3, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	665a      	str	r2, [r3, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	669a      	str	r2, [r3, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 8001472:	400b      	ands	r3, r1
 8001474:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 8001486:	400b      	ands	r3, r1
 8001488:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_ADC_DeInit+0x2a8>)
 800149a:	400b      	ands	r3, r1
 800149c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f002 22f8 	and.w	r2, r2, #4160813056	; 0xf800f800
 80014b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d004      	beq.n	80014c8 <HAL_ADC_DeInit+0x22c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10e      	bne.n	80014e6 <HAL_ADC_DeInit+0x24a>
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 80014ca:	f7ff fccf 	bl	8000e6c <LL_ADC_IsEnabled>
 80014ce:	4604      	mov	r4, r0
 80014d0:	481e      	ldr	r0, [pc, #120]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 80014d2:	f7ff fccb 	bl	8000e6c <LL_ADC_IsEnabled>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4323      	orrs	r3, r4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	e008      	b.n	80014f8 <HAL_ADC_DeInit+0x25c>
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <HAL_ADC_DeInit+0x2b4>)
 80014e8:	f7ff fcc0 	bl	8000e6c <LL_ADC_IsEnabled>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d036      	beq.n	800156a <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d004      	beq.n	8001510 <HAL_ADC_DeInit+0x274>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_ADC_DeInit+0x278>
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_ADC_DeInit+0x2b8>)
 8001512:	e000      	b.n	8001516 <HAL_ADC_DeInit+0x27a>
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_ADC_DeInit+0x2bc>)
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_ADC_DeInit+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_ADC_DeInit+0x290>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_ADC_DeInit+0x2b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d117      	bne.n	800155c <HAL_ADC_DeInit+0x2c0>
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_DeInit+0x2b8>)
 800152e:	e016      	b.n	800155e <HAL_ADC_DeInit+0x2c2>
 8001530:	fffff800 	.word	0xfffff800
 8001534:	fc00f81c 	.word	0xfc00f81c
 8001538:	e0820830 	.word	0xe0820830
 800153c:	e0820820 	.word	0xe0820820
 8001540:	fffff820 	.word	0xfffff820
 8001544:	fff00000 	.word	0xfff00000
 8001548:	40022000 	.word	0x40022000
 800154c:	40022100 	.word	0x40022100
 8001550:	58026000 	.word	0x58026000
 8001554:	40022300 	.word	0x40022300
 8001558:	58026300 	.word	0x58026300
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_ADC_DeInit+0x2f8>)
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_ADC_DeInit+0x2fc>)
 8001560:	400b      	ands	r3, r1
 8001562:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f00a f8bd 	bl	800b6e4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	58026300 	.word	0x58026300
 8001598:	fe0030e0 	.word	0xfe0030e0

0800159c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_IRQHandler+0x30>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a86      	ldr	r2, [pc, #536]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x34>
 80015cc:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_ADC_IRQHandler+0x248>)
 80015ce:	e000      	b.n	80015d2 <HAL_ADC_IRQHandler+0x36>
 80015d0:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_ADC_IRQHandler+0x24c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbb8 	bl	8000d48 <LL_ADC_GetMultimode>
 80015d8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_ADC_IRQHandler+0x78>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 fa4c 	bl	8002aa4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_ADC_IRQHandler+0x8c>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8083 	beq.w	800173a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07d      	beq.n	800173a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fad2 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d062      	beq.n	800172c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5d      	ldr	r2, [pc, #372]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d002      	beq.n	8001676 <HAL_ADC_IRQHandler+0xda>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e000      	b.n	8001678 <HAL_ADC_IRQHandler+0xdc>
 8001676:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	d008      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d002      	beq.n	8001692 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d104      	bne.n	800169c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	e00c      	b.n	80016b6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d002      	beq.n	80016ac <HAL_ADC_IRQHandler+0x110>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	e000      	b.n	80016ae <HAL_ADC_IRQHandler+0x112>
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80016ae:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d135      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d12e      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc04 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11a      	bne.n	8001714 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020c 	bic.w	r2, r2, #12
 80016ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d112      	bne.n	800172c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
 8001712:	e00b      	b.n	800172c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f009 fd6b 	bl	800b208 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_ADC_IRQHandler+0x1b2>
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10b      	bne.n	8001766 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a0 	beq.w	800189a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 809a 	beq.w	800189a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa7d 	bl	8000c82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001788:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa38 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001794:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d002      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x20a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_IRQHandler+0x20c>
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_ADC_IRQHandler+0x240>)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d008      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d104      	bne.n	80017cc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	e014      	b.n	80017f6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_ADC_IRQHandler+0x244>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00a      	beq.n	80017ec <HAL_ADC_IRQHandler+0x250>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e008      	b.n	80017ee <HAL_ADC_IRQHandler+0x252>
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40022100 	.word	0x40022100
 80017e4:	40022300 	.word	0x40022300
 80017e8:	58026300 	.word	0x58026300
 80017ec:	4b84      	ldr	r3, [pc, #528]	; (8001a00 <HAL_ADC_IRQHandler+0x464>)
 80017ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d047      	beq.n	800188c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ADC_IRQHandler+0x27a>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03f      	beq.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d13a      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d133      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12e      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb7c 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800184c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d112      	bne.n	800188c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
 8001872:	e00b      	b.n	800188c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f043 0210 	orr.w	r2, r3, #16
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 f8e1 	bl	8002a54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2260      	movs	r2, #96	; 0x60
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d011      	beq.n	80018c8 <HAL_ADC_IRQHandler+0x32c>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8a8 	bl	8001a10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d012      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x35c>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f001 f8c7 	bl	8002a7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <HAL_ADC_IRQHandler+0x38c>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00d      	beq.n	8001928 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 f8b9 	bl	8002a90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d043      	beq.n	80019ba <HAL_ADC_IRQHandler+0x41e>
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03e      	beq.n	80019ba <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	e021      	b.n	800198e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <HAL_ADC_IRQHandler+0x464>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_ADC_IRQHandler+0x3c8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_ADC_IRQHandler+0x468>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_ADC_IRQHandler+0x3cc>
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_ADC_IRQHandler+0x46c>)
 8001966:	e000      	b.n	800196a <HAL_ADC_IRQHandler+0x3ce>
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_ADC_IRQHandler+0x470>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f9fa 	bl	8000d64 <LL_ADC_GetMultiDMATransfer>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e008      	b.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10e      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f043 0202 	orr.w	r2, r3, #2
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f009 fce5 	bl	800b37c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d018      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x45a>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f001 f839 	bl	8002a68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40022100 	.word	0x40022100
 8001a08:	40022300 	.word	0x40022300
 8001a0c:	58026300 	.word	0x58026300

08001a10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b0a1      	sub	sp, #132	; 0x84
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a9d      	ldr	r2, [pc, #628]	; (8001cb4 <HAL_ADC_ConfigChannel+0x290>)
 8001a3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x2a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e321      	b.n	8002092 <HAL_ADC_ConfigChannel+0x66e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa40 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8306 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d108      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x62>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2201      	movs	r2, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	e016      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e003      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	69d1      	ldr	r1, [r2, #28]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7ff f8ab 	bl	8000c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa01 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8001ade:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa23 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 8001aea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80b3 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80af 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f7ff f8cd 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_ADC_ConfigChannel+0x294>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	e01d      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x14c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x136>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	e00a      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x14c>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d027      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b88:	f7fe ffe8 	bl	8000b5c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7e5b      	ldrb	r3, [r3, #25]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x17e>
 8001b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x180>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f7ff f812 	bl	8000bce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	7e1b      	ldrb	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x19c>
 8001bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x19e>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7fe ffea 	bl	8000b9c <LL_ADC_SetDataRightShift>
 8001bc8:	e047      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d107      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bec:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c10:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	069b      	lsls	r3, r3, #26
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d107      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c34:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d107      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c58:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f904 	bl	8000e6c <LL_ADC_IsEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 820d 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f7ff f841 	bl	8000d00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_ADC_ConfigChannel+0x290>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f040 8133 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d110      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x298>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	bf94      	ite	ls
 8001caa:	2301      	movls	r3, #1
 8001cac:	2300      	movhi	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e01e      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x2cc>
 8001cb2:	bf00      	nop
 8001cb4:	47ff0000 	.word	0x47ff0000
 8001cb8:	5c001000 	.word	0x5c001000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e003      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	bf94      	ite	ls
 8001cea:	2301      	movls	r3, #1
 8001cec:	2300      	movhi	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d079      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2ec>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	3301      	adds	r3, #1
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	e015      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x318>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e003      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x338>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	e017      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x368>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	ea42 0103 	orr.w	r1, r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x38e>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	051b      	lsls	r3, r3, #20
 8001db0:	e018      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x3c0>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e003      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de4:	430b      	orrs	r3, r1
 8001de6:	e07e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x3e0>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	069b      	lsls	r3, r3, #26
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	e015      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x40c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x42c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	e017      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x45c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x488>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	051b      	lsls	r3, r3, #20
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	e01b      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x4c0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
  return result;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f003 021f 	and.w	r2, r3, #31
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	051b      	lsls	r3, r3, #20
 8001ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	6892      	ldr	r2, [r2, #8]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fedc 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f280 80c6 	bge.w	8002086 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a67      	ldr	r2, [pc, #412]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x4ea>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x4ee>
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x4f0>
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fe13 	bl	8000b40 <LL_ADC_GetCommonPathInternalCh>
 8001f1a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5e      	ldr	r2, [pc, #376]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x50c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10e      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x52a>
 8001f30:	485a      	ldr	r0, [pc, #360]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f32:	f7fe ff9b 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f36:	4604      	mov	r4, r0
 8001f38:	4859      	ldr	r0, [pc, #356]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f3a:	f7fe ff97 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4323      	orrs	r3, r4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e008      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x53c>
 8001f4e:	4857      	ldr	r0, [pc, #348]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001f50:	f7fe ff8c 	bl	8000e6c <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d07d      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_ADC_ConfigChannel+0x68c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5ac>
 8001f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d12b      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 8081 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a44      	ldr	r2, [pc, #272]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_ConfigChannel+0x574>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x578>
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x57a>
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8001f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7fe fdb7 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_ADC_ConfigChannel+0x690>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_ADC_ConfigChannel+0x694>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fc0:	e002      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f9      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fce:	e05a      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <HAL_ADC_ConfigChannel+0x698>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11e      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x5f4>
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d119      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d14b      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x5de>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x5e2>
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 8002004:	e000      	b.n	8002008 <HAL_ADC_ConfigChannel+0x5e4>
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7fe fd82 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002016:	e036      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_ADC_ConfigChannel+0x69c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d131      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12c      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_ADC_ConfigChannel+0x688>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d127      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_ADC_ConfigChannel+0x626>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_ADC_ConfigChannel+0x67c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x62a>
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_ADC_ConfigChannel+0x680>)
 800204c:	e000      	b.n	8002050 <HAL_ADC_ConfigChannel+0x62c>
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_ADC_ConfigChannel+0x684>)
 8002050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe fd5e 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
 800205e:	e012      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002072:	e008      	b.n	8002086 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800208e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002092:	4618      	mov	r0, r3
 8002094:	3784      	adds	r7, #132	; 0x84
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022100 	.word	0x40022100
 80020a4:	40022300 	.word	0x40022300
 80020a8:	58026300 	.word	0x58026300
 80020ac:	58026000 	.word	0x58026000
 80020b0:	cb840000 	.word	0xcb840000
 80020b4:	2400000c 	.word	0x2400000c
 80020b8:	053e2d63 	.word	0x053e2d63
 80020bc:	c7520000 	.word	0xc7520000
 80020c0:	cfb80000 	.word	0xcfb80000

080020c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ff00 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 80020e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe ff22 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 80020ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8098 	beq.w	800222c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7d5b      	ldrb	r3, [r3, #21]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d126      	bne.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7d1b      	ldrb	r3, [r3, #20]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d122      	bne.n	8002160 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800211e:	e014      	b.n	800214a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4a45      	ldr	r2, [pc, #276]	; (8002238 <ADC_ConversionStop+0x174>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90d      	bls.n	8002144 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e074      	b.n	800222e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d1e3      	bne.n	8002120 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d014      	beq.n	8002190 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe feb8 	bl	8000ee0 <LL_ADC_REG_IsConversionOngoing>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fe89 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fe94 	bl	8000eb8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d014      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fec8 	bl	8000f30 <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fe71 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fea4 	bl	8000f08 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d005      	beq.n	80021d2 <ADC_ConversionStop+0x10e>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d105      	bne.n	80021d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021cc:	230c      	movs	r3, #12
 80021ce:	617b      	str	r3, [r7, #20]
        break;
 80021d0:	e005      	b.n	80021de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021d2:	2308      	movs	r3, #8
 80021d4:	617b      	str	r3, [r7, #20]
        break;
 80021d6:	e002      	b.n	80021de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021d8:	2304      	movs	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
        break;
 80021dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021de:	f7fe fc4d 	bl	8000a7c <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e4:	e01b      	b.n	800221e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e6:	f7fe fc49 	bl	8000a7c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d914      	bls.n	800221e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1dc      	bne.n	80021e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	000cdbff 	.word	0x000cdbff

0800223c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fe0f 	bl	8000e6c <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d16e      	bne.n	8002332 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <ADC_Enable+0x100>)
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e05a      	b.n	8002334 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fdca 	bl	8000e1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002288:	f7fe fbf8 	bl	8000a7c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <ADC_Enable+0x104>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <ADC_Enable+0x66>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <ADC_Enable+0x108>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <ADC_Enable+0x6a>
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <ADC_Enable+0x10c>)
 80022a4:	e000      	b.n	80022a8 <ADC_Enable+0x6c>
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <ADC_Enable+0x110>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fd4d 	bl	8000d48 <LL_ADC_GetMultimode>
 80022ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <ADC_Enable+0x108>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d002      	beq.n	80022c0 <ADC_Enable+0x84>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e000      	b.n	80022c2 <ADC_Enable+0x86>
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <ADC_Enable+0x104>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d130      	bne.n	8002332 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	e028      	b.n	8002324 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fdc8 	bl	8000e6c <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd98 	bl	8000e1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ec:	f7fe fbc6 	bl	8000a7c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d914      	bls.n	8002324 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d00d      	beq.n	8002324 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d1cf      	bne.n	80022d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	8000003f 	.word	0x8000003f
 8002340:	40022000 	.word	0x40022000
 8002344:	40022100 	.word	0x40022100
 8002348:	40022300 	.word	0x40022300
 800234c:	58026300 	.word	0x58026300

08002350 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd98 	bl	8000e92 <LL_ADC_IsDisableOngoing>
 8002362:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fd7f 	bl	8000e6c <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d047      	beq.n	8002404 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d144      	bne.n	8002404 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030d 	and.w	r3, r3, #13
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10c      	bne.n	80023a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fd59 	bl	8000e44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2203      	movs	r2, #3
 8002398:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800239a:	f7fe fb6f 	bl	8000a7c <HAL_GetTick>
 800239e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023a0:	e029      	b.n	80023f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e023      	b.n	8002406 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023be:	f7fe fb5d 	bl	8000a7c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d914      	bls.n	80023f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1dc      	bne.n	80023be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002424:	2b00      	cmp	r3, #0
 8002426:	d14b      	bne.n	80024c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d021      	beq.n	8002486 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fbdc 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d032      	beq.n	80024b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12b      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11f      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
 8002484:	e018      	b.n	80024b8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f008 fea5 	bl	800b208 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024be:	e00e      	b.n	80024de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f008 ff55 	bl	800b37c <HAL_ADC_ErrorCallback>
}
 80024d2:	e004      	b.n	80024de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f008 fee5 	bl	800b2c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f008 ff27 	bl	800b37c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <ADC_ConfigureBoostMode+0x1f8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <ADC_ConfigureBoostMode+0x1c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a79      	ldr	r2, [pc, #484]	; (8002734 <ADC_ConfigureBoostMode+0x1fc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d109      	bne.n	8002568 <ADC_ConfigureBoostMode+0x30>
 8002554:	4b78      	ldr	r3, [pc, #480]	; (8002738 <ADC_ConfigureBoostMode+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e008      	b.n	800257a <ADC_ConfigureBoostMode+0x42>
 8002568:	4b74      	ldr	r3, [pc, #464]	; (800273c <ADC_ConfigureBoostMode+0x204>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800257e:	f004 fabb 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8002582:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800258c:	d010      	beq.n	80025b0 <ADC_ConfigureBoostMode+0x78>
 800258e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002592:	d873      	bhi.n	800267c <ADC_ConfigureBoostMode+0x144>
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d002      	beq.n	80025a0 <ADC_ConfigureBoostMode+0x68>
 800259a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800259e:	d16d      	bne.n	800267c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	60fb      	str	r3, [r7, #12]
        break;
 80025ae:	e068      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	60fb      	str	r3, [r7, #12]
        break;
 80025b6:	e064      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	f005 fd42 	bl	8008048 <HAL_RCCEx_GetPeriphCLKFreq>
 80025c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025ce:	d051      	beq.n	8002674 <ADC_ConfigureBoostMode+0x13c>
 80025d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025d4:	d854      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025da:	d047      	beq.n	800266c <ADC_ConfigureBoostMode+0x134>
 80025dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025e0:	d84e      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025e6:	d03d      	beq.n	8002664 <ADC_ConfigureBoostMode+0x12c>
 80025e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025ec:	d848      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f2:	d033      	beq.n	800265c <ADC_ConfigureBoostMode+0x124>
 80025f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f8:	d842      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 80025fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025fe:	d029      	beq.n	8002654 <ADC_ConfigureBoostMode+0x11c>
 8002600:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002604:	d83c      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002606:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800260a:	d01a      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 800260c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002610:	d836      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002612:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002616:	d014      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002618:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800261c:	d830      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002622:	d00e      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002628:	d82a      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 800262a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800262e:	d008      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 8002630:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002634:	d824      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x148>
 8002636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800263a:	d002      	beq.n	8002642 <ADC_ConfigureBoostMode+0x10a>
 800263c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002640:	d11e      	bne.n	8002680 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	60fb      	str	r3, [r7, #12]
        break;
 8002652:	e016      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	60fb      	str	r3, [r7, #12]
        break;
 800265a:	e012      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	60fb      	str	r3, [r7, #12]
        break;
 8002662:	e00e      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	60fb      	str	r3, [r7, #12]
        break;
 800266a:	e00a      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	09db      	lsrs	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
        break;
 8002672:	e006      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	60fb      	str	r3, [r7, #12]
        break;
 800267a:	e002      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
        break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002680:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002682:	f7fe fa2b 	bl	8000adc <HAL_GetREVID>
 8002686:	4603      	mov	r3, r0
 8002688:	f241 0203 	movw	r2, #4099	; 0x1003
 800268c:	4293      	cmp	r3, r2
 800268e:	d815      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <ADC_ConfigureBoostMode+0x208>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d908      	bls.n	80026aa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026a8:	e03e      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	e035      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <ADC_ConfigureBoostMode+0x20c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d808      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d8:	609a      	str	r2, [r3, #8]
}
 80026da:	e025      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <ADC_ConfigureBoostMode+0x210>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d80a      	bhi.n	80026fa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	e016      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <ADC_ConfigureBoostMode+0x214>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d80a      	bhi.n	8002718 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	e007      	b.n	8002728 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	40022100 	.word	0x40022100
 8002738:	40022300 	.word	0x40022300
 800273c:	58026300 	.word	0x58026300
 8002740:	01312d00 	.word	0x01312d00
 8002744:	005f5e10 	.word	0x005f5e10
 8002748:	00bebc20 	.word	0x00bebc20
 800274c:	017d7840 	.word	0x017d7840

08002750 <LL_ADC_IsEnabled>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <LL_ADC_IsEnabled+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_ADC_IsEnabled+0x1a>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <LL_ADC_StartCalibration>:
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <LL_ADC_StartCalibration+0x38>)
 800278a:	4013      	ands	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002798:	430a      	orrs	r2, r1
 800279a:	4313      	orrs	r3, r2
 800279c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	3ffeffc0 	.word	0x3ffeffc0

080027b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c8:	d101      	bne.n	80027ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_REG_StartConversion>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <LL_ADC_REG_StartConversion+0x24>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	7fffffc0 	.word	0x7fffffc0

08002804 <LL_ADC_REG_IsConversionOngoing>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d101      	bne.n	800281c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADCEx_Calibration_Start+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e04c      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff fd7c 	bl	8002350 <ADC_Disable>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d135      	bne.n	80028ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8002868:	4013      	ands	r3, r2
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff7c 	bl	8002778 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002880:	e014      	b.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3301      	adds	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d30d      	bcc.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f023 0312 	bic.w	r3, r3, #18
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01b      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff7f 	bl	80027b4 <LL_ADC_IsCalibrationOnGoing>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e2      	bne.n	8002882 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
 80028cc:	e005      	b.n	80028da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	ffffeefd 	.word	0xffffeefd
 80028f0:	25c3f800 	.word	0x25c3f800

080028f4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0a0      	sub	sp, #128	; 0x80
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff7d 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	e08a      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800291e:	2302      	movs	r3, #2
 8002920:	e083      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e001      	b.n	8002946 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e062      	b.n	8002a2a <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fc69 	bl	800223c <ADC_Enable>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002970:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fc5d 	bl	800223c <ADC_Enable>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800298c:	2b00      	cmp	r3, #0
 800298e:	d146      	bne.n	8002a1e <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002996:	4013      	ands	r3, r2
 8002998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80029d4:	e000      	b.n	80029d8 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	221c      	movs	r2, #28
 80029e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a00:	330c      	adds	r3, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f001 f804 	bl	8003a14 <HAL_DMA_Start_IT>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fee0 	bl	80027dc <LL_ADC_REG_StartConversion>
 8002a1c:	e003      	b.n	8002a26 <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002a26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3780      	adds	r7, #128	; 0x80
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40022100 	.word	0x40022100
 8002a3c:	fffff0fe 	.word	0xfffff0fe
 8002a40:	0800240f 	.word	0x0800240f
 8002a44:	080024e7 	.word	0x080024e7
 8002a48:	08002503 	.word	0x08002503
 8002a4c:	40022300 	.word	0x40022300
 8002a50:	58026300 	.word	0x58026300

08002a54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b09f      	sub	sp, #124	; 0x7c
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0be      	b.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5c      	ldr	r2, [pc, #368]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002af0:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	e001      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e09d      	b.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe72 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 8002b20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe6c 	bl	8002804 <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d17f      	bne.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d17c      	bne.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b4e:	e000      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d039      	beq.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10e      	bne.n	8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b82:	4836      	ldr	r0, [pc, #216]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b84:	f7ff fde4 	bl	8002750 <LL_ADC_IsEnabled>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4835      	ldr	r0, [pc, #212]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b8c:	f7ff fde0 	bl	8002750 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ba0:	4832      	ldr	r0, [pc, #200]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ba2:	f7ff fdd5 	bl	8002750 <LL_ADC_IsEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d047      	beq.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bce:	e03a      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10e      	bne.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002bf0:	481a      	ldr	r0, [pc, #104]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bf2:	f7ff fdad 	bl	8002750 <LL_ADC_IsEnabled>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4819      	ldr	r0, [pc, #100]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bfa:	f7ff fda9 	bl	8002750 <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4323      	orrs	r3, r4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e008      	b.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c0e:	4817      	ldr	r0, [pc, #92]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c10:	f7ff fd9e 	bl	8002750 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	e009      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c44:	e000      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	377c      	adds	r7, #124	; 0x7c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40022100 	.word	0x40022100
 8002c64:	40022300 	.word	0x40022300
 8002c68:	58026300 	.word	0x58026300
 8002c6c:	58026000 	.word	0x58026000
 8002c70:	fffff0e0 	.word	0xfffff0e0

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	05fa0000 	.word	0x05fa0000

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db0b      	blt.n	8002d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <__NVIC_EnableIRQ+0x38>)
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db12      	blt.n	8002d4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	490a      	ldr	r1, [pc, #40]	; (8002d58 <__NVIC_DisableIRQ+0x44>)
 8002d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d40:	f3bf 8f4f 	dsb	sy
}
 8002d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d46:	f3bf 8f6f 	isb	sy
}
 8002d4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff05 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff1c 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff90 	bl	8002db0 <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5f 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff0f 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff1f 	bl	8002d14 <__NVIC_DisableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff96 	bl	8002e18 <SysTick_Config>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002efc:	f3bf 8f5f 	dmb	sy
}
 8002f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_MPU_Disable+0x28>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_MPU_Disable+0x28>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_MPU_Disable+0x2c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	e000ed90 	.word	0xe000ed90

08002f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <HAL_MPU_Enable+0x38>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f46:	f3bf 8f4f 	dsb	sy
}
 8002f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f4c:	f3bf 8f6f 	isb	sy
}
 8002f50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed90 	.word	0xe000ed90
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	785a      	ldrb	r2, [r3, #1]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f76:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d029      	beq.n	8002fd4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002f80:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7adb      	ldrb	r3, [r3, #11]
 8002f92:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7a9b      	ldrb	r3, [r3, #10]
 8002f9a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b5b      	ldrb	r3, [r3, #13]
 8002fa2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7b9b      	ldrb	r3, [r3, #14]
 8002faa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7bdb      	ldrb	r3, [r3, #15]
 8002fb2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7a5b      	ldrb	r3, [r3, #9]
 8002fba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7a1b      	ldrb	r3, [r3, #8]
 8002fc2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fc4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fd0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002fd2:	e005      	b.n	8002fe0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed90 	.word	0xe000ed90

08002ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7fd fd40 	bl	8000a7c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e316      	b.n	8003636 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <HAL_DMA_Init+0x1b8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_DMA_Init+0x1bc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_DMA_Init+0x1c0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a62      	ldr	r2, [pc, #392]	; (80031b4 <HAL_DMA_Init+0x1c4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <HAL_DMA_Init+0x1c8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <HAL_DMA_Init+0x1cc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <HAL_DMA_Init+0x1d0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5c      	ldr	r2, [pc, #368]	; (80031c4 <HAL_DMA_Init+0x1d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <HAL_DMA_Init+0x1d8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a59      	ldr	r2, [pc, #356]	; (80031cc <HAL_DMA_Init+0x1dc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <HAL_DMA_Init+0x1e0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_DMA_Init+0x1e4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_DMA_Init+0x1e8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a53      	ldr	r2, [pc, #332]	; (80031dc <HAL_DMA_Init+0x1ec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <HAL_DMA_Init+0x1f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_DMA_Init+0xb8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_DMA_Init+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Init+0xbc>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_DMA_Init+0xbe>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 813b 	beq.w	800332a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_DMA_Init+0x1b8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <HAL_DMA_Init+0x174>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_DMA_Init+0x1bc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <HAL_DMA_Init+0x174>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <HAL_DMA_Init+0x1c0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <HAL_DMA_Init+0x174>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <HAL_DMA_Init+0x1c4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMA_Init+0x174>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_DMA_Init+0x1c8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <HAL_DMA_Init+0x174>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_DMA_Init+0x1cc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <HAL_DMA_Init+0x1d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_Init+0x174>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <HAL_DMA_Init+0x1d4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <HAL_DMA_Init+0x1d8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_Init+0x174>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_DMA_Init+0x1dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_DMA_Init+0x1e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_DMA_Init+0x1e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Init+0x174>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_DMA_Init+0x1e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_DMA_Init+0x1ec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_Init+0x174>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_DMA_Init+0x1f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_Init+0x174>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_DMA_Init+0x1f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <HAL_DMA_Init+0x186>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e007      	b.n	8003186 <HAL_DMA_Init+0x196>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003186:	e02f      	b.n	80031e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003188:	f7fd fc78 	bl	8000a7c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b05      	cmp	r3, #5
 8003194:	d928      	bls.n	80031e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2203      	movs	r2, #3
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e246      	b.n	8003636 <HAL_DMA_Init+0x646>
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1c8      	bne.n	8003188 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4b83      	ldr	r3, [pc, #524]	; (8003410 <HAL_DMA_Init+0x420>)
 8003202:	4013      	ands	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800320e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b04      	cmp	r3, #4
 800323a:	d107      	bne.n	800324c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4313      	orrs	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800324c:	4b71      	ldr	r3, [pc, #452]	; (8003414 <HAL_DMA_Init+0x424>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b71      	ldr	r3, [pc, #452]	; (8003418 <HAL_DMA_Init+0x428>)
 8003252:	4013      	ands	r3, r2
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d328      	bcc.n	80032ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b28      	cmp	r3, #40	; 0x28
 8003260:	d903      	bls.n	800326a <HAL_DMA_Init+0x27a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b2e      	cmp	r3, #46	; 0x2e
 8003268:	d917      	bls.n	800329a <HAL_DMA_Init+0x2aa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b3e      	cmp	r3, #62	; 0x3e
 8003270:	d903      	bls.n	800327a <HAL_DMA_Init+0x28a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b42      	cmp	r3, #66	; 0x42
 8003278:	d90f      	bls.n	800329a <HAL_DMA_Init+0x2aa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b46      	cmp	r3, #70	; 0x46
 8003280:	d903      	bls.n	800328a <HAL_DMA_Init+0x29a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b48      	cmp	r3, #72	; 0x48
 8003288:	d907      	bls.n	800329a <HAL_DMA_Init+0x2aa>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b4e      	cmp	r3, #78	; 0x4e
 8003290:	d905      	bls.n	800329e <HAL_DMA_Init+0x2ae>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b52      	cmp	r3, #82	; 0x52
 8003298:	d801      	bhi.n	800329e <HAL_DMA_Init+0x2ae>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_DMA_Init+0x2b0>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0307 	bic.w	r3, r3, #7
 80032c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d117      	bne.n	8003306 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f001 ff85 	bl	80051f8 <DMA_CheckFifoParam>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e197      	b.n	8003636 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 fec0 	bl	8005094 <DMA_CalcBaseAndBitshift>
 8003314:	4603      	mov	r3, r0
 8003316:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	223f      	movs	r2, #63	; 0x3f
 8003322:	409a      	lsls	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	e0cd      	b.n	80034c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_DMA_Init+0x42c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMA_Init+0x38a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a39      	ldr	r2, [pc, #228]	; (8003420 <HAL_DMA_Init+0x430>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01d      	beq.n	800337a <HAL_DMA_Init+0x38a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_DMA_Init+0x434>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_DMA_Init+0x38a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_DMA_Init+0x438>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_DMA_Init+0x38a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a35      	ldr	r2, [pc, #212]	; (800342c <HAL_DMA_Init+0x43c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_DMA_Init+0x38a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a33      	ldr	r2, [pc, #204]	; (8003430 <HAL_DMA_Init+0x440>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_DMA_Init+0x38a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_DMA_Init+0x444>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_DMA_Init+0x38a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a30      	ldr	r2, [pc, #192]	; (8003438 <HAL_DMA_Init+0x448>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_DMA_Init+0x38e>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_DMA_Init+0x390>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8097 	beq.w	80034b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_DMA_Init+0x42c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d021      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_DMA_Init+0x430>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01c      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a21      	ldr	r2, [pc, #132]	; (8003424 <HAL_DMA_Init+0x434>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d017      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <HAL_DMA_Init+0x438>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d012      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <HAL_DMA_Init+0x43c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00d      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_DMA_Init+0x440>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d008      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_DMA_Init+0x444>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_Init+0x3e4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_DMA_Init+0x448>)
 80033d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_DMA_Init+0x44c>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d021      	beq.n	8003440 <HAL_DMA_Init+0x450>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d102      	bne.n	800340a <HAL_DMA_Init+0x41a>
 8003404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003408:	e01b      	b.n	8003442 <HAL_DMA_Init+0x452>
 800340a:	2300      	movs	r3, #0
 800340c:	e019      	b.n	8003442 <HAL_DMA_Init+0x452>
 800340e:	bf00      	nop
 8003410:	fe10803f 	.word	0xfe10803f
 8003414:	5c001000 	.word	0x5c001000
 8003418:	ffff0000 	.word	0xffff0000
 800341c:	58025408 	.word	0x58025408
 8003420:	5802541c 	.word	0x5802541c
 8003424:	58025430 	.word	0x58025430
 8003428:	58025444 	.word	0x58025444
 800342c:	58025458 	.word	0x58025458
 8003430:	5802546c 	.word	0x5802546c
 8003434:	58025480 	.word	0x58025480
 8003438:	58025494 	.word	0x58025494
 800343c:	fffe000f 	.word	0xfffe000f
 8003440:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003470:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <HAL_DMA_Init+0x650>)
 8003488:	4413      	add	r3, r2
 800348a:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_DMA_Init+0x654>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	009a      	lsls	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f001 fdfb 	bl	8005094 <DMA_CalcBaseAndBitshift>
 800349e:	4603      	mov	r3, r0
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2201      	movs	r2, #1
 80034ac:	409a      	lsls	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e008      	b.n	80034c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0b7      	b.n	8003636 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5f      	ldr	r2, [pc, #380]	; (8003648 <HAL_DMA_Init+0x658>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d072      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5d      	ldr	r2, [pc, #372]	; (800364c <HAL_DMA_Init+0x65c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d06d      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <HAL_DMA_Init+0x660>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d068      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_DMA_Init+0x664>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d063      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a59      	ldr	r2, [pc, #356]	; (8003658 <HAL_DMA_Init+0x668>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d05e      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a57      	ldr	r2, [pc, #348]	; (800365c <HAL_DMA_Init+0x66c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d059      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a56      	ldr	r2, [pc, #344]	; (8003660 <HAL_DMA_Init+0x670>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d054      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <HAL_DMA_Init+0x674>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04f      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a53      	ldr	r2, [pc, #332]	; (8003668 <HAL_DMA_Init+0x678>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04a      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_DMA_Init+0x67c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d045      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_DMA_Init+0x680>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d040      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4e      	ldr	r2, [pc, #312]	; (8003674 <HAL_DMA_Init+0x684>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03b      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_DMA_Init+0x688>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d036      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_DMA_Init+0x68c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_DMA_Init+0x690>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d02c      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_DMA_Init+0x694>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d027      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_DMA_Init+0x698>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_DMA_Init+0x69c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a44      	ldr	r2, [pc, #272]	; (8003690 <HAL_DMA_Init+0x6a0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_DMA_Init+0x6a4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_DMA_Init+0x6a8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3f      	ldr	r2, [pc, #252]	; (800369c <HAL_DMA_Init+0x6ac>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3e      	ldr	r2, [pc, #248]	; (80036a0 <HAL_DMA_Init+0x6b0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Init+0x5c6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <HAL_DMA_Init+0x6b4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_Init+0x5ca>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_DMA_Init+0x5cc>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d032      	beq.n	8003626 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f001 fe95 	bl	80052f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d102      	bne.n	80035d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_DMA_Init+0x624>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d80c      	bhi.n	8003614 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 ff12 	bl	8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e008      	b.n	8003626 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	a7fdabf8 	.word	0xa7fdabf8
 8003644:	cccccccd 	.word	0xcccccccd
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
 8003688:	58025408 	.word	0x58025408
 800368c:	5802541c 	.word	0x5802541c
 8003690:	58025430 	.word	0x58025430
 8003694:	58025444 	.word	0x58025444
 8003698:	58025458 	.word	0x58025458
 800369c:	5802546c 	.word	0x5802546c
 80036a0:	58025480 	.word	0x58025480
 80036a4:	58025494 	.word	0x58025494

080036a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1a8      	b.n	8003a0c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a82      	ldr	r2, [pc, #520]	; (80038c8 <HAL_DMA_DeInit+0x220>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d04a      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a80      	ldr	r2, [pc, #512]	; (80038cc <HAL_DMA_DeInit+0x224>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d045      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7f      	ldr	r2, [pc, #508]	; (80038d0 <HAL_DMA_DeInit+0x228>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d040      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7d      	ldr	r2, [pc, #500]	; (80038d4 <HAL_DMA_DeInit+0x22c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d03b      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <HAL_DMA_DeInit+0x230>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d036      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7a      	ldr	r2, [pc, #488]	; (80038dc <HAL_DMA_DeInit+0x234>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d031      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a79      	ldr	r2, [pc, #484]	; (80038e0 <HAL_DMA_DeInit+0x238>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d02c      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a77      	ldr	r2, [pc, #476]	; (80038e4 <HAL_DMA_DeInit+0x23c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d027      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a76      	ldr	r2, [pc, #472]	; (80038e8 <HAL_DMA_DeInit+0x240>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d022      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a74      	ldr	r2, [pc, #464]	; (80038ec <HAL_DMA_DeInit+0x244>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01d      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a73      	ldr	r2, [pc, #460]	; (80038f0 <HAL_DMA_DeInit+0x248>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d018      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a71      	ldr	r2, [pc, #452]	; (80038f4 <HAL_DMA_DeInit+0x24c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a70      	ldr	r2, [pc, #448]	; (80038f8 <HAL_DMA_DeInit+0x250>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_DMA_DeInit+0x254>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6d      	ldr	r2, [pc, #436]	; (8003900 <HAL_DMA_DeInit+0x258>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_DMA_DeInit+0xb2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6b      	ldr	r2, [pc, #428]	; (8003904 <HAL_DMA_DeInit+0x25c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <HAL_DMA_DeInit+0xc4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e007      	b.n	800377c <HAL_DMA_DeInit+0xd4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <HAL_DMA_DeInit+0x220>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_DMA_DeInit+0x224>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_DMA_DeInit+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_DMA_DeInit+0x22c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_DMA_DeInit+0x230>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_DMA_DeInit+0x234>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_DMA_DeInit+0x238>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a47      	ldr	r2, [pc, #284]	; (80038e4 <HAL_DMA_DeInit+0x23c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_DMA_DeInit+0x240>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a44      	ldr	r2, [pc, #272]	; (80038ec <HAL_DMA_DeInit+0x244>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <HAL_DMA_DeInit+0x248>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <HAL_DMA_DeInit+0x24c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <HAL_DMA_DeInit+0x250>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <HAL_DMA_DeInit+0x254>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_DMA_DeInit+0x258>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_DeInit+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <HAL_DMA_DeInit+0x25c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_DMA_DeInit+0x178>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_DMA_DeInit+0x17a>
 8003820:	2300      	movs	r3, #0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d025      	beq.n	8003872 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2221      	movs	r2, #33	; 0x21
 8003854:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f001 fc1c 	bl	8005094 <DMA_CalcBaseAndBitshift>
 800385c:	4603      	mov	r3, r0
 800385e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	223f      	movs	r2, #63	; 0x3f
 800386a:	409a      	lsls	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	e081      	b.n	8003976 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a24      	ldr	r2, [pc, #144]	; (8003908 <HAL_DMA_DeInit+0x260>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <HAL_DMA_DeInit+0x264>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_DMA_DeInit+0x268>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <HAL_DMA_DeInit+0x26c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_DMA_DeInit+0x270>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_DMA_DeInit+0x274>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_DMA_DeInit+0x278>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_DeInit+0x21a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_DMA_DeInit+0x27c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d132      	bne.n	8003928 <HAL_DMA_DeInit+0x280>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e031      	b.n	800392a <HAL_DMA_DeInit+0x282>
 80038c6:	bf00      	nop
 80038c8:	40020010 	.word	0x40020010
 80038cc:	40020028 	.word	0x40020028
 80038d0:	40020040 	.word	0x40020040
 80038d4:	40020058 	.word	0x40020058
 80038d8:	40020070 	.word	0x40020070
 80038dc:	40020088 	.word	0x40020088
 80038e0:	400200a0 	.word	0x400200a0
 80038e4:	400200b8 	.word	0x400200b8
 80038e8:	40020410 	.word	0x40020410
 80038ec:	40020428 	.word	0x40020428
 80038f0:	40020440 	.word	0x40020440
 80038f4:	40020458 	.word	0x40020458
 80038f8:	40020470 	.word	0x40020470
 80038fc:	40020488 	.word	0x40020488
 8003900:	400204a0 	.word	0x400204a0
 8003904:	400204b8 	.word	0x400204b8
 8003908:	58025408 	.word	0x58025408
 800390c:	5802541c 	.word	0x5802541c
 8003910:	58025430 	.word	0x58025430
 8003914:	58025444 	.word	0x58025444
 8003918:	58025458 	.word	0x58025458
 800391c:	5802546c 	.word	0x5802546c
 8003920:	58025480 	.word	0x58025480
 8003924:	58025494 	.word	0x58025494
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d021      	beq.n	8003972 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2200      	movs	r2, #0
 800393c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f001 fb9c 	bl	8005094 <DMA_CalcBaseAndBitshift>
 800395c:	4603      	mov	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e001      	b.n	8003976 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e04a      	b.n	8003a0c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f001 fcba 	bl	80052f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003994:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00f      	beq.n	80039be <HAL_DMA_DeInit+0x316>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d80b      	bhi.n	80039be <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f001 fd3c 	bl	8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039bc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e226      	b.n	8003e7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Start_IT+0x2a>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e21f      	b.n	8003e7e <HAL_DMA_Start_IT+0x46a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 820a 	bne.w	8003e68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a68      	ldr	r2, [pc, #416]	; (8003c08 <HAL_DMA_Start_IT+0x1f4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d04a      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a66      	ldr	r2, [pc, #408]	; (8003c0c <HAL_DMA_Start_IT+0x1f8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d045      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_DMA_Start_IT+0x1fc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d040      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a63      	ldr	r2, [pc, #396]	; (8003c14 <HAL_DMA_Start_IT+0x200>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d03b      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a62      	ldr	r2, [pc, #392]	; (8003c18 <HAL_DMA_Start_IT+0x204>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d036      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a60      	ldr	r2, [pc, #384]	; (8003c1c <HAL_DMA_Start_IT+0x208>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d031      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5f      	ldr	r2, [pc, #380]	; (8003c20 <HAL_DMA_Start_IT+0x20c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d02c      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_DMA_Start_IT+0x210>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d027      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <HAL_DMA_Start_IT+0x214>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5a      	ldr	r2, [pc, #360]	; (8003c2c <HAL_DMA_Start_IT+0x218>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a59      	ldr	r2, [pc, #356]	; (8003c30 <HAL_DMA_Start_IT+0x21c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_DMA_Start_IT+0x220>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_DMA_Start_IT+0x224>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a54      	ldr	r2, [pc, #336]	; (8003c3c <HAL_DMA_Start_IT+0x228>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a53      	ldr	r2, [pc, #332]	; (8003c40 <HAL_DMA_Start_IT+0x22c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_DMA_Start_IT+0xee>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a51      	ldr	r2, [pc, #324]	; (8003c44 <HAL_DMA_Start_IT+0x230>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <HAL_DMA_Start_IT+0x100>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e007      	b.n	8003b24 <HAL_DMA_Start_IT+0x110>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f001 f906 	bl	8004d3c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <HAL_DMA_Start_IT+0x1f4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04a      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <HAL_DMA_Start_IT+0x1f8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d045      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <HAL_DMA_Start_IT+0x1fc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a30      	ldr	r2, [pc, #192]	; (8003c14 <HAL_DMA_Start_IT+0x200>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d03b      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <HAL_DMA_Start_IT+0x204>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d036      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <HAL_DMA_Start_IT+0x208>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d031      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <HAL_DMA_Start_IT+0x20c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02c      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <HAL_DMA_Start_IT+0x210>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d027      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <HAL_DMA_Start_IT+0x214>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_DMA_Start_IT+0x218>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <HAL_DMA_Start_IT+0x21c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_DMA_Start_IT+0x220>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_DMA_Start_IT+0x224>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <HAL_DMA_Start_IT+0x228>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_DMA_Start_IT+0x22c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x1bc>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_DMA_Start_IT+0x230>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_DMA_Start_IT+0x1c0>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_Start_IT+0x1c2>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d036      	beq.n	8003c48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 021e 	bic.w	r2, r3, #30
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0216 	orr.w	r2, r2, #22
 8003bec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d03e      	beq.n	8003c74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0208 	orr.w	r2, r2, #8
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e035      	b.n	8003c74 <HAL_DMA_Start_IT+0x260>
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 020e 	bic.w	r2, r3, #14
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 020a 	orr.w	r2, r2, #10
 8003c5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0204 	orr.w	r2, r2, #4
 8003c72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	; (8003e88 <HAL_DMA_Start_IT+0x474>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d072      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a82      	ldr	r2, [pc, #520]	; (8003e8c <HAL_DMA_Start_IT+0x478>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d06d      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <HAL_DMA_Start_IT+0x47c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d068      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7f      	ldr	r2, [pc, #508]	; (8003e94 <HAL_DMA_Start_IT+0x480>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d063      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_DMA_Start_IT+0x484>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d05e      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_DMA_Start_IT+0x488>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d059      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7a      	ldr	r2, [pc, #488]	; (8003ea0 <HAL_DMA_Start_IT+0x48c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d054      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a79      	ldr	r2, [pc, #484]	; (8003ea4 <HAL_DMA_Start_IT+0x490>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04f      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a77      	ldr	r2, [pc, #476]	; (8003ea8 <HAL_DMA_Start_IT+0x494>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d04a      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a76      	ldr	r2, [pc, #472]	; (8003eac <HAL_DMA_Start_IT+0x498>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d045      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a74      	ldr	r2, [pc, #464]	; (8003eb0 <HAL_DMA_Start_IT+0x49c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d040      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a73      	ldr	r2, [pc, #460]	; (8003eb4 <HAL_DMA_Start_IT+0x4a0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d03b      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a71      	ldr	r2, [pc, #452]	; (8003eb8 <HAL_DMA_Start_IT+0x4a4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d036      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a70      	ldr	r2, [pc, #448]	; (8003ebc <HAL_DMA_Start_IT+0x4a8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d031      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <HAL_DMA_Start_IT+0x4ac>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02c      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6d      	ldr	r2, [pc, #436]	; (8003ec4 <HAL_DMA_Start_IT+0x4b0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d027      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a6b      	ldr	r2, [pc, #428]	; (8003ec8 <HAL_DMA_Start_IT+0x4b4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d022      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6a      	ldr	r2, [pc, #424]	; (8003ecc <HAL_DMA_Start_IT+0x4b8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d01d      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_DMA_Start_IT+0x4bc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a67      	ldr	r2, [pc, #412]	; (8003ed4 <HAL_DMA_Start_IT+0x4c0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <HAL_DMA_Start_IT+0x4c4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a64      	ldr	r2, [pc, #400]	; (8003edc <HAL_DMA_Start_IT+0x4c8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a62      	ldr	r2, [pc, #392]	; (8003ee0 <HAL_DMA_Start_IT+0x4cc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_Start_IT+0x350>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a61      	ldr	r2, [pc, #388]	; (8003ee4 <HAL_DMA_Start_IT+0x4d0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_Start_IT+0x354>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_DMA_Start_IT+0x356>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01a      	beq.n	8003da4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <HAL_DMA_Start_IT+0x474>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04a      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a36      	ldr	r2, [pc, #216]	; (8003e8c <HAL_DMA_Start_IT+0x478>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d045      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <HAL_DMA_Start_IT+0x47c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d040      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a33      	ldr	r2, [pc, #204]	; (8003e94 <HAL_DMA_Start_IT+0x480>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d03b      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a31      	ldr	r2, [pc, #196]	; (8003e98 <HAL_DMA_Start_IT+0x484>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d036      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <HAL_DMA_Start_IT+0x488>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d031      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2e      	ldr	r2, [pc, #184]	; (8003ea0 <HAL_DMA_Start_IT+0x48c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02c      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_DMA_Start_IT+0x490>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d027      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2b      	ldr	r2, [pc, #172]	; (8003ea8 <HAL_DMA_Start_IT+0x494>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_DMA_Start_IT+0x498>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01d      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <HAL_DMA_Start_IT+0x49c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_DMA_Start_IT+0x4a0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <HAL_DMA_Start_IT+0x4a4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <HAL_DMA_Start_IT+0x4a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_DMA_Start_IT+0x4ac>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_DMA_Start_IT+0x430>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_DMA_Start_IT+0x4b0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d108      	bne.n	8003e56 <HAL_DMA_Start_IT+0x442>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e012      	b.n	8003e7c <HAL_DMA_Start_IT+0x468>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e009      	b.n	8003e7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40020010 	.word	0x40020010
 8003e8c:	40020028 	.word	0x40020028
 8003e90:	40020040 	.word	0x40020040
 8003e94:	40020058 	.word	0x40020058
 8003e98:	40020070 	.word	0x40020070
 8003e9c:	40020088 	.word	0x40020088
 8003ea0:	400200a0 	.word	0x400200a0
 8003ea4:	400200b8 	.word	0x400200b8
 8003ea8:	40020410 	.word	0x40020410
 8003eac:	40020428 	.word	0x40020428
 8003eb0:	40020440 	.word	0x40020440
 8003eb4:	40020458 	.word	0x40020458
 8003eb8:	40020470 	.word	0x40020470
 8003ebc:	40020488 	.word	0x40020488
 8003ec0:	400204a0 	.word	0x400204a0
 8003ec4:	400204b8 	.word	0x400204b8
 8003ec8:	58025408 	.word	0x58025408
 8003ecc:	5802541c 	.word	0x5802541c
 8003ed0:	58025430 	.word	0x58025430
 8003ed4:	58025444 	.word	0x58025444
 8003ed8:	58025458 	.word	0x58025458
 8003edc:	5802546c 	.word	0x5802546c
 8003ee0:	58025480 	.word	0x58025480
 8003ee4:	58025494 	.word	0x58025494

08003ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ef4:	4b67      	ldr	r3, [pc, #412]	; (8004094 <HAL_DMA_IRQHandler+0x1ac>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_DMA_IRQHandler+0x1b0>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	0a9b      	lsrs	r3, r3, #10
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	; (800409c <HAL_DMA_IRQHandler+0x1b4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04a      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5d      	ldr	r2, [pc, #372]	; (80040a0 <HAL_DMA_IRQHandler+0x1b8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d045      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5c      	ldr	r2, [pc, #368]	; (80040a4 <HAL_DMA_IRQHandler+0x1bc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d040      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5a      	ldr	r2, [pc, #360]	; (80040a8 <HAL_DMA_IRQHandler+0x1c0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d03b      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a59      	ldr	r2, [pc, #356]	; (80040ac <HAL_DMA_IRQHandler+0x1c4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d036      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <HAL_DMA_IRQHandler+0x1c8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d031      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a56      	ldr	r2, [pc, #344]	; (80040b4 <HAL_DMA_IRQHandler+0x1cc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d02c      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <HAL_DMA_IRQHandler+0x1d0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d027      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a53      	ldr	r2, [pc, #332]	; (80040bc <HAL_DMA_IRQHandler+0x1d4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a51      	ldr	r2, [pc, #324]	; (80040c0 <HAL_DMA_IRQHandler+0x1d8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a50      	ldr	r2, [pc, #320]	; (80040c4 <HAL_DMA_IRQHandler+0x1dc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4e      	ldr	r2, [pc, #312]	; (80040c8 <HAL_DMA_IRQHandler+0x1e0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4d      	ldr	r2, [pc, #308]	; (80040cc <HAL_DMA_IRQHandler+0x1e4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4b      	ldr	r2, [pc, #300]	; (80040d0 <HAL_DMA_IRQHandler+0x1e8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4a      	ldr	r2, [pc, #296]	; (80040d4 <HAL_DMA_IRQHandler+0x1ec>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_DMA_IRQHandler+0xd2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a48      	ldr	r2, [pc, #288]	; (80040d8 <HAL_DMA_IRQHandler+0x1f0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_DMA_IRQHandler+0xd6>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xd8>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 842b 	beq.w	800481c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2208      	movs	r2, #8
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a2 	beq.w	8004120 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2e      	ldr	r2, [pc, #184]	; (800409c <HAL_DMA_IRQHandler+0x1b4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04a      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <HAL_DMA_IRQHandler+0x1b8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d045      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_DMA_IRQHandler+0x1bc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <HAL_DMA_IRQHandler+0x1c0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d03b      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a28      	ldr	r2, [pc, #160]	; (80040ac <HAL_DMA_IRQHandler+0x1c4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d036      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d031      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <HAL_DMA_IRQHandler+0x1cc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02c      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d027      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_DMA_IRQHandler+0x1d4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <HAL_DMA_IRQHandler+0x1d8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <HAL_DMA_IRQHandler+0x1e0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <HAL_DMA_IRQHandler+0x1e4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <HAL_DMA_IRQHandler+0x1e8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <HAL_DMA_IRQHandler+0x1ec>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_DMA_IRQHandler+0x194>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_DMA_IRQHandler+0x1f0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d12f      	bne.n	80040dc <HAL_DMA_IRQHandler+0x1f4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	e02e      	b.n	80040f0 <HAL_DMA_IRQHandler+0x208>
 8004092:	bf00      	nop
 8004094:	2400000c 	.word	0x2400000c
 8004098:	1b4e81b5 	.word	0x1b4e81b5
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d015      	beq.n	8004120 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2208      	movs	r2, #8
 800410e:	409a      	lsls	r2, r3
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06e      	beq.n	8004214 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a69      	ldr	r2, [pc, #420]	; (80042e0 <HAL_DMA_IRQHandler+0x3f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a67      	ldr	r2, [pc, #412]	; (80042e4 <HAL_DMA_IRQHandler+0x3fc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a66      	ldr	r2, [pc, #408]	; (80042e8 <HAL_DMA_IRQHandler+0x400>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a64      	ldr	r2, [pc, #400]	; (80042ec <HAL_DMA_IRQHandler+0x404>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a63      	ldr	r2, [pc, #396]	; (80042f0 <HAL_DMA_IRQHandler+0x408>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a61      	ldr	r2, [pc, #388]	; (80042f4 <HAL_DMA_IRQHandler+0x40c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_DMA_IRQHandler+0x410>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5e      	ldr	r2, [pc, #376]	; (80042fc <HAL_DMA_IRQHandler+0x414>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5d      	ldr	r2, [pc, #372]	; (8004300 <HAL_DMA_IRQHandler+0x418>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5b      	ldr	r2, [pc, #364]	; (8004304 <HAL_DMA_IRQHandler+0x41c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5a      	ldr	r2, [pc, #360]	; (8004308 <HAL_DMA_IRQHandler+0x420>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a58      	ldr	r2, [pc, #352]	; (800430c <HAL_DMA_IRQHandler+0x424>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a57      	ldr	r2, [pc, #348]	; (8004310 <HAL_DMA_IRQHandler+0x428>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a55      	ldr	r2, [pc, #340]	; (8004314 <HAL_DMA_IRQHandler+0x42c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a54      	ldr	r2, [pc, #336]	; (8004318 <HAL_DMA_IRQHandler+0x430>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x2ee>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_DMA_IRQHandler+0x434>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10a      	bne.n	80041ec <HAL_DMA_IRQHandler+0x304>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e003      	b.n	80041f4 <HAL_DMA_IRQHandler+0x30c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0202 	orr.w	r2, r3, #2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2204      	movs	r2, #4
 800421e:	409a      	lsls	r2, r3
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 808f 	beq.w	8004348 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <HAL_DMA_IRQHandler+0x3f8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d04a      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_DMA_IRQHandler+0x3fc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d045      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <HAL_DMA_IRQHandler+0x400>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d040      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <HAL_DMA_IRQHandler+0x404>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d03b      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <HAL_DMA_IRQHandler+0x408>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d036      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <HAL_DMA_IRQHandler+0x40c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d031      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <HAL_DMA_IRQHandler+0x410>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d02c      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_DMA_IRQHandler+0x414>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d027      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <HAL_DMA_IRQHandler+0x418>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d022      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_DMA_IRQHandler+0x41c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01d      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_DMA_IRQHandler+0x420>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d018      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_DMA_IRQHandler+0x424>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <HAL_DMA_IRQHandler+0x428>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_DMA_IRQHandler+0x42c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_DMA_IRQHandler+0x430>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_DMA_IRQHandler+0x3e2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_DMA_IRQHandler+0x434>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d12a      	bne.n	8004320 <HAL_DMA_IRQHandler+0x438>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e023      	b.n	8004328 <HAL_DMA_IRQHandler+0x440>
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2204      	movs	r2, #4
 8004336:	409a      	lsls	r2, r3
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f043 0204 	orr.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2210      	movs	r2, #16
 8004352:	409a      	lsls	r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a6 	beq.w	80044aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a85      	ldr	r2, [pc, #532]	; (8004578 <HAL_DMA_IRQHandler+0x690>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a83      	ldr	r2, [pc, #524]	; (800457c <HAL_DMA_IRQHandler+0x694>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a82      	ldr	r2, [pc, #520]	; (8004580 <HAL_DMA_IRQHandler+0x698>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a80      	ldr	r2, [pc, #512]	; (8004584 <HAL_DMA_IRQHandler+0x69c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7f      	ldr	r2, [pc, #508]	; (8004588 <HAL_DMA_IRQHandler+0x6a0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a7d      	ldr	r2, [pc, #500]	; (800458c <HAL_DMA_IRQHandler+0x6a4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a7c      	ldr	r2, [pc, #496]	; (8004590 <HAL_DMA_IRQHandler+0x6a8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a7a      	ldr	r2, [pc, #488]	; (8004594 <HAL_DMA_IRQHandler+0x6ac>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a79      	ldr	r2, [pc, #484]	; (8004598 <HAL_DMA_IRQHandler+0x6b0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_DMA_IRQHandler+0x6b4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a76      	ldr	r2, [pc, #472]	; (80045a0 <HAL_DMA_IRQHandler+0x6b8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a74      	ldr	r2, [pc, #464]	; (80045a4 <HAL_DMA_IRQHandler+0x6bc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a73      	ldr	r2, [pc, #460]	; (80045a8 <HAL_DMA_IRQHandler+0x6c0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a71      	ldr	r2, [pc, #452]	; (80045ac <HAL_DMA_IRQHandler+0x6c4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a70      	ldr	r2, [pc, #448]	; (80045b0 <HAL_DMA_IRQHandler+0x6c8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_IRQHandler+0x516>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6e      	ldr	r2, [pc, #440]	; (80045b4 <HAL_DMA_IRQHandler+0x6cc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10a      	bne.n	8004414 <HAL_DMA_IRQHandler+0x52c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e009      	b.n	8004428 <HAL_DMA_IRQHandler+0x540>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d03e      	beq.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2210      	movs	r2, #16
 8004436:	409a      	lsls	r2, r3
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d108      	bne.n	800446a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d024      	beq.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
 8004468:	e01f      	b.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01b      	beq.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
 800447a:	e016      	b.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0208 	bic.w	r2, r2, #8
 8004498:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2220      	movs	r2, #32
 80044b4:	409a      	lsls	r2, r3
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8110 	beq.w	80046e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <HAL_DMA_IRQHandler+0x690>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04a      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2b      	ldr	r2, [pc, #172]	; (800457c <HAL_DMA_IRQHandler+0x694>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d045      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a29      	ldr	r2, [pc, #164]	; (8004580 <HAL_DMA_IRQHandler+0x698>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d040      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a28      	ldr	r2, [pc, #160]	; (8004584 <HAL_DMA_IRQHandler+0x69c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <HAL_DMA_IRQHandler+0x6a0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d036      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a25      	ldr	r2, [pc, #148]	; (800458c <HAL_DMA_IRQHandler+0x6a4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a23      	ldr	r2, [pc, #140]	; (8004590 <HAL_DMA_IRQHandler+0x6a8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02c      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_DMA_IRQHandler+0x6ac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d027      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a20      	ldr	r2, [pc, #128]	; (8004598 <HAL_DMA_IRQHandler+0x6b0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_DMA_IRQHandler+0x6b4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_DMA_IRQHandler+0x6b8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_DMA_IRQHandler+0x6bc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_DMA_IRQHandler+0x6c0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_DMA_IRQHandler+0x6c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_DMA_IRQHandler+0x6c8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_DMA_IRQHandler+0x678>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <HAL_DMA_IRQHandler+0x6cc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d12b      	bne.n	80045b8 <HAL_DMA_IRQHandler+0x6d0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e02a      	b.n	80045cc <HAL_DMA_IRQHandler+0x6e4>
 8004576:	bf00      	nop
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8087 	beq.w	80046e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2220      	movs	r2, #32
 80045dc:	409a      	lsls	r2, r3
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d139      	bne.n	8004662 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0216 	bic.w	r2, r2, #22
 80045fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <HAL_DMA_IRQHandler+0x736>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0208 	bic.w	r2, r2, #8
 800462c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	223f      	movs	r2, #63	; 0x3f
 8004638:	409a      	lsls	r2, r3
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 834a 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
          }
          return;
 8004660:	e344      	b.n	8004cec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d018      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
 800468e:	e027      	b.n	80046e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d023      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
 80046a0:	e01e      	b.n	80046e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10f      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0210 	bic.w	r2, r2, #16
 80046be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8306 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8088 	beq.w	8004808 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2204      	movs	r2, #4
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a7a      	ldr	r2, [pc, #488]	; (80048f0 <HAL_DMA_IRQHandler+0xa08>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04a      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a79      	ldr	r2, [pc, #484]	; (80048f4 <HAL_DMA_IRQHandler+0xa0c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d045      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a77      	ldr	r2, [pc, #476]	; (80048f8 <HAL_DMA_IRQHandler+0xa10>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d040      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a76      	ldr	r2, [pc, #472]	; (80048fc <HAL_DMA_IRQHandler+0xa14>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d03b      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a74      	ldr	r2, [pc, #464]	; (8004900 <HAL_DMA_IRQHandler+0xa18>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d036      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a73      	ldr	r2, [pc, #460]	; (8004904 <HAL_DMA_IRQHandler+0xa1c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d031      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a71      	ldr	r2, [pc, #452]	; (8004908 <HAL_DMA_IRQHandler+0xa20>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02c      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a70      	ldr	r2, [pc, #448]	; (800490c <HAL_DMA_IRQHandler+0xa24>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d027      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6e      	ldr	r2, [pc, #440]	; (8004910 <HAL_DMA_IRQHandler+0xa28>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6d      	ldr	r2, [pc, #436]	; (8004914 <HAL_DMA_IRQHandler+0xa2c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d01d      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6b      	ldr	r2, [pc, #428]	; (8004918 <HAL_DMA_IRQHandler+0xa30>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6a      	ldr	r2, [pc, #424]	; (800491c <HAL_DMA_IRQHandler+0xa34>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a68      	ldr	r2, [pc, #416]	; (8004920 <HAL_DMA_IRQHandler+0xa38>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a67      	ldr	r2, [pc, #412]	; (8004924 <HAL_DMA_IRQHandler+0xa3c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_DMA_IRQHandler+0xa40>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x8b8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a64      	ldr	r2, [pc, #400]	; (800492c <HAL_DMA_IRQHandler+0xa44>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x8ca>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e007      	b.n	80047c2 <HAL_DMA_IRQHandler+0x8da>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d307      	bcc.n	80047de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f2      	bne.n	80047c2 <HAL_DMA_IRQHandler+0x8da>
 80047dc:	e000      	b.n	80047e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2203      	movs	r2, #3
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047f6:	e003      	b.n	8004800 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8272 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
 800481a:	e26c      	b.n	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a43      	ldr	r2, [pc, #268]	; (8004930 <HAL_DMA_IRQHandler+0xa48>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d022      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a42      	ldr	r2, [pc, #264]	; (8004934 <HAL_DMA_IRQHandler+0xa4c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01d      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a40      	ldr	r2, [pc, #256]	; (8004938 <HAL_DMA_IRQHandler+0xa50>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3f      	ldr	r2, [pc, #252]	; (800493c <HAL_DMA_IRQHandler+0xa54>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3d      	ldr	r2, [pc, #244]	; (8004940 <HAL_DMA_IRQHandler+0xa58>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <HAL_DMA_IRQHandler+0xa5c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3a      	ldr	r2, [pc, #232]	; (8004948 <HAL_DMA_IRQHandler+0xa60>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_DMA_IRQHandler+0x984>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a39      	ldr	r2, [pc, #228]	; (800494c <HAL_DMA_IRQHandler+0xa64>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_DMA_IRQHandler+0x988>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_DMA_IRQHandler+0x98a>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 823f 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2204      	movs	r2, #4
 800488a:	409a      	lsls	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80cd 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xb48>
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80c7 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2204      	movs	r2, #4
 80048ac:	409a      	lsls	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d049      	beq.n	8004950 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8210 	beq.w	8004cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	e20a      	b.n	8004cf0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8206 	beq.w	8004cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ec:	e200      	b.n	8004cf0 <HAL_DMA_IRQHandler+0xe08>
 80048ee:	bf00      	nop
 80048f0:	40020010 	.word	0x40020010
 80048f4:	40020028 	.word	0x40020028
 80048f8:	40020040 	.word	0x40020040
 80048fc:	40020058 	.word	0x40020058
 8004900:	40020070 	.word	0x40020070
 8004904:	40020088 	.word	0x40020088
 8004908:	400200a0 	.word	0x400200a0
 800490c:	400200b8 	.word	0x400200b8
 8004910:	40020410 	.word	0x40020410
 8004914:	40020428 	.word	0x40020428
 8004918:	40020440 	.word	0x40020440
 800491c:	40020458 	.word	0x40020458
 8004920:	40020470 	.word	0x40020470
 8004924:	40020488 	.word	0x40020488
 8004928:	400204a0 	.word	0x400204a0
 800492c:	400204b8 	.word	0x400204b8
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d160      	bne.n	8004a1c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7f      	ldr	r2, [pc, #508]	; (8004b5c <HAL_DMA_IRQHandler+0xc74>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d04a      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a7d      	ldr	r2, [pc, #500]	; (8004b60 <HAL_DMA_IRQHandler+0xc78>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d045      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a7c      	ldr	r2, [pc, #496]	; (8004b64 <HAL_DMA_IRQHandler+0xc7c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d040      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a7a      	ldr	r2, [pc, #488]	; (8004b68 <HAL_DMA_IRQHandler+0xc80>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d03b      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a79      	ldr	r2, [pc, #484]	; (8004b6c <HAL_DMA_IRQHandler+0xc84>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d036      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a77      	ldr	r2, [pc, #476]	; (8004b70 <HAL_DMA_IRQHandler+0xc88>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d031      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a76      	ldr	r2, [pc, #472]	; (8004b74 <HAL_DMA_IRQHandler+0xc8c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d02c      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a74      	ldr	r2, [pc, #464]	; (8004b78 <HAL_DMA_IRQHandler+0xc90>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d027      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a73      	ldr	r2, [pc, #460]	; (8004b7c <HAL_DMA_IRQHandler+0xc94>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a71      	ldr	r2, [pc, #452]	; (8004b80 <HAL_DMA_IRQHandler+0xc98>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01d      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a70      	ldr	r2, [pc, #448]	; (8004b84 <HAL_DMA_IRQHandler+0xc9c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_DMA_IRQHandler+0xca0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6d      	ldr	r2, [pc, #436]	; (8004b8c <HAL_DMA_IRQHandler+0xca4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6b      	ldr	r2, [pc, #428]	; (8004b90 <HAL_DMA_IRQHandler+0xca8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <HAL_DMA_IRQHandler+0xcac>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_DMA_IRQHandler+0xb12>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a68      	ldr	r2, [pc, #416]	; (8004b98 <HAL_DMA_IRQHandler+0xcb0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <HAL_DMA_IRQHandler+0xb24>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0208 	bic.w	r2, r2, #8
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e007      	b.n	8004a1c <HAL_DMA_IRQHandler+0xb34>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8165 	beq.w	8004cf0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a2e:	e15f      	b.n	8004cf0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2202      	movs	r2, #2
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80c5 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0xce8>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80bf 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 813a 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a88:	e134      	b.n	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8130 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9c:	e12a      	b.n	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 8089 	bne.w	8004bbc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_DMA_IRQHandler+0xc74>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04a      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a29      	ldr	r2, [pc, #164]	; (8004b60 <HAL_DMA_IRQHandler+0xc78>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d045      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a28      	ldr	r2, [pc, #160]	; (8004b64 <HAL_DMA_IRQHandler+0xc7c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d040      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <HAL_DMA_IRQHandler+0xc80>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <HAL_DMA_IRQHandler+0xc84>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d036      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a23      	ldr	r2, [pc, #140]	; (8004b70 <HAL_DMA_IRQHandler+0xc88>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d031      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_DMA_IRQHandler+0xc8c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d02c      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <HAL_DMA_IRQHandler+0xc90>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d027      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_DMA_IRQHandler+0xc94>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <HAL_DMA_IRQHandler+0xc98>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01d      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_DMA_IRQHandler+0xc9c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_DMA_IRQHandler+0xca0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <HAL_DMA_IRQHandler+0xca4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_DMA_IRQHandler+0xca8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_DMA_IRQHandler+0xcac>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xc62>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_DMA_IRQHandler+0xcb0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d128      	bne.n	8004b9c <HAL_DMA_IRQHandler+0xcb4>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0214 	bic.w	r2, r2, #20
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e027      	b.n	8004bac <HAL_DMA_IRQHandler+0xcc4>
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 020a 	bic.w	r2, r2, #10
 8004baa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8097 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bce:	e091      	b.n	8004cf4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2208      	movs	r2, #8
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8088 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8082 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a41      	ldr	r2, [pc, #260]	; (8004cfc <HAL_DMA_IRQHandler+0xe14>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04a      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <HAL_DMA_IRQHandler+0xe18>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d045      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <HAL_DMA_IRQHandler+0xe1c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d040      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <HAL_DMA_IRQHandler+0xe20>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d03b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <HAL_DMA_IRQHandler+0xe24>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d036      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a39      	ldr	r2, [pc, #228]	; (8004d10 <HAL_DMA_IRQHandler+0xe28>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a38      	ldr	r2, [pc, #224]	; (8004d14 <HAL_DMA_IRQHandler+0xe2c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d02c      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a36      	ldr	r2, [pc, #216]	; (8004d18 <HAL_DMA_IRQHandler+0xe30>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d027      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a35      	ldr	r2, [pc, #212]	; (8004d1c <HAL_DMA_IRQHandler+0xe34>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a33      	ldr	r2, [pc, #204]	; (8004d20 <HAL_DMA_IRQHandler+0xe38>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a32      	ldr	r2, [pc, #200]	; (8004d24 <HAL_DMA_IRQHandler+0xe3c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a30      	ldr	r2, [pc, #192]	; (8004d28 <HAL_DMA_IRQHandler+0xe40>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <HAL_DMA_IRQHandler+0xe44>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2d      	ldr	r2, [pc, #180]	; (8004d30 <HAL_DMA_IRQHandler+0xe48>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_DMA_IRQHandler+0xe4c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xdaa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <HAL_DMA_IRQHandler+0xe50>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d108      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0xdbc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 021c 	bic.w	r2, r2, #28
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e007      	b.n	8004cb4 <HAL_DMA_IRQHandler+0xdcc>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 020e 	bic.w	r2, r2, #14
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
 8004cea:	e004      	b.n	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004cec:	bf00      	nop
 8004cee:	e002      	b.n	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40020010 	.word	0x40020010
 8004d00:	40020028 	.word	0x40020028
 8004d04:	40020040 	.word	0x40020040
 8004d08:	40020058 	.word	0x40020058
 8004d0c:	40020070 	.word	0x40020070
 8004d10:	40020088 	.word	0x40020088
 8004d14:	400200a0 	.word	0x400200a0
 8004d18:	400200b8 	.word	0x400200b8
 8004d1c:	40020410 	.word	0x40020410
 8004d20:	40020428 	.word	0x40020428
 8004d24:	40020440 	.word	0x40020440
 8004d28:	40020458 	.word	0x40020458
 8004d2c:	40020470 	.word	0x40020470
 8004d30:	40020488 	.word	0x40020488
 8004d34:	400204a0 	.word	0x400204a0
 8004d38:	400204b8 	.word	0x400204b8

08004d3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7f      	ldr	r2, [pc, #508]	; (8004f58 <DMA_SetConfig+0x21c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d072      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7d      	ldr	r2, [pc, #500]	; (8004f5c <DMA_SetConfig+0x220>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d06d      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7c      	ldr	r2, [pc, #496]	; (8004f60 <DMA_SetConfig+0x224>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d068      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7a      	ldr	r2, [pc, #488]	; (8004f64 <DMA_SetConfig+0x228>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d063      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a79      	ldr	r2, [pc, #484]	; (8004f68 <DMA_SetConfig+0x22c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d05e      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a77      	ldr	r2, [pc, #476]	; (8004f6c <DMA_SetConfig+0x230>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d059      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a76      	ldr	r2, [pc, #472]	; (8004f70 <DMA_SetConfig+0x234>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d054      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a74      	ldr	r2, [pc, #464]	; (8004f74 <DMA_SetConfig+0x238>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04f      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a73      	ldr	r2, [pc, #460]	; (8004f78 <DMA_SetConfig+0x23c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04a      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a71      	ldr	r2, [pc, #452]	; (8004f7c <DMA_SetConfig+0x240>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d045      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a70      	ldr	r2, [pc, #448]	; (8004f80 <DMA_SetConfig+0x244>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d040      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6e      	ldr	r2, [pc, #440]	; (8004f84 <DMA_SetConfig+0x248>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d03b      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6d      	ldr	r2, [pc, #436]	; (8004f88 <DMA_SetConfig+0x24c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d036      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <DMA_SetConfig+0x250>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d031      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6a      	ldr	r2, [pc, #424]	; (8004f90 <DMA_SetConfig+0x254>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d02c      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a68      	ldr	r2, [pc, #416]	; (8004f94 <DMA_SetConfig+0x258>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d027      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a67      	ldr	r2, [pc, #412]	; (8004f98 <DMA_SetConfig+0x25c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a65      	ldr	r2, [pc, #404]	; (8004f9c <DMA_SetConfig+0x260>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01d      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a64      	ldr	r2, [pc, #400]	; (8004fa0 <DMA_SetConfig+0x264>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a62      	ldr	r2, [pc, #392]	; (8004fa4 <DMA_SetConfig+0x268>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a61      	ldr	r2, [pc, #388]	; (8004fa8 <DMA_SetConfig+0x26c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5f      	ldr	r2, [pc, #380]	; (8004fac <DMA_SetConfig+0x270>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5e      	ldr	r2, [pc, #376]	; (8004fb0 <DMA_SetConfig+0x274>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <DMA_SetConfig+0x10a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a5c      	ldr	r2, [pc, #368]	; (8004fb4 <DMA_SetConfig+0x278>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <DMA_SetConfig+0x10e>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <DMA_SetConfig+0x110>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a39      	ldr	r2, [pc, #228]	; (8004f58 <DMA_SetConfig+0x21c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d04a      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a38      	ldr	r2, [pc, #224]	; (8004f5c <DMA_SetConfig+0x220>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d045      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a36      	ldr	r2, [pc, #216]	; (8004f60 <DMA_SetConfig+0x224>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d040      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a35      	ldr	r2, [pc, #212]	; (8004f64 <DMA_SetConfig+0x228>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d03b      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a33      	ldr	r2, [pc, #204]	; (8004f68 <DMA_SetConfig+0x22c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d036      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a32      	ldr	r2, [pc, #200]	; (8004f6c <DMA_SetConfig+0x230>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d031      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <DMA_SetConfig+0x234>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02c      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2f      	ldr	r2, [pc, #188]	; (8004f74 <DMA_SetConfig+0x238>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d027      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <DMA_SetConfig+0x23c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <DMA_SetConfig+0x240>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2a      	ldr	r2, [pc, #168]	; (8004f80 <DMA_SetConfig+0x244>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <DMA_SetConfig+0x248>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <DMA_SetConfig+0x24c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <DMA_SetConfig+0x250>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <DMA_SetConfig+0x254>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <DMA_SetConfig+0x1d0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a23      	ldr	r2, [pc, #140]	; (8004f94 <DMA_SetConfig+0x258>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <DMA_SetConfig+0x1d4>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <DMA_SetConfig+0x1d6>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d059      	beq.n	8004fca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	223f      	movs	r2, #63	; 0x3f
 8004f20:	409a      	lsls	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d138      	bne.n	8004fb8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f56:	e086      	b.n	8005066 <DMA_SetConfig+0x32a>
 8004f58:	40020010 	.word	0x40020010
 8004f5c:	40020028 	.word	0x40020028
 8004f60:	40020040 	.word	0x40020040
 8004f64:	40020058 	.word	0x40020058
 8004f68:	40020070 	.word	0x40020070
 8004f6c:	40020088 	.word	0x40020088
 8004f70:	400200a0 	.word	0x400200a0
 8004f74:	400200b8 	.word	0x400200b8
 8004f78:	40020410 	.word	0x40020410
 8004f7c:	40020428 	.word	0x40020428
 8004f80:	40020440 	.word	0x40020440
 8004f84:	40020458 	.word	0x40020458
 8004f88:	40020470 	.word	0x40020470
 8004f8c:	40020488 	.word	0x40020488
 8004f90:	400204a0 	.word	0x400204a0
 8004f94:	400204b8 	.word	0x400204b8
 8004f98:	58025408 	.word	0x58025408
 8004f9c:	5802541c 	.word	0x5802541c
 8004fa0:	58025430 	.word	0x58025430
 8004fa4:	58025444 	.word	0x58025444
 8004fa8:	58025458 	.word	0x58025458
 8004fac:	5802546c 	.word	0x5802546c
 8004fb0:	58025480 	.word	0x58025480
 8004fb4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]
}
 8004fc8:	e04d      	b.n	8005066 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <DMA_SetConfig+0x338>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <DMA_SetConfig+0x2de>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	; (8005078 <DMA_SetConfig+0x33c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01d      	beq.n	800501a <DMA_SetConfig+0x2de>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <DMA_SetConfig+0x340>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <DMA_SetConfig+0x2de>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <DMA_SetConfig+0x344>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <DMA_SetConfig+0x2de>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a23      	ldr	r2, [pc, #140]	; (8005084 <DMA_SetConfig+0x348>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <DMA_SetConfig+0x2de>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <DMA_SetConfig+0x34c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <DMA_SetConfig+0x2de>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a20      	ldr	r2, [pc, #128]	; (800508c <DMA_SetConfig+0x350>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <DMA_SetConfig+0x2de>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <DMA_SetConfig+0x354>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <DMA_SetConfig+0x2e2>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <DMA_SetConfig+0x2e4>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2201      	movs	r2, #1
 800502e:	409a      	lsls	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d108      	bne.n	8005056 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	60da      	str	r2, [r3, #12]
}
 8005054:	e007      	b.n	8005066 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	58025408 	.word	0x58025408
 8005078:	5802541c 	.word	0x5802541c
 800507c:	58025430 	.word	0x58025430
 8005080:	58025444 	.word	0x58025444
 8005084:	58025458 	.word	0x58025458
 8005088:	5802546c 	.word	0x5802546c
 800508c:	58025480 	.word	0x58025480
 8005090:	58025494 	.word	0x58025494

08005094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <DMA_CalcBaseAndBitshift+0x118>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d04a      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a41      	ldr	r2, [pc, #260]	; (80051b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d045      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <DMA_CalcBaseAndBitshift+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d040      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3e      	ldr	r2, [pc, #248]	; (80051b8 <DMA_CalcBaseAndBitshift+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d03b      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3c      	ldr	r2, [pc, #240]	; (80051bc <DMA_CalcBaseAndBitshift+0x128>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d036      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3b      	ldr	r2, [pc, #236]	; (80051c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d031      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a39      	ldr	r2, [pc, #228]	; (80051c4 <DMA_CalcBaseAndBitshift+0x130>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02c      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <DMA_CalcBaseAndBitshift+0x134>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d027      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a36      	ldr	r2, [pc, #216]	; (80051cc <DMA_CalcBaseAndBitshift+0x138>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a35      	ldr	r2, [pc, #212]	; (80051d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01d      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a33      	ldr	r2, [pc, #204]	; (80051d4 <DMA_CalcBaseAndBitshift+0x140>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a32      	ldr	r2, [pc, #200]	; (80051d8 <DMA_CalcBaseAndBitshift+0x144>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a30      	ldr	r2, [pc, #192]	; (80051dc <DMA_CalcBaseAndBitshift+0x148>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2f      	ldr	r2, [pc, #188]	; (80051e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2d      	ldr	r2, [pc, #180]	; (80051e4 <DMA_CalcBaseAndBitshift+0x150>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <DMA_CalcBaseAndBitshift+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <DMA_CalcBaseAndBitshift+0x154>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <DMA_CalcBaseAndBitshift+0xac>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <DMA_CalcBaseAndBitshift+0xae>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d024      	beq.n	8005190 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	3b10      	subs	r3, #16
 800514e:	4a27      	ldr	r2, [pc, #156]	; (80051ec <DMA_CalcBaseAndBitshift+0x158>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d908      	bls.n	8005180 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <DMA_CalcBaseAndBitshift+0x160>)
 8005176:	4013      	ands	r3, r2
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	659a      	str	r2, [r3, #88]	; 0x58
 800517e:	e00d      	b.n	800519c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <DMA_CalcBaseAndBitshift+0x160>)
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6593      	str	r3, [r2, #88]	; 0x58
 800518e:	e005      	b.n	800519c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40020010 	.word	0x40020010
 80051b0:	40020028 	.word	0x40020028
 80051b4:	40020040 	.word	0x40020040
 80051b8:	40020058 	.word	0x40020058
 80051bc:	40020070 	.word	0x40020070
 80051c0:	40020088 	.word	0x40020088
 80051c4:	400200a0 	.word	0x400200a0
 80051c8:	400200b8 	.word	0x400200b8
 80051cc:	40020410 	.word	0x40020410
 80051d0:	40020428 	.word	0x40020428
 80051d4:	40020440 	.word	0x40020440
 80051d8:	40020458 	.word	0x40020458
 80051dc:	40020470 	.word	0x40020470
 80051e0:	40020488 	.word	0x40020488
 80051e4:	400204a0 	.word	0x400204a0
 80051e8:	400204b8 	.word	0x400204b8
 80051ec:	aaaaaaab 	.word	0xaaaaaaab
 80051f0:	0800c2d0 	.word	0x0800c2d0
 80051f4:	fffffc00 	.word	0xfffffc00

080051f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d120      	bne.n	800524e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	2b03      	cmp	r3, #3
 8005212:	d858      	bhi.n	80052c6 <DMA_CheckFifoParam+0xce>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <DMA_CheckFifoParam+0x24>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	0800522d 	.word	0x0800522d
 8005220:	0800523f 	.word	0x0800523f
 8005224:	0800522d 	.word	0x0800522d
 8005228:	080052c7 	.word	0x080052c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d048      	beq.n	80052ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800523c:	e045      	b.n	80052ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005246:	d142      	bne.n	80052ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800524c:	e03f      	b.n	80052ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	d123      	bne.n	80052a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	2b03      	cmp	r3, #3
 800525e:	d838      	bhi.n	80052d2 <DMA_CheckFifoParam+0xda>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <DMA_CheckFifoParam+0x70>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005279 	.word	0x08005279
 800526c:	0800527f 	.word	0x0800527f
 8005270:	08005279 	.word	0x08005279
 8005274:	08005291 	.word	0x08005291
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
        break;
 800527c:	e030      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d025      	beq.n	80052d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800528e:	e022      	b.n	80052d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005298:	d11f      	bne.n	80052da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800529e:	e01c      	b.n	80052da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d902      	bls.n	80052ae <DMA_CheckFifoParam+0xb6>
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d003      	beq.n	80052b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052ac:	e018      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
        break;
 80052b2:	e015      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
    break;
 80052c4:	e00b      	b.n	80052de <DMA_CheckFifoParam+0xe6>
        break;
 80052c6:	bf00      	nop
 80052c8:	e00a      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        break;
 80052ca:	bf00      	nop
 80052cc:	e008      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        break;
 80052ce:	bf00      	nop
 80052d0:	e006      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
        break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
    break;
 80052de:	bf00      	nop
    }
  }

  return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop

080052f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a36      	ldr	r2, [pc, #216]	; (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a35      	ldr	r2, [pc, #212]	; (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a33      	ldr	r2, [pc, #204]	; (80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01a      	beq.n	800538e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	3b08      	subs	r3, #8
 8005360:	4a28      	ldr	r2, [pc, #160]	; (8005404 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4b26      	ldr	r3, [pc, #152]	; (8005408 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a24      	ldr	r2, [pc, #144]	; (800540c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800537c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2201      	movs	r2, #1
 8005386:	409a      	lsls	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800538c:	e024      	b.n	80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3b10      	subs	r3, #16
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d806      	bhi.n	80053b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d902      	bls.n	80053b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3308      	adds	r3, #8
 80053b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80053c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	58025408 	.word	0x58025408
 80053e8:	5802541c 	.word	0x5802541c
 80053ec:	58025430 	.word	0x58025430
 80053f0:	58025444 	.word	0x58025444
 80053f4:	58025458 	.word	0x58025458
 80053f8:	5802546c 	.word	0x5802546c
 80053fc:	58025480 	.word	0x58025480
 8005400:	58025494 	.word	0x58025494
 8005404:	cccccccd 	.word	0xcccccccd
 8005408:	16009600 	.word	0x16009600
 800540c:	58025880 	.word	0x58025880
 8005410:	aaaaaaab 	.word	0xaaaaaaab
 8005414:	400204b8 	.word	0x400204b8
 8005418:	4002040f 	.word	0x4002040f
 800541c:	10008200 	.word	0x10008200
 8005420:	40020880 	.word	0x40020880

08005424 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d04a      	beq.n	80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d847      	bhi.n	80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	; (80054dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d022      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d01d      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d018      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1c      	ldr	r2, [pc, #112]	; (80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d101      	bne.n	8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005494:	2300      	movs	r3, #0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4b17      	ldr	r3, [pc, #92]	; (80054fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054ac:	671a      	str	r2, [r3, #112]	; 0x70
 80054ae:	e009      	b.n	80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	461a      	mov	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80054c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	2201      	movs	r2, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494
 80054fc:	1600963f 	.word	0x1600963f
 8005500:	58025940 	.word	0x58025940
 8005504:	1000823f 	.word	0x1000823f
 8005508:	40020940 	.word	0x40020940

0800550c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <HAL_GPIO_Init+0x234>)
 800551c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800551e:	e194      	b.n	800584a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8186 	beq.w	8005844 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d005      	beq.n	8005550 <HAL_GPIO_Init+0x44>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d130      	bne.n	80055b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005586:	2201      	movs	r2, #1
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0201 	and.w	r2, r3, #1
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d017      	beq.n	80055ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	2203      	movs	r2, #3
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d123      	bne.n	8005642 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3208      	adds	r2, #8
 8005602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	220f      	movs	r2, #15
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	08da      	lsrs	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3208      	adds	r2, #8
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80e0 	beq.w	8005844 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005684:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_GPIO_Init+0x238>)
 8005686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800568a:	4a2e      	ldr	r2, [pc, #184]	; (8005744 <HAL_GPIO_Init+0x238>)
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_GPIO_Init+0x238>)
 8005696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056a2:	4a29      	ldr	r2, [pc, #164]	; (8005748 <HAL_GPIO_Init+0x23c>)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	089b      	lsrs	r3, r3, #2
 80056a8:	3302      	adds	r3, #2
 80056aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	220f      	movs	r2, #15
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4013      	ands	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a20      	ldr	r2, [pc, #128]	; (800574c <HAL_GPIO_Init+0x240>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d052      	beq.n	8005774 <HAL_GPIO_Init+0x268>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <HAL_GPIO_Init+0x244>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d031      	beq.n	800573a <HAL_GPIO_Init+0x22e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_GPIO_Init+0x248>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d02b      	beq.n	8005736 <HAL_GPIO_Init+0x22a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_GPIO_Init+0x24c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d025      	beq.n	8005732 <HAL_GPIO_Init+0x226>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_GPIO_Init+0x250>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <HAL_GPIO_Init+0x222>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_GPIO_Init+0x254>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d019      	beq.n	800572a <HAL_GPIO_Init+0x21e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <HAL_GPIO_Init+0x258>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <HAL_GPIO_Init+0x21a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <HAL_GPIO_Init+0x25c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00d      	beq.n	8005722 <HAL_GPIO_Init+0x216>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_GPIO_Init+0x260>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <HAL_GPIO_Init+0x212>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_GPIO_Init+0x264>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d101      	bne.n	800571a <HAL_GPIO_Init+0x20e>
 8005716:	2309      	movs	r3, #9
 8005718:	e02d      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800571a:	230a      	movs	r3, #10
 800571c:	e02b      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800571e:	2308      	movs	r3, #8
 8005720:	e029      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 8005722:	2307      	movs	r3, #7
 8005724:	e027      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 8005726:	2306      	movs	r3, #6
 8005728:	e025      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800572a:	2305      	movs	r3, #5
 800572c:	e023      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800572e:	2304      	movs	r3, #4
 8005730:	e021      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 8005732:	2303      	movs	r3, #3
 8005734:	e01f      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 8005736:	2302      	movs	r3, #2
 8005738:	e01d      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800573a:	2301      	movs	r3, #1
 800573c:	e01b      	b.n	8005776 <HAL_GPIO_Init+0x26a>
 800573e:	bf00      	nop
 8005740:	58000080 	.word	0x58000080
 8005744:	58024400 	.word	0x58024400
 8005748:	58000400 	.word	0x58000400
 800574c:	58020000 	.word	0x58020000
 8005750:	58020400 	.word	0x58020400
 8005754:	58020800 	.word	0x58020800
 8005758:	58020c00 	.word	0x58020c00
 800575c:	58021000 	.word	0x58021000
 8005760:	58021400 	.word	0x58021400
 8005764:	58021800 	.word	0x58021800
 8005768:	58021c00 	.word	0x58021c00
 800576c:	58022000 	.word	0x58022000
 8005770:	58022400 	.word	0x58022400
 8005774:	2300      	movs	r3, #0
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	f002 0203 	and.w	r2, r2, #3
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	4093      	lsls	r3, r2
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005786:	4938      	ldr	r1, [pc, #224]	; (8005868 <HAL_GPIO_Init+0x35c>)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	3302      	adds	r3, #2
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f ae63 	bne.w	8005520 <HAL_GPIO_Init+0x14>
  }
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	3724      	adds	r7, #36	; 0x24
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	58000400 	.word	0x58000400

0800586c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800587a:	4b75      	ldr	r3, [pc, #468]	; (8005a50 <HAL_GPIO_DeInit+0x1e4>)
 800587c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800587e:	e0d9      	b.n	8005a34 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005880:	2201      	movs	r2, #1
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80cc 	beq.w	8005a2e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005896:	4a6f      	ldr	r2, [pc, #444]	; (8005a54 <HAL_GPIO_DeInit+0x1e8>)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	3302      	adds	r3, #2
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	220f      	movs	r2, #15
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4013      	ands	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a67      	ldr	r2, [pc, #412]	; (8005a58 <HAL_GPIO_DeInit+0x1ec>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d037      	beq.n	8005930 <HAL_GPIO_DeInit+0xc4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a66      	ldr	r2, [pc, #408]	; (8005a5c <HAL_GPIO_DeInit+0x1f0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d031      	beq.n	800592c <HAL_GPIO_DeInit+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a65      	ldr	r2, [pc, #404]	; (8005a60 <HAL_GPIO_DeInit+0x1f4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02b      	beq.n	8005928 <HAL_GPIO_DeInit+0xbc>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a64      	ldr	r2, [pc, #400]	; (8005a64 <HAL_GPIO_DeInit+0x1f8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d025      	beq.n	8005924 <HAL_GPIO_DeInit+0xb8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a63      	ldr	r2, [pc, #396]	; (8005a68 <HAL_GPIO_DeInit+0x1fc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01f      	beq.n	8005920 <HAL_GPIO_DeInit+0xb4>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a62      	ldr	r2, [pc, #392]	; (8005a6c <HAL_GPIO_DeInit+0x200>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d019      	beq.n	800591c <HAL_GPIO_DeInit+0xb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a61      	ldr	r2, [pc, #388]	; (8005a70 <HAL_GPIO_DeInit+0x204>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_GPIO_DeInit+0xac>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a60      	ldr	r2, [pc, #384]	; (8005a74 <HAL_GPIO_DeInit+0x208>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00d      	beq.n	8005914 <HAL_GPIO_DeInit+0xa8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a5f      	ldr	r2, [pc, #380]	; (8005a78 <HAL_GPIO_DeInit+0x20c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <HAL_GPIO_DeInit+0xa4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a5e      	ldr	r2, [pc, #376]	; (8005a7c <HAL_GPIO_DeInit+0x210>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_GPIO_DeInit+0xa0>
 8005908:	2309      	movs	r3, #9
 800590a:	e012      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 800590c:	230a      	movs	r3, #10
 800590e:	e010      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005910:	2308      	movs	r3, #8
 8005912:	e00e      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005914:	2307      	movs	r3, #7
 8005916:	e00c      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005918:	2306      	movs	r3, #6
 800591a:	e00a      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 800591c:	2305      	movs	r3, #5
 800591e:	e008      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005920:	2304      	movs	r3, #4
 8005922:	e006      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005924:	2303      	movs	r3, #3
 8005926:	e004      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005928:	2302      	movs	r3, #2
 800592a:	e002      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_GPIO_DeInit+0xc6>
 8005930:	2300      	movs	r3, #0
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	f002 0203 	and.w	r2, r2, #3
 8005938:	0092      	lsls	r2, r2, #2
 800593a:	4093      	lsls	r3, r2
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	d136      	bne.n	80059b0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	43db      	mvns	r3, r3
 800594a:	401a      	ands	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	43db      	mvns	r3, r3
 8005958:	401a      	ands	r2, r3
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	43db      	mvns	r3, r3
 8005968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800596c:	4013      	ands	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43db      	mvns	r3, r3
 800597a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597e:	4013      	ands	r3, r2
 8005980:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	220f      	movs	r2, #15
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005992:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <HAL_GPIO_DeInit+0x1e8>)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	3302      	adds	r3, #2
 800599a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	43da      	mvns	r2, r3
 80059a2:	482c      	ldr	r0, [pc, #176]	; (8005a54 <HAL_GPIO_DeInit+0x1e8>)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	400a      	ands	r2, r1
 80059aa:	3302      	adds	r3, #2
 80059ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2103      	movs	r1, #3
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	08da      	lsrs	r2, r3, #3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3208      	adds	r2, #8
 80059cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	08d2      	lsrs	r2, r2, #3
 80059e4:	4019      	ands	r1, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3208      	adds	r2, #8
 80059ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	2103      	movs	r1, #3
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	2103      	movs	r1, #3
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	401a      	ands	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f af1f 	bne.w	8005880 <HAL_GPIO_DeInit+0x14>
  }
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	58000080 	.word	0x58000080
 8005a54:	58000400 	.word	0x58000400
 8005a58:	58020000 	.word	0x58020000
 8005a5c:	58020400 	.word	0x58020400
 8005a60:	58020800 	.word	0x58020800
 8005a64:	58020c00 	.word	0x58020c00
 8005a68:	58021000 	.word	0x58021000
 8005a6c:	58021400 	.word	0x58021400
 8005a70:	58021800 	.word	0x58021800
 8005a74:	58021c00 	.word	0x58021c00
 8005a78:	58022000 	.word	0x58022000
 8005a7c:	58022400 	.word	0x58022400

08005a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a90:	787b      	ldrb	r3, [r7, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a9c:	e003      	b.n	8005aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	041a      	lsls	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ac4:	887a      	ldrh	r2, [r7, #2]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	041a      	lsls	r2, r3, #16
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	43d9      	mvns	r1, r3
 8005ad0:	887b      	ldrh	r3, [r7, #2]
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	619a      	str	r2, [r3, #24]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	4603      	mov	r3, r0
 8005aee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f804 	bl	8005b1a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b38:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d00a      	beq.n	8005b5a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b44:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d001      	beq.n	8005b56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e040      	b.n	8005bd8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e03e      	b.n	8005bd8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b5a:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b62:	491f      	ldr	r1, [pc, #124]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b6a:	f7fa ff87 	bl	8000a7c <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b70:	e009      	b.n	8005b86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b72:	f7fa ff83 	bl	8000a7c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b80:	d901      	bls.n	8005b86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e028      	b.n	8005bd8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b92:	d1ee      	bne.n	8005b72 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b1e      	cmp	r3, #30
 8005b98:	d008      	beq.n	8005bac <HAL_PWREx_ConfigSupply+0x7c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b9e:	d005      	beq.n	8005bac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b1d      	cmp	r3, #29
 8005ba4:	d002      	beq.n	8005bac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8005baa:	d114      	bne.n	8005bd6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005bac:	f7fa ff66 	bl	8000a7c <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bb2:	e009      	b.n	8005bc8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bb4:	f7fa ff62 	bl	8000a7c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc2:	d901      	bls.n	8005bc8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e007      	b.n	8005bd8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d1ee      	bne.n	8005bb4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58024800 	.word	0x58024800

08005be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	; 0x30
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f000 bc48 	b.w	8006488 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8088 	beq.w	8005d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c06:	4b99      	ldr	r3, [pc, #612]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c10:	4b96      	ldr	r3, [pc, #600]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d007      	beq.n	8005c2c <HAL_RCC_OscConfig+0x48>
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	2b18      	cmp	r3, #24
 8005c20:	d111      	bne.n	8005c46 <HAL_RCC_OscConfig+0x62>
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d10c      	bne.n	8005c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2c:	4b8f      	ldr	r3, [pc, #572]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d06d      	beq.n	8005d14 <HAL_RCC_OscConfig+0x130>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d169      	bne.n	8005d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f000 bc21 	b.w	8006488 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x7a>
 8005c50:	4b86      	ldr	r3, [pc, #536]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a85      	ldr	r2, [pc, #532]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e02e      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x9c>
 8005c66:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a80      	ldr	r2, [pc, #512]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b7e      	ldr	r3, [pc, #504]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7d      	ldr	r2, [pc, #500]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xc0>
 8005c8a:	4b78      	ldr	r3, [pc, #480]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a74      	ldr	r2, [pc, #464]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005ca4:	4b71      	ldr	r3, [pc, #452]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a70      	ldr	r2, [pc, #448]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b6e      	ldr	r3, [pc, #440]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6d      	ldr	r2, [pc, #436]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fa feda 	bl	8000a7c <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fa fed6 	bl	8000a7c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e3d4      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cde:	4b63      	ldr	r3, [pc, #396]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xe8>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fa fec6 	bl	8000a7c <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fa fec2 	bl	8000a7c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e3c0      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d06:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x110>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80ca 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d24:	4b51      	ldr	r3, [pc, #324]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d2e:	4b4f      	ldr	r3, [pc, #316]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_RCC_OscConfig+0x166>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2b18      	cmp	r3, #24
 8005d3e:	d156      	bne.n	8005dee <HAL_RCC_OscConfig+0x20a>
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d151      	bne.n	8005dee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d4a:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_RCC_OscConfig+0x17e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e392      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d62:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 0219 	bic.w	r2, r3, #25
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	493f      	ldr	r1, [pc, #252]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fa fe82 	bl	8000a7c <HAL_GetTick>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d7c:	f7fa fe7e 	bl	8000a7c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e37c      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9a:	f7fa fe9f 	bl	8000adc <HAL_GetREVID>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d817      	bhi.n	8005dd8 <HAL_RCC_OscConfig+0x1f4>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d108      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x1de>
 8005db0:	4b2e      	ldr	r3, [pc, #184]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc0:	e07a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	031b      	lsls	r3, r3, #12
 8005dd0:	4926      	ldr	r1, [pc, #152]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd6:	e06f      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd8:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	4921      	ldr	r1, [pc, #132]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dec:	e064      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d047      	beq.n	8005e86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 0219 	bic.w	r2, r3, #25
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	491a      	ldr	r1, [pc, #104]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fa fe38 	bl	8000a7c <HAL_GetTick>
 8005e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fa fe34 	bl	8000a7c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e332      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2e:	f7fa fe55 	bl	8000adc <HAL_GetREVID>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d819      	bhi.n	8005e70 <HAL_RCC_OscConfig+0x28c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d108      	bne.n	8005e56 <HAL_RCC_OscConfig+0x272>
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e4c:	4a07      	ldr	r2, [pc, #28]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e52:	6053      	str	r3, [r2, #4]
 8005e54:	e030      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	031b      	lsls	r3, r3, #12
 8005e64:	4901      	ldr	r1, [pc, #4]	; (8005e6c <HAL_RCC_OscConfig+0x288>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	604b      	str	r3, [r1, #4]
 8005e6a:	e025      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	4b9a      	ldr	r3, [pc, #616]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	4997      	ldr	r1, [pc, #604]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
 8005e84:	e018      	b.n	8005eb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e86:	4b95      	ldr	r3, [pc, #596]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a94      	ldr	r2, [pc, #592]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7fa fdf3 	bl	8000a7c <HAL_GetTick>
 8005e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fa fdef 	bl	8000a7c <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e2ed      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005eac:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a9 	beq.w	8006018 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec6:	4b85      	ldr	r3, [pc, #532]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ece:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ed0:	4b82      	ldr	r3, [pc, #520]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d007      	beq.n	8005eec <HAL_RCC_OscConfig+0x308>
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b18      	cmp	r3, #24
 8005ee0:	d13a      	bne.n	8005f58 <HAL_RCC_OscConfig+0x374>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d135      	bne.n	8005f58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eec:	4b7b      	ldr	r3, [pc, #492]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_OscConfig+0x320>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e2c1      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f04:	f7fa fdea 	bl	8000adc <HAL_GetREVID>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d817      	bhi.n	8005f42 <HAL_RCC_OscConfig+0x35e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d108      	bne.n	8005f2c <HAL_RCC_OscConfig+0x348>
 8005f1a:	4b70      	ldr	r3, [pc, #448]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f22:	4a6e      	ldr	r2, [pc, #440]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f2a:	e075      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f2c:	4b6b      	ldr	r3, [pc, #428]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	069b      	lsls	r3, r3, #26
 8005f3a:	4968      	ldr	r1, [pc, #416]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f40:	e06a      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f42:	4b66      	ldr	r3, [pc, #408]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	061b      	lsls	r3, r3, #24
 8005f50:	4962      	ldr	r1, [pc, #392]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f56:	e05f      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d042      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f60:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5d      	ldr	r2, [pc, #372]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fa fd86 	bl	8000a7c <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f74:	f7fa fd82 	bl	8000a7c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e280      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f86:	4b55      	ldr	r3, [pc, #340]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f92:	f7fa fda3 	bl	8000adc <HAL_GetREVID>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d817      	bhi.n	8005fd0 <HAL_RCC_OscConfig+0x3ec>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d108      	bne.n	8005fba <HAL_RCC_OscConfig+0x3d6>
 8005fa8:	4b4c      	ldr	r3, [pc, #304]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fb0:	4a4a      	ldr	r2, [pc, #296]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb6:	6053      	str	r3, [r2, #4]
 8005fb8:	e02e      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
 8005fba:	4b48      	ldr	r3, [pc, #288]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	069b      	lsls	r3, r3, #26
 8005fc8:	4944      	ldr	r1, [pc, #272]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
 8005fce:	e023      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
 8005fd0:	4b42      	ldr	r3, [pc, #264]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	061b      	lsls	r3, r3, #24
 8005fde:	493f      	ldr	r1, [pc, #252]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60cb      	str	r3, [r1, #12]
 8005fe4:	e018      	b.n	8006018 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7fa fd43 	bl	8000a7c <HAL_GetTick>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ffa:	f7fa fd3f 	bl	8000a7c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e23d      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f0      	bne.n	8005ffa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d036      	beq.n	8006092 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d019      	beq.n	8006060 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800602c:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 800602e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006030:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006038:	f7fa fd20 	bl	8000a7c <HAL_GetTick>
 800603c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006040:	f7fa fd1c 	bl	8000a7c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e21a      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x45c>
 800605e:	e018      	b.n	8006092 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8006062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006064:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fa fd06 	bl	8000a7c <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006074:	f7fa fd02 	bl	8000a7c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e200      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 8006088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d039      	beq.n	8006112 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01c      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 80060ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060b2:	f7fa fce3 	bl	8000a7c <HAL_GetTick>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ba:	f7fa fcdf 	bl	8000a7c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e1dd      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x4d6>
 80060d8:	e01b      	b.n	8006112 <HAL_RCC_OscConfig+0x52e>
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060e0:	4b9b      	ldr	r3, [pc, #620]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a9a      	ldr	r2, [pc, #616]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80060e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060ec:	f7fa fcc6 	bl	8000a7c <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060f4:	f7fa fcc2 	bl	8000a7c <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e1c0      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006106:	4b92      	ldr	r3, [pc, #584]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8081 	beq.w	8006222 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006120:	4b8c      	ldr	r3, [pc, #560]	; (8006354 <HAL_RCC_OscConfig+0x770>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a8b      	ldr	r2, [pc, #556]	; (8006354 <HAL_RCC_OscConfig+0x770>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800612c:	f7fa fca6 	bl	8000a7c <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006134:	f7fa fca2 	bl	8000a7c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e1a0      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006146:	4b83      	ldr	r3, [pc, #524]	; (8006354 <HAL_RCC_OscConfig+0x770>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d106      	bne.n	8006168 <HAL_RCC_OscConfig+0x584>
 800615a:	4b7d      	ldr	r3, [pc, #500]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a7c      	ldr	r2, [pc, #496]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	e02d      	b.n	80061c4 <HAL_RCC_OscConfig+0x5e0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10c      	bne.n	800618a <HAL_RCC_OscConfig+0x5a6>
 8006170:	4b77      	ldr	r3, [pc, #476]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a76      	ldr	r2, [pc, #472]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	4b74      	ldr	r3, [pc, #464]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a73      	ldr	r2, [pc, #460]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
 8006188:	e01c      	b.n	80061c4 <HAL_RCC_OscConfig+0x5e0>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b05      	cmp	r3, #5
 8006190:	d10c      	bne.n	80061ac <HAL_RCC_OscConfig+0x5c8>
 8006192:	4b6f      	ldr	r3, [pc, #444]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a6e      	ldr	r2, [pc, #440]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006198:	f043 0304 	orr.w	r3, r3, #4
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
 800619e:	4b6c      	ldr	r3, [pc, #432]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a6b      	ldr	r2, [pc, #428]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_OscConfig+0x5e0>
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	4a67      	ldr	r2, [pc, #412]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	6713      	str	r3, [r2, #112]	; 0x70
 80061b8:	4b65      	ldr	r3, [pc, #404]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	4a64      	ldr	r2, [pc, #400]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061be:	f023 0304 	bic.w	r3, r3, #4
 80061c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fa fc56 	bl	8000a7c <HAL_GetTick>
 80061d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061d2:	e00a      	b.n	80061ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d4:	f7fa fc52 	bl	8000a7c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e14e      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ea:	4b59      	ldr	r3, [pc, #356]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0ee      	beq.n	80061d4 <HAL_RCC_OscConfig+0x5f0>
 80061f6:	e014      	b.n	8006222 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f8:	f7fa fc40 	bl	8000a7c <HAL_GetTick>
 80061fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061fe:	e00a      	b.n	8006216 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fa fc3c 	bl	8000a7c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e138      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006216:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1ee      	bne.n	8006200 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 812d 	beq.w	8006486 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800622c:	4b48      	ldr	r3, [pc, #288]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006234:	2b18      	cmp	r3, #24
 8006236:	f000 80bd 	beq.w	80063b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b02      	cmp	r3, #2
 8006240:	f040 809e 	bne.w	8006380 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a41      	ldr	r2, [pc, #260]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800624a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800624e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fa fc14 	bl	8000a7c <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006258:	f7fa fc10 	bl	8000a7c <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e10e      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800626a:	4b39      	ldr	r3, [pc, #228]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006276:	4b36      	ldr	r3, [pc, #216]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <HAL_RCC_OscConfig+0x774>)
 800627c:	4013      	ands	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006286:	0112      	lsls	r2, r2, #4
 8006288:	430a      	orrs	r2, r1
 800628a:	4931      	ldr	r1, [pc, #196]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800628c:	4313      	orrs	r3, r2
 800628e:	628b      	str	r3, [r1, #40]	; 0x28
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	3b01      	subs	r3, #1
 8006296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	3b01      	subs	r3, #1
 80062a0:	025b      	lsls	r3, r3, #9
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	3b01      	subs	r3, #1
 80062ac:	041b      	lsls	r3, r3, #16
 80062ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	3b01      	subs	r3, #1
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062c0:	4923      	ldr	r1, [pc, #140]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a21      	ldr	r2, [pc, #132]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062d2:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_RCC_OscConfig+0x778>)
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062de:	00d2      	lsls	r2, r2, #3
 80062e0:	491b      	ldr	r1, [pc, #108]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f023 020c 	bic.w	r2, r3, #12
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4917      	ldr	r1, [pc, #92]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f023 0202 	bic.w	r2, r3, #2
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	4912      	ldr	r1, [pc, #72]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800631c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006322:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800632c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800632e:	4b08      	ldr	r3, [pc, #32]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	4a07      	ldr	r2, [pc, #28]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a04      	ldr	r2, [pc, #16]	; (8006350 <HAL_RCC_OscConfig+0x76c>)
 8006340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fa fb99 	bl	8000a7c <HAL_GetTick>
 800634a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800634c:	e011      	b.n	8006372 <HAL_RCC_OscConfig+0x78e>
 800634e:	bf00      	nop
 8006350:	58024400 	.word	0x58024400
 8006354:	58024800 	.word	0x58024800
 8006358:	fffffc0c 	.word	0xfffffc0c
 800635c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006360:	f7fa fb8c 	bl	8000a7c <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e08a      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006372:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0x77c>
 800637e:	e082      	b.n	8006486 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006380:	4b43      	ldr	r3, [pc, #268]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a42      	ldr	r2, [pc, #264]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800638a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fa fb76 	bl	8000a7c <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006394:	f7fa fb72 	bl	8000a7c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e070      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063a6:	4b3a      	ldr	r3, [pc, #232]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x7b0>
 80063b2:	e068      	b.n	8006486 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063b4:	4b36      	ldr	r3, [pc, #216]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063ba:	4b35      	ldr	r3, [pc, #212]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d031      	beq.n	800642c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f003 0203 	and.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d12a      	bne.n	800642c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d122      	bne.n	800642c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d11a      	bne.n	800642c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0a5b      	lsrs	r3, r3, #9
 80063fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d111      	bne.n	800642c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	0c1b      	lsrs	r3, r3, #16
 800640c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d108      	bne.n	800642c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	0e1b      	lsrs	r3, r3, #24
 800641e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e02b      	b.n	8006488 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	08db      	lsrs	r3, r3, #3
 8006436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800643a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d01f      	beq.n	8006486 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006452:	f7fa fb13 	bl	8000a7c <HAL_GetTick>
 8006456:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006458:	bf00      	nop
 800645a:	f7fa fb0f 	bl	8000a7c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	4293      	cmp	r3, r2
 8006464:	d0f9      	beq.n	800645a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800646a:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <HAL_RCC_OscConfig+0x8b0>)
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006472:	00d2      	lsls	r2, r2, #3
 8006474:	4906      	ldr	r1, [pc, #24]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006476:	4313      	orrs	r3, r2
 8006478:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	4a04      	ldr	r2, [pc, #16]	; (8006490 <HAL_RCC_OscConfig+0x8ac>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3730      	adds	r7, #48	; 0x30
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	ffff0007 	.word	0xffff0007

08006498 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e19c      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064ac:	4b8a      	ldr	r3, [pc, #552]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d910      	bls.n	80064dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b87      	ldr	r3, [pc, #540]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 020f 	bic.w	r2, r3, #15
 80064c2:	4985      	ldr	r1, [pc, #532]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b83      	ldr	r3, [pc, #524]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e184      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	4b7b      	ldr	r3, [pc, #492]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d908      	bls.n	800650a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064f8:	4b78      	ldr	r3, [pc, #480]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4975      	ldr	r1, [pc, #468]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006506:	4313      	orrs	r3, r2
 8006508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	4b70      	ldr	r3, [pc, #448]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006522:	429a      	cmp	r2, r3
 8006524:	d908      	bls.n	8006538 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006526:	4b6d      	ldr	r3, [pc, #436]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	496a      	ldr	r1, [pc, #424]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006534:	4313      	orrs	r3, r2
 8006536:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d010      	beq.n	8006566 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	4b64      	ldr	r3, [pc, #400]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006550:	429a      	cmp	r2, r3
 8006552:	d908      	bls.n	8006566 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006554:	4b61      	ldr	r3, [pc, #388]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	495e      	ldr	r1, [pc, #376]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006562:	4313      	orrs	r3, r2
 8006564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d010      	beq.n	8006594 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	4b59      	ldr	r3, [pc, #356]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800657e:	429a      	cmp	r2, r3
 8006580:	d908      	bls.n	8006594 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006582:	4b56      	ldr	r3, [pc, #344]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	4953      	ldr	r1, [pc, #332]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006590:	4313      	orrs	r3, r2
 8006592:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d010      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	4b4d      	ldr	r3, [pc, #308]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d908      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b0:	4b4a      	ldr	r3, [pc, #296]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f023 020f 	bic.w	r2, r3, #15
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4947      	ldr	r1, [pc, #284]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d055      	beq.n	800667a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065ce:	4b43      	ldr	r3, [pc, #268]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4940      	ldr	r1, [pc, #256]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065e8:	4b3c      	ldr	r3, [pc, #240]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d121      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0f6      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d107      	bne.n	8006610 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006600:	4b36      	ldr	r3, [pc, #216]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d115      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0ea      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006618:	4b30      	ldr	r3, [pc, #192]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0de      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006628:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0d6      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006638:	4b28      	ldr	r3, [pc, #160]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f023 0207 	bic.w	r2, r3, #7
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4925      	ldr	r1, [pc, #148]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006646:	4313      	orrs	r3, r2
 8006648:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800664a:	f7fa fa17 	bl	8000a7c <HAL_GetTick>
 800664e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006650:	e00a      	b.n	8006668 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006652:	f7fa fa13 	bl	8000a7c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006660:	4293      	cmp	r3, r2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e0be      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	429a      	cmp	r2, r3
 8006678:	d1eb      	bne.n	8006652 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d010      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	429a      	cmp	r2, r3
 8006694:	d208      	bcs.n	80066a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f023 020f 	bic.w	r2, r3, #15
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	490e      	ldr	r1, [pc, #56]	; (80066dc <HAL_RCC_ClockConfig+0x244>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d214      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 020f 	bic.w	r2, r3, #15
 80066be:	4906      	ldr	r1, [pc, #24]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c6:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <HAL_RCC_ClockConfig+0x240>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e086      	b.n	80067e6 <HAL_RCC_ClockConfig+0x34e>
 80066d8:	52002000 	.word	0x52002000
 80066dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d010      	beq.n	800670e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	4b3f      	ldr	r3, [pc, #252]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d208      	bcs.n	800670e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066fc:	4b3c      	ldr	r3, [pc, #240]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	4939      	ldr	r1, [pc, #228]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 800670a:	4313      	orrs	r3, r2
 800670c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d010      	beq.n	800673c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006726:	429a      	cmp	r2, r3
 8006728:	d208      	bcs.n	800673c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800672a:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	492e      	ldr	r1, [pc, #184]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 8006738:	4313      	orrs	r3, r2
 800673a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d010      	beq.n	800676a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	4b28      	ldr	r3, [pc, #160]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006754:	429a      	cmp	r2, r3
 8006756:	d208      	bcs.n	800676a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	4922      	ldr	r1, [pc, #136]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 8006766:	4313      	orrs	r3, r2
 8006768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d010      	beq.n	8006798 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006782:	429a      	cmp	r2, r3
 8006784:	d208      	bcs.n	8006798 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	4917      	ldr	r1, [pc, #92]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 8006794:	4313      	orrs	r3, r2
 8006796:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006798:	f000 f834 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 800679c:	4602      	mov	r2, r0
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	4912      	ldr	r1, [pc, #72]	; (80067f4 <HAL_RCC_ClockConfig+0x35c>)
 80067aa:	5ccb      	ldrb	r3, [r1, r3]
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067b6:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <HAL_RCC_ClockConfig+0x358>)
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	4a0d      	ldr	r2, [pc, #52]	; (80067f4 <HAL_RCC_ClockConfig+0x35c>)
 80067c0:	5cd3      	ldrb	r3, [r2, r3]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <HAL_RCC_ClockConfig+0x360>)
 80067ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <HAL_RCC_ClockConfig+0x364>)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x368>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa f904 	bl	80009e8 <HAL_InitTick>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	58024400 	.word	0x58024400
 80067f4:	0800c2c0 	.word	0x0800c2c0
 80067f8:	24000010 	.word	0x24000010
 80067fc:	2400000c 	.word	0x2400000c
 8006800:	24000014 	.word	0x24000014

08006804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800680a:	4bb3      	ldr	r3, [pc, #716]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006812:	2b18      	cmp	r3, #24
 8006814:	f200 8155 	bhi.w	8006ac2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCC_GetSysClockFreq+0x1c>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006885 	.word	0x08006885
 8006824:	08006ac3 	.word	0x08006ac3
 8006828:	08006ac3 	.word	0x08006ac3
 800682c:	08006ac3 	.word	0x08006ac3
 8006830:	08006ac3 	.word	0x08006ac3
 8006834:	08006ac3 	.word	0x08006ac3
 8006838:	08006ac3 	.word	0x08006ac3
 800683c:	08006ac3 	.word	0x08006ac3
 8006840:	080068ab 	.word	0x080068ab
 8006844:	08006ac3 	.word	0x08006ac3
 8006848:	08006ac3 	.word	0x08006ac3
 800684c:	08006ac3 	.word	0x08006ac3
 8006850:	08006ac3 	.word	0x08006ac3
 8006854:	08006ac3 	.word	0x08006ac3
 8006858:	08006ac3 	.word	0x08006ac3
 800685c:	08006ac3 	.word	0x08006ac3
 8006860:	080068b1 	.word	0x080068b1
 8006864:	08006ac3 	.word	0x08006ac3
 8006868:	08006ac3 	.word	0x08006ac3
 800686c:	08006ac3 	.word	0x08006ac3
 8006870:	08006ac3 	.word	0x08006ac3
 8006874:	08006ac3 	.word	0x08006ac3
 8006878:	08006ac3 	.word	0x08006ac3
 800687c:	08006ac3 	.word	0x08006ac3
 8006880:	080068b7 	.word	0x080068b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006884:	4b94      	ldr	r3, [pc, #592]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006890:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	4a90      	ldr	r2, [pc, #576]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
 80068a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80068a2:	e111      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068a4:	4b8d      	ldr	r3, [pc, #564]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068a6:	61bb      	str	r3, [r7, #24]
      break;
 80068a8:	e10e      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80068aa:	4b8d      	ldr	r3, [pc, #564]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068ac:	61bb      	str	r3, [r7, #24]
      break;
 80068ae:	e10b      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80068b0:	4b8c      	ldr	r3, [pc, #560]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80068b2:	61bb      	str	r3, [r7, #24]
      break;
 80068b4:	e108      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068b6:	4b88      	ldr	r3, [pc, #544]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80068c0:	4b85      	ldr	r3, [pc, #532]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068cc:	4b82      	ldr	r3, [pc, #520]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80068d6:	4b80      	ldr	r3, [pc, #512]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80e1 	beq.w	8006abc <HAL_RCC_GetSysClockFreq+0x2b8>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f000 8083 	beq.w	8006a08 <HAL_RCC_GetSysClockFreq+0x204>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	f200 80a1 	bhi.w	8006a4c <HAL_RCC_GetSysClockFreq+0x248>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x114>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d056      	beq.n	80069c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006916:	e099      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006918:	4b6f      	ldr	r3, [pc, #444]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02d      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006924:	4b6c      	ldr	r3, [pc, #432]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	4b62      	ldr	r3, [pc, #392]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006962:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800697e:	e087      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2e8>
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006992:	4b51      	ldr	r3, [pc, #324]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069c2:	e065      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d6:	4b40      	ldr	r3, [pc, #256]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a06:	e043      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006af4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a4a:	e021      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a90:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	0a5b      	lsrs	r3, r3, #9
 8006a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab4:	ee17 3a90 	vmov	r3, s15
 8006ab8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006aba:	e005      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
      break;
 8006ac0:	e002      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ac4:	61bb      	str	r3, [r7, #24]
      break;
 8006ac6:	bf00      	nop
  }

  return sysclockfreq;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3724      	adds	r7, #36	; 0x24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	03d09000 	.word	0x03d09000
 8006ae0:	003d0900 	.word	0x003d0900
 8006ae4:	007a1200 	.word	0x007a1200
 8006ae8:	46000000 	.word	0x46000000
 8006aec:	4c742400 	.word	0x4c742400
 8006af0:	4a742400 	.word	0x4a742400
 8006af4:	4af42400 	.word	0x4af42400

08006af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006afe:	f7ff fe81 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	490f      	ldr	r1, [pc, #60]	; (8006b4c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b10:	5ccb      	ldrb	r3, [r1, r3]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	4a07      	ldr	r2, [pc, #28]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b36:	4a07      	ldr	r2, [pc, #28]	; (8006b54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b3c:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	0800c2c0 	.word	0x0800c2c0
 8006b50:	24000010 	.word	0x24000010
 8006b54:	2400000c 	.word	0x2400000c

08006b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b5c:	f7ff ffcc 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	4904      	ldr	r1, [pc, #16]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	0800c2c0 	.word	0x0800c2c0

08006b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b88:	f7ff ffb6 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	0800c2c0 	.word	0x0800c2c0

08006bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	223f      	movs	r2, #63	; 0x3f
 8006bbe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f003 0207 	and.w	r2, r3, #7
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006bcc:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006bd8:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c08:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <HAL_RCC_GetClockConfig+0x7c>)
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_RCC_GetClockConfig+0x80>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	52002000 	.word	0x52002000

08006c34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c38:	b0ca      	sub	sp, #296	; 0x128
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006c58:	2500      	movs	r5, #0
 8006c5a:	ea54 0305 	orrs.w	r3, r4, r5
 8006c5e:	d049      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6a:	d02f      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c70:	d828      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c76:	d01a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c7c:	d822      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c86:	d007      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c88:	e01c      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8a:	4bb8      	ldr	r3, [pc, #736]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	4ab7      	ldr	r2, [pc, #732]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c96:	e01a      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 fb61 	bl	8009368 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cac:	e00f      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb2:	3328      	adds	r3, #40	; 0x28
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 fc08 	bl	80094cc <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cd6:	4ba5      	ldr	r3, [pc, #660]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce4:	4aa1      	ldr	r2, [pc, #644]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	6513      	str	r3, [r2, #80]	; 0x50
 8006cea:	e003      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006d00:	f04f 0900 	mov.w	r9, #0
 8006d04:	ea58 0309 	orrs.w	r3, r8, r9
 8006d08:	d047      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d82a      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d31 	.word	0x08006d31
 8006d20:	08006d3f 	.word	0x08006d3f
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d73 	.word	0x08006d73
 8006d2c:	08006d73 	.word	0x08006d73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4b8e      	ldr	r3, [pc, #568]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a8d      	ldr	r2, [pc, #564]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d3c:	e01a      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	3308      	adds	r3, #8
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 fb0e 	bl	8009368 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d52:	e00f      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	3328      	adds	r3, #40	; 0x28
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fbb5 	bl	80094cc <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d7c:	4b7b      	ldr	r3, [pc, #492]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d80:	f023 0107 	bic.w	r1, r3, #7
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8a:	4a78      	ldr	r2, [pc, #480]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006da6:	f04f 0b00 	mov.w	fp, #0
 8006daa:	ea5a 030b 	orrs.w	r3, sl, fp
 8006dae:	d04c      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dba:	d030      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc0:	d829      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc4:	d02d      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc8:	d825      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d018      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d821      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d007      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006dda:	e01c      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ddc:	4b63      	ldr	r3, [pc, #396]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	4a62      	ldr	r2, [pc, #392]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006de8:	e01c      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dee:	3308      	adds	r3, #8
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f002 fab8 	bl	8009368 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e011      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e04:	3328      	adds	r3, #40	; 0x28
 8006e06:	2100      	movs	r1, #0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 fb5f 	bl	80094cc <RCCEx_PLL3_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e2c:	4b4f      	ldr	r3, [pc, #316]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	4a4c      	ldr	r2, [pc, #304]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e40:	e003      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d053      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e76:	d035      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e7c:	d82e      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e82:	d031      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e88:	d828      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e8e:	d01a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e94:	d822      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e9e:	d007      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006ea0:	e01c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea2:	4b32      	ldr	r3, [pc, #200]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	4a31      	ldr	r2, [pc, #196]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eae:	e01c      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 fa55 	bl	8009368 <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ec4:	e011      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eca:	3328      	adds	r3, #40	; 0x28
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 fafc 	bl	80094cc <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eda:	e006      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ee2:	e002      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f02:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6593      	str	r3, [r2, #88]	; 0x58
 8006f08:	e003      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006f1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f22:	2300      	movs	r3, #0
 8006f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d056      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f3e:	d038      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f44:	d831      	bhi.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f4a:	d034      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006f4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f50:	d82b      	bhi.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f56:	d01d      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f5c:	d825      	bhi.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f66:	d00a      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f68:	e01f      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f6a:	bf00      	nop
 8006f6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f70:	4ba2      	ldr	r3, [pc, #648]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	4aa1      	ldr	r2, [pc, #644]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f7c:	e01c      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f82:	3308      	adds	r3, #8
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 f9ee 	bl	8009368 <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f92:	e011      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f98:	3328      	adds	r3, #40	; 0x28
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f002 fa95 	bl	80094cc <RCCEx_PLL3_Config>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fc0:	4b8e      	ldr	r3, [pc, #568]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fd0:	4a8a      	ldr	r2, [pc, #552]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8006fd6:	e003      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ff6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	d03a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	2b30      	cmp	r3, #48	; 0x30
 8007008:	d01f      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800700a:	2b30      	cmp	r3, #48	; 0x30
 800700c:	d819      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800700e:	2b20      	cmp	r3, #32
 8007010:	d00c      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007012:	2b20      	cmp	r3, #32
 8007014:	d815      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d019      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800701a:	2b10      	cmp	r3, #16
 800701c:	d111      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701e:	4b77      	ldr	r3, [pc, #476]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	4a76      	ldr	r2, [pc, #472]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800702a:	e011      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007030:	3308      	adds	r3, #8
 8007032:	2102      	movs	r1, #2
 8007034:	4618      	mov	r0, r3
 8007036:	f002 f997 	bl	8009368 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007040:	e006      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007048:	e002      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800704a:	bf00      	nop
 800704c:	e000      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800704e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007058:	4b68      	ldr	r3, [pc, #416]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007066:	4a65      	ldr	r2, [pc, #404]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007068:	430b      	orrs	r3, r1
 800706a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800708c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d051      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a0:	d035      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80070a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a6:	d82e      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ac:	d031      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80070ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070b2:	d828      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b8:	d01a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80070ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070be:	d822      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d007      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80070ca:	e01c      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070cc:	4b4b      	ldr	r3, [pc, #300]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070d8:	e01c      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070de:	3308      	adds	r3, #8
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 f940 	bl	8009368 <RCCEx_PLL2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070ee:	e011      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	3328      	adds	r3, #40	; 0x28
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f002 f9e7 	bl	80094cc <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007104:	e006      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710c:	e002      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800711c:	4b37      	ldr	r3, [pc, #220]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800711e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007120:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	4a34      	ldr	r2, [pc, #208]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6513      	str	r3, [r2, #80]	; 0x50
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800714a:	2300      	movs	r3, #0
 800714c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007150:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007154:	460b      	mov	r3, r1
 8007156:	4313      	orrs	r3, r2
 8007158:	d056      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007164:	d033      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800716a:	d82c      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800716c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007170:	d02f      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007176:	d826      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800717c:	d02b      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800717e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007182:	d820      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007188:	d012      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800718a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800718e:	d81a      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d115      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719e:	3308      	adds	r3, #8
 80071a0:	2101      	movs	r1, #1
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 f8e0 	bl	8009368 <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071ae:	e015      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b4:	3328      	adds	r3, #40	; 0x28
 80071b6:	2101      	movs	r1, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f002 f987 	bl	80094cc <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071c4:	e00a      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071cc:	e006      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ce:	bf00      	nop
 80071d0:	e004      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071d2:	bf00      	nop
 80071d4:	e002      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f2:	4a02      	ldr	r2, [pc, #8]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6513      	str	r3, [r2, #80]	; 0x50
 80071f8:	e006      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007218:	2300      	movs	r3, #0
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007222:	460b      	mov	r3, r1
 8007224:	4313      	orrs	r3, r2
 8007226:	d055      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800722c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007234:	d033      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800723a:	d82c      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d02f      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d826      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800724c:	d02b      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800724e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007252:	d820      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007258:	d012      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725e:	d81a      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d022      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007268:	d115      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726e:	3308      	adds	r3, #8
 8007270:	2101      	movs	r1, #1
 8007272:	4618      	mov	r0, r3
 8007274:	f002 f878 	bl	8009368 <RCCEx_PLL2_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800727e:	e015      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007284:	3328      	adds	r3, #40	; 0x28
 8007286:	2101      	movs	r1, #1
 8007288:	4618      	mov	r0, r3
 800728a:	f002 f91f 	bl	80094cc <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007294:	e00a      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800729e:	bf00      	nop
 80072a0:	e004      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072a2:	bf00      	nop
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072b4:	4ba3      	ldr	r3, [pc, #652]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c4:	4a9f      	ldr	r2, [pc, #636]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6593      	str	r3, [r2, #88]	; 0x58
 80072ca:	e003      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80072e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e4:	2300      	movs	r3, #0
 80072e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ee:	460b      	mov	r3, r1
 80072f0:	4313      	orrs	r3, r2
 80072f2:	d037      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fe:	d00e      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007304:	d816      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d018      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800730a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730e:	d111      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007310:	4b8c      	ldr	r3, [pc, #560]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a8b      	ldr	r2, [pc, #556]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800731c:	e00f      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007322:	3308      	adds	r3, #8
 8007324:	2101      	movs	r1, #1
 8007326:	4618      	mov	r0, r3
 8007328:	f002 f81e 	bl	8009368 <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800733c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007346:	4b7f      	ldr	r3, [pc, #508]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	4a7b      	ldr	r2, [pc, #492]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007356:	430b      	orrs	r3, r1
 8007358:	6513      	str	r3, [r2, #80]	; 0x50
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007374:	2300      	movs	r3, #0
 8007376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800737a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800737e:	460b      	mov	r3, r1
 8007380:	4313      	orrs	r3, r2
 8007382:	d039      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738a:	2b03      	cmp	r3, #3
 800738c:	d81c      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073d1 	.word	0x080073d1
 8007398:	080073a5 	.word	0x080073a5
 800739c:	080073b3 	.word	0x080073b3
 80073a0:	080073d1 	.word	0x080073d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a4:	4b67      	ldr	r3, [pc, #412]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a66      	ldr	r2, [pc, #408]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b6:	3308      	adds	r3, #8
 80073b8:	2102      	movs	r1, #2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 ffd4 	bl	8009368 <RCCEx_PLL2_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073da:	4b5a      	ldr	r3, [pc, #360]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	f023 0103 	bic.w	r1, r3, #3
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e8:	4a56      	ldr	r2, [pc, #344]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800740e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007412:	460b      	mov	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	f000 809f 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800741a:	4b4b      	ldr	r3, [pc, #300]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4a      	ldr	r2, [pc, #296]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007426:	f7f9 fb29 	bl	8000a7c <HAL_GetTick>
 800742a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800742e:	e00b      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007430:	f7f9 fb24 	bl	8000a7c <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b64      	cmp	r3, #100	; 0x64
 800743e:	d903      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007446:	e005      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007448:	4b3f      	ldr	r3, [pc, #252]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0ed      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007458:	2b00      	cmp	r3, #0
 800745a:	d179      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800745c:	4b39      	ldr	r3, [pc, #228]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800745e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007468:	4053      	eors	r3, r2
 800746a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007472:	4b34      	ldr	r3, [pc, #208]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800747e:	4b31      	ldr	r3, [pc, #196]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	4a30      	ldr	r2, [pc, #192]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007488:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4a2d      	ldr	r2, [pc, #180]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007494:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007496:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800749c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074aa:	d118      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7f9 fae6 	bl	8000a7c <HAL_GetTick>
 80074b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b4:	e00d      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b6:	f7f9 fae1 	bl	8000a7c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d903      	bls.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80074d0:	e005      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074d2:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0eb      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d129      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f6:	d10e      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80074f8:	4b12      	ldr	r3, [pc, #72]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007508:	091a      	lsrs	r2, r3, #4
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800750c:	4013      	ands	r3, r2
 800750e:	4a0d      	ldr	r2, [pc, #52]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6113      	str	r3, [r2, #16]
 8007514:	e005      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007520:	6113      	str	r3, [r2, #16]
 8007522:	4b08      	ldr	r3, [pc, #32]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007524:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800752e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007532:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007534:	430b      	orrs	r3, r1
 8007536:	6713      	str	r3, [r2, #112]	; 0x70
 8007538:	e00e      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800753a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800753e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007542:	e009      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007544:	58024400 	.word	0x58024400
 8007548:	58024800 	.word	0x58024800
 800754c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f002 0301 	and.w	r3, r2, #1
 8007564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007568:	2300      	movs	r3, #0
 800756a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800756e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007572:	460b      	mov	r3, r1
 8007574:	4313      	orrs	r3, r2
 8007576:	f000 8089 	beq.w	800768c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007580:	2b28      	cmp	r3, #40	; 0x28
 8007582:	d86b      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	08007665 	.word	0x08007665
 8007590:	0800765d 	.word	0x0800765d
 8007594:	0800765d 	.word	0x0800765d
 8007598:	0800765d 	.word	0x0800765d
 800759c:	0800765d 	.word	0x0800765d
 80075a0:	0800765d 	.word	0x0800765d
 80075a4:	0800765d 	.word	0x0800765d
 80075a8:	0800765d 	.word	0x0800765d
 80075ac:	08007631 	.word	0x08007631
 80075b0:	0800765d 	.word	0x0800765d
 80075b4:	0800765d 	.word	0x0800765d
 80075b8:	0800765d 	.word	0x0800765d
 80075bc:	0800765d 	.word	0x0800765d
 80075c0:	0800765d 	.word	0x0800765d
 80075c4:	0800765d 	.word	0x0800765d
 80075c8:	0800765d 	.word	0x0800765d
 80075cc:	08007647 	.word	0x08007647
 80075d0:	0800765d 	.word	0x0800765d
 80075d4:	0800765d 	.word	0x0800765d
 80075d8:	0800765d 	.word	0x0800765d
 80075dc:	0800765d 	.word	0x0800765d
 80075e0:	0800765d 	.word	0x0800765d
 80075e4:	0800765d 	.word	0x0800765d
 80075e8:	0800765d 	.word	0x0800765d
 80075ec:	08007665 	.word	0x08007665
 80075f0:	0800765d 	.word	0x0800765d
 80075f4:	0800765d 	.word	0x0800765d
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	0800765d 	.word	0x0800765d
 8007600:	0800765d 	.word	0x0800765d
 8007604:	0800765d 	.word	0x0800765d
 8007608:	0800765d 	.word	0x0800765d
 800760c:	08007665 	.word	0x08007665
 8007610:	0800765d 	.word	0x0800765d
 8007614:	0800765d 	.word	0x0800765d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800765d 	.word	0x0800765d
 8007620:	0800765d 	.word	0x0800765d
 8007624:	0800765d 	.word	0x0800765d
 8007628:	0800765d 	.word	0x0800765d
 800762c:	08007665 	.word	0x08007665
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007634:	3308      	adds	r3, #8
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fe95 	bl	8009368 <RCCEx_PLL2_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007644:	e00f      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764a:	3328      	adds	r3, #40	; 0x28
 800764c:	2101      	movs	r1, #1
 800764e:	4618      	mov	r0, r3
 8007650:	f001 ff3c 	bl	80094cc <RCCEx_PLL3_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800765a:	e004      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800766e:	4bbf      	ldr	r3, [pc, #764]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767c:	4abb      	ldr	r2, [pc, #748]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800767e:	430b      	orrs	r3, r1
 8007680:	6553      	str	r3, [r2, #84]	; 0x54
 8007682:	e003      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f002 0302 	and.w	r3, r2, #2
 8007698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800769c:	2300      	movs	r3, #0
 800769e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80076a6:	460b      	mov	r3, r1
 80076a8:	4313      	orrs	r3, r2
 80076aa:	d041      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d824      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	08007709 	.word	0x08007709
 80076c0:	080076d5 	.word	0x080076d5
 80076c4:	080076eb 	.word	0x080076eb
 80076c8:	08007709 	.word	0x08007709
 80076cc:	08007709 	.word	0x08007709
 80076d0:	08007709 	.word	0x08007709
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d8:	3308      	adds	r3, #8
 80076da:	2101      	movs	r1, #1
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fe43 	bl	8009368 <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076e8:	e00f      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ee:	3328      	adds	r3, #40	; 0x28
 80076f0:	2101      	movs	r1, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 feea 	bl	80094cc <RCCEx_PLL3_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076fe:	e004      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007706:	e000      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007712:	4b96      	ldr	r3, [pc, #600]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	f023 0107 	bic.w	r1, r3, #7
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007720:	4a92      	ldr	r2, [pc, #584]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007722:	430b      	orrs	r3, r1
 8007724:	6553      	str	r3, [r2, #84]	; 0x54
 8007726:	e003      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800772c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f002 0304 	and.w	r3, r2, #4
 800773c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007746:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d044      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007758:	2b05      	cmp	r3, #5
 800775a:	d825      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	080077b1 	.word	0x080077b1
 8007768:	0800777d 	.word	0x0800777d
 800776c:	08007793 	.word	0x08007793
 8007770:	080077b1 	.word	0x080077b1
 8007774:	080077b1 	.word	0x080077b1
 8007778:	080077b1 	.word	0x080077b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007780:	3308      	adds	r3, #8
 8007782:	2101      	movs	r1, #1
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fdef 	bl	8009368 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007790:	e00f      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	3328      	adds	r3, #40	; 0x28
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fe96 	bl	80094cc <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077a6:	e004      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077ae:	e000      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80077b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077ba:	4b6c      	ldr	r3, [pc, #432]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077be:	f023 0107 	bic.w	r1, r3, #7
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ca:	4a68      	ldr	r2, [pc, #416]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6593      	str	r3, [r2, #88]	; 0x58
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f002 0320 	and.w	r3, r2, #32
 80077e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077f4:	460b      	mov	r3, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	d055      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007806:	d033      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800780c:	d82c      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007812:	d02f      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007818:	d826      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800781a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800781e:	d02b      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007824:	d820      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782a:	d012      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800782c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007830:	d81a      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d022      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783a:	d115      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007840:	3308      	adds	r3, #8
 8007842:	2100      	movs	r1, #0
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fd8f 	bl	8009368 <RCCEx_PLL2_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007850:	e015      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007856:	3328      	adds	r3, #40	; 0x28
 8007858:	2102      	movs	r1, #2
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fe36 	bl	80094cc <RCCEx_PLL3_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007866:	e00a      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800786e:	e006      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007870:	bf00      	nop
 8007872:	e004      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800787c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007886:	4b39      	ldr	r3, [pc, #228]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007896:	4a35      	ldr	r2, [pc, #212]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007898:	430b      	orrs	r3, r1
 800789a:	6553      	str	r3, [r2, #84]	; 0x54
 800789c:	e003      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80078b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d058      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078d2:	d033      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80078d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078d8:	d82c      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078de:	d02f      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d826      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078ea:	d02b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80078ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078f0:	d820      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f6:	d012      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80078f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078fc:	d81a      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d022      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007906:	d115      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	3308      	adds	r3, #8
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fd29 	bl	8009368 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800791c:	e015      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007922:	3328      	adds	r3, #40	; 0x28
 8007924:	2102      	movs	r1, #2
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fdd0 	bl	80094cc <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007932:	e00a      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800793a:	e006      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800793c:	bf00      	nop
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007940:	bf00      	nop
 8007942:	e002      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10e      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007962:	4a02      	ldr	r2, [pc, #8]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6593      	str	r3, [r2, #88]	; 0x58
 8007968:	e006      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800796a:	bf00      	nop
 800796c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007988:	2300      	movs	r3, #0
 800798a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800798e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d055      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079a4:	d033      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80079a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079aa:	d82c      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b0:	d02f      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80079b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b6:	d826      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079bc:	d02b      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80079be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079c2:	d820      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079c8:	d012      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80079ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ce:	d81a      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d022      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80079d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d8:	d115      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	3308      	adds	r3, #8
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fcc0 	bl	8009368 <RCCEx_PLL2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079ee:	e015      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f4:	3328      	adds	r3, #40	; 0x28
 80079f6:	2102      	movs	r1, #2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fd67 	bl	80094cc <RCCEx_PLL3_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a04:	e00a      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a0c:	e006      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e004      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a12:	bf00      	nop
 8007a14:	e002      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a16:	bf00      	nop
 8007a18:	e000      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a24:	4ba1      	ldr	r3, [pc, #644]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a34:	4a9d      	ldr	r2, [pc, #628]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a36:	430b      	orrs	r3, r1
 8007a38:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3a:	e003      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f002 0308 	and.w	r3, r2, #8
 8007a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a54:	2300      	movs	r3, #0
 8007a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4313      	orrs	r3, r2
 8007a62:	d01e      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a70:	d10c      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	3328      	adds	r3, #40	; 0x28
 8007a78:	2102      	movs	r1, #2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 fd26 	bl	80094cc <RCCEx_PLL3_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a8c:	4b87      	ldr	r3, [pc, #540]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9c:	4a83      	ldr	r2, [pc, #524]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f002 0310 	and.w	r3, r2, #16
 8007aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ab8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007abc:	460b      	mov	r3, r1
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	d01e      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ace:	d10c      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad4:	3328      	adds	r3, #40	; 0x28
 8007ad6:	2102      	movs	r1, #2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fcf7 	bl	80094cc <RCCEx_PLL3_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007aea:	4b70      	ldr	r3, [pc, #448]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007afa:	4a6c      	ldr	r2, [pc, #432]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d03e      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2c:	d022      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b32:	d81b      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d00b      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007b3e:	e015      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b44:	3308      	adds	r3, #8
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fc0d 	bl	8009368 <RCCEx_PLL2_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b54:	e00f      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5a:	3328      	adds	r3, #40	; 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fcb4 	bl	80094cc <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b6a:	e004      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b7e:	4b4b      	ldr	r3, [pc, #300]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b8e:	4a47      	ldr	r2, [pc, #284]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6593      	str	r3, [r2, #88]	; 0x58
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bac:	2300      	movs	r3, #0
 8007bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d03b      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bc6:	d01f      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bcc:	d818      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd2:	d003      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bd8:	d007      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007bda:	e011      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bdc:	4b33      	ldr	r3, [pc, #204]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a32      	ldr	r2, [pc, #200]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007be8:	e00f      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bee:	3328      	adds	r3, #40	; 0x28
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fc6a 	bl	80094cc <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bfe:	e004      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c06:	e000      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10b      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c12:	4b26      	ldr	r3, [pc, #152]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c22:	4a22      	ldr	r2, [pc, #136]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6553      	str	r3, [r2, #84]	; 0x54
 8007c28:	e003      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8007c40:	2300      	movs	r3, #0
 8007c42:	677b      	str	r3, [r7, #116]	; 0x74
 8007c44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d034      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5c:	d007      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007c5e:	e011      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c60:	4b12      	ldr	r3, [pc, #72]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c6c:	e00e      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c72:	3308      	adds	r3, #8
 8007c74:	2102      	movs	r1, #2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 fb76 	bl	8009368 <RCCEx_PLL2_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c82:	e003      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	4a02      	ldr	r2, [pc, #8]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ca8:	e006      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	d00c      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd8:	3328      	adds	r3, #40	; 0x28
 8007cda:	2102      	movs	r1, #2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fbf5 	bl	80094cc <RCCEx_PLL3_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8007d00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007d04:	460b      	mov	r3, r1
 8007d06:	4313      	orrs	r3, r2
 8007d08:	d038      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d16:	d018      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d1c:	d811      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d22:	d014      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d28:	d80b      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d32:	d106      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d34:	4bc3      	ldr	r3, [pc, #780]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4ac2      	ldr	r2, [pc, #776]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d40:	e008      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d48:	e004      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10b      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d5c:	4bb9      	ldr	r3, [pc, #740]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d6c:	4ab5      	ldr	r2, [pc, #724]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	6553      	str	r3, [r2, #84]	; 0x54
 8007d72:	e003      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	d009      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d98:	4baa      	ldr	r3, [pc, #680]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da6:	4aa7      	ldr	r2, [pc, #668]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007db8:	653b      	str	r3, [r7, #80]	; 0x50
 8007dba:	2300      	movs	r3, #0
 8007dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8007dbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007dc8:	4b9e      	ldr	r3, [pc, #632]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007dd8:	4a9a      	ldr	r2, [pc, #616]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dec:	2300      	movs	r3, #0
 8007dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d009      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dfa:	4b92      	ldr	r3, [pc, #584]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e08:	4a8e      	ldr	r2, [pc, #568]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007e24:	460b      	mov	r3, r1
 8007e26:	4313      	orrs	r3, r2
 8007e28:	d00e      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e2a:	4b86      	ldr	r3, [pc, #536]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	4a85      	ldr	r2, [pc, #532]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e34:	6113      	str	r3, [r2, #16]
 8007e36:	4b83      	ldr	r3, [pc, #524]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e38:	6919      	ldr	r1, [r3, #16]
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e42:	4a80      	ldr	r2, [pc, #512]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e56:	2300      	movs	r3, #0
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e64:	4b77      	ldr	r3, [pc, #476]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	4a74      	ldr	r2, [pc, #464]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007e84:	633b      	str	r3, [r7, #48]	; 0x30
 8007e86:	2300      	movs	r3, #0
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4313      	orrs	r3, r2
 8007e92:	d00a      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e94:	4b6b      	ldr	r3, [pc, #428]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea4:	4a67      	ldr	r2, [pc, #412]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	d011      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	3308      	adds	r3, #8
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 fa4a 	bl	8009368 <RCCEx_PLL2_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6239      	str	r1, [r7, #32]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f00:	460b      	mov	r3, r1
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d011      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 fa2a 	bl	8009368 <RCCEx_PLL2_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	2100      	movs	r1, #0
 8007f34:	61b9      	str	r1, [r7, #24]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d011      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fa0a 	bl	8009368 <RCCEx_PLL2_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	2100      	movs	r1, #0
 8007f74:	6139      	str	r1, [r7, #16]
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f80:	460b      	mov	r3, r1
 8007f82:	4313      	orrs	r3, r2
 8007f84:	d011      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8a:	3328      	adds	r3, #40	; 0x28
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fa9c 	bl	80094cc <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	f003 0310 	and.w	r3, r3, #16
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d011      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fca:	3328      	adds	r3, #40	; 0x28
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fa7c 	bl	80094cc <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008000:	460b      	mov	r3, r1
 8008002:	4313      	orrs	r3, r2
 8008004:	d011      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800a:	3328      	adds	r3, #40	; 0x28
 800800c:	2102      	movs	r1, #2
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fa5c 	bl	80094cc <RCCEx_PLL3_Config>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800801a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800802a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
}
 8008038:	4618      	mov	r0, r3
 800803a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800803e:	46bd      	mov	sp, r7
 8008040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008044:	58024400 	.word	0x58024400

08008048 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b090      	sub	sp, #64	; 0x40
 800804c:	af00      	add	r7, sp, #0
 800804e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800805a:	430b      	orrs	r3, r1
 800805c:	f040 8094 	bne.w	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008060:	4b9e      	ldr	r3, [pc, #632]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	2b04      	cmp	r3, #4
 800806e:	f200 8087 	bhi.w	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	0800808d 	.word	0x0800808d
 800807c:	080080b5 	.word	0x080080b5
 8008080:	080080dd 	.word	0x080080dd
 8008084:	08008179 	.word	0x08008179
 8008088:	08008105 	.word	0x08008105
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800808c:	4b93      	ldr	r3, [pc, #588]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008098:	d108      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800809a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 f810 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080a8:	f000 bd45 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b0:	f000 bd41 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b4:	4b89      	ldr	r3, [pc, #548]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c0:	d108      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c2:	f107 0318 	add.w	r3, r7, #24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fd54 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d0:	f000 bd31 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d8:	f000 bd2d 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080dc:	4b7f      	ldr	r3, [pc, #508]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e8:	d108      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fe94 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f8:	f000 bd1d 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008100:	f000 bd19 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008104:	4b75      	ldr	r3, [pc, #468]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800810c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800810e:	4b73      	ldr	r3, [pc, #460]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b04      	cmp	r3, #4
 8008118:	d10c      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008120:	4b6e      	ldr	r3, [pc, #440]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	4a6d      	ldr	r2, [pc, #436]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008132:	e01f      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008134:	4b69      	ldr	r3, [pc, #420]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008140:	d106      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008148:	d102      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800814a:	4b66      	ldr	r3, [pc, #408]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800814e:	e011      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008150:	4b62      	ldr	r3, [pc, #392]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815c:	d106      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008164:	d102      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008166:	4b60      	ldr	r3, [pc, #384]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800816a:	e003      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008170:	f000 bce1 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008174:	f000 bcdf 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008178:	4b5c      	ldr	r3, [pc, #368]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817c:	f000 bcdb 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008184:	f000 bcd7 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008190:	430b      	orrs	r3, r1
 8008192:	f040 80ad 	bne.w	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008196:	4b51      	ldr	r3, [pc, #324]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800819e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a6:	d056      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ae:	f200 8090 	bhi.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	2bc0      	cmp	r3, #192	; 0xc0
 80081b6:	f000 8088 	beq.w	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2bc0      	cmp	r3, #192	; 0xc0
 80081be:	f200 8088 	bhi.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d032      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2b80      	cmp	r3, #128	; 0x80
 80081cc:	f200 8081 	bhi.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d014      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80081dc:	e079      	b.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081de:	4b3f      	ldr	r3, [pc, #252]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ea:	d108      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 ff67 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081fa:	f000 bc9c 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008202:	f000 bc98 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008206:	4b35      	ldr	r3, [pc, #212]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008212:	d108      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008214:	f107 0318 	add.w	r3, r7, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fcab 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008222:	f000 bc88 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822a:	f000 bc84 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800822e:	4b2b      	ldr	r3, [pc, #172]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823a:	d108      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823c:	f107 030c 	add.w	r3, r7, #12
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fdeb 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824a:	f000 bc74 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008252:	f000 bc70 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008256:	4b21      	ldr	r3, [pc, #132]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800825e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b04      	cmp	r3, #4
 800826a:	d10c      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	08db      	lsrs	r3, r3, #3
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800827e:	fa22 f303 	lsr.w	r3, r2, r3
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008284:	e01f      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	d106      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829a:	d102      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800829c:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a0:	e011      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082a2:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ae:	d106      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80082b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082bc:	e003      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082c2:	f000 bc38 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082c6:	f000 bc36 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082ca:	4b08      	ldr	r3, [pc, #32]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ce:	f000 bc32 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d6:	f000 bc2e 	b.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082da:	bf00      	nop
 80082dc:	58024400 	.word	0x58024400
 80082e0:	03d09000 	.word	0x03d09000
 80082e4:	003d0900 	.word	0x003d0900
 80082e8:	007a1200 	.word	0x007a1200
 80082ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80082f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80082f8:	430b      	orrs	r3, r1
 80082fa:	f040 809c 	bne.w	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80082fe:	4b9e      	ldr	r3, [pc, #632]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008306:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800830e:	d054      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008316:	f200 808b 	bhi.w	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008320:	f000 8083 	beq.w	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800832a:	f200 8081 	bhi.w	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008334:	d02f      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800833c:	d878      	bhi.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800834a:	d012      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800834c:	e070      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800834e:	4b8a      	ldr	r3, [pc, #552]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800835a:	d107      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800835c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008360:	4618      	mov	r0, r3
 8008362:	f000 feaf 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836a:	e3e4      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008370:	e3e1      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008372:	4b81      	ldr	r3, [pc, #516]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008380:	f107 0318 	add.w	r3, r7, #24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fbf5 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838e:	e3d2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008394:	e3cf      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008396:	4b78      	ldr	r3, [pc, #480]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800839e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a4:	f107 030c 	add.w	r3, r7, #12
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fd37 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b2:	e3c0      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b8:	e3bd      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ba:	4b6f      	ldr	r3, [pc, #444]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083c4:	4b6c      	ldr	r3, [pc, #432]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d10c      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083d6:	4b68      	ldr	r3, [pc, #416]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	4a66      	ldr	r2, [pc, #408]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e01e      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083ea:	4b63      	ldr	r3, [pc, #396]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f6:	d106      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80083f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fe:	d102      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008400:	4b5f      	ldr	r3, [pc, #380]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	e010      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008406:	4b5c      	ldr	r3, [pc, #368]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008412:	d106      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800841a:	d102      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800841c:	4b59      	ldr	r3, [pc, #356]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008420:	e002      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008426:	e386      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008428:	e385      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800842a:	4b57      	ldr	r3, [pc, #348]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842e:	e382      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008434:	e37f      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800843e:	430b      	orrs	r3, r1
 8008440:	f040 80a7 	bne.w	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008444:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800844c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008454:	d055      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800845c:	f200 8096 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008466:	f000 8084 	beq.w	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008470:	f200 808c 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800847a:	d030      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008482:	f200 8083 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008492:	d012      	beq.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008494:	e07a      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008496:	4b38      	ldr	r3, [pc, #224]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a2:	d107      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fe0b 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b2:	e340      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b8:	e33d      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ba:	4b2f      	ldr	r3, [pc, #188]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c6:	d107      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c8:	f107 0318 	add.w	r3, r7, #24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fb51 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d6:	e32e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084dc:	e32b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084de:	4b26      	ldr	r3, [pc, #152]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ea:	d107      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fc93 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fa:	e31c      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008500:	e319      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800850a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b04      	cmp	r3, #4
 8008516:	d10c      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	4a14      	ldr	r2, [pc, #80]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008530:	e01e      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008532:	4b11      	ldr	r3, [pc, #68]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d106      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008546:	d102      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008548:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800854c:	e010      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800855a:	d106      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008564:	4b07      	ldr	r3, [pc, #28]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008568:	e002      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800856e:	e2e2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008570:	e2e1      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008576:	e2de      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	003d0900 	.word	0x003d0900
 8008584:	007a1200 	.word	0x007a1200
 8008588:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008590:	e2d1      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008596:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800859a:	430b      	orrs	r3, r1
 800859c:	f040 809c 	bne.w	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80085a0:	4b93      	ldr	r3, [pc, #588]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b0:	d054      	beq.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b8:	f200 808b 	bhi.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c2:	f000 8083 	beq.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085cc:	f200 8081 	bhi.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	d02f      	beq.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085de:	d878      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ec:	d012      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80085ee:	e070      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085f0:	4b7f      	ldr	r3, [pc, #508]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085fc:	d107      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fd5e 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860c:	e293      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008612:	e290      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008614:	4b76      	ldr	r3, [pc, #472]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008620:	d107      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008622:	f107 0318 	add.w	r3, r7, #24
 8008626:	4618      	mov	r0, r3
 8008628:	f000 faa4 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008630:	e281      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008636:	e27e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008638:	4b6d      	ldr	r3, [pc, #436]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008644:	d107      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fbe6 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008654:	e26f      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865a:	e26c      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800865c:	4b64      	ldr	r3, [pc, #400]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800865e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008666:	4b62      	ldr	r3, [pc, #392]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b04      	cmp	r3, #4
 8008670:	d10c      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008678:	4b5d      	ldr	r3, [pc, #372]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	08db      	lsrs	r3, r3, #3
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	4a5c      	ldr	r2, [pc, #368]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868a:	e01e      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800868c:	4b58      	ldr	r3, [pc, #352]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008698:	d106      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086a2:	4b55      	ldr	r3, [pc, #340]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a6:	e010      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086a8:	4b51      	ldr	r3, [pc, #324]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086b4:	d106      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086bc:	d102      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086be:	4b4f      	ldr	r3, [pc, #316]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c2:	e002      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086c8:	e235      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086ca:	e234      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086cc:	4b4c      	ldr	r3, [pc, #304]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d0:	e231      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e22e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80086d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086dc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80086e0:	430b      	orrs	r3, r1
 80086e2:	f040 808f 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80086ee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086f6:	d06b      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086fe:	d874      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008706:	d056      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800870e:	d86c      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008716:	d03b      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800871e:	d864      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008726:	d021      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872e:	d85c      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d004      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800873e:	e054      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008740:	f7fe fa0a 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 8008744:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008746:	e1f6      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008748:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008754:	d107      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008756:	f107 0318 	add.w	r3, r7, #24
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fa0a 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008764:	e1e7      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876a:	e1e4      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800876c:	4b20      	ldr	r3, [pc, #128]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008778:	d107      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fb4c 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008788:	e1d5      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800878e:	e1d2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008790:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d109      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800879c:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ae:	e1c2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e1bf      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087b6:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d102      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c8:	e1b5      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ce:	e1b2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087dc:	d102      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e2:	e1a8      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e8:	e1a5      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ee:	e1a2      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087f0:	58024400 	.word	0x58024400
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	003d0900 	.word	0x003d0900
 80087fc:	007a1200 	.word	0x007a1200
 8008800:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008808:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800880c:	430b      	orrs	r3, r1
 800880e:	d173      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008810:	4b9c      	ldr	r3, [pc, #624]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008818:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008820:	d02f      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008828:	d863      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008836:	d012      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008838:	e05b      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800883a:	4b92      	ldr	r3, [pc, #584]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008848:	f107 0318 	add.w	r3, r7, #24
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f991 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008856:	e16e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885c:	e16b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885e:	4b89      	ldr	r3, [pc, #548]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fad3 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887a:	e15c      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	e159      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008882:	4b80      	ldr	r3, [pc, #512]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800888a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800888c:	4b7d      	ldr	r3, [pc, #500]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b04      	cmp	r3, #4
 8008896:	d10c      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889e:	4b79      	ldr	r3, [pc, #484]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	4a77      	ldr	r2, [pc, #476]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b0:	e01e      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088b2:	4b74      	ldr	r3, [pc, #464]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088be:	d106      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c6:	d102      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088c8:	4b70      	ldr	r3, [pc, #448]	; (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088cc:	e010      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ce:	4b6d      	ldr	r3, [pc, #436]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088da:	d106      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e2:	d102      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088e4:	4b6a      	ldr	r3, [pc, #424]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e8:	e002      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80088ee:	e122      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f0:	e121      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f6:	e11e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008900:	430b      	orrs	r3, r1
 8008902:	d133      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008904:	4b5f      	ldr	r3, [pc, #380]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800891a:	d012      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800891c:	e023      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800891e:	4b59      	ldr	r3, [pc, #356]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800892a:	d107      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800892c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fbc7 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893a:	e0fc      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008940:	e0f9      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008942:	4b50      	ldr	r3, [pc, #320]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800894e:	d107      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008950:	f107 0318 	add.w	r3, r7, #24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f90d 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	e0ea      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008964:	e0e7      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800896a:	e0e4      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800896c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008970:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008974:	430b      	orrs	r3, r1
 8008976:	f040 808d 	bne.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800897a:	4b42      	ldr	r3, [pc, #264]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008982:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800898a:	d06b      	beq.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008992:	d874      	bhi.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899a:	d056      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d86c      	bhi.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089aa:	d03b      	beq.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089b2:	d864      	bhi.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ba:	d021      	beq.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c2:	d85c      	bhi.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089d0:	d004      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80089d2:	e054      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80089d4:	f000 f8b8 	bl	8008b48 <HAL_RCCEx_GetD3PCLK1Freq>
 80089d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089da:	e0ac      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089dc:	4b29      	ldr	r3, [pc, #164]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e8:	d107      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ea:	f107 0318 	add.w	r3, r7, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f8c0 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f8:	e09d      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fe:	e09a      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a00:	4b20      	ldr	r3, [pc, #128]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0c:	d107      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0e:	f107 030c 	add.w	r3, r7, #12
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fa02 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1c:	e08b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a22:	e088      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a24:	4b17      	ldr	r3, [pc, #92]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d109      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a30:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	08db      	lsrs	r3, r3, #3
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a42:	e078      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a48:	e075      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a4a:	4b0e      	ldr	r3, [pc, #56]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d102      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5c:	e06b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a62:	e068      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a70:	d102      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a76:	e05e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a7c:	e05b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a82:	e058      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a84:	58024400 	.word	0x58024400
 8008a88:	03d09000 	.word	0x03d09000
 8008a8c:	003d0900 	.word	0x003d0900
 8008a90:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	d148      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008aa0:	4b27      	ldr	r3, [pc, #156]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008aa8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab0:	d02a      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab8:	d838      	bhi.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac6:	d00d      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008ac8:	e030      	b.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008aca:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad6:	d102      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008adc:	e02b      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae2:	e028      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae4:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af0:	d107      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fae4 	bl	80090c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b00:	e019      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b06:	e016      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b14:	d107      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b16:	f107 0318 	add.w	r3, r7, #24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f82a 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b24:	e007      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2a:	e004      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b30:	e001      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3740      	adds	r7, #64	; 0x40
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	58024400 	.word	0x58024400
 8008b44:	007a1200 	.word	0x007a1200

08008b48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b4c:	f7fd ffd4 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8008b50:	4602      	mov	r2, r0
 8008b52:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	4904      	ldr	r1, [pc, #16]	; (8008b70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b5e:	5ccb      	ldrb	r3, [r1, r3]
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	0800c2c0 	.word	0x0800c2c0

08008b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b089      	sub	sp, #36	; 0x24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b7c:	4ba1      	ldr	r3, [pc, #644]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b86:	4b9f      	ldr	r3, [pc, #636]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	0b1b      	lsrs	r3, r3, #12
 8008b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b92:	4b9c      	ldr	r3, [pc, #624]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b9e:	4b99      	ldr	r3, [pc, #612]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8111 	beq.w	8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	f000 8083 	beq.w	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	f200 80a1 	bhi.w	8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d056      	beq.n	8008c8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008bde:	e099      	b.n	8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008be0:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02d      	beq.n	8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bec:	4b85      	ldr	r3, [pc, #532]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	08db      	lsrs	r3, r3, #3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	4a84      	ldr	r2, [pc, #528]	; (8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c16:	4b7b      	ldr	r3, [pc, #492]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c46:	e087      	b.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c8a:	e065      	b.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b59      	ldr	r3, [pc, #356]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cce:	e043      	b.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce2:	4b48      	ldr	r3, [pc, #288]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d12:	e021      	b.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b37      	ldr	r3, [pc, #220]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	0a5b      	lsrs	r3, r3, #9
 8008d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7e:	ee17 2a90 	vmov	r2, s15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008d86:	4b1f      	ldr	r3, [pc, #124]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	0c1b      	lsrs	r3, r3, #16
 8008d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d90:	ee07 3a90 	vmov	s15, r3
 8008d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dac:	ee17 2a90 	vmov	r2, s15
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008db4:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	0e1b      	lsrs	r3, r3, #24
 8008dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dda:	ee17 2a90 	vmov	r2, s15
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008de2:	e008      	b.n	8008df6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	609a      	str	r2, [r3, #8]
}
 8008df6:	bf00      	nop
 8008df8:	3724      	adds	r7, #36	; 0x24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	58024400 	.word	0x58024400
 8008e08:	03d09000 	.word	0x03d09000
 8008e0c:	46000000 	.word	0x46000000
 8008e10:	4c742400 	.word	0x4c742400
 8008e14:	4a742400 	.word	0x4a742400
 8008e18:	4af42400 	.word	0x4af42400

08008e1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	; 0x24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e24:	4ba1      	ldr	r3, [pc, #644]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e2e:	4b9f      	ldr	r3, [pc, #636]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	0d1b      	lsrs	r3, r3, #20
 8008e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e3a:	4b9c      	ldr	r3, [pc, #624]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e46:	4b99      	ldr	r3, [pc, #612]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4a:	08db      	lsrs	r3, r3, #3
 8008e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8111 	beq.w	800908c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	f000 8083 	beq.w	8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	f200 80a1 	bhi.w	8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d056      	beq.n	8008f34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e86:	e099      	b.n	8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e88:	4b88      	ldr	r3, [pc, #544]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d02d      	beq.n	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e94:	4b85      	ldr	r3, [pc, #532]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	08db      	lsrs	r3, r3, #3
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	4a84      	ldr	r2, [pc, #528]	; (80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ebe:	4b7b      	ldr	r3, [pc, #492]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008eee:	e087      	b.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f02:	4b6a      	ldr	r3, [pc, #424]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f16:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f32:	e065      	b.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f46:	4b59      	ldr	r3, [pc, #356]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f76:	e043      	b.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80090c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8a:	4b48      	ldr	r3, [pc, #288]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fba:	e021      	b.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fce:	4b37      	ldr	r3, [pc, #220]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ffe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009000:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	0a5b      	lsrs	r3, r3, #9
 8009006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800901a:	edd7 6a07 	vldr	s13, [r7, #28]
 800901e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009026:	ee17 2a90 	vmov	r2, s15
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800902e:	4b1f      	ldr	r3, [pc, #124]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	0c1b      	lsrs	r3, r3, #16
 8009034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009048:	edd7 6a07 	vldr	s13, [r7, #28]
 800904c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009054:	ee17 2a90 	vmov	r2, s15
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800905c:	4b13      	ldr	r3, [pc, #76]	; (80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800905e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009060:	0e1b      	lsrs	r3, r3, #24
 8009062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009076:	edd7 6a07 	vldr	s13, [r7, #28]
 800907a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800907e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009082:	ee17 2a90 	vmov	r2, s15
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800908a:	e008      	b.n	800909e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	609a      	str	r2, [r3, #8]
}
 800909e:	bf00      	nop
 80090a0:	3724      	adds	r7, #36	; 0x24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	58024400 	.word	0x58024400
 80090b0:	03d09000 	.word	0x03d09000
 80090b4:	46000000 	.word	0x46000000
 80090b8:	4c742400 	.word	0x4c742400
 80090bc:	4a742400 	.word	0x4a742400
 80090c0:	4af42400 	.word	0x4af42400

080090c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b089      	sub	sp, #36	; 0x24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090cc:	4ba0      	ldr	r3, [pc, #640]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80090d6:	4b9e      	ldr	r3, [pc, #632]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090da:	091b      	lsrs	r3, r3, #4
 80090dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090e2:	4b9b      	ldr	r3, [pc, #620]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090ec:	4b98      	ldr	r3, [pc, #608]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	08db      	lsrs	r3, r3, #3
 80090f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009104:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8111 	beq.w	8009332 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b02      	cmp	r3, #2
 8009114:	f000 8083 	beq.w	800921e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	2b02      	cmp	r3, #2
 800911c:	f200 80a1 	bhi.w	8009262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d056      	beq.n	80091da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800912c:	e099      	b.n	8009262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800912e:	4b88      	ldr	r3, [pc, #544]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d02d      	beq.n	8009196 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800913a:	4b85      	ldr	r3, [pc, #532]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	08db      	lsrs	r3, r3, #3
 8009140:	f003 0303 	and.w	r3, r3, #3
 8009144:	4a83      	ldr	r2, [pc, #524]	; (8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009164:	4b7a      	ldr	r3, [pc, #488]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009174:	ed97 6a03 	vldr	s12, [r7, #12]
 8009178:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800917c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009190:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009194:	e087      	b.n	80092a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a8:	4b69      	ldr	r3, [pc, #420]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b0:	ee07 3a90 	vmov	s15, r3
 80091b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d8:	e065      	b.n	80092a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ec:	4b58      	ldr	r3, [pc, #352]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009200:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009218:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921c:	e043      	b.n	80092a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	ee07 3a90 	vmov	s15, r3
 8009224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009228:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800922c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009230:	4b47      	ldr	r3, [pc, #284]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009240:	ed97 6a03 	vldr	s12, [r7, #12]
 8009244:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009260:	e021      	b.n	80092a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	ee07 3a90 	vmov	s15, r3
 8009268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800935c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009274:	4b36      	ldr	r3, [pc, #216]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009284:	ed97 6a03 	vldr	s12, [r7, #12]
 8009288:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800928c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092a6:	4b2a      	ldr	r3, [pc, #168]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	0a5b      	lsrs	r3, r3, #9
 80092ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092cc:	ee17 2a90 	vmov	r2, s15
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80092d4:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fa:	ee17 2a90 	vmov	r2, s15
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	0e1b      	lsrs	r3, r3, #24
 8009308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009328:	ee17 2a90 	vmov	r2, s15
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009330:	e008      	b.n	8009344 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	3724      	adds	r7, #36	; 0x24
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	58024400 	.word	0x58024400
 8009354:	03d09000 	.word	0x03d09000
 8009358:	46000000 	.word	0x46000000
 800935c:	4c742400 	.word	0x4c742400
 8009360:	4a742400 	.word	0x4a742400
 8009364:	4af42400 	.word	0x4af42400

08009368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009376:	4b53      	ldr	r3, [pc, #332]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	2b03      	cmp	r3, #3
 8009380:	d101      	bne.n	8009386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e099      	b.n	80094ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009386:	4b4f      	ldr	r3, [pc, #316]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a4e      	ldr	r2, [pc, #312]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800938c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009392:	f7f7 fb73 	bl	8000a7c <HAL_GetTick>
 8009396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009398:	e008      	b.n	80093ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800939a:	f7f7 fb6f 	bl	8000a7c <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d901      	bls.n	80093ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e086      	b.n	80094ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093ac:	4b45      	ldr	r3, [pc, #276]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f0      	bne.n	800939a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093b8:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	031b      	lsls	r3, r3, #12
 80093c6:	493f      	ldr	r1, [pc, #252]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	628b      	str	r3, [r1, #40]	; 0x28
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	3b01      	subs	r3, #1
 80093dc:	025b      	lsls	r3, r3, #9
 80093de:	b29b      	uxth	r3, r3
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	061b      	lsls	r3, r3, #24
 80093f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093fc:	4931      	ldr	r1, [pc, #196]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009402:	4b30      	ldr	r3, [pc, #192]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	492d      	ldr	r1, [pc, #180]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009410:	4313      	orrs	r3, r2
 8009412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009414:	4b2b      	ldr	r3, [pc, #172]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	f023 0220 	bic.w	r2, r3, #32
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	4928      	ldr	r1, [pc, #160]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009422:	4313      	orrs	r3, r2
 8009424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009426:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	4a26      	ldr	r2, [pc, #152]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800942c:	f023 0310 	bic.w	r3, r3, #16
 8009430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009432:	4b24      	ldr	r3, [pc, #144]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009436:	4b24      	ldr	r3, [pc, #144]	; (80094c8 <RCCEx_PLL2_Config+0x160>)
 8009438:	4013      	ands	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	69d2      	ldr	r2, [r2, #28]
 800943e:	00d2      	lsls	r2, r2, #3
 8009440:	4920      	ldr	r1, [pc, #128]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009442:	4313      	orrs	r3, r2
 8009444:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009446:	4b1f      	ldr	r3, [pc, #124]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800944c:	f043 0310 	orr.w	r3, r3, #16
 8009450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009458:	4b1a      	ldr	r3, [pc, #104]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a19      	ldr	r2, [pc, #100]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800945e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009464:	e00f      	b.n	8009486 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d106      	bne.n	800947a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800946c:	4b15      	ldr	r3, [pc, #84]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	4a14      	ldr	r2, [pc, #80]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009478:	e005      	b.n	8009486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800947a:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	4a11      	ldr	r2, [pc, #68]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a0e      	ldr	r2, [pc, #56]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 800948c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009492:	f7f7 faf3 	bl	8000a7c <HAL_GetTick>
 8009496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009498:	e008      	b.n	80094ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800949a:	f7f7 faef 	bl	8000a7c <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d901      	bls.n	80094ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e006      	b.n	80094ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0f0      	beq.n	800949a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
 80094c8:	ffff0007 	.word	0xffff0007

080094cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094da:	4b53      	ldr	r3, [pc, #332]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80094dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d101      	bne.n	80094ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e099      	b.n	800961e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094ea:	4b4f      	ldr	r3, [pc, #316]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a4e      	ldr	r2, [pc, #312]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80094f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f6:	f7f7 fac1 	bl	8000a7c <HAL_GetTick>
 80094fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094fc:	e008      	b.n	8009510 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094fe:	f7f7 fabd 	bl	8000a7c <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d901      	bls.n	8009510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e086      	b.n	800961e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009510:	4b45      	ldr	r3, [pc, #276]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1f0      	bne.n	80094fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800951c:	4b42      	ldr	r3, [pc, #264]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 800951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009520:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	051b      	lsls	r3, r3, #20
 800952a:	493f      	ldr	r1, [pc, #252]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 800952c:	4313      	orrs	r3, r2
 800952e:	628b      	str	r3, [r1, #40]	; 0x28
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	3b01      	subs	r3, #1
 8009536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	3b01      	subs	r3, #1
 8009540:	025b      	lsls	r3, r3, #9
 8009542:	b29b      	uxth	r3, r3
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	3b01      	subs	r3, #1
 800954c:	041b      	lsls	r3, r3, #16
 800954e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	3b01      	subs	r3, #1
 800955a:	061b      	lsls	r3, r3, #24
 800955c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009560:	4931      	ldr	r1, [pc, #196]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009562:	4313      	orrs	r3, r2
 8009564:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009566:	4b30      	ldr	r3, [pc, #192]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	492d      	ldr	r1, [pc, #180]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009574:	4313      	orrs	r3, r2
 8009576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009578:	4b2b      	ldr	r3, [pc, #172]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	4928      	ldr	r1, [pc, #160]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009586:	4313      	orrs	r3, r2
 8009588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800958a:	4b27      	ldr	r3, [pc, #156]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	4a26      	ldr	r2, [pc, #152]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009596:	4b24      	ldr	r3, [pc, #144]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800959a:	4b24      	ldr	r3, [pc, #144]	; (800962c <RCCEx_PLL3_Config+0x160>)
 800959c:	4013      	ands	r3, r2
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	69d2      	ldr	r2, [r2, #28]
 80095a2:	00d2      	lsls	r2, r2, #3
 80095a4:	4920      	ldr	r1, [pc, #128]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095aa:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	4a1e      	ldr	r2, [pc, #120]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	4a19      	ldr	r2, [pc, #100]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095c8:	e00f      	b.n	80095ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d106      	bne.n	80095de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095d0:	4b15      	ldr	r3, [pc, #84]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a14      	ldr	r2, [pc, #80]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095dc:	e005      	b.n	80095ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095de:	4b12      	ldr	r3, [pc, #72]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	4a11      	ldr	r2, [pc, #68]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095ea:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a0e      	ldr	r2, [pc, #56]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 80095f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095f6:	f7f7 fa41 	bl	8000a7c <HAL_GetTick>
 80095fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095fc:	e008      	b.n	8009610 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095fe:	f7f7 fa3d 	bl	8000a7c <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d901      	bls.n	8009610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e006      	b.n	800961e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <RCCEx_PLL3_Config+0x15c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0f0      	beq.n	80095fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	58024400 	.word	0x58024400
 800962c:	ffff0007 	.word	0xffff0007

08009630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e049      	b.n	80096d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f002 f874 	bl	800b744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f000 f8a6 	bl	80097c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d001      	beq.n	80096f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e04c      	b.n	8009792 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a26      	ldr	r2, [pc, #152]	; (80097a0 <HAL_TIM_Base_Start+0xc0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d022      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009712:	d01d      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <HAL_TIM_Base_Start+0xc4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d018      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <HAL_TIM_Base_Start+0xc8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d013      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a1f      	ldr	r2, [pc, #124]	; (80097ac <HAL_TIM_Base_Start+0xcc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00e      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <HAL_TIM_Base_Start+0xd0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d009      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1c      	ldr	r2, [pc, #112]	; (80097b4 <HAL_TIM_Base_Start+0xd4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d004      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <HAL_TIM_Base_Start+0xd8>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d115      	bne.n	800977c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	4b19      	ldr	r3, [pc, #100]	; (80097bc <HAL_TIM_Base_Start+0xdc>)
 8009758:	4013      	ands	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b06      	cmp	r3, #6
 8009760:	d015      	beq.n	800978e <HAL_TIM_Base_Start+0xae>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009768:	d011      	beq.n	800978e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977a:	e008      	b.n	800978e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	e000      	b.n	8009790 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	40010000 	.word	0x40010000
 80097a4:	40000400 	.word	0x40000400
 80097a8:	40000800 	.word	0x40000800
 80097ac:	40000c00 	.word	0x40000c00
 80097b0:	40010400 	.word	0x40010400
 80097b4:	40001800 	.word	0x40001800
 80097b8:	40014000 	.word	0x40014000
 80097bc:	00010007 	.word	0x00010007

080097c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a40      	ldr	r2, [pc, #256]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d013      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d00f      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3d      	ldr	r2, [pc, #244]	; (80098d8 <TIM_Base_SetConfig+0x118>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00b      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a3c      	ldr	r2, [pc, #240]	; (80098dc <TIM_Base_SetConfig+0x11c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d007      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a3b      	ldr	r2, [pc, #236]	; (80098e0 <TIM_Base_SetConfig+0x120>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a3a      	ldr	r2, [pc, #232]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d108      	bne.n	8009812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2f      	ldr	r2, [pc, #188]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d01f      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009820:	d01b      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a2c      	ldr	r2, [pc, #176]	; (80098d8 <TIM_Base_SetConfig+0x118>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d017      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a2b      	ldr	r2, [pc, #172]	; (80098dc <TIM_Base_SetConfig+0x11c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <TIM_Base_SetConfig+0x120>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a28      	ldr	r2, [pc, #160]	; (80098e8 <TIM_Base_SetConfig+0x128>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a27      	ldr	r2, [pc, #156]	; (80098ec <TIM_Base_SetConfig+0x12c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <TIM_Base_SetConfig+0x130>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a12      	ldr	r2, [pc, #72]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a11      	ldr	r2, [pc, #68]	; (80098e8 <TIM_Base_SetConfig+0x128>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a10      	ldr	r2, [pc, #64]	; (80098ec <TIM_Base_SetConfig+0x12c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <TIM_Base_SetConfig+0x130>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d103      	bne.n	80098c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	615a      	str	r2, [r3, #20]
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	40010000 	.word	0x40010000
 80098d8:	40000400 	.word	0x40000400
 80098dc:	40000800 	.word	0x40000800
 80098e0:	40000c00 	.word	0x40000c00
 80098e4:	40010400 	.word	0x40010400
 80098e8:	40014000 	.word	0x40014000
 80098ec:	40014400 	.word	0x40014400
 80098f0:	40014800 	.word	0x40014800

080098f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009908:	2302      	movs	r3, #2
 800990a:	e06d      	b.n	80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a30      	ldr	r2, [pc, #192]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a2f      	ldr	r2, [pc, #188]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d108      	bne.n	8009952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a20      	ldr	r2, [pc, #128]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d022      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d01d      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d018      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a1c      	ldr	r2, [pc, #112]	; (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d013      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1a      	ldr	r2, [pc, #104]	; (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00e      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d009      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a16      	ldr	r2, [pc, #88]	; (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d10c      	bne.n	80099d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	40010000 	.word	0x40010000
 80099f8:	40010400 	.word	0x40010400
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40000800 	.word	0x40000800
 8009a04:	40000c00 	.word	0x40000c00
 8009a08:	40001800 	.word	0x40001800
 8009a0c:	40014000 	.word	0x40014000

08009a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e042      	b.n	8009aa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 fd4f 	bl	800b4d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2224      	movs	r2, #36	; 0x24
 8009a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f8ba 	bl	8009bcc <UART_SetConfig>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e022      	b.n	8009aa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fe16 	bl	800a69c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689a      	ldr	r2, [r3, #8]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fe9d 	bl	800a7e0 <UART_CheckIdleState>
 8009aa6:	4603      	mov	r3, r0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d17b      	bne.n	8009bc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <HAL_UART_Transmit+0x26>
 8009ad0:	88fb      	ldrh	r3, [r7, #6]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e074      	b.n	8009bc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2221      	movs	r2, #33	; 0x21
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aea:	f7f6 ffc7 	bl	8000a7c <HAL_GetTick>
 8009aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	88fa      	ldrh	r2, [r7, #6]
 8009af4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b08:	d108      	bne.n	8009b1c <HAL_UART_Transmit+0x6c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e003      	b.n	8009b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b24:	e030      	b.n	8009b88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2180      	movs	r1, #128	; 0x80
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 feff 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e03d      	b.n	8009bc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	3302      	adds	r3, #2
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e007      	b.n	8009b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	781a      	ldrb	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	3301      	adds	r3, #1
 8009b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c8      	bne.n	8009b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2140      	movs	r1, #64	; 0x40
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fec8 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e006      	b.n	8009bc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e000      	b.n	8009bc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009bc2:	2302      	movs	r3, #2
  }
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd0:	b092      	sub	sp, #72	; 0x48
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	431a      	orrs	r2, r3
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	431a      	orrs	r2, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4bbe      	ldr	r3, [pc, #760]	; (8009ef4 <UART_SetConfig+0x328>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	6812      	ldr	r2, [r2, #0]
 8009c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c04:	430b      	orrs	r3, r1
 8009c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4ab3      	ldr	r2, [pc, #716]	; (8009ef8 <UART_SetConfig+0x32c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c34:	4313      	orrs	r3, r2
 8009c36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689a      	ldr	r2, [r3, #8]
 8009c3e:	4baf      	ldr	r3, [pc, #700]	; (8009efc <UART_SetConfig+0x330>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	6812      	ldr	r2, [r2, #0]
 8009c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	f023 010f 	bic.w	r1, r3, #15
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4aa6      	ldr	r2, [pc, #664]	; (8009f00 <UART_SetConfig+0x334>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d177      	bne.n	8009d5c <UART_SetConfig+0x190>
 8009c6c:	4ba5      	ldr	r3, [pc, #660]	; (8009f04 <UART_SetConfig+0x338>)
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c74:	2b28      	cmp	r3, #40	; 0x28
 8009c76:	d86d      	bhi.n	8009d54 <UART_SetConfig+0x188>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0xb4>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009d25 	.word	0x08009d25
 8009c84:	08009d55 	.word	0x08009d55
 8009c88:	08009d55 	.word	0x08009d55
 8009c8c:	08009d55 	.word	0x08009d55
 8009c90:	08009d55 	.word	0x08009d55
 8009c94:	08009d55 	.word	0x08009d55
 8009c98:	08009d55 	.word	0x08009d55
 8009c9c:	08009d55 	.word	0x08009d55
 8009ca0:	08009d2d 	.word	0x08009d2d
 8009ca4:	08009d55 	.word	0x08009d55
 8009ca8:	08009d55 	.word	0x08009d55
 8009cac:	08009d55 	.word	0x08009d55
 8009cb0:	08009d55 	.word	0x08009d55
 8009cb4:	08009d55 	.word	0x08009d55
 8009cb8:	08009d55 	.word	0x08009d55
 8009cbc:	08009d55 	.word	0x08009d55
 8009cc0:	08009d35 	.word	0x08009d35
 8009cc4:	08009d55 	.word	0x08009d55
 8009cc8:	08009d55 	.word	0x08009d55
 8009ccc:	08009d55 	.word	0x08009d55
 8009cd0:	08009d55 	.word	0x08009d55
 8009cd4:	08009d55 	.word	0x08009d55
 8009cd8:	08009d55 	.word	0x08009d55
 8009cdc:	08009d55 	.word	0x08009d55
 8009ce0:	08009d3d 	.word	0x08009d3d
 8009ce4:	08009d55 	.word	0x08009d55
 8009ce8:	08009d55 	.word	0x08009d55
 8009cec:	08009d55 	.word	0x08009d55
 8009cf0:	08009d55 	.word	0x08009d55
 8009cf4:	08009d55 	.word	0x08009d55
 8009cf8:	08009d55 	.word	0x08009d55
 8009cfc:	08009d55 	.word	0x08009d55
 8009d00:	08009d45 	.word	0x08009d45
 8009d04:	08009d55 	.word	0x08009d55
 8009d08:	08009d55 	.word	0x08009d55
 8009d0c:	08009d55 	.word	0x08009d55
 8009d10:	08009d55 	.word	0x08009d55
 8009d14:	08009d55 	.word	0x08009d55
 8009d18:	08009d55 	.word	0x08009d55
 8009d1c:	08009d55 	.word	0x08009d55
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2a:	e222      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e21e      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d34:	2308      	movs	r3, #8
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e21a      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e216      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e212      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d4c:	2340      	movs	r3, #64	; 0x40
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e20e      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e20a      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a69      	ldr	r2, [pc, #420]	; (8009f08 <UART_SetConfig+0x33c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d130      	bne.n	8009dc8 <UART_SetConfig+0x1fc>
 8009d66:	4b67      	ldr	r3, [pc, #412]	; (8009f04 <UART_SetConfig+0x338>)
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d826      	bhi.n	8009dc0 <UART_SetConfig+0x1f4>
 8009d72:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x1ac>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009da9 	.word	0x08009da9
 8009d88:	08009db1 	.word	0x08009db1
 8009d8c:	08009db9 	.word	0x08009db9
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d96:	e1ec      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9e:	e1e8      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e1e4      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e1e0      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009db0:	2320      	movs	r3, #32
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e1dc      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e1d8      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009dc0:	2380      	movs	r3, #128	; 0x80
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e1d4      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a4f      	ldr	r2, [pc, #316]	; (8009f0c <UART_SetConfig+0x340>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d130      	bne.n	8009e34 <UART_SetConfig+0x268>
 8009dd2:	4b4c      	ldr	r3, [pc, #304]	; (8009f04 <UART_SetConfig+0x338>)
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d826      	bhi.n	8009e2c <UART_SetConfig+0x260>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <UART_SetConfig+0x218>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009dfd 	.word	0x08009dfd
 8009de8:	08009e05 	.word	0x08009e05
 8009dec:	08009e0d 	.word	0x08009e0d
 8009df0:	08009e15 	.word	0x08009e15
 8009df4:	08009e1d 	.word	0x08009e1d
 8009df8:	08009e25 	.word	0x08009e25
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e02:	e1b6      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e04:	2304      	movs	r3, #4
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e1b2      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e0c:	2308      	movs	r3, #8
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e1ae      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e14:	2310      	movs	r3, #16
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1a:	e1aa      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e1c:	2320      	movs	r3, #32
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e1a6      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e24:	2340      	movs	r3, #64	; 0x40
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e1a2      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e2c:	2380      	movs	r3, #128	; 0x80
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e19e      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a35      	ldr	r2, [pc, #212]	; (8009f10 <UART_SetConfig+0x344>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d130      	bne.n	8009ea0 <UART_SetConfig+0x2d4>
 8009e3e:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <UART_SetConfig+0x338>)
 8009e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	d826      	bhi.n	8009e98 <UART_SetConfig+0x2cc>
 8009e4a:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x284>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e69 	.word	0x08009e69
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009e81 	.word	0x08009e81
 8009e60:	08009e89 	.word	0x08009e89
 8009e64:	08009e91 	.word	0x08009e91
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e180      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e70:	2304      	movs	r3, #4
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e17c      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e78:	2308      	movs	r3, #8
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e178      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e80:	2310      	movs	r3, #16
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e174      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e170      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e16c      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e168      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a1b      	ldr	r2, [pc, #108]	; (8009f14 <UART_SetConfig+0x348>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d142      	bne.n	8009f30 <UART_SetConfig+0x364>
 8009eaa:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <UART_SetConfig+0x338>)
 8009eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eae:	f003 0307 	and.w	r3, r3, #7
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	d838      	bhi.n	8009f28 <UART_SetConfig+0x35c>
 8009eb6:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <UART_SetConfig+0x2f0>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009ed5 	.word	0x08009ed5
 8009ec0:	08009edd 	.word	0x08009edd
 8009ec4:	08009ee5 	.word	0x08009ee5
 8009ec8:	08009eed 	.word	0x08009eed
 8009ecc:	08009f19 	.word	0x08009f19
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e14a      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009edc:	2304      	movs	r3, #4
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e146      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009ee4:	2308      	movs	r3, #8
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e142      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009eec:	2310      	movs	r3, #16
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e13e      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009ef4:	cfff69f3 	.word	0xcfff69f3
 8009ef8:	58000c00 	.word	0x58000c00
 8009efc:	11fff4ff 	.word	0x11fff4ff
 8009f00:	40011000 	.word	0x40011000
 8009f04:	58024400 	.word	0x58024400
 8009f08:	40004400 	.word	0x40004400
 8009f0c:	40004800 	.word	0x40004800
 8009f10:	40004c00 	.word	0x40004c00
 8009f14:	40005000 	.word	0x40005000
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e128      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e124      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e120      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4acb      	ldr	r2, [pc, #812]	; (800a264 <UART_SetConfig+0x698>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d176      	bne.n	800a028 <UART_SetConfig+0x45c>
 8009f3a:	4bcb      	ldr	r3, [pc, #812]	; (800a268 <UART_SetConfig+0x69c>)
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f42:	2b28      	cmp	r3, #40	; 0x28
 8009f44:	d86c      	bhi.n	800a020 <UART_SetConfig+0x454>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0x380>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009ff1 	.word	0x08009ff1
 8009f50:	0800a021 	.word	0x0800a021
 8009f54:	0800a021 	.word	0x0800a021
 8009f58:	0800a021 	.word	0x0800a021
 8009f5c:	0800a021 	.word	0x0800a021
 8009f60:	0800a021 	.word	0x0800a021
 8009f64:	0800a021 	.word	0x0800a021
 8009f68:	0800a021 	.word	0x0800a021
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	0800a021 	.word	0x0800a021
 8009f74:	0800a021 	.word	0x0800a021
 8009f78:	0800a021 	.word	0x0800a021
 8009f7c:	0800a021 	.word	0x0800a021
 8009f80:	0800a021 	.word	0x0800a021
 8009f84:	0800a021 	.word	0x0800a021
 8009f88:	0800a021 	.word	0x0800a021
 8009f8c:	0800a001 	.word	0x0800a001
 8009f90:	0800a021 	.word	0x0800a021
 8009f94:	0800a021 	.word	0x0800a021
 8009f98:	0800a021 	.word	0x0800a021
 8009f9c:	0800a021 	.word	0x0800a021
 8009fa0:	0800a021 	.word	0x0800a021
 8009fa4:	0800a021 	.word	0x0800a021
 8009fa8:	0800a021 	.word	0x0800a021
 8009fac:	0800a009 	.word	0x0800a009
 8009fb0:	0800a021 	.word	0x0800a021
 8009fb4:	0800a021 	.word	0x0800a021
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	0800a021 	.word	0x0800a021
 8009fc0:	0800a021 	.word	0x0800a021
 8009fc4:	0800a021 	.word	0x0800a021
 8009fc8:	0800a021 	.word	0x0800a021
 8009fcc:	0800a011 	.word	0x0800a011
 8009fd0:	0800a021 	.word	0x0800a021
 8009fd4:	0800a021 	.word	0x0800a021
 8009fd8:	0800a021 	.word	0x0800a021
 8009fdc:	0800a021 	.word	0x0800a021
 8009fe0:	0800a021 	.word	0x0800a021
 8009fe4:	0800a021 	.word	0x0800a021
 8009fe8:	0800a021 	.word	0x0800a021
 8009fec:	0800a019 	.word	0x0800a019
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff6:	e0bc      	b.n	800a172 <UART_SetConfig+0x5a6>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffe:	e0b8      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a000:	2308      	movs	r3, #8
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e0b4      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a008:	2310      	movs	r3, #16
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e0b0      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a010:	2320      	movs	r3, #32
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e0ac      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e0a8      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e0a4      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a8f      	ldr	r2, [pc, #572]	; (800a26c <UART_SetConfig+0x6a0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d130      	bne.n	800a094 <UART_SetConfig+0x4c8>
 800a032:	4b8d      	ldr	r3, [pc, #564]	; (800a268 <UART_SetConfig+0x69c>)
 800a034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a036:	f003 0307 	and.w	r3, r3, #7
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d826      	bhi.n	800a08c <UART_SetConfig+0x4c0>
 800a03e:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <UART_SetConfig+0x478>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a05d 	.word	0x0800a05d
 800a048:	0800a065 	.word	0x0800a065
 800a04c:	0800a06d 	.word	0x0800a06d
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a07d 	.word	0x0800a07d
 800a058:	0800a085 	.word	0x0800a085
 800a05c:	2300      	movs	r3, #0
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a062:	e086      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a064:	2304      	movs	r3, #4
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06a:	e082      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a06c:	2308      	movs	r3, #8
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a072:	e07e      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a074:	2310      	movs	r3, #16
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07a:	e07a      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a07c:	2320      	movs	r3, #32
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e076      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e072      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e06e      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a75      	ldr	r2, [pc, #468]	; (800a270 <UART_SetConfig+0x6a4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d130      	bne.n	800a100 <UART_SetConfig+0x534>
 800a09e:	4b72      	ldr	r3, [pc, #456]	; (800a268 <UART_SetConfig+0x69c>)
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d826      	bhi.n	800a0f8 <UART_SetConfig+0x52c>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <UART_SetConfig+0x4e4>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a0c9 	.word	0x0800a0c9
 800a0b4:	0800a0d1 	.word	0x0800a0d1
 800a0b8:	0800a0d9 	.word	0x0800a0d9
 800a0bc:	0800a0e1 	.word	0x0800a0e1
 800a0c0:	0800a0e9 	.word	0x0800a0e9
 800a0c4:	0800a0f1 	.word	0x0800a0f1
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ce:	e050      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0d0:	2304      	movs	r3, #4
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d6:	e04c      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0d8:	2308      	movs	r3, #8
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0de:	e048      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e6:	e044      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0e8:	2320      	movs	r3, #32
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e040      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e03c      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a0f8:	2380      	movs	r3, #128	; 0x80
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e038      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a5b      	ldr	r2, [pc, #364]	; (800a274 <UART_SetConfig+0x6a8>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d130      	bne.n	800a16c <UART_SetConfig+0x5a0>
 800a10a:	4b57      	ldr	r3, [pc, #348]	; (800a268 <UART_SetConfig+0x69c>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b05      	cmp	r3, #5
 800a114:	d826      	bhi.n	800a164 <UART_SetConfig+0x598>
 800a116:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <UART_SetConfig+0x550>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a135 	.word	0x0800a135
 800a120:	0800a13d 	.word	0x0800a13d
 800a124:	0800a145 	.word	0x0800a145
 800a128:	0800a14d 	.word	0x0800a14d
 800a12c:	0800a155 	.word	0x0800a155
 800a130:	0800a15d 	.word	0x0800a15d
 800a134:	2302      	movs	r3, #2
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13a:	e01a      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a13c:	2304      	movs	r3, #4
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a142:	e016      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a144:	2308      	movs	r3, #8
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14a:	e012      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a14c:	2310      	movs	r3, #16
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a152:	e00e      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a154:	2320      	movs	r3, #32
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e00a      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e006      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a164:	2380      	movs	r3, #128	; 0x80
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e002      	b.n	800a172 <UART_SetConfig+0x5a6>
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a3f      	ldr	r2, [pc, #252]	; (800a274 <UART_SetConfig+0x6a8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	f040 80f8 	bne.w	800a36e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a17e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a182:	2b20      	cmp	r3, #32
 800a184:	dc46      	bgt.n	800a214 <UART_SetConfig+0x648>
 800a186:	2b02      	cmp	r3, #2
 800a188:	f2c0 8082 	blt.w	800a290 <UART_SetConfig+0x6c4>
 800a18c:	3b02      	subs	r3, #2
 800a18e:	2b1e      	cmp	r3, #30
 800a190:	d87e      	bhi.n	800a290 <UART_SetConfig+0x6c4>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <UART_SetConfig+0x5cc>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a21b 	.word	0x0800a21b
 800a19c:	0800a291 	.word	0x0800a291
 800a1a0:	0800a223 	.word	0x0800a223
 800a1a4:	0800a291 	.word	0x0800a291
 800a1a8:	0800a291 	.word	0x0800a291
 800a1ac:	0800a291 	.word	0x0800a291
 800a1b0:	0800a233 	.word	0x0800a233
 800a1b4:	0800a291 	.word	0x0800a291
 800a1b8:	0800a291 	.word	0x0800a291
 800a1bc:	0800a291 	.word	0x0800a291
 800a1c0:	0800a291 	.word	0x0800a291
 800a1c4:	0800a291 	.word	0x0800a291
 800a1c8:	0800a291 	.word	0x0800a291
 800a1cc:	0800a291 	.word	0x0800a291
 800a1d0:	0800a243 	.word	0x0800a243
 800a1d4:	0800a291 	.word	0x0800a291
 800a1d8:	0800a291 	.word	0x0800a291
 800a1dc:	0800a291 	.word	0x0800a291
 800a1e0:	0800a291 	.word	0x0800a291
 800a1e4:	0800a291 	.word	0x0800a291
 800a1e8:	0800a291 	.word	0x0800a291
 800a1ec:	0800a291 	.word	0x0800a291
 800a1f0:	0800a291 	.word	0x0800a291
 800a1f4:	0800a291 	.word	0x0800a291
 800a1f8:	0800a291 	.word	0x0800a291
 800a1fc:	0800a291 	.word	0x0800a291
 800a200:	0800a291 	.word	0x0800a291
 800a204:	0800a291 	.word	0x0800a291
 800a208:	0800a291 	.word	0x0800a291
 800a20c:	0800a291 	.word	0x0800a291
 800a210:	0800a283 	.word	0x0800a283
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d037      	beq.n	800a288 <UART_SetConfig+0x6bc>
 800a218:	e03a      	b.n	800a290 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a21a:	f7fe fc95 	bl	8008b48 <HAL_RCCEx_GetD3PCLK1Freq>
 800a21e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a220:	e03c      	b.n	800a29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fca4 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a230:	e034      	b.n	800a29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a232:	f107 0318 	add.w	r3, r7, #24
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fdf0 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a240:	e02c      	b.n	800a29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <UART_SetConfig+0x69c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a24e:	4b06      	ldr	r3, [pc, #24]	; (800a268 <UART_SetConfig+0x69c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	08db      	lsrs	r3, r3, #3
 800a254:	f003 0303 	and.w	r3, r3, #3
 800a258:	4a07      	ldr	r2, [pc, #28]	; (800a278 <UART_SetConfig+0x6ac>)
 800a25a:	fa22 f303 	lsr.w	r3, r2, r3
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a260:	e01c      	b.n	800a29c <UART_SetConfig+0x6d0>
 800a262:	bf00      	nop
 800a264:	40011400 	.word	0x40011400
 800a268:	58024400 	.word	0x58024400
 800a26c:	40007800 	.word	0x40007800
 800a270:	40007c00 	.word	0x40007c00
 800a274:	58000c00 	.word	0x58000c00
 800a278:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a27c:	4b9d      	ldr	r3, [pc, #628]	; (800a4f4 <UART_SetConfig+0x928>)
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a280:	e00c      	b.n	800a29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a282:	4b9d      	ldr	r3, [pc, #628]	; (800a4f8 <UART_SetConfig+0x92c>)
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a286:	e009      	b.n	800a29c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a28e:	e005      	b.n	800a29c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a29a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 81de 	beq.w	800a660 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	4a94      	ldr	r2, [pc, #592]	; (800a4fc <UART_SetConfig+0x930>)
 800a2aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	4413      	add	r3, r2
 800a2c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d305      	bcc.n	800a2d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d903      	bls.n	800a2dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2da:	e1c1      	b.n	800a660 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2de:	2200      	movs	r2, #0
 800a2e0:	60bb      	str	r3, [r7, #8]
 800a2e2:	60fa      	str	r2, [r7, #12]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	4a84      	ldr	r2, [pc, #528]	; (800a4fc <UART_SetConfig+0x930>)
 800a2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	607a      	str	r2, [r7, #4]
 800a2f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2fe:	f7f6 f847 	bl	8000390 <__aeabi_uldivmod>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4610      	mov	r0, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	f04f 0200 	mov.w	r2, #0
 800a30e:	f04f 0300 	mov.w	r3, #0
 800a312:	020b      	lsls	r3, r1, #8
 800a314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a318:	0202      	lsls	r2, r0, #8
 800a31a:	6979      	ldr	r1, [r7, #20]
 800a31c:	6849      	ldr	r1, [r1, #4]
 800a31e:	0849      	lsrs	r1, r1, #1
 800a320:	2000      	movs	r0, #0
 800a322:	460c      	mov	r4, r1
 800a324:	4605      	mov	r5, r0
 800a326:	eb12 0804 	adds.w	r8, r2, r4
 800a32a:	eb43 0905 	adc.w	r9, r3, r5
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	469a      	mov	sl, r3
 800a336:	4693      	mov	fp, r2
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	4640      	mov	r0, r8
 800a33e:	4649      	mov	r1, r9
 800a340:	f7f6 f826 	bl	8000390 <__aeabi_uldivmod>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4613      	mov	r3, r2
 800a34a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a352:	d308      	bcc.n	800a366 <UART_SetConfig+0x79a>
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a35a:	d204      	bcs.n	800a366 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a362:	60da      	str	r2, [r3, #12]
 800a364:	e17c      	b.n	800a660 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a36c:	e178      	b.n	800a660 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a376:	f040 80c5 	bne.w	800a504 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a37a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a37e:	2b20      	cmp	r3, #32
 800a380:	dc48      	bgt.n	800a414 <UART_SetConfig+0x848>
 800a382:	2b00      	cmp	r3, #0
 800a384:	db7b      	blt.n	800a47e <UART_SetConfig+0x8b2>
 800a386:	2b20      	cmp	r3, #32
 800a388:	d879      	bhi.n	800a47e <UART_SetConfig+0x8b2>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <UART_SetConfig+0x7c4>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a41b 	.word	0x0800a41b
 800a394:	0800a423 	.word	0x0800a423
 800a398:	0800a47f 	.word	0x0800a47f
 800a39c:	0800a47f 	.word	0x0800a47f
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a47f 	.word	0x0800a47f
 800a3a8:	0800a47f 	.word	0x0800a47f
 800a3ac:	0800a47f 	.word	0x0800a47f
 800a3b0:	0800a43b 	.word	0x0800a43b
 800a3b4:	0800a47f 	.word	0x0800a47f
 800a3b8:	0800a47f 	.word	0x0800a47f
 800a3bc:	0800a47f 	.word	0x0800a47f
 800a3c0:	0800a47f 	.word	0x0800a47f
 800a3c4:	0800a47f 	.word	0x0800a47f
 800a3c8:	0800a47f 	.word	0x0800a47f
 800a3cc:	0800a47f 	.word	0x0800a47f
 800a3d0:	0800a44b 	.word	0x0800a44b
 800a3d4:	0800a47f 	.word	0x0800a47f
 800a3d8:	0800a47f 	.word	0x0800a47f
 800a3dc:	0800a47f 	.word	0x0800a47f
 800a3e0:	0800a47f 	.word	0x0800a47f
 800a3e4:	0800a47f 	.word	0x0800a47f
 800a3e8:	0800a47f 	.word	0x0800a47f
 800a3ec:	0800a47f 	.word	0x0800a47f
 800a3f0:	0800a47f 	.word	0x0800a47f
 800a3f4:	0800a47f 	.word	0x0800a47f
 800a3f8:	0800a47f 	.word	0x0800a47f
 800a3fc:	0800a47f 	.word	0x0800a47f
 800a400:	0800a47f 	.word	0x0800a47f
 800a404:	0800a47f 	.word	0x0800a47f
 800a408:	0800a47f 	.word	0x0800a47f
 800a40c:	0800a47f 	.word	0x0800a47f
 800a410:	0800a471 	.word	0x0800a471
 800a414:	2b40      	cmp	r3, #64	; 0x40
 800a416:	d02e      	beq.n	800a476 <UART_SetConfig+0x8aa>
 800a418:	e031      	b.n	800a47e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a41a:	f7fc fb9d 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 800a41e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a420:	e033      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a422:	f7fc fbaf 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 800a426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a428:	e02f      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fe fba0 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a438:	e027      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a43a:	f107 0318 	add.w	r3, r7, #24
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fcec 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a448:	e01f      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a44a:	4b2d      	ldr	r3, [pc, #180]	; (800a500 <UART_SetConfig+0x934>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a456:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <UART_SetConfig+0x934>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	08db      	lsrs	r3, r3, #3
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	4a24      	ldr	r2, [pc, #144]	; (800a4f4 <UART_SetConfig+0x928>)
 800a462:	fa22 f303 	lsr.w	r3, r2, r3
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a468:	e00f      	b.n	800a48a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a46a:	4b22      	ldr	r3, [pc, #136]	; (800a4f4 <UART_SetConfig+0x928>)
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a46e:	e00c      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a470:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <UART_SetConfig+0x92c>)
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a474:	e009      	b.n	800a48a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a47c:	e005      	b.n	800a48a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80e7 	beq.w	800a660 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <UART_SetConfig+0x930>)
 800a498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a49c:	461a      	mov	r2, r3
 800a49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a4:	005a      	lsls	r2, r3, #1
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	085b      	lsrs	r3, r3, #1
 800a4ac:	441a      	add	r2, r3
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	2b0f      	cmp	r3, #15
 800a4bc:	d916      	bls.n	800a4ec <UART_SetConfig+0x920>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c4:	d212      	bcs.n	800a4ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f023 030f 	bic.w	r3, r3, #15
 800a4ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a4e8:	60da      	str	r2, [r3, #12]
 800a4ea:	e0b9      	b.n	800a660 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a4f2:	e0b5      	b.n	800a660 <UART_SetConfig+0xa94>
 800a4f4:	03d09000 	.word	0x03d09000
 800a4f8:	003d0900 	.word	0x003d0900
 800a4fc:	0800c2d8 	.word	0x0800c2d8
 800a500:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a508:	2b20      	cmp	r3, #32
 800a50a:	dc49      	bgt.n	800a5a0 <UART_SetConfig+0x9d4>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	db7c      	blt.n	800a60a <UART_SetConfig+0xa3e>
 800a510:	2b20      	cmp	r3, #32
 800a512:	d87a      	bhi.n	800a60a <UART_SetConfig+0xa3e>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <UART_SetConfig+0x950>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a5a7 	.word	0x0800a5a7
 800a520:	0800a5af 	.word	0x0800a5af
 800a524:	0800a60b 	.word	0x0800a60b
 800a528:	0800a60b 	.word	0x0800a60b
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a60b 	.word	0x0800a60b
 800a534:	0800a60b 	.word	0x0800a60b
 800a538:	0800a60b 	.word	0x0800a60b
 800a53c:	0800a5c7 	.word	0x0800a5c7
 800a540:	0800a60b 	.word	0x0800a60b
 800a544:	0800a60b 	.word	0x0800a60b
 800a548:	0800a60b 	.word	0x0800a60b
 800a54c:	0800a60b 	.word	0x0800a60b
 800a550:	0800a60b 	.word	0x0800a60b
 800a554:	0800a60b 	.word	0x0800a60b
 800a558:	0800a60b 	.word	0x0800a60b
 800a55c:	0800a5d7 	.word	0x0800a5d7
 800a560:	0800a60b 	.word	0x0800a60b
 800a564:	0800a60b 	.word	0x0800a60b
 800a568:	0800a60b 	.word	0x0800a60b
 800a56c:	0800a60b 	.word	0x0800a60b
 800a570:	0800a60b 	.word	0x0800a60b
 800a574:	0800a60b 	.word	0x0800a60b
 800a578:	0800a60b 	.word	0x0800a60b
 800a57c:	0800a60b 	.word	0x0800a60b
 800a580:	0800a60b 	.word	0x0800a60b
 800a584:	0800a60b 	.word	0x0800a60b
 800a588:	0800a60b 	.word	0x0800a60b
 800a58c:	0800a60b 	.word	0x0800a60b
 800a590:	0800a60b 	.word	0x0800a60b
 800a594:	0800a60b 	.word	0x0800a60b
 800a598:	0800a60b 	.word	0x0800a60b
 800a59c:	0800a5fd 	.word	0x0800a5fd
 800a5a0:	2b40      	cmp	r3, #64	; 0x40
 800a5a2:	d02e      	beq.n	800a602 <UART_SetConfig+0xa36>
 800a5a4:	e031      	b.n	800a60a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5a6:	f7fc fad7 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 800a5aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5ac:	e033      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ae:	f7fc fae9 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 800a5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5b4:	e02f      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fada 	bl	8008b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5c4:	e027      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c6:	f107 0318 	add.w	r3, r7, #24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fc26 	bl	8008e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d4:	e01f      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5d6:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <UART_SetConfig+0xac0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d009      	beq.n	800a5f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5e2:	4b2a      	ldr	r3, [pc, #168]	; (800a68c <UART_SetConfig+0xac0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	08db      	lsrs	r3, r3, #3
 800a5e8:	f003 0303 	and.w	r3, r3, #3
 800a5ec:	4a28      	ldr	r2, [pc, #160]	; (800a690 <UART_SetConfig+0xac4>)
 800a5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5f4:	e00f      	b.n	800a616 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a5f6:	4b26      	ldr	r3, [pc, #152]	; (800a690 <UART_SetConfig+0xac4>)
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5fa:	e00c      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <UART_SetConfig+0xac8>)
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a600:	e009      	b.n	800a616 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a608:	e005      	b.n	800a616 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a614:	bf00      	nop
    }

    if (pclk != 0U)
 800a616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d021      	beq.n	800a660 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	4a1d      	ldr	r2, [pc, #116]	; (800a698 <UART_SetConfig+0xacc>)
 800a622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a626:	461a      	mov	r2, r3
 800a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	441a      	add	r2, r3
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	2b0f      	cmp	r3, #15
 800a644:	d909      	bls.n	800a65a <UART_SetConfig+0xa8e>
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a64c:	d205      	bcs.n	800a65a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	b29a      	uxth	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	60da      	str	r2, [r3, #12]
 800a658:	e002      	b.n	800a660 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2201      	movs	r2, #1
 800a664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2200      	movs	r2, #0
 800a674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2200      	movs	r2, #0
 800a67a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a67c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a680:	4618      	mov	r0, r3
 800a682:	3748      	adds	r7, #72	; 0x48
 800a684:	46bd      	mov	sp, r7
 800a686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
 800a690:	03d09000 	.word	0x03d09000
 800a694:	003d0900 	.word	0x003d0900
 800a698:	0800c2d8 	.word	0x0800c2d8

0800a69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00a      	beq.n	800a70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a79a:	d10a      	bne.n	800a7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b098      	sub	sp, #96	; 0x60
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7f0:	f7f6 f944 	bl	8000a7c <HAL_GetTick>
 800a7f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0308 	and.w	r3, r3, #8
 800a800:	2b08      	cmp	r3, #8
 800a802:	d12f      	bne.n	800a864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a80c:	2200      	movs	r2, #0
 800a80e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f88e 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d022      	beq.n	800a864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a832:	653b      	str	r3, [r7, #80]	; 0x50
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a83c:	647b      	str	r3, [r7, #68]	; 0x44
 800a83e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e6      	bne.n	800a81e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e063      	b.n	800a92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d149      	bne.n	800a906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a87a:	2200      	movs	r2, #0
 800a87c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f857 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d03c      	beq.n	800a906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	623b      	str	r3, [r7, #32]
   return(result);
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800a8ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e6      	bne.n	800a88c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8de:	61fa      	str	r2, [r7, #28]
 800a8e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	69b9      	ldr	r1, [r7, #24]
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e012      	b.n	800a92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2220      	movs	r2, #32
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3758      	adds	r7, #88	; 0x58
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	4613      	mov	r3, r2
 800a942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a944:	e049      	b.n	800a9da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d045      	beq.n	800a9da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a94e:	f7f6 f895 	bl	8000a7c <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <UART_WaitOnFlagUntilTimeout+0x30>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e048      	b.n	800a9fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0304 	and.w	r3, r3, #4
 800a972:	2b00      	cmp	r3, #0
 800a974:	d031      	beq.n	800a9da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b08      	cmp	r3, #8
 800a982:	d110      	bne.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2208      	movs	r2, #8
 800a98a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 f839 	bl	800aa04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2208      	movs	r2, #8
 800a996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e029      	b.n	800a9fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9b4:	d111      	bne.n	800a9da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f81f 	bl	800aa04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2220      	movs	r2, #32
 800a9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e00f      	b.n	800a9fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	bf0c      	ite	eq
 800a9ea:	2301      	moveq	r3, #1
 800a9ec:	2300      	movne	r3, #0
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d0a6      	beq.n	800a946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b095      	sub	sp, #84	; 0x54
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa2a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e6      	bne.n	800aa0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3308      	adds	r3, #8
 800aa44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <UART_EndRxTransfer+0xc8>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d118      	bne.n	800aaac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f023 0310 	bic.w	r3, r3, #16
 800aa8e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa98:	61bb      	str	r3, [r7, #24]
 800aa9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6979      	ldr	r1, [r7, #20]
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e6      	bne.n	800aa7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aac0:	bf00      	nop
 800aac2:	3754      	adds	r7, #84	; 0x54
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	effffffe 	.word	0xeffffffe

0800aad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e027      	b.n	800ab36 <HAL_UARTEx_DisableFifoMode+0x66>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2224      	movs	r2, #36	; 0x24
 800aaf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0201 	bic.w	r2, r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d101      	bne.n	800ab5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab56:	2302      	movs	r3, #2
 800ab58:	e02d      	b.n	800abb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2224      	movs	r2, #36	; 0x24
 800ab66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f022 0201 	bic.w	r2, r2, #1
 800ab80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f850 	bl	800ac3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e02d      	b.n	800ac32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2224      	movs	r2, #36	; 0x24
 800abe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0201 	bic.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f812 	bl	800ac3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d108      	bne.n	800ac5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac5c:	e031      	b.n	800acc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac5e:	2310      	movs	r3, #16
 800ac60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac62:	2310      	movs	r3, #16
 800ac64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	0e5b      	lsrs	r3, r3, #25
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	0f5b      	lsrs	r3, r3, #29
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	7b3a      	ldrb	r2, [r7, #12]
 800ac8a:	4911      	ldr	r1, [pc, #68]	; (800acd0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac8c:	5c8a      	ldrb	r2, [r1, r2]
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac92:	7b3a      	ldrb	r2, [r7, #12]
 800ac94:	490f      	ldr	r1, [pc, #60]	; (800acd4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	7b7a      	ldrb	r2, [r7, #13]
 800aca8:	4909      	ldr	r1, [pc, #36]	; (800acd0 <UARTEx_SetNbDataToProcess+0x94>)
 800acaa:	5c8a      	ldrb	r2, [r1, r2]
 800acac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acb0:	7b7a      	ldrb	r2, [r7, #13]
 800acb2:	4908      	ldr	r1, [pc, #32]	; (800acd4 <UARTEx_SetNbDataToProcess+0x98>)
 800acb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800acba:	b29a      	uxth	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	0800c2f0 	.word	0x0800c2f0
 800acd4:	0800c2f8 	.word	0x0800c2f8

0800acd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800acdc:	4b22      	ldr	r3, [pc, #136]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800acde:	4a23      	ldr	r2, [pc, #140]	; (800ad6c <MX_USART3_UART_Init+0x94>)
 800ace0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ace2:	4b21      	ldr	r3, [pc, #132]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ace4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ace8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800acea:	4b1f      	ldr	r3, [pc, #124]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800acec:	2200      	movs	r2, #0
 800acee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800acf0:	4b1d      	ldr	r3, [pc, #116]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800acf6:	4b1c      	ldr	r3, [pc, #112]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800acfc:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800acfe:	220c      	movs	r2, #12
 800ad00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad02:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ad0e:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ad14:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ad20:	4811      	ldr	r0, [pc, #68]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad22:	f7fe fe75 	bl	8009a10 <HAL_UART_Init>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800ad2c:	f000 fb30 	bl	800b390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ad30:	2100      	movs	r1, #0
 800ad32:	480d      	ldr	r0, [pc, #52]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad34:	f7ff ff05 	bl	800ab42 <HAL_UARTEx_SetTxFifoThreshold>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800ad3e:	f000 fb27 	bl	800b390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ad42:	2100      	movs	r1, #0
 800ad44:	4808      	ldr	r0, [pc, #32]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad46:	f7ff ff3a 	bl	800abbe <HAL_UARTEx_SetRxFifoThreshold>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800ad50:	f000 fb1e 	bl	800b390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800ad54:	4804      	ldr	r0, [pc, #16]	; (800ad68 <MX_USART3_UART_Init+0x90>)
 800ad56:	f7ff febb 	bl	800aad0 <HAL_UARTEx_DisableFifoMode>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800ad60:	f000 fb16 	bl	800b390 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	240009c4 	.word	0x240009c4
 800ad6c:	40004800 	.word	0x40004800

0800ad70 <myprintf>:

void myprintf(const char *fmt, ...) {
 800ad70:	b40f      	push	{r0, r1, r2, r3}
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b082      	sub	sp, #8
 800ad76:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 800ad78:	f107 0314 	add.w	r3, r7, #20
 800ad7c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	2164      	movs	r1, #100	; 0x64
 800ad84:	480b      	ldr	r0, [pc, #44]	; (800adb4 <myprintf+0x44>)
 800ad86:	f000 fdd9 	bl	800b93c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800ad8a:	480a      	ldr	r0, [pc, #40]	; (800adb4 <myprintf+0x44>)
 800ad8c:	f7f5 faa8 	bl	80002e0 <strlen>
 800ad90:	4603      	mov	r3, r0
 800ad92:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9c:	4905      	ldr	r1, [pc, #20]	; (800adb4 <myprintf+0x44>)
 800ad9e:	4806      	ldr	r0, [pc, #24]	; (800adb8 <myprintf+0x48>)
 800ada0:	f7fe fe86 	bl	8009ab0 <HAL_UART_Transmit>

}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adae:	b004      	add	sp, #16
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	24000a58 	.word	0x24000a58
 800adb8:	240009c4 	.word	0x240009c4

0800adbc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes */
  MPU_Config();
 800adc2:	f000 faef 	bl	800b3a4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800adc6:	f000 fb13 	bl	800b3f0 <CPU_CACHE_Enable>

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800adca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adce:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800add0:	bf00      	nop
 800add2:	4b2d      	ldr	r3, [pc, #180]	; (800ae88 <main+0xcc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d004      	beq.n	800ade8 <main+0x2c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dcf4      	bgt.n	800add2 <main+0x16>
  if ( timeout < 0 )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	da01      	bge.n	800adf2 <main+0x36>
  {
    Error_Handler();
 800adee:	f000 facf 	bl	800b390 <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800adf2:	f7f5 fdb5 	bl	8000960 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800adf6:	f000 f85b 	bl	800aeb0 <SystemClock_Config>

  /*## Configure peripherals #################################################*/

  /* Initialize LEDs on board */
  BSP_LED_Init(LED3);
 800adfa:	2002      	movs	r0, #2
 800adfc:	f7f5 fc46 	bl	800068c <BSP_LED_Init>
  BSP_LED_Init(LED1);
 800ae00:	2000      	movs	r0, #0
 800ae02:	f7f5 fc43 	bl	800068c <BSP_LED_Init>

  BSP_LED_On(LED1);
 800ae06:	2000      	movs	r0, #0
 800ae08:	f7f5 fcb6 	bl	8000778 <BSP_LED_On>


  /* Configure the ADCx and ADCy peripherals */
  ADC_Config();
 800ae0c:	f000 f8ce 	bl	800afac <ADC_Config>

#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Configure the TIM peripheral */
  TIM_Config();
 800ae10:	f000 f994 	bl	800b13c <TIM_Config>
#endif

  /*## Enable peripherals ####################################################*/
#if defined(ADC_TRIGGER_FROM_TIMER)
  /* Timer enable */
  if (HAL_TIM_Base_Start(&TimHandle) != HAL_OK)
 800ae14:	481d      	ldr	r0, [pc, #116]	; (800ae8c <main+0xd0>)
 800ae16:	f7fe fc63 	bl	80096e0 <HAL_TIM_Base_Start>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <main+0x68>
  {
    /* Counter Enable Error */
    Error_Handler();
 800ae20:	f000 fab6 	bl	800b390 <Error_Handler>


  /*## Start ADC conversions #################################################*/

  /* Start ADCx and ADCy multimode conversion on regular group with transfer by DMA */
  if (HAL_ADCEx_MultiModeStart_DMA(&AdcHandle_master,
 800ae24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae28:	4919      	ldr	r1, [pc, #100]	; (800ae90 <main+0xd4>)
 800ae2a:	481a      	ldr	r0, [pc, #104]	; (800ae94 <main+0xd8>)
 800ae2c:	f7f7 fd62 	bl	80028f4 <HAL_ADCEx_MultiModeStart_DMA>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <main+0x7e>
                                   (uint32_t *)aADCDualConvertedValues,
                                    ADCCONVERTEDVALUES_BUFFER_SIZE
                                  ) != HAL_OK)
  {
    /* Start Error */
    Error_Handler();
 800ae36:	f000 faab 	bl	800b390 <Error_Handler>
  }

  MX_USART3_UART_Init();
 800ae3a:	f7ff ff4d 	bl	800acd8 <MX_USART3_UART_Init>

  myprintf("Starting ... \r\n");
 800ae3e:	4816      	ldr	r0, [pc, #88]	; (800ae98 <main+0xdc>)
 800ae40:	f7ff ff96 	bl	800ad70 <myprintf>
  HAL_Delay(500);
 800ae44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ae48:	f7f5 fe24 	bl	8000a94 <HAL_Delay>
  myprintf("After Delay ... \r\n");
 800ae4c:	4813      	ldr	r0, [pc, #76]	; (800ae9c <main+0xe0>)
 800ae4e:	f7ff ff8f 	bl	800ad70 <myprintf>
    /*  - Turn-off if ADC conversions buffer is not complete */
    /*  - Turn-on if ADC conversions buffer is complete */

    /* ADC conversion buffer complete variable is updated into ADC conversions*/
    /* complete callback.                                                     */
    if (ubADCDualConversionComplete == RESET)
 800ae52:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <main+0xe4>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d103      	bne.n	800ae62 <main+0xa6>
    {
      BSP_LED_Off(LED1);
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f7f5 fcb6 	bl	80007cc <BSP_LED_Off>
 800ae60:	e002      	b.n	800ae68 <main+0xac>
    }
    else
    {
      BSP_LED_On(LED1);
 800ae62:	2000      	movs	r0, #0
 800ae64:	f7f5 fc88 	bl	8000778 <BSP_LED_On>
    }

    if(ubADCDualConversionComplete == SET)
 800ae68:	4b0d      	ldr	r3, [pc, #52]	; (800aea0 <main+0xe4>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d1f0      	bne.n	800ae52 <main+0x96>
    {
    	myprintf("ADC[1] = %d  ADC[2] = %d \r\n", aADCxConvertedValues[0], aADCyConvertedValues[0]);
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <main+0xe8>)
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	4619      	mov	r1, r3
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <main+0xec>)
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	461a      	mov	r2, r3
 800ae80:	480a      	ldr	r0, [pc, #40]	; (800aeac <main+0xf0>)
 800ae82:	f7ff ff75 	bl	800ad70 <myprintf>
    if (ubADCDualConversionComplete == RESET)
 800ae86:	e7e4      	b.n	800ae52 <main+0x96>
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	24000168 	.word	0x24000168
 800ae90:	240001c0 	.word	0x240001c0
 800ae94:	240000a0 	.word	0x240000a0
 800ae98:	0800c278 	.word	0x0800c278
 800ae9c:	0800c288 	.word	0x0800c288
 800aea0:	240009c0 	.word	0x240009c0
 800aea4:	240005c0 	.word	0x240005c0
 800aea8:	240007c0 	.word	0x240007c0
 800aeac:	0800c29c 	.word	0x0800c29c

0800aeb0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b09e      	sub	sp, #120	; 0x78
 800aeb4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800aebc:	2004      	movs	r0, #4
 800aebe:	f7fa fe37 	bl	8005b30 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aec2:	2300      	movs	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	4b37      	ldr	r3, [pc, #220]	; (800afa4 <SystemClock_Config+0xf4>)
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	4a36      	ldr	r2, [pc, #216]	; (800afa4 <SystemClock_Config+0xf4>)
 800aecc:	f023 0301 	bic.w	r3, r3, #1
 800aed0:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aed2:	4b34      	ldr	r3, [pc, #208]	; (800afa4 <SystemClock_Config+0xf4>)
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	607b      	str	r3, [r7, #4]
 800aedc:	4b32      	ldr	r3, [pc, #200]	; (800afa8 <SystemClock_Config+0xf8>)
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	4a31      	ldr	r2, [pc, #196]	; (800afa8 <SystemClock_Config+0xf8>)
 800aee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aee6:	6193      	str	r3, [r2, #24]
 800aee8:	4b2f      	ldr	r3, [pc, #188]	; (800afa8 <SystemClock_Config+0xf8>)
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800aef4:	bf00      	nop
 800aef6:	4b2c      	ldr	r3, [pc, #176]	; (800afa8 <SystemClock_Config+0xf8>)
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aefe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af02:	d1f8      	bne.n	800aef6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800af04:	2301      	movs	r3, #1
 800af06:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800af08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800af0c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800af0e:	2300      	movs	r3, #0
 800af10:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800af12:	2300      	movs	r3, #0
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af16:	2302      	movs	r3, #2
 800af18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800af1a:	2302      	movs	r3, #2
 800af1c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 800af1e:	2304      	movs	r3, #4
 800af20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800af22:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800af26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800af2c:	2302      	movs	r3, #2
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800af30:	2302      	movs	r3, #2
 800af32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800af34:	2304      	movs	r3, #4
 800af36:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800af38:	2300      	movs	r3, #0
 800af3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800af3c:	2304      	movs	r3, #4
 800af3e:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4618      	mov	r0, r3
 800af46:	f7fa fe4d 	bl	8005be4 <HAL_RCC_OscConfig>
 800af4a:	4603      	mov	r3, r0
 800af4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800af50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 800af58:	f000 fa1a 	bl	800b390 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800af5c:	233f      	movs	r3, #63	; 0x3f
 800af5e:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af60:	2303      	movs	r3, #3
 800af62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800af64:	2300      	movs	r3, #0
 800af66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800af68:	2308      	movs	r3, #8
 800af6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800af6c:	2340      	movs	r3, #64	; 0x40
 800af6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800af74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af78:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800af7a:	2340      	movs	r3, #64	; 0x40
 800af7c:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800af7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800af82:	2104      	movs	r1, #4
 800af84:	4618      	mov	r0, r3
 800af86:	f7fb fa87 	bl	8006498 <HAL_RCC_ClockConfig>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800af90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <SystemClock_Config+0xec>
  {
    Error_Handler();
 800af98:	f000 f9fa 	bl	800b390 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800af9c:	bf00      	nop
 800af9e:	3778      	adds	r7, #120	; 0x78
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	58000400 	.word	0x58000400
 800afa8:	58024800 	.word	0x58024800

0800afac <ADC_Config>:
  * @brief  ADC configuration
  * @param  None
  * @retval None
  */
static void ADC_Config(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	; 0x28
 800afb0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef   sConfig;
  ADC_MultiModeTypeDef     MultiModeInit;

  /* Configuration of ADC (master) init structure: ADC parameters and regular group */
  AdcHandle_master.Instance = ADCx;
 800afb2:	4b5c      	ldr	r3, [pc, #368]	; (800b124 <ADC_Config+0x178>)
 800afb4:	4a5c      	ldr	r2, [pc, #368]	; (800b128 <ADC_Config+0x17c>)
 800afb6:	601a      	str	r2, [r3, #0]

  if (HAL_ADC_DeInit(&AdcHandle_master) != HAL_OK)
 800afb8:	485a      	ldr	r0, [pc, #360]	; (800b124 <ADC_Config+0x178>)
 800afba:	f7f6 f96f 	bl	800129c <HAL_ADC_DeInit>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <ADC_Config+0x1c>
  {
    /* ADC initialization error */
    Error_Handler();
 800afc4:	f000 f9e4 	bl	800b390 <Error_Handler>
  }
  AdcHandle_slave.Instance = ADCy;
 800afc8:	4b58      	ldr	r3, [pc, #352]	; (800b12c <ADC_Config+0x180>)
 800afca:	4a59      	ldr	r2, [pc, #356]	; (800b130 <ADC_Config+0x184>)
 800afcc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_DeInit(&AdcHandle_slave) != HAL_OK)
 800afce:	4857      	ldr	r0, [pc, #348]	; (800b12c <ADC_Config+0x180>)
 800afd0:	f7f6 f964 	bl	800129c <HAL_ADC_DeInit>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <ADC_Config+0x32>
  {
    /* ADC initialization error */
    Error_Handler();
 800afda:	f000 f9d9 	bl	800b390 <Error_Handler>
}

  AdcHandle_master.Init.ClockPrescaler           = ADC_CLOCK_ASYNC_DIV2;            /* Asynchronous clock mode, input ADC clock divided by 2*/
 800afde:	4b51      	ldr	r3, [pc, #324]	; (800b124 <ADC_Config+0x178>)
 800afe0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800afe4:	605a      	str	r2, [r3, #4]
  AdcHandle_master.Init.Resolution               = ADC_RESOLUTION_16B;              /* 16-bit resolution for converted data */
 800afe6:	4b4f      	ldr	r3, [pc, #316]	; (800b124 <ADC_Config+0x178>)
 800afe8:	2200      	movs	r2, #0
 800afea:	609a      	str	r2, [r3, #8]
  AdcHandle_master.Init.ScanConvMode             = DISABLE;                         /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 800afec:	4b4d      	ldr	r3, [pc, #308]	; (800b124 <ADC_Config+0x178>)
 800afee:	2200      	movs	r2, #0
 800aff0:	60da      	str	r2, [r3, #12]
  AdcHandle_master.Init.EOCSelection             = ADC_EOC_SINGLE_CONV;             /* EOC flag picked-up to indicate conversion end */
 800aff2:	4b4c      	ldr	r3, [pc, #304]	; (800b124 <ADC_Config+0x178>)
 800aff4:	2204      	movs	r2, #4
 800aff6:	611a      	str	r2, [r3, #16]
  AdcHandle_master.Init.LowPowerAutoWait         = DISABLE;                         /* Auto-delayed conversion feature disabled */
 800aff8:	4b4a      	ldr	r3, [pc, #296]	; (800b124 <ADC_Config+0x178>)
 800affa:	2200      	movs	r2, #0
 800affc:	751a      	strb	r2, [r3, #20]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ContinuousConvMode       = DISABLE;                         /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 800affe:	4b49      	ldr	r3, [pc, #292]	; (800b124 <ADC_Config+0x178>)
 800b000:	2200      	movs	r2, #0
 800b002:	755a      	strb	r2, [r3, #21]
#else
  AdcHandle_master.Init.ContinuousConvMode       = ENABLE;                          /* Continuous mode to have maximum conversion speed (no delay between conversions) */
#endif
  AdcHandle_master.Init.NbrOfConversion          = 1;                               /* Parameter discarded because sequencer is disabled */
 800b004:	4b47      	ldr	r3, [pc, #284]	; (800b124 <ADC_Config+0x178>)
 800b006:	2201      	movs	r2, #1
 800b008:	619a      	str	r2, [r3, #24]
  AdcHandle_master.Init.DiscontinuousConvMode    = DISABLE;                         /* Parameter discarded because sequencer is disabled */
 800b00a:	4b46      	ldr	r3, [pc, #280]	; (800b124 <ADC_Config+0x178>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	771a      	strb	r2, [r3, #28]
  AdcHandle_master.Init.NbrOfDiscConversion      = 1;                               /* Parameter discarded because sequencer is disabled */
 800b010:	4b44      	ldr	r3, [pc, #272]	; (800b124 <ADC_Config+0x178>)
 800b012:	2201      	movs	r2, #1
 800b014:	621a      	str	r2, [r3, #32]
#if defined(ADC_TRIGGER_FROM_TIMER)
  AdcHandle_master.Init.ExternalTrigConv         = ADC_EXTERNALTRIG_T3_TRGO;        /* Timer 3 external event triggering the conversion */
 800b016:	4b43      	ldr	r3, [pc, #268]	; (800b124 <ADC_Config+0x178>)
 800b018:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800b01c:	625a      	str	r2, [r3, #36]	; 0x24
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800b01e:	4b41      	ldr	r3, [pc, #260]	; (800b124 <ADC_Config+0x178>)
 800b020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b024:	629a      	str	r2, [r3, #40]	; 0x28
#else
  AdcHandle_master.Init.ExternalTrigConv         = ADC_SOFTWARE_START;              /* Software start to trigger the 1st conversion manually, without external event */
  AdcHandle_master.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_NONE;   /* Parameter discarded because trigger of conversion by software start (no external event) */
#endif
  AdcHandle_master.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR; /* DMA circular mode selected */
 800b026:	4b3f      	ldr	r3, [pc, #252]	; (800b124 <ADC_Config+0x178>)
 800b028:	2203      	movs	r2, #3
 800b02a:	62da      	str	r2, [r3, #44]	; 0x2c
  AdcHandle_master.Init.Overrun                  = ADC_OVR_DATA_OVERWRITTEN;        /* DR register is overwritten with the last conversion result in case of overrun */
 800b02c:	4b3d      	ldr	r3, [pc, #244]	; (800b124 <ADC_Config+0x178>)
 800b02e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
  AdcHandle_master.Init.OversamplingMode         = DISABLE;                         /* No oversampling */
 800b034:	4b3b      	ldr	r3, [pc, #236]	; (800b124 <ADC_Config+0x178>)
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (HAL_ADC_Init(&AdcHandle_master) != HAL_OK)
 800b03c:	4839      	ldr	r0, [pc, #228]	; (800b124 <ADC_Config+0x178>)
 800b03e:	f7f5 ff8b 	bl	8000f58 <HAL_ADC_Init>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <ADC_Config+0xa0>
  {
    /* ADC initialization error */
    Error_Handler();
 800b048:	f000 f9a2 	bl	800b390 <Error_Handler>
  }

  /* Configuration of ADC (slave) init structure: ADC parameters and regular group */
  AdcHandle_slave.Instance = ADCy;
 800b04c:	4b37      	ldr	r3, [pc, #220]	; (800b12c <ADC_Config+0x180>)
 800b04e:	4a38      	ldr	r2, [pc, #224]	; (800b130 <ADC_Config+0x184>)
 800b050:	601a      	str	r2, [r3, #0]

  /* Same configuration as ADC master, with continuous mode and external      */
  /* trigger disabled since ADC master is triggering the ADC slave            */
  /* conversions                                                              */
  AdcHandle_slave.Init = AdcHandle_master.Init;
 800b052:	4b36      	ldr	r3, [pc, #216]	; (800b12c <ADC_Config+0x180>)
 800b054:	4a33      	ldr	r2, [pc, #204]	; (800b124 <ADC_Config+0x178>)
 800b056:	3304      	adds	r3, #4
 800b058:	1d11      	adds	r1, r2, #4
 800b05a:	2248      	movs	r2, #72	; 0x48
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fcaf 	bl	800b9c0 <memcpy>
  AdcHandle_slave.Init.ContinuousConvMode    = DISABLE;
 800b062:	4b32      	ldr	r3, [pc, #200]	; (800b12c <ADC_Config+0x180>)
 800b064:	2200      	movs	r2, #0
 800b066:	755a      	strb	r2, [r3, #21]
  AdcHandle_slave.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 800b068:	4b30      	ldr	r3, [pc, #192]	; (800b12c <ADC_Config+0x180>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_ADC_Init(&AdcHandle_slave) != HAL_OK)
 800b06e:	482f      	ldr	r0, [pc, #188]	; (800b12c <ADC_Config+0x180>)
 800b070:	f7f5 ff72 	bl	8000f58 <HAL_ADC_Init>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <ADC_Config+0xd2>
  {
    /* ADC initialization error */
    Error_Handler();
 800b07a:	f000 f989 	bl	800b390 <Error_Handler>
  /* Configuration of channel on ADC (master) regular group on sequencer rank 1 */
  /* Note: Considering IT occurring after each number of                      */
  /*       "ADCCONVERTEDVALUES_BUFFER_SIZE" ADC conversions (IT by DMA end    */
  /*       of transfer), select sampling time and ADC clock with sufficient   */
  /*       duration to not create an overhead situation in IRQHandler.        */
  sConfig.Channel      = ADCx_CHANNELa;                /* Sampled channel number */
 800b07e:	4b2d      	ldr	r3, [pc, #180]	; (800b134 <ADC_Config+0x188>)
 800b080:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;          /* Rank of sampled channel number ADCx_CHANNEL */
 800b082:	2306      	movs	r3, #6
 800b084:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;    /* Minimum sampling time */
 800b086:	2301      	movs	r3, #1
 800b088:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;            /* Single-ended input channel */
 800b08a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b08e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;             /* No offset subtraction */
 800b090:	2304      	movs	r3, #4
 800b092:	61fb      	str	r3, [r7, #28]
  sConfig.Offset = 0;                                 /* Parameter discarded because offset correction is disabled */
 800b094:	2300      	movs	r3, #0
 800b096:	623b      	str	r3, [r7, #32]

  if (HAL_ADC_ConfigChannel(&AdcHandle_master, &sConfig) != HAL_OK)
 800b098:	f107 030c 	add.w	r3, r7, #12
 800b09c:	4619      	mov	r1, r3
 800b09e:	4821      	ldr	r0, [pc, #132]	; (800b124 <ADC_Config+0x178>)
 800b0a0:	f7f6 fcc0 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <ADC_Config+0x102>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800b0aa:	f000 f971 	bl	800b390 <Error_Handler>
  }

  /* Configuration of channel on ADC (slave) regular group on sequencer rank 1 */
  /* Same channel as ADCx for dual mode interleaved: both ADC are converting   */
  /* the same channel.                                                         */
  sConfig.Channel = ADCy_CHANNELa;
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <ADC_Config+0x18c>)
 800b0b0:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&AdcHandle_slave, &sConfig) != HAL_OK)
 800b0b2:	f107 030c 	add.w	r3, r7, #12
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	481c      	ldr	r0, [pc, #112]	; (800b12c <ADC_Config+0x180>)
 800b0ba:	f7f6 fcb3 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <ADC_Config+0x11c>
  {
    /* Channel Configuration Error */
    Error_Handler();
 800b0c4:	f000 f964 	bl	800b390 <Error_Handler>
  }

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle_master, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800b0c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b0cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0d0:	4814      	ldr	r0, [pc, #80]	; (800b124 <ADC_Config+0x178>)
 800b0d2:	f7f7 fbab 	bl	800282c <HAL_ADCEx_Calibration_Start>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <ADC_Config+0x134>
  {
    /* Calibration Error */
    Error_Handler();
 800b0dc:	f000 f958 	bl	800b390 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&AdcHandle_slave, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800b0e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b0e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0e8:	4810      	ldr	r0, [pc, #64]	; (800b12c <ADC_Config+0x180>)
 800b0ea:	f7f7 fb9f 	bl	800282c <HAL_ADCEx_Calibration_Start>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <ADC_Config+0x14c>
  {
    /* Calibration Error */
    Error_Handler();
 800b0f4:	f000 f94c 	bl	800b390 <Error_Handler>
  }

  /* Configuration of multimode */
  /* Multimode parameters settings and set ADCy (slave) under control of      */
  /* ADCx (master).                                                           */
  MultiModeInit.Mode = ADC_DUALMODE_INTERL;
 800b0f8:	2307      	movs	r3, #7
 800b0fa:	603b      	str	r3, [r7, #0]
  MultiModeInit.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;  /* ADC and DMA configured in resolution 32 bits to match with both ADC master and slave resolution */
 800b0fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b100:	607b      	str	r3, [r7, #4]
  MultiModeInit.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800b102:	2300      	movs	r3, #0
 800b104:	60bb      	str	r3, [r7, #8]

  if (HAL_ADCEx_MultiModeConfigChannel(&AdcHandle_master, &MultiModeInit) != HAL_OK)
 800b106:	463b      	mov	r3, r7
 800b108:	4619      	mov	r1, r3
 800b10a:	4806      	ldr	r0, [pc, #24]	; (800b124 <ADC_Config+0x178>)
 800b10c:	f7f7 fcd4 	bl	8002ab8 <HAL_ADCEx_MultiModeConfigChannel>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <ADC_Config+0x16e>
  {
    /* Multimode Configuration Error */
    Error_Handler();
 800b116:	f000 f93b 	bl	800b390 <Error_Handler>
  }

}
 800b11a:	bf00      	nop
 800b11c:	3728      	adds	r7, #40	; 0x28
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	240000a0 	.word	0x240000a0
 800b128:	40022000 	.word	0x40022000
 800b12c:	24000104 	.word	0x24000104
 800b130:	40022100 	.word	0x40022100
 800b134:	4b840000 	.word	0x4b840000
 800b138:	4fb80000 	.word	0x4fb80000

0800b13c <TIM_Config>:
  * @brief  TIM configuration
  * @param  None
  * @retval None
  */
static void TIM_Config(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08e      	sub	sp, #56	; 0x38
 800b140:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef master_timer_config;
  RCC_ClkInitTypeDef clk_init_struct = {0};       /* Temporary variable to retrieve RCC clock configuration */
 800b142:	1d3b      	adds	r3, r7, #4
 800b144:	2220      	movs	r2, #32
 800b146:	2100      	movs	r1, #0
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fc05 	bl	800b958 <memset>
  uint32_t latency;                               /* Temporary variable to retrieve Flash Latency */

  uint32_t timer_clock_frequency = 0;             /* Timer clock frequency */
 800b14e:	2300      	movs	r3, #0
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t timer_prescaler = 0;                   /* Time base prescaler to have timebase aligned on minimum frequency possible */
 800b152:	2300      	movs	r3, #0
 800b154:	633b      	str	r3, [r7, #48]	; 0x30
  /* - TIMER_FREQUENCY_RANGE_MIN: timer minimum frequency possible            */
  /*   (unit: Hz).                                                            */
  /* Note: Refer to comments at these literals definition for more details.   */

  /* Retrieve timer clock source frequency */
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800b156:	463a      	mov	r2, r7
 800b158:	1d3b      	adds	r3, r7, #4
 800b15a:	4611      	mov	r1, r2
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fb fd27 	bl	8006bb0 <HAL_RCC_GetClockConfig>
  /* If APB1 prescaler is different of 1, timers have a factor x2 on their    */
  /* clock source.                                                            */
  if (clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d103      	bne.n	800b170 <TIM_Config+0x34>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800b168:	f7fb fcf6 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 800b16c:	6378      	str	r0, [r7, #52]	; 0x34
 800b16e:	e004      	b.n	800b17a <TIM_Config+0x3e>
  }
  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() *2;
 800b170:	f7fb fcf2 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 800b174:	4603      	mov	r3, r0
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Timer prescaler calculation */
  /* (computation for timer 16 bits, additional + 1 to round the prescaler up) */
  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17c:	085b      	lsrs	r3, r3, #1
 800b17e:	4a1f      	ldr	r2, [pc, #124]	; (800b1fc <TIM_Config+0xc0>)
 800b180:	fba2 2303 	umull	r2, r3, r2, r3
 800b184:	0b9b      	lsrs	r3, r3, #14
 800b186:	3301      	adds	r3, #1
 800b188:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set timer instance */
  TimHandle.Instance = TIMx;
 800b18a:	4b1d      	ldr	r3, [pc, #116]	; (800b200 <TIM_Config+0xc4>)
 800b18c:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <TIM_Config+0xc8>)
 800b18e:	601a      	str	r2, [r3, #0]

  /* Configure timer parameters */
  TimHandle.Init.Period            = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b196:	fb02 f303 	mul.w	r3, r2, r3
 800b19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4a17      	ldr	r2, [pc, #92]	; (800b200 <TIM_Config+0xc4>)
 800b1a4:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler         = (timer_prescaler - 1);
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	4a15      	ldr	r2, [pc, #84]	; (800b200 <TIM_Config+0xc4>)
 800b1ac:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800b1ae:	4b14      	ldr	r3, [pc, #80]	; (800b200 <TIM_Config+0xc4>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800b1b4:	4b12      	ldr	r3, [pc, #72]	; (800b200 <TIM_Config+0xc4>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0x0;
 800b1ba:	4b11      	ldr	r3, [pc, #68]	; (800b200 <TIM_Config+0xc4>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800b1c0:	480f      	ldr	r0, [pc, #60]	; (800b200 <TIM_Config+0xc4>)
 800b1c2:	f7fe fa35 	bl	8009630 <HAL_TIM_Base_Init>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <TIM_Config+0x94>
  {
    /* Timer initialization Error */
    Error_Handler();
 800b1cc:	f000 f8e0 	bl	800b390 <Error_Handler>
  }

  /* Timer TRGO selection */
  master_timer_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b1d0:	2320      	movs	r3, #32
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24
  master_timer_config.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  master_timer_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandle, &master_timer_config) != HAL_OK)
 800b1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4807      	ldr	r0, [pc, #28]	; (800b200 <TIM_Config+0xc4>)
 800b1e4:	f7fe fb86 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <TIM_Config+0xb6>
  {
    /* Timer TRGO selection Error */
    Error_Handler();
 800b1ee:	f000 f8cf 	bl	800b390 <Error_Handler>
  }

}
 800b1f2:	bf00      	nop
 800b1f4:	3738      	adds	r7, #56	; 0x38
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	80010003 	.word	0x80010003
 800b200:	24000168 	.word	0x24000168
 800b204:	40000400 	.word	0x40000400

0800b208 <HAL_ADC_ConvCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800b208:	b480      	push	{r7}
 800b20a:	b089      	sub	sp, #36	; 0x24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	4b26      	ldr	r3, [pc, #152]	; (800b2ac <HAL_ADC_ConvCpltCallback+0xa4>)
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b218:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd1d      	ble.n	800b25c <HAL_ADC_ConvCpltCallback+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f003 021f 	and.w	r2, r3, #31
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	4413      	add	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b230:	f3bf 8f4f 	dsb	sy
}
 800b234:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b236:	4a1e      	ldr	r2, [pc, #120]	; (800b2b0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3320      	adds	r3, #32
 800b242:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	3b20      	subs	r3, #32
 800b248:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dcf2      	bgt.n	800b236 <HAL_ADC_ConvCpltCallback+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b250:	f3bf 8f4f 	dsb	sy
}
 800b254:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b256:	f3bf 8f6f 	isb	sy
}
 800b25a:	bf00      	nop
}
 800b25c:	bf00      	nop

   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[ADCCONVERTEDVALUES_BUFFER_SIZE/2], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if defined(ADC_TRIGGER_FROM_TIMER)
  uint32_t tmp_index = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800b262:	2380      	movs	r3, #128	; 0x80
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	e015      	b.n	800b294 <HAL_ADC_ConvCpltCallback+0x8c>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800b268:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <HAL_ADC_ConvCpltCallback+0xac>)
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b270:	b299      	uxth	r1, r3
 800b272:	4a11      	ldr	r2, [pc, #68]	; (800b2b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800b27a:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <HAL_ADC_ConvCpltCallback+0xac>)
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b282:	0c1b      	lsrs	r3, r3, #16
 800b284:	b299      	uxth	r1, r3
 800b286:	4a0d      	ldr	r2, [pc, #52]	; (800b2bc <HAL_ADC_ConvCpltCallback+0xb4>)
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index < ADCCONVERTEDVALUES_BUFFER_SIZE; tmp_index++)
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	3301      	adds	r3, #1
 800b292:	61fb      	str	r3, [r7, #28]
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2bff      	cmp	r3, #255	; 0xff
 800b298:	d9e6      	bls.n	800b268 <HAL_ADC_ConvCpltCallback+0x60>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  /* Set variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = SET;
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	701a      	strb	r2, [r3, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	3724      	adds	r7, #36	; 0x24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	240003c0 	.word	0x240003c0
 800b2b0:	e000ed00 	.word	0xe000ed00
 800b2b4:	240001c0 	.word	0x240001c0
 800b2b8:	240005c0 	.word	0x240005c0
 800b2bc:	240007c0 	.word	0x240007c0
 800b2c0:	240009c0 	.word	0x240009c0

0800b2c4 <HAL_ADC_ConvHalfCpltCallback>:
  *         load, the output buffer filled up by the DMA is post-processed only when
  *         ADC_TRIGGER_FROM_TIMER is enabled.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b089      	sub	sp, #36	; 0x24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	4b26      	ldr	r3, [pc, #152]	; (800b368 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d4:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd1d      	ble.n	800b318 <HAL_ADC_ConvHalfCpltCallback+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	f003 021f 	and.w	r2, r3, #31
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b2ec:	f3bf 8f4f 	dsb	sy
}
 800b2f0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	; (800b36c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3320      	adds	r3, #32
 800b2fe:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	3b20      	subs	r3, #32
 800b304:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dcf2      	bgt.n	800b2f2 <HAL_ADC_ConvHalfCpltCallback+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b30c:	f3bf 8f4f 	dsb	sy
}
 800b310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b312:	f3bf 8f6f 	isb	sy
}
 800b316:	bf00      	nop
}
 800b318:	bf00      	nop
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*ADCCONVERTEDVALUES_BUFFER_SIZE/2);

#if(defined(ADC_TRIGGER_FROM_TIMER))
  uint32_t tmp_index = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]

  /* For the purpose of this example, dispatch dual conversion values         */
  /* into 2 arrays corresponding to each ADC conversion values.               */
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800b31e:	2300      	movs	r3, #0
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	e015      	b.n	800b350 <HAL_ADC_ConvHalfCpltCallback+0x8c>
  {
    aADCxConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCMASTER_RESULT(aADCDualConvertedValues[tmp_index]);
 800b324:	4a10      	ldr	r2, [pc, #64]	; (800b368 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b32c:	b299      	uxth	r1, r3
 800b32e:	4a10      	ldr	r2, [pc, #64]	; (800b370 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    aADCyConvertedValues[tmp_index] = (uint16_t) COMPUTATION_DUALMODEINTERLEAVED_ADCSLAVE_RESULT(aADCDualConvertedValues[tmp_index]);
 800b336:	4a0c      	ldr	r2, [pc, #48]	; (800b368 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b33e:	0c1b      	lsrs	r3, r3, #16
 800b340:	b299      	uxth	r1, r3
 800b342:	4a0c      	ldr	r2, [pc, #48]	; (800b374 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (tmp_index = 0; tmp_index < (ADCCONVERTEDVALUES_BUFFER_SIZE/2); tmp_index++)
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	3301      	adds	r3, #1
 800b34e:	61fb      	str	r3, [r7, #28]
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	2b7f      	cmp	r3, #127	; 0x7f
 800b354:	d9e6      	bls.n	800b324 <HAL_ADC_ConvHalfCpltCallback+0x60>
  }
#endif /* ADC_TRIGGER_FROM_TIMER */

  /* Reset variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = RESET;
 800b356:	4b08      	ldr	r3, [pc, #32]	; (800b378 <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
}
 800b35c:	bf00      	nop
 800b35e:	3724      	adds	r7, #36	; 0x24
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	240001c0 	.word	0x240001c0
 800b36c:	e000ed00 	.word	0xe000ed00
 800b370:	240005c0 	.word	0x240005c0
 800b374:	240007c0 	.word	0x240007c0
 800b378:	240009c0 	.word	0x240009c0

0800b37c <HAL_ADC_ErrorCallback>:
  *         avoid ending up in the infinite loop of Error_Handler(), no call to this
  *         latter is done in case of HAL_ADC_ERROR_OVR error.
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
#if !defined(ADC_TRIGGER_FROM_TIMER)
  /* In case of ADC error, call main error handler */
  if (HAL_IS_BIT_CLR(hadc->ErrorCode, HAL_ADC_ERROR_OVR))
  {
#endif /* ADC_TRIGGER_FROM_TIMER */
  Error_Handler();
 800b384:	f000 f804 	bl	800b390 <Error_Handler>
#if !defined(ADC_TRIGGER_FROM_TIMER)
  }
#endif /* ADC_TRIGGER_FROM_TIMER */
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	af00      	add	r7, sp, #0

  /* In case of error, LED3 is toggling at a frequency of 1Hz */
  while(1)
  {
    /* Toggle LED3 */
    BSP_LED_Toggle(LED3);
 800b394:	2002      	movs	r0, #2
 800b396:	f7f5 fa43 	bl	8000820 <BSP_LED_Toggle>
    HAL_Delay(500);
 800b39a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b39e:	f7f5 fb79 	bl	8000a94 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 800b3a2:	e7f7      	b.n	800b394 <Error_Handler+0x4>

0800b3a4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800b3aa:	f7f7 fda5 	bl	8002ef8 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800b3b6:	231f      	movs	r3, #31
 800b3b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800b3d2:	2387      	movs	r3, #135	; 0x87
 800b3d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800b3da:	463b      	mov	r3, r7
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f7 fdc3 	bl	8002f68 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800b3e2:	2004      	movs	r0, #4
 800b3e4:	f7f7 fda0 	bl	8002f28 <HAL_MPU_Enable>
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800b3f6:	4b34      	ldr	r3, [pc, #208]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d11b      	bne.n	800b43a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800b402:	f3bf 8f4f 	dsb	sy
}
 800b406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b408:	f3bf 8f6f 	isb	sy
}
 800b40c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800b40e:	4b2e      	ldr	r3, [pc, #184]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b410:	2200      	movs	r2, #0
 800b412:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800b416:	f3bf 8f4f 	dsb	sy
}
 800b41a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b41c:	f3bf 8f6f 	isb	sy
}
 800b420:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800b422:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	4a28      	ldr	r2, [pc, #160]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b42c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b42e:	f3bf 8f4f 	dsb	sy
}
 800b432:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b434:	f3bf 8f6f 	isb	sy
}
 800b438:	e000      	b.n	800b43c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800b43a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800b43c:	4b22      	ldr	r3, [pc, #136]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d138      	bne.n	800b4ba <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800b448:	4b1f      	ldr	r3, [pc, #124]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800b450:	f3bf 8f4f 	dsb	sy
}
 800b454:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800b456:	4b1c      	ldr	r3, [pc, #112]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b45c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	0b5b      	lsrs	r3, r3, #13
 800b462:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b466:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b470:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800b47a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b480:	4911      	ldr	r1, [pc, #68]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b482:	4313      	orrs	r3, r2
 800b484:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	1e5a      	subs	r2, r3, #1
 800b48c:	607a      	str	r2, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1ef      	bne.n	800b472 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	1e5a      	subs	r2, r3, #1
 800b496:	60ba      	str	r2, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e5      	bne.n	800b468 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800b49c:	f3bf 8f4f 	dsb	sy
}
 800b4a0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800b4a2:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	4a08      	ldr	r2, [pc, #32]	; (800b4c8 <CPU_CACHE_Enable+0xd8>)
 800b4a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b4ae:	f3bf 8f4f 	dsb	sy
}
 800b4b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b4b4:	f3bf 8f6f 	isb	sy
}
 800b4b8:	e000      	b.n	800b4bc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800b4ba:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	e000ed00 	.word	0xe000ed00

0800b4cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b4d0:	b672      	cpsid	i
}
 800b4d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b4d4:	e7fe      	b.n	800b4d4 <Error_Handler+0x8>
	...

0800b4d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b0ba      	sub	sp, #232	; 0xe8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
 800b4ec:	60da      	str	r2, [r3, #12]
 800b4ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b4f0:	f107 0310 	add.w	r3, r7, #16
 800b4f4:	22c0      	movs	r2, #192	; 0xc0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fa2d 	bl	800b958 <memset>
  if(huart->Instance==USART3)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a2b      	ldr	r2, [pc, #172]	; (800b5b0 <HAL_UART_MspInit+0xd8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d14e      	bne.n	800b5a6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b508:	f04f 0202 	mov.w	r2, #2
 800b50c:	f04f 0300 	mov.w	r3, #0
 800b510:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b514:	2300      	movs	r3, #0
 800b516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b51a:	f107 0310 	add.w	r3, r7, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fb fb88 	bl	8006c34 <HAL_RCCEx_PeriphCLKConfig>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800b52a:	f7ff ffcf 	bl	800b4cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b52e:	4b21      	ldr	r3, [pc, #132]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b534:	4a1f      	ldr	r2, [pc, #124]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b53a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b53e:	4b1d      	ldr	r3, [pc, #116]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b54c:	4b19      	ldr	r3, [pc, #100]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b54e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b552:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b554:	f043 0308 	orr.w	r3, r3, #8
 800b558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b55c:	4b15      	ldr	r3, [pc, #84]	; (800b5b4 <HAL_UART_MspInit+0xdc>)
 800b55e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	60bb      	str	r3, [r7, #8]
 800b568:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800b56a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b56e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b572:	2302      	movs	r3, #2
 800b574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b578:	2300      	movs	r3, #0
 800b57a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b57e:	2300      	movs	r3, #0
 800b580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b584:	2307      	movs	r3, #7
 800b586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b58a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b58e:	4619      	mov	r1, r3
 800b590:	4809      	ldr	r0, [pc, #36]	; (800b5b8 <HAL_UART_MspInit+0xe0>)
 800b592:	f7f9 ffbb 	bl	800550c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b596:	2200      	movs	r2, #0
 800b598:	2100      	movs	r1, #0
 800b59a:	2027      	movs	r0, #39	; 0x27
 800b59c:	f7f7 fc69 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b5a0:	2027      	movs	r0, #39	; 0x27
 800b5a2:	f7f7 fc80 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b5a6:	bf00      	nop
 800b5a8:	37e8      	adds	r7, #232	; 0xe8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	40004800 	.word	0x40004800
 800b5b4:	58024400 	.word	0x58024400
 800b5b8:	58020c00 	.word	0x58020c00

0800b5bc <HAL_ADC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	; 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  DmaHandle;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable clock of GPIO associated to the peripheral channels */
  ADCx_CHANNELa_GPIO_CLK_ENABLE();
 800b5c4:	4b42      	ldr	r3, [pc, #264]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ca:	4a41      	ldr	r2, [pc, #260]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5cc:	f043 0301 	orr.w	r3, r3, #1
 800b5d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5d4:	4b3e      	ldr	r3, [pc, #248]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	693b      	ldr	r3, [r7, #16]
  
  /* Enable clock of ADCx peripheral */
  ADCx_CLK_ENABLE();
 800b5e2:	4b3b      	ldr	r3, [pc, #236]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5e8:	4a39      	ldr	r2, [pc, #228]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5ea:	f043 0320 	orr.w	r3, r3, #32
 800b5ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b5f2:	4b37      	ldr	r3, [pc, #220]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b5f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_CLKP);
 800b600:	4b33      	ldr	r3, [pc, #204]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b604:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b608:	4a31      	ldr	r2, [pc, #196]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b60a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60e:	6593      	str	r3, [r2, #88]	; 0x58
  

  if (hadc->Instance == ADCx)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2f      	ldr	r2, [pc, #188]	; (800b6d4 <HAL_ADC_MspInit+0x118>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d14e      	bne.n	800b6b8 <HAL_ADC_MspInit+0xfc>
  { 
    /* Enable clock of DMA associated to the peripheral */
    ADCx_DMA_CLK_ENABLE();
 800b61a:	4b2d      	ldr	r3, [pc, #180]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b61c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b620:	4a2b      	ldr	r2, [pc, #172]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b62a:	4b29      	ldr	r3, [pc, #164]	; (800b6d0 <HAL_ADC_MspInit+0x114>)
 800b62c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	60bb      	str	r3, [r7, #8]
 800b636:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/ 
    /* Configure GPIO pins of the selected ADC channels */
    GPIO_InitStruct.Pin = ADCx_CHANNELa_PIN;
 800b638:	2310      	movs	r3, #16
 800b63a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b63c:	2303      	movs	r3, #3
 800b63e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADCx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 800b644:	f107 0314 	add.w	r3, r7, #20
 800b648:	4619      	mov	r1, r3
 800b64a:	4823      	ldr	r0, [pc, #140]	; (800b6d8 <HAL_ADC_MspInit+0x11c>)
 800b64c:	f7f9 ff5e 	bl	800550c <HAL_GPIO_Init>
    /*       the same clock domain, same GPIO pins (interleaved on the same     */
    /*       channel) and same DMA as ADC master.                               */
  
    /*##-3- Configure the DMA ##################################################*/
    /* Configure DMA parameters (ADC master) */
    DmaHandle.Instance = ADCx_DMA;
 800b650:	4b22      	ldr	r3, [pc, #136]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b652:	4a23      	ldr	r2, [pc, #140]	; (800b6e0 <HAL_ADC_MspInit+0x124>)
 800b654:	601a      	str	r2, [r3, #0]

    DmaHandle.Init.Request             = DMA_REQUEST_ADC1;
 800b656:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b658:	2209      	movs	r2, #9
 800b65a:	605a      	str	r2, [r3, #4]
    DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b65c:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
    DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b662:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b664:	2200      	movs	r2, #0
 800b666:	60da      	str	r2, [r3, #12]
    DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800b668:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b66a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b66e:	611a      	str	r2, [r3, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;       /* Transfer from ADC by word to match with ADC configuration: Dual mode, ADC master contains conversion results on data register (32 bits) of ADC master and ADC slave  */
 800b670:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b676:	615a      	str	r2, [r3, #20]
    DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;       /* Transfer to memory by word to match with buffer variable type: word */
 800b678:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b67a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b67e:	619a      	str	r2, [r3, #24]
    DmaHandle.Init.Mode                = DMA_CIRCULAR;              /* DMA in circular mode to match with ADC configuration: DMA continuous requests */
 800b680:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b682:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b686:	61da      	str	r2, [r3, #28]
    DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800b688:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b68a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b68e:	621a      	str	r2, [r3, #32]
  
   /* Deinitialize  & Initialize the DMA for new transfer */
    HAL_DMA_DeInit(&DmaHandle);
 800b690:	4812      	ldr	r0, [pc, #72]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b692:	f7f8 f809 	bl	80036a8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&DmaHandle);
 800b696:	4811      	ldr	r0, [pc, #68]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b698:	f7f7 fcaa 	bl	8002ff0 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the ADC handle */
    __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a0f      	ldr	r2, [pc, #60]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b6a0:	64da      	str	r2, [r3, #76]	; 0x4c
 800b6a2:	4a0e      	ldr	r2, [pc, #56]	; (800b6dc <HAL_ADC_MspInit+0x120>)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6393      	str	r3, [r2, #56]	; 0x38
  
    /*##-4- Configure the NVIC #################################################*/

     /* NVIC configuration for DMA interrupt (transfer completion or error) */
    /* Priority: high-priority */
    HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 1, 0);
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	200c      	movs	r0, #12
 800b6ae:	f7f7 fbe0 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 800b6b2:	200c      	movs	r0, #12
 800b6b4:	f7f7 fbf7 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  }
  
  /* NVIC configuration for ADC interrupt */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(ADCx_IRQn, 0, 0);
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	2012      	movs	r0, #18
 800b6be:	f7f7 fbd8 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
 800b6c2:	2012      	movs	r0, #18
 800b6c4:	f7f7 fbef 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  
  //HAL_NVIC_SetPriority(ADCy_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(ADCy_IRQn);

}
 800b6c8:	bf00      	nop
 800b6ca:	3728      	adds	r7, #40	; 0x28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	40022000 	.word	0x40022000
 800b6d8:	58020000 	.word	0x58020000
 800b6dc:	24000abc 	.word	0x24000abc
 800b6e0:	40020028 	.word	0x40020028

0800b6e4 <HAL_ADC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
  { 
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  ADCx_FORCE_RESET();
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <HAL_ADC_MspDeInit+0x58>)
 800b6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f2:	4a12      	ldr	r2, [pc, #72]	; (800b73c <HAL_ADC_MspDeInit+0x58>)
 800b6f4:	f043 0320 	orr.w	r3, r3, #32
 800b6f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  ADCx_RELEASE_RESET();
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <HAL_ADC_MspDeInit+0x58>)
 800b6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b702:	4a0e      	ldr	r2, [pc, #56]	; (800b73c <HAL_ADC_MspDeInit+0x58>)
 800b704:	f023 0320 	bic.w	r3, r3, #32
 800b708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize GPIO pin of the selected ADC channel */
  HAL_GPIO_DeInit(ADCx_CHANNELa_GPIO_PORT, ADCx_CHANNELa_PIN);
 800b70c:	2110      	movs	r1, #16
 800b70e:	480c      	ldr	r0, [pc, #48]	; (800b740 <HAL_ADC_MspDeInit+0x5c>)
 800b710:	f7fa f8ac 	bl	800586c <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA ####################################################*/
  /* De-Initialize the DMA associated to the peripheral */
  if(hadc->DMA_Handle != NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <HAL_ADC_MspDeInit+0x42>
  {
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b720:	4618      	mov	r0, r3
 800b722:	f7f7 ffc1 	bl	80036a8 <HAL_DMA_DeInit>
  }
  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(ADCx_DMA_IRQn);
 800b726:	200c      	movs	r0, #12
 800b728:	f7f7 fbcb 	bl	8002ec2 <HAL_NVIC_DisableIRQ>
  
  /* Disable the NVIC configuration for ADC interrupt */
  HAL_NVIC_DisableIRQ(ADCx_IRQn);
 800b72c:	2012      	movs	r0, #18
 800b72e:	f7f7 fbc8 	bl	8002ec2 <HAL_NVIC_DisableIRQ>
}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	58024400 	.word	0x58024400
 800b740:	58020000 	.word	0x58020000

0800b744 <HAL_TIM_Base_MspInit>:
  *          - Enable clock of peripheral
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
  { 
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* TIM peripheral clock enable */
  if (htim->Instance == TIMx)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0b      	ldr	r2, [pc, #44]	; (800b780 <HAL_TIM_Base_MspInit+0x3c>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d10e      	bne.n	800b774 <HAL_TIM_Base_MspInit+0x30>
  {
    TIMx_CLK_ENABLE();
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <HAL_TIM_Base_MspInit+0x40>)
 800b758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b75c:	4a09      	ldr	r2, [pc, #36]	; (800b784 <HAL_TIM_Base_MspInit+0x40>)
 800b75e:	f043 0302 	orr.w	r3, r3, #2
 800b762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <HAL_TIM_Base_MspInit+0x40>)
 800b768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	68fb      	ldr	r3, [r7, #12]
  else
  { 
    /* Error management can be implemented here */
  }

}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	40000400 	.word	0x40000400
 800b784:	58024400 	.word	0x58024400

0800b788 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800b788:	b480      	push	{r7}
 800b78a:	af00      	add	r7, sp, #0
}
 800b78c:	bf00      	nop
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800b796:	b480      	push	{r7}
 800b798:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800b79a:	e7fe      	b.n	800b79a <HardFault_Handler+0x4>

0800b79c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800b7a0:	e7fe      	b.n	800b7a0 <MemManage_Handler+0x4>

0800b7a2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800b7a6:	e7fe      	b.n	800b7a6 <BusFault_Handler+0x4>

0800b7a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800b7ac:	e7fe      	b.n	800b7ac <UsageFault_Handler+0x4>

0800b7ae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	af00      	add	r7, sp, #0
}
 800b7b2:	bf00      	nop
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
}
 800b7c0:	bf00      	nop
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	af00      	add	r7, sp, #0
}
 800b7ce:	bf00      	nop
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800b7dc:	f7f5 f93a 	bl	8000a54 <HAL_IncTick>
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800b7e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b7ec:	f7fa f97b 	bl	8005ae6 <HAL_GPIO_EXTI_IRQHandler>
}
 800b7f0:	bf00      	nop
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <ADC_IRQHandler>:
  */
/* Note: On STM32H7xx, ADC2 IRQ handler is the same as ADC1.                  */
/*       Therefore, expected IRQ handler "ADCy_IRQHandler()" is not present   */
/*       and managed by IRQ handler "ADCx_IRQHandler()".                      */
void ADCx_IRQHandler(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&AdcHandle_master);
 800b7f8:	4803      	ldr	r0, [pc, #12]	; (800b808 <ADC_IRQHandler+0x14>)
 800b7fa:	f7f5 fecf 	bl	800159c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&AdcHandle_slave);
 800b7fe:	4803      	ldr	r0, [pc, #12]	; (800b80c <ADC_IRQHandler+0x18>)
 800b800:	f7f5 fecc 	bl	800159c <HAL_ADC_IRQHandler>
}
 800b804:	bf00      	nop
 800b806:	bd80      	pop	{r7, pc}
 800b808:	240000a0 	.word	0x240000a0
 800b80c:	24000104 	.word	0x24000104

0800b810 <DMA1_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle_master.DMA_Handle);
 800b814:	4b03      	ldr	r3, [pc, #12]	; (800b824 <DMA1_Stream1_IRQHandler+0x14>)
 800b816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f8 fb65 	bl	8003ee8 <HAL_DMA_IRQHandler>
}
 800b81e:	bf00      	nop
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	240000a0 	.word	0x240000a0

0800b828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b830:	4a14      	ldr	r2, [pc, #80]	; (800b884 <_sbrk+0x5c>)
 800b832:	4b15      	ldr	r3, [pc, #84]	; (800b888 <_sbrk+0x60>)
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <_sbrk+0x64>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b844:	4b11      	ldr	r3, [pc, #68]	; (800b88c <_sbrk+0x64>)
 800b846:	4a12      	ldr	r2, [pc, #72]	; (800b890 <_sbrk+0x68>)
 800b848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b84a:	4b10      	ldr	r3, [pc, #64]	; (800b88c <_sbrk+0x64>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4413      	add	r3, r2
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	429a      	cmp	r2, r3
 800b856:	d207      	bcs.n	800b868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b858:	f000 f886 	bl	800b968 <__errno>
 800b85c:	4603      	mov	r3, r0
 800b85e:	220c      	movs	r2, #12
 800b860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b862:	f04f 33ff 	mov.w	r3, #4294967295
 800b866:	e009      	b.n	800b87c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b868:	4b08      	ldr	r3, [pc, #32]	; (800b88c <_sbrk+0x64>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b86e:	4b07      	ldr	r3, [pc, #28]	; (800b88c <_sbrk+0x64>)
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4413      	add	r3, r2
 800b876:	4a05      	ldr	r2, [pc, #20]	; (800b88c <_sbrk+0x64>)
 800b878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b87a:	68fb      	ldr	r3, [r7, #12]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	24080000 	.word	0x24080000
 800b888:	00000400 	.word	0x00000400
 800b88c:	24000b34 	.word	0x24000b34
 800b890:	24000c80 	.word	0x24000c80

0800b894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b894:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b8cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b898:	f7f4 ffec 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b89c:	480c      	ldr	r0, [pc, #48]	; (800b8d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b89e:	490d      	ldr	r1, [pc, #52]	; (800b8d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b8a0:	4a0d      	ldr	r2, [pc, #52]	; (800b8d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b8a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b8a4:	e002      	b.n	800b8ac <LoopCopyDataInit>

0800b8a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b8a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b8a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b8aa:	3304      	adds	r3, #4

0800b8ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b8ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b8ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b8b0:	d3f9      	bcc.n	800b8a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b8b2:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b8b4:	4c0a      	ldr	r4, [pc, #40]	; (800b8e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b8b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b8b8:	e001      	b.n	800b8be <LoopFillZerobss>

0800b8ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b8ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b8bc:	3204      	adds	r2, #4

0800b8be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b8be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b8c0:	d3fb      	bcc.n	800b8ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b8c2:	f000 f857 	bl	800b974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8c6:	f7ff fa79 	bl	800adbc <main>
  bx  lr
 800b8ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b8cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800b8d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b8d4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800b8d8:	0800c344 	.word	0x0800c344
  ldr r2, =_sbss
 800b8dc:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800b8e0:	24000c80 	.word	0x24000c80

0800b8e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b8e4:	e7fe      	b.n	800b8e4 <ADC3_IRQHandler>

0800b8e6 <_vsniprintf_r>:
 800b8e6:	b530      	push	{r4, r5, lr}
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	2c00      	cmp	r4, #0
 800b8ec:	b09b      	sub	sp, #108	; 0x6c
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	da05      	bge.n	800b900 <_vsniprintf_r+0x1a>
 800b8f4:	238b      	movs	r3, #139	; 0x8b
 800b8f6:	6003      	str	r3, [r0, #0]
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	b01b      	add	sp, #108	; 0x6c
 800b8fe:	bd30      	pop	{r4, r5, pc}
 800b900:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b904:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b908:	bf14      	ite	ne
 800b90a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b90e:	4623      	moveq	r3, r4
 800b910:	9302      	str	r3, [sp, #8]
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b918:	9100      	str	r1, [sp, #0]
 800b91a:	9104      	str	r1, [sp, #16]
 800b91c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b920:	4669      	mov	r1, sp
 800b922:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b924:	f000 f9ac 	bl	800bc80 <_svfiprintf_r>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	bfbc      	itt	lt
 800b92c:	238b      	movlt	r3, #139	; 0x8b
 800b92e:	602b      	strlt	r3, [r5, #0]
 800b930:	2c00      	cmp	r4, #0
 800b932:	d0e3      	beq.n	800b8fc <_vsniprintf_r+0x16>
 800b934:	9b00      	ldr	r3, [sp, #0]
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e7df      	b.n	800b8fc <_vsniprintf_r+0x16>

0800b93c <vsniprintf>:
 800b93c:	b507      	push	{r0, r1, r2, lr}
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	4613      	mov	r3, r2
 800b942:	460a      	mov	r2, r1
 800b944:	4601      	mov	r1, r0
 800b946:	4803      	ldr	r0, [pc, #12]	; (800b954 <vsniprintf+0x18>)
 800b948:	6800      	ldr	r0, [r0, #0]
 800b94a:	f7ff ffcc 	bl	800b8e6 <_vsniprintf_r>
 800b94e:	b003      	add	sp, #12
 800b950:	f85d fb04 	ldr.w	pc, [sp], #4
 800b954:	24000068 	.word	0x24000068

0800b958 <memset>:
 800b958:	4402      	add	r2, r0
 800b95a:	4603      	mov	r3, r0
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d100      	bne.n	800b962 <memset+0xa>
 800b960:	4770      	bx	lr
 800b962:	f803 1b01 	strb.w	r1, [r3], #1
 800b966:	e7f9      	b.n	800b95c <memset+0x4>

0800b968 <__errno>:
 800b968:	4b01      	ldr	r3, [pc, #4]	; (800b970 <__errno+0x8>)
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	24000068 	.word	0x24000068

0800b974 <__libc_init_array>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	4d0d      	ldr	r5, [pc, #52]	; (800b9ac <__libc_init_array+0x38>)
 800b978:	4c0d      	ldr	r4, [pc, #52]	; (800b9b0 <__libc_init_array+0x3c>)
 800b97a:	1b64      	subs	r4, r4, r5
 800b97c:	10a4      	asrs	r4, r4, #2
 800b97e:	2600      	movs	r6, #0
 800b980:	42a6      	cmp	r6, r4
 800b982:	d109      	bne.n	800b998 <__libc_init_array+0x24>
 800b984:	4d0b      	ldr	r5, [pc, #44]	; (800b9b4 <__libc_init_array+0x40>)
 800b986:	4c0c      	ldr	r4, [pc, #48]	; (800b9b8 <__libc_init_array+0x44>)
 800b988:	f000 fc6a 	bl	800c260 <_init>
 800b98c:	1b64      	subs	r4, r4, r5
 800b98e:	10a4      	asrs	r4, r4, #2
 800b990:	2600      	movs	r6, #0
 800b992:	42a6      	cmp	r6, r4
 800b994:	d105      	bne.n	800b9a2 <__libc_init_array+0x2e>
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99c:	4798      	blx	r3
 800b99e:	3601      	adds	r6, #1
 800b9a0:	e7ee      	b.n	800b980 <__libc_init_array+0xc>
 800b9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a6:	4798      	blx	r3
 800b9a8:	3601      	adds	r6, #1
 800b9aa:	e7f2      	b.n	800b992 <__libc_init_array+0x1e>
 800b9ac:	0800c33c 	.word	0x0800c33c
 800b9b0:	0800c33c 	.word	0x0800c33c
 800b9b4:	0800c33c 	.word	0x0800c33c
 800b9b8:	0800c340 	.word	0x0800c340

0800b9bc <__retarget_lock_acquire_recursive>:
 800b9bc:	4770      	bx	lr

0800b9be <__retarget_lock_release_recursive>:
 800b9be:	4770      	bx	lr

0800b9c0 <memcpy>:
 800b9c0:	440a      	add	r2, r1
 800b9c2:	4291      	cmp	r1, r2
 800b9c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9c8:	d100      	bne.n	800b9cc <memcpy+0xc>
 800b9ca:	4770      	bx	lr
 800b9cc:	b510      	push	{r4, lr}
 800b9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9d6:	4291      	cmp	r1, r2
 800b9d8:	d1f9      	bne.n	800b9ce <memcpy+0xe>
 800b9da:	bd10      	pop	{r4, pc}

0800b9dc <_free_r>:
 800b9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9de:	2900      	cmp	r1, #0
 800b9e0:	d044      	beq.n	800ba6c <_free_r+0x90>
 800b9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e6:	9001      	str	r0, [sp, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ee:	bfb8      	it	lt
 800b9f0:	18e4      	addlt	r4, r4, r3
 800b9f2:	f000 f8df 	bl	800bbb4 <__malloc_lock>
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ba70 <_free_r+0x94>)
 800b9f8:	9801      	ldr	r0, [sp, #4]
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	b933      	cbnz	r3, 800ba0c <_free_r+0x30>
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6014      	str	r4, [r2, #0]
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba08:	f000 b8da 	b.w	800bbc0 <__malloc_unlock>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d908      	bls.n	800ba22 <_free_r+0x46>
 800ba10:	6825      	ldr	r5, [r4, #0]
 800ba12:	1961      	adds	r1, r4, r5
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf01      	itttt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	1949      	addeq	r1, r1, r5
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	e7ed      	b.n	800b9fe <_free_r+0x22>
 800ba22:	461a      	mov	r2, r3
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b10b      	cbz	r3, 800ba2c <_free_r+0x50>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x46>
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	1855      	adds	r5, r2, r1
 800ba30:	42a5      	cmp	r5, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x70>
 800ba34:	6824      	ldr	r4, [r4, #0]
 800ba36:	4421      	add	r1, r4
 800ba38:	1854      	adds	r4, r2, r1
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	d1e0      	bne.n	800ba02 <_free_r+0x26>
 800ba40:	681c      	ldr	r4, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	440c      	add	r4, r1
 800ba48:	6014      	str	r4, [r2, #0]
 800ba4a:	e7da      	b.n	800ba02 <_free_r+0x26>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x78>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	e7d6      	b.n	800ba02 <_free_r+0x26>
 800ba54:	6825      	ldr	r5, [r4, #0]
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1949      	addeq	r1, r1, r5
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	6054      	str	r4, [r2, #4]
 800ba6a:	e7ca      	b.n	800ba02 <_free_r+0x26>
 800ba6c:	b003      	add	sp, #12
 800ba6e:	bd30      	pop	{r4, r5, pc}
 800ba70:	24000c78 	.word	0x24000c78

0800ba74 <sbrk_aligned>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4e0e      	ldr	r6, [pc, #56]	; (800bab0 <sbrk_aligned+0x3c>)
 800ba78:	460c      	mov	r4, r1
 800ba7a:	6831      	ldr	r1, [r6, #0]
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	b911      	cbnz	r1, 800ba86 <sbrk_aligned+0x12>
 800ba80:	f000 fba6 	bl	800c1d0 <_sbrk_r>
 800ba84:	6030      	str	r0, [r6, #0]
 800ba86:	4621      	mov	r1, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f000 fba1 	bl	800c1d0 <_sbrk_r>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d00a      	beq.n	800baa8 <sbrk_aligned+0x34>
 800ba92:	1cc4      	adds	r4, r0, #3
 800ba94:	f024 0403 	bic.w	r4, r4, #3
 800ba98:	42a0      	cmp	r0, r4
 800ba9a:	d007      	beq.n	800baac <sbrk_aligned+0x38>
 800ba9c:	1a21      	subs	r1, r4, r0
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 fb96 	bl	800c1d0 <_sbrk_r>
 800baa4:	3001      	adds	r0, #1
 800baa6:	d101      	bne.n	800baac <sbrk_aligned+0x38>
 800baa8:	f04f 34ff 	mov.w	r4, #4294967295
 800baac:	4620      	mov	r0, r4
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	24000c7c 	.word	0x24000c7c

0800bab4 <_malloc_r>:
 800bab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab8:	1ccd      	adds	r5, r1, #3
 800baba:	f025 0503 	bic.w	r5, r5, #3
 800babe:	3508      	adds	r5, #8
 800bac0:	2d0c      	cmp	r5, #12
 800bac2:	bf38      	it	cc
 800bac4:	250c      	movcc	r5, #12
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	4607      	mov	r7, r0
 800baca:	db01      	blt.n	800bad0 <_malloc_r+0x1c>
 800bacc:	42a9      	cmp	r1, r5
 800bace:	d905      	bls.n	800badc <_malloc_r+0x28>
 800bad0:	230c      	movs	r3, #12
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	2600      	movs	r6, #0
 800bad6:	4630      	mov	r0, r6
 800bad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800badc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bbb0 <_malloc_r+0xfc>
 800bae0:	f000 f868 	bl	800bbb4 <__malloc_lock>
 800bae4:	f8d8 3000 	ldr.w	r3, [r8]
 800bae8:	461c      	mov	r4, r3
 800baea:	bb5c      	cbnz	r4, 800bb44 <_malloc_r+0x90>
 800baec:	4629      	mov	r1, r5
 800baee:	4638      	mov	r0, r7
 800baf0:	f7ff ffc0 	bl	800ba74 <sbrk_aligned>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	4604      	mov	r4, r0
 800baf8:	d155      	bne.n	800bba6 <_malloc_r+0xf2>
 800bafa:	f8d8 4000 	ldr.w	r4, [r8]
 800bafe:	4626      	mov	r6, r4
 800bb00:	2e00      	cmp	r6, #0
 800bb02:	d145      	bne.n	800bb90 <_malloc_r+0xdc>
 800bb04:	2c00      	cmp	r4, #0
 800bb06:	d048      	beq.n	800bb9a <_malloc_r+0xe6>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	eb04 0903 	add.w	r9, r4, r3
 800bb12:	f000 fb5d 	bl	800c1d0 <_sbrk_r>
 800bb16:	4581      	cmp	r9, r0
 800bb18:	d13f      	bne.n	800bb9a <_malloc_r+0xe6>
 800bb1a:	6821      	ldr	r1, [r4, #0]
 800bb1c:	1a6d      	subs	r5, r5, r1
 800bb1e:	4629      	mov	r1, r5
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff ffa7 	bl	800ba74 <sbrk_aligned>
 800bb26:	3001      	adds	r0, #1
 800bb28:	d037      	beq.n	800bb9a <_malloc_r+0xe6>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	442b      	add	r3, r5
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	f8d8 3000 	ldr.w	r3, [r8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d038      	beq.n	800bbaa <_malloc_r+0xf6>
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	42a2      	cmp	r2, r4
 800bb3c:	d12b      	bne.n	800bb96 <_malloc_r+0xe2>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	605a      	str	r2, [r3, #4]
 800bb42:	e00f      	b.n	800bb64 <_malloc_r+0xb0>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	1b52      	subs	r2, r2, r5
 800bb48:	d41f      	bmi.n	800bb8a <_malloc_r+0xd6>
 800bb4a:	2a0b      	cmp	r2, #11
 800bb4c:	d917      	bls.n	800bb7e <_malloc_r+0xca>
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	6025      	str	r5, [r4, #0]
 800bb54:	bf18      	it	ne
 800bb56:	6059      	strne	r1, [r3, #4]
 800bb58:	6863      	ldr	r3, [r4, #4]
 800bb5a:	bf08      	it	eq
 800bb5c:	f8c8 1000 	streq.w	r1, [r8]
 800bb60:	5162      	str	r2, [r4, r5]
 800bb62:	604b      	str	r3, [r1, #4]
 800bb64:	4638      	mov	r0, r7
 800bb66:	f104 060b 	add.w	r6, r4, #11
 800bb6a:	f000 f829 	bl	800bbc0 <__malloc_unlock>
 800bb6e:	f026 0607 	bic.w	r6, r6, #7
 800bb72:	1d23      	adds	r3, r4, #4
 800bb74:	1af2      	subs	r2, r6, r3
 800bb76:	d0ae      	beq.n	800bad6 <_malloc_r+0x22>
 800bb78:	1b9b      	subs	r3, r3, r6
 800bb7a:	50a3      	str	r3, [r4, r2]
 800bb7c:	e7ab      	b.n	800bad6 <_malloc_r+0x22>
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	6862      	ldr	r2, [r4, #4]
 800bb82:	d1dd      	bne.n	800bb40 <_malloc_r+0x8c>
 800bb84:	f8c8 2000 	str.w	r2, [r8]
 800bb88:	e7ec      	b.n	800bb64 <_malloc_r+0xb0>
 800bb8a:	4623      	mov	r3, r4
 800bb8c:	6864      	ldr	r4, [r4, #4]
 800bb8e:	e7ac      	b.n	800baea <_malloc_r+0x36>
 800bb90:	4634      	mov	r4, r6
 800bb92:	6876      	ldr	r6, [r6, #4]
 800bb94:	e7b4      	b.n	800bb00 <_malloc_r+0x4c>
 800bb96:	4613      	mov	r3, r2
 800bb98:	e7cc      	b.n	800bb34 <_malloc_r+0x80>
 800bb9a:	230c      	movs	r3, #12
 800bb9c:	603b      	str	r3, [r7, #0]
 800bb9e:	4638      	mov	r0, r7
 800bba0:	f000 f80e 	bl	800bbc0 <__malloc_unlock>
 800bba4:	e797      	b.n	800bad6 <_malloc_r+0x22>
 800bba6:	6025      	str	r5, [r4, #0]
 800bba8:	e7dc      	b.n	800bb64 <_malloc_r+0xb0>
 800bbaa:	605b      	str	r3, [r3, #4]
 800bbac:	deff      	udf	#255	; 0xff
 800bbae:	bf00      	nop
 800bbb0:	24000c78 	.word	0x24000c78

0800bbb4 <__malloc_lock>:
 800bbb4:	4801      	ldr	r0, [pc, #4]	; (800bbbc <__malloc_lock+0x8>)
 800bbb6:	f7ff bf01 	b.w	800b9bc <__retarget_lock_acquire_recursive>
 800bbba:	bf00      	nop
 800bbbc:	24000c74 	.word	0x24000c74

0800bbc0 <__malloc_unlock>:
 800bbc0:	4801      	ldr	r0, [pc, #4]	; (800bbc8 <__malloc_unlock+0x8>)
 800bbc2:	f7ff befc 	b.w	800b9be <__retarget_lock_release_recursive>
 800bbc6:	bf00      	nop
 800bbc8:	24000c74 	.word	0x24000c74

0800bbcc <__ssputs_r>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	688e      	ldr	r6, [r1, #8]
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	42be      	cmp	r6, r7
 800bbd6:	680b      	ldr	r3, [r1, #0]
 800bbd8:	4682      	mov	sl, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4690      	mov	r8, r2
 800bbde:	d82c      	bhi.n	800bc3a <__ssputs_r+0x6e>
 800bbe0:	898a      	ldrh	r2, [r1, #12]
 800bbe2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbe6:	d026      	beq.n	800bc36 <__ssputs_r+0x6a>
 800bbe8:	6965      	ldr	r5, [r4, #20]
 800bbea:	6909      	ldr	r1, [r1, #16]
 800bbec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf0:	eba3 0901 	sub.w	r9, r3, r1
 800bbf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbf8:	1c7b      	adds	r3, r7, #1
 800bbfa:	444b      	add	r3, r9
 800bbfc:	106d      	asrs	r5, r5, #1
 800bbfe:	429d      	cmp	r5, r3
 800bc00:	bf38      	it	cc
 800bc02:	461d      	movcc	r5, r3
 800bc04:	0553      	lsls	r3, r2, #21
 800bc06:	d527      	bpl.n	800bc58 <__ssputs_r+0x8c>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7ff ff53 	bl	800bab4 <_malloc_r>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	b360      	cbz	r0, 800bc6c <__ssputs_r+0xa0>
 800bc12:	6921      	ldr	r1, [r4, #16]
 800bc14:	464a      	mov	r2, r9
 800bc16:	f7ff fed3 	bl	800b9c0 <memcpy>
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	6126      	str	r6, [r4, #16]
 800bc28:	6165      	str	r5, [r4, #20]
 800bc2a:	444e      	add	r6, r9
 800bc2c:	eba5 0509 	sub.w	r5, r5, r9
 800bc30:	6026      	str	r6, [r4, #0]
 800bc32:	60a5      	str	r5, [r4, #8]
 800bc34:	463e      	mov	r6, r7
 800bc36:	42be      	cmp	r6, r7
 800bc38:	d900      	bls.n	800bc3c <__ssputs_r+0x70>
 800bc3a:	463e      	mov	r6, r7
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	4632      	mov	r2, r6
 800bc40:	4641      	mov	r1, r8
 800bc42:	f000 faab 	bl	800c19c <memmove>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	1b9b      	subs	r3, r3, r6
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	4433      	add	r3, r6
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	2000      	movs	r0, #0
 800bc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc58:	462a      	mov	r2, r5
 800bc5a:	f000 fac9 	bl	800c1f0 <_realloc_r>
 800bc5e:	4606      	mov	r6, r0
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d1e0      	bne.n	800bc26 <__ssputs_r+0x5a>
 800bc64:	6921      	ldr	r1, [r4, #16]
 800bc66:	4650      	mov	r0, sl
 800bc68:	f7ff feb8 	bl	800b9dc <_free_r>
 800bc6c:	230c      	movs	r3, #12
 800bc6e:	f8ca 3000 	str.w	r3, [sl]
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7e:	e7e9      	b.n	800bc54 <__ssputs_r+0x88>

0800bc80 <_svfiprintf_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	4698      	mov	r8, r3
 800bc86:	898b      	ldrh	r3, [r1, #12]
 800bc88:	061b      	lsls	r3, r3, #24
 800bc8a:	b09d      	sub	sp, #116	; 0x74
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	460d      	mov	r5, r1
 800bc90:	4614      	mov	r4, r2
 800bc92:	d50e      	bpl.n	800bcb2 <_svfiprintf_r+0x32>
 800bc94:	690b      	ldr	r3, [r1, #16]
 800bc96:	b963      	cbnz	r3, 800bcb2 <_svfiprintf_r+0x32>
 800bc98:	2140      	movs	r1, #64	; 0x40
 800bc9a:	f7ff ff0b 	bl	800bab4 <_malloc_r>
 800bc9e:	6028      	str	r0, [r5, #0]
 800bca0:	6128      	str	r0, [r5, #16]
 800bca2:	b920      	cbnz	r0, 800bcae <_svfiprintf_r+0x2e>
 800bca4:	230c      	movs	r3, #12
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	e0d0      	b.n	800be50 <_svfiprintf_r+0x1d0>
 800bcae:	2340      	movs	r3, #64	; 0x40
 800bcb0:	616b      	str	r3, [r5, #20]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb6:	2320      	movs	r3, #32
 800bcb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcc0:	2330      	movs	r3, #48	; 0x30
 800bcc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be68 <_svfiprintf_r+0x1e8>
 800bcc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcca:	f04f 0901 	mov.w	r9, #1
 800bcce:	4623      	mov	r3, r4
 800bcd0:	469a      	mov	sl, r3
 800bcd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd6:	b10a      	cbz	r2, 800bcdc <_svfiprintf_r+0x5c>
 800bcd8:	2a25      	cmp	r2, #37	; 0x25
 800bcda:	d1f9      	bne.n	800bcd0 <_svfiprintf_r+0x50>
 800bcdc:	ebba 0b04 	subs.w	fp, sl, r4
 800bce0:	d00b      	beq.n	800bcfa <_svfiprintf_r+0x7a>
 800bce2:	465b      	mov	r3, fp
 800bce4:	4622      	mov	r2, r4
 800bce6:	4629      	mov	r1, r5
 800bce8:	4638      	mov	r0, r7
 800bcea:	f7ff ff6f 	bl	800bbcc <__ssputs_r>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f000 80a9 	beq.w	800be46 <_svfiprintf_r+0x1c6>
 800bcf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf6:	445a      	add	r2, fp
 800bcf8:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80a1 	beq.w	800be46 <_svfiprintf_r+0x1c6>
 800bd04:	2300      	movs	r3, #0
 800bd06:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd0e:	f10a 0a01 	add.w	sl, sl, #1
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	9307      	str	r3, [sp, #28]
 800bd16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd1a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd1c:	4654      	mov	r4, sl
 800bd1e:	2205      	movs	r2, #5
 800bd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd24:	4850      	ldr	r0, [pc, #320]	; (800be68 <_svfiprintf_r+0x1e8>)
 800bd26:	f7f4 fae3 	bl	80002f0 <memchr>
 800bd2a:	9a04      	ldr	r2, [sp, #16]
 800bd2c:	b9d8      	cbnz	r0, 800bd66 <_svfiprintf_r+0xe6>
 800bd2e:	06d0      	lsls	r0, r2, #27
 800bd30:	bf44      	itt	mi
 800bd32:	2320      	movmi	r3, #32
 800bd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd38:	0711      	lsls	r1, r2, #28
 800bd3a:	bf44      	itt	mi
 800bd3c:	232b      	movmi	r3, #43	; 0x2b
 800bd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd42:	f89a 3000 	ldrb.w	r3, [sl]
 800bd46:	2b2a      	cmp	r3, #42	; 0x2a
 800bd48:	d015      	beq.n	800bd76 <_svfiprintf_r+0xf6>
 800bd4a:	9a07      	ldr	r2, [sp, #28]
 800bd4c:	4654      	mov	r4, sl
 800bd4e:	2000      	movs	r0, #0
 800bd50:	f04f 0c0a 	mov.w	ip, #10
 800bd54:	4621      	mov	r1, r4
 800bd56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd5a:	3b30      	subs	r3, #48	; 0x30
 800bd5c:	2b09      	cmp	r3, #9
 800bd5e:	d94d      	bls.n	800bdfc <_svfiprintf_r+0x17c>
 800bd60:	b1b0      	cbz	r0, 800bd90 <_svfiprintf_r+0x110>
 800bd62:	9207      	str	r2, [sp, #28]
 800bd64:	e014      	b.n	800bd90 <_svfiprintf_r+0x110>
 800bd66:	eba0 0308 	sub.w	r3, r0, r8
 800bd6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	46a2      	mov	sl, r4
 800bd74:	e7d2      	b.n	800bd1c <_svfiprintf_r+0x9c>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	1d19      	adds	r1, r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	9103      	str	r1, [sp, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfbb      	ittet	lt
 800bd82:	425b      	neglt	r3, r3
 800bd84:	f042 0202 	orrlt.w	r2, r2, #2
 800bd88:	9307      	strge	r3, [sp, #28]
 800bd8a:	9307      	strlt	r3, [sp, #28]
 800bd8c:	bfb8      	it	lt
 800bd8e:	9204      	strlt	r2, [sp, #16]
 800bd90:	7823      	ldrb	r3, [r4, #0]
 800bd92:	2b2e      	cmp	r3, #46	; 0x2e
 800bd94:	d10c      	bne.n	800bdb0 <_svfiprintf_r+0x130>
 800bd96:	7863      	ldrb	r3, [r4, #1]
 800bd98:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9a:	d134      	bne.n	800be06 <_svfiprintf_r+0x186>
 800bd9c:	9b03      	ldr	r3, [sp, #12]
 800bd9e:	1d1a      	adds	r2, r3, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	9203      	str	r2, [sp, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	bfb8      	it	lt
 800bda8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdac:	3402      	adds	r4, #2
 800bdae:	9305      	str	r3, [sp, #20]
 800bdb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800be78 <_svfiprintf_r+0x1f8>
 800bdb4:	7821      	ldrb	r1, [r4, #0]
 800bdb6:	2203      	movs	r2, #3
 800bdb8:	4650      	mov	r0, sl
 800bdba:	f7f4 fa99 	bl	80002f0 <memchr>
 800bdbe:	b138      	cbz	r0, 800bdd0 <_svfiprintf_r+0x150>
 800bdc0:	9b04      	ldr	r3, [sp, #16]
 800bdc2:	eba0 000a 	sub.w	r0, r0, sl
 800bdc6:	2240      	movs	r2, #64	; 0x40
 800bdc8:	4082      	lsls	r2, r0
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	3401      	adds	r4, #1
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	4825      	ldr	r0, [pc, #148]	; (800be6c <_svfiprintf_r+0x1ec>)
 800bdd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdda:	2206      	movs	r2, #6
 800bddc:	f7f4 fa88 	bl	80002f0 <memchr>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d038      	beq.n	800be56 <_svfiprintf_r+0x1d6>
 800bde4:	4b22      	ldr	r3, [pc, #136]	; (800be70 <_svfiprintf_r+0x1f0>)
 800bde6:	bb1b      	cbnz	r3, 800be30 <_svfiprintf_r+0x1b0>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	3307      	adds	r3, #7
 800bdec:	f023 0307 	bic.w	r3, r3, #7
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	9303      	str	r3, [sp, #12]
 800bdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf6:	4433      	add	r3, r6
 800bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfa:	e768      	b.n	800bcce <_svfiprintf_r+0x4e>
 800bdfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800be00:	460c      	mov	r4, r1
 800be02:	2001      	movs	r0, #1
 800be04:	e7a6      	b.n	800bd54 <_svfiprintf_r+0xd4>
 800be06:	2300      	movs	r3, #0
 800be08:	3401      	adds	r4, #1
 800be0a:	9305      	str	r3, [sp, #20]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f04f 0c0a 	mov.w	ip, #10
 800be12:	4620      	mov	r0, r4
 800be14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be18:	3a30      	subs	r2, #48	; 0x30
 800be1a:	2a09      	cmp	r2, #9
 800be1c:	d903      	bls.n	800be26 <_svfiprintf_r+0x1a6>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0c6      	beq.n	800bdb0 <_svfiprintf_r+0x130>
 800be22:	9105      	str	r1, [sp, #20]
 800be24:	e7c4      	b.n	800bdb0 <_svfiprintf_r+0x130>
 800be26:	fb0c 2101 	mla	r1, ip, r1, r2
 800be2a:	4604      	mov	r4, r0
 800be2c:	2301      	movs	r3, #1
 800be2e:	e7f0      	b.n	800be12 <_svfiprintf_r+0x192>
 800be30:	ab03      	add	r3, sp, #12
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	462a      	mov	r2, r5
 800be36:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <_svfiprintf_r+0x1f4>)
 800be38:	a904      	add	r1, sp, #16
 800be3a:	4638      	mov	r0, r7
 800be3c:	f3af 8000 	nop.w
 800be40:	1c42      	adds	r2, r0, #1
 800be42:	4606      	mov	r6, r0
 800be44:	d1d6      	bne.n	800bdf4 <_svfiprintf_r+0x174>
 800be46:	89ab      	ldrh	r3, [r5, #12]
 800be48:	065b      	lsls	r3, r3, #25
 800be4a:	f53f af2d 	bmi.w	800bca8 <_svfiprintf_r+0x28>
 800be4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be50:	b01d      	add	sp, #116	; 0x74
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	ab03      	add	r3, sp, #12
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	462a      	mov	r2, r5
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_svfiprintf_r+0x1f4>)
 800be5e:	a904      	add	r1, sp, #16
 800be60:	4638      	mov	r0, r7
 800be62:	f000 f879 	bl	800bf58 <_printf_i>
 800be66:	e7eb      	b.n	800be40 <_svfiprintf_r+0x1c0>
 800be68:	0800c300 	.word	0x0800c300
 800be6c:	0800c30a 	.word	0x0800c30a
 800be70:	00000000 	.word	0x00000000
 800be74:	0800bbcd 	.word	0x0800bbcd
 800be78:	0800c306 	.word	0x0800c306

0800be7c <_printf_common>:
 800be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be80:	4616      	mov	r6, r2
 800be82:	4699      	mov	r9, r3
 800be84:	688a      	ldr	r2, [r1, #8]
 800be86:	690b      	ldr	r3, [r1, #16]
 800be88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be8c:	4293      	cmp	r3, r2
 800be8e:	bfb8      	it	lt
 800be90:	4613      	movlt	r3, r2
 800be92:	6033      	str	r3, [r6, #0]
 800be94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be98:	4607      	mov	r7, r0
 800be9a:	460c      	mov	r4, r1
 800be9c:	b10a      	cbz	r2, 800bea2 <_printf_common+0x26>
 800be9e:	3301      	adds	r3, #1
 800bea0:	6033      	str	r3, [r6, #0]
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	0699      	lsls	r1, r3, #26
 800bea6:	bf42      	ittt	mi
 800bea8:	6833      	ldrmi	r3, [r6, #0]
 800beaa:	3302      	addmi	r3, #2
 800beac:	6033      	strmi	r3, [r6, #0]
 800beae:	6825      	ldr	r5, [r4, #0]
 800beb0:	f015 0506 	ands.w	r5, r5, #6
 800beb4:	d106      	bne.n	800bec4 <_printf_common+0x48>
 800beb6:	f104 0a19 	add.w	sl, r4, #25
 800beba:	68e3      	ldr	r3, [r4, #12]
 800bebc:	6832      	ldr	r2, [r6, #0]
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	42ab      	cmp	r3, r5
 800bec2:	dc26      	bgt.n	800bf12 <_printf_common+0x96>
 800bec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bec8:	1e13      	subs	r3, r2, #0
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	bf18      	it	ne
 800bece:	2301      	movne	r3, #1
 800bed0:	0692      	lsls	r2, r2, #26
 800bed2:	d42b      	bmi.n	800bf2c <_printf_common+0xb0>
 800bed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bed8:	4649      	mov	r1, r9
 800beda:	4638      	mov	r0, r7
 800bedc:	47c0      	blx	r8
 800bede:	3001      	adds	r0, #1
 800bee0:	d01e      	beq.n	800bf20 <_printf_common+0xa4>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	6922      	ldr	r2, [r4, #16]
 800bee6:	f003 0306 	and.w	r3, r3, #6
 800beea:	2b04      	cmp	r3, #4
 800beec:	bf02      	ittt	eq
 800beee:	68e5      	ldreq	r5, [r4, #12]
 800bef0:	6833      	ldreq	r3, [r6, #0]
 800bef2:	1aed      	subeq	r5, r5, r3
 800bef4:	68a3      	ldr	r3, [r4, #8]
 800bef6:	bf0c      	ite	eq
 800bef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800befc:	2500      	movne	r5, #0
 800befe:	4293      	cmp	r3, r2
 800bf00:	bfc4      	itt	gt
 800bf02:	1a9b      	subgt	r3, r3, r2
 800bf04:	18ed      	addgt	r5, r5, r3
 800bf06:	2600      	movs	r6, #0
 800bf08:	341a      	adds	r4, #26
 800bf0a:	42b5      	cmp	r5, r6
 800bf0c:	d11a      	bne.n	800bf44 <_printf_common+0xc8>
 800bf0e:	2000      	movs	r0, #0
 800bf10:	e008      	b.n	800bf24 <_printf_common+0xa8>
 800bf12:	2301      	movs	r3, #1
 800bf14:	4652      	mov	r2, sl
 800bf16:	4649      	mov	r1, r9
 800bf18:	4638      	mov	r0, r7
 800bf1a:	47c0      	blx	r8
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d103      	bne.n	800bf28 <_printf_common+0xac>
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295
 800bf24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf28:	3501      	adds	r5, #1
 800bf2a:	e7c6      	b.n	800beba <_printf_common+0x3e>
 800bf2c:	18e1      	adds	r1, r4, r3
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	2030      	movs	r0, #48	; 0x30
 800bf32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf36:	4422      	add	r2, r4
 800bf38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf40:	3302      	adds	r3, #2
 800bf42:	e7c7      	b.n	800bed4 <_printf_common+0x58>
 800bf44:	2301      	movs	r3, #1
 800bf46:	4622      	mov	r2, r4
 800bf48:	4649      	mov	r1, r9
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	47c0      	blx	r8
 800bf4e:	3001      	adds	r0, #1
 800bf50:	d0e6      	beq.n	800bf20 <_printf_common+0xa4>
 800bf52:	3601      	adds	r6, #1
 800bf54:	e7d9      	b.n	800bf0a <_printf_common+0x8e>
	...

0800bf58 <_printf_i>:
 800bf58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	7e0f      	ldrb	r7, [r1, #24]
 800bf5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf60:	2f78      	cmp	r7, #120	; 0x78
 800bf62:	4691      	mov	r9, r2
 800bf64:	4680      	mov	r8, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	469a      	mov	sl, r3
 800bf6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf6e:	d807      	bhi.n	800bf80 <_printf_i+0x28>
 800bf70:	2f62      	cmp	r7, #98	; 0x62
 800bf72:	d80a      	bhi.n	800bf8a <_printf_i+0x32>
 800bf74:	2f00      	cmp	r7, #0
 800bf76:	f000 80d4 	beq.w	800c122 <_printf_i+0x1ca>
 800bf7a:	2f58      	cmp	r7, #88	; 0x58
 800bf7c:	f000 80c0 	beq.w	800c100 <_printf_i+0x1a8>
 800bf80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf88:	e03a      	b.n	800c000 <_printf_i+0xa8>
 800bf8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf8e:	2b15      	cmp	r3, #21
 800bf90:	d8f6      	bhi.n	800bf80 <_printf_i+0x28>
 800bf92:	a101      	add	r1, pc, #4	; (adr r1, 800bf98 <_printf_i+0x40>)
 800bf94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf98:	0800bff1 	.word	0x0800bff1
 800bf9c:	0800c005 	.word	0x0800c005
 800bfa0:	0800bf81 	.word	0x0800bf81
 800bfa4:	0800bf81 	.word	0x0800bf81
 800bfa8:	0800bf81 	.word	0x0800bf81
 800bfac:	0800bf81 	.word	0x0800bf81
 800bfb0:	0800c005 	.word	0x0800c005
 800bfb4:	0800bf81 	.word	0x0800bf81
 800bfb8:	0800bf81 	.word	0x0800bf81
 800bfbc:	0800bf81 	.word	0x0800bf81
 800bfc0:	0800bf81 	.word	0x0800bf81
 800bfc4:	0800c109 	.word	0x0800c109
 800bfc8:	0800c031 	.word	0x0800c031
 800bfcc:	0800c0c3 	.word	0x0800c0c3
 800bfd0:	0800bf81 	.word	0x0800bf81
 800bfd4:	0800bf81 	.word	0x0800bf81
 800bfd8:	0800c12b 	.word	0x0800c12b
 800bfdc:	0800bf81 	.word	0x0800bf81
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800bf81 	.word	0x0800bf81
 800bfe8:	0800bf81 	.word	0x0800bf81
 800bfec:	0800c0cb 	.word	0x0800c0cb
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	1d1a      	adds	r2, r3, #4
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	602a      	str	r2, [r5, #0]
 800bff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c000:	2301      	movs	r3, #1
 800c002:	e09f      	b.n	800c144 <_printf_i+0x1ec>
 800c004:	6820      	ldr	r0, [r4, #0]
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	0607      	lsls	r7, r0, #24
 800c00a:	f103 0104 	add.w	r1, r3, #4
 800c00e:	6029      	str	r1, [r5, #0]
 800c010:	d501      	bpl.n	800c016 <_printf_i+0xbe>
 800c012:	681e      	ldr	r6, [r3, #0]
 800c014:	e003      	b.n	800c01e <_printf_i+0xc6>
 800c016:	0646      	lsls	r6, r0, #25
 800c018:	d5fb      	bpl.n	800c012 <_printf_i+0xba>
 800c01a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c01e:	2e00      	cmp	r6, #0
 800c020:	da03      	bge.n	800c02a <_printf_i+0xd2>
 800c022:	232d      	movs	r3, #45	; 0x2d
 800c024:	4276      	negs	r6, r6
 800c026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c02a:	485a      	ldr	r0, [pc, #360]	; (800c194 <_printf_i+0x23c>)
 800c02c:	230a      	movs	r3, #10
 800c02e:	e012      	b.n	800c056 <_printf_i+0xfe>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	6820      	ldr	r0, [r4, #0]
 800c034:	1d19      	adds	r1, r3, #4
 800c036:	6029      	str	r1, [r5, #0]
 800c038:	0605      	lsls	r5, r0, #24
 800c03a:	d501      	bpl.n	800c040 <_printf_i+0xe8>
 800c03c:	681e      	ldr	r6, [r3, #0]
 800c03e:	e002      	b.n	800c046 <_printf_i+0xee>
 800c040:	0641      	lsls	r1, r0, #25
 800c042:	d5fb      	bpl.n	800c03c <_printf_i+0xe4>
 800c044:	881e      	ldrh	r6, [r3, #0]
 800c046:	4853      	ldr	r0, [pc, #332]	; (800c194 <_printf_i+0x23c>)
 800c048:	2f6f      	cmp	r7, #111	; 0x6f
 800c04a:	bf0c      	ite	eq
 800c04c:	2308      	moveq	r3, #8
 800c04e:	230a      	movne	r3, #10
 800c050:	2100      	movs	r1, #0
 800c052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c056:	6865      	ldr	r5, [r4, #4]
 800c058:	60a5      	str	r5, [r4, #8]
 800c05a:	2d00      	cmp	r5, #0
 800c05c:	bfa2      	ittt	ge
 800c05e:	6821      	ldrge	r1, [r4, #0]
 800c060:	f021 0104 	bicge.w	r1, r1, #4
 800c064:	6021      	strge	r1, [r4, #0]
 800c066:	b90e      	cbnz	r6, 800c06c <_printf_i+0x114>
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d04b      	beq.n	800c104 <_printf_i+0x1ac>
 800c06c:	4615      	mov	r5, r2
 800c06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c072:	fb03 6711 	mls	r7, r3, r1, r6
 800c076:	5dc7      	ldrb	r7, [r0, r7]
 800c078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c07c:	4637      	mov	r7, r6
 800c07e:	42bb      	cmp	r3, r7
 800c080:	460e      	mov	r6, r1
 800c082:	d9f4      	bls.n	800c06e <_printf_i+0x116>
 800c084:	2b08      	cmp	r3, #8
 800c086:	d10b      	bne.n	800c0a0 <_printf_i+0x148>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	07de      	lsls	r6, r3, #31
 800c08c:	d508      	bpl.n	800c0a0 <_printf_i+0x148>
 800c08e:	6923      	ldr	r3, [r4, #16]
 800c090:	6861      	ldr	r1, [r4, #4]
 800c092:	4299      	cmp	r1, r3
 800c094:	bfde      	ittt	le
 800c096:	2330      	movle	r3, #48	; 0x30
 800c098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c09c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0a0:	1b52      	subs	r2, r2, r5
 800c0a2:	6122      	str	r2, [r4, #16]
 800c0a4:	f8cd a000 	str.w	sl, [sp]
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	aa03      	add	r2, sp, #12
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	f7ff fee4 	bl	800be7c <_printf_common>
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d14a      	bne.n	800c14e <_printf_i+0x1f6>
 800c0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0bc:	b004      	add	sp, #16
 800c0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	f043 0320 	orr.w	r3, r3, #32
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	4833      	ldr	r0, [pc, #204]	; (800c198 <_printf_i+0x240>)
 800c0cc:	2778      	movs	r7, #120	; 0x78
 800c0ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	6829      	ldr	r1, [r5, #0]
 800c0d6:	061f      	lsls	r7, r3, #24
 800c0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0dc:	d402      	bmi.n	800c0e4 <_printf_i+0x18c>
 800c0de:	065f      	lsls	r7, r3, #25
 800c0e0:	bf48      	it	mi
 800c0e2:	b2b6      	uxthmi	r6, r6
 800c0e4:	07df      	lsls	r7, r3, #31
 800c0e6:	bf48      	it	mi
 800c0e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ec:	6029      	str	r1, [r5, #0]
 800c0ee:	bf48      	it	mi
 800c0f0:	6023      	strmi	r3, [r4, #0]
 800c0f2:	b91e      	cbnz	r6, 800c0fc <_printf_i+0x1a4>
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	f023 0320 	bic.w	r3, r3, #32
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	2310      	movs	r3, #16
 800c0fe:	e7a7      	b.n	800c050 <_printf_i+0xf8>
 800c100:	4824      	ldr	r0, [pc, #144]	; (800c194 <_printf_i+0x23c>)
 800c102:	e7e4      	b.n	800c0ce <_printf_i+0x176>
 800c104:	4615      	mov	r5, r2
 800c106:	e7bd      	b.n	800c084 <_printf_i+0x12c>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	6826      	ldr	r6, [r4, #0]
 800c10c:	6961      	ldr	r1, [r4, #20]
 800c10e:	1d18      	adds	r0, r3, #4
 800c110:	6028      	str	r0, [r5, #0]
 800c112:	0635      	lsls	r5, r6, #24
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	d501      	bpl.n	800c11c <_printf_i+0x1c4>
 800c118:	6019      	str	r1, [r3, #0]
 800c11a:	e002      	b.n	800c122 <_printf_i+0x1ca>
 800c11c:	0670      	lsls	r0, r6, #25
 800c11e:	d5fb      	bpl.n	800c118 <_printf_i+0x1c0>
 800c120:	8019      	strh	r1, [r3, #0]
 800c122:	2300      	movs	r3, #0
 800c124:	6123      	str	r3, [r4, #16]
 800c126:	4615      	mov	r5, r2
 800c128:	e7bc      	b.n	800c0a4 <_printf_i+0x14c>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	1d1a      	adds	r2, r3, #4
 800c12e:	602a      	str	r2, [r5, #0]
 800c130:	681d      	ldr	r5, [r3, #0]
 800c132:	6862      	ldr	r2, [r4, #4]
 800c134:	2100      	movs	r1, #0
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 f8da 	bl	80002f0 <memchr>
 800c13c:	b108      	cbz	r0, 800c142 <_printf_i+0x1ea>
 800c13e:	1b40      	subs	r0, r0, r5
 800c140:	6060      	str	r0, [r4, #4]
 800c142:	6863      	ldr	r3, [r4, #4]
 800c144:	6123      	str	r3, [r4, #16]
 800c146:	2300      	movs	r3, #0
 800c148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c14c:	e7aa      	b.n	800c0a4 <_printf_i+0x14c>
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	462a      	mov	r2, r5
 800c152:	4649      	mov	r1, r9
 800c154:	4640      	mov	r0, r8
 800c156:	47d0      	blx	sl
 800c158:	3001      	adds	r0, #1
 800c15a:	d0ad      	beq.n	800c0b8 <_printf_i+0x160>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	079b      	lsls	r3, r3, #30
 800c160:	d413      	bmi.n	800c18a <_printf_i+0x232>
 800c162:	68e0      	ldr	r0, [r4, #12]
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	4298      	cmp	r0, r3
 800c168:	bfb8      	it	lt
 800c16a:	4618      	movlt	r0, r3
 800c16c:	e7a6      	b.n	800c0bc <_printf_i+0x164>
 800c16e:	2301      	movs	r3, #1
 800c170:	4632      	mov	r2, r6
 800c172:	4649      	mov	r1, r9
 800c174:	4640      	mov	r0, r8
 800c176:	47d0      	blx	sl
 800c178:	3001      	adds	r0, #1
 800c17a:	d09d      	beq.n	800c0b8 <_printf_i+0x160>
 800c17c:	3501      	adds	r5, #1
 800c17e:	68e3      	ldr	r3, [r4, #12]
 800c180:	9903      	ldr	r1, [sp, #12]
 800c182:	1a5b      	subs	r3, r3, r1
 800c184:	42ab      	cmp	r3, r5
 800c186:	dcf2      	bgt.n	800c16e <_printf_i+0x216>
 800c188:	e7eb      	b.n	800c162 <_printf_i+0x20a>
 800c18a:	2500      	movs	r5, #0
 800c18c:	f104 0619 	add.w	r6, r4, #25
 800c190:	e7f5      	b.n	800c17e <_printf_i+0x226>
 800c192:	bf00      	nop
 800c194:	0800c311 	.word	0x0800c311
 800c198:	0800c322 	.word	0x0800c322

0800c19c <memmove>:
 800c19c:	4288      	cmp	r0, r1
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	eb01 0402 	add.w	r4, r1, r2
 800c1a4:	d902      	bls.n	800c1ac <memmove+0x10>
 800c1a6:	4284      	cmp	r4, r0
 800c1a8:	4623      	mov	r3, r4
 800c1aa:	d807      	bhi.n	800c1bc <memmove+0x20>
 800c1ac:	1e43      	subs	r3, r0, #1
 800c1ae:	42a1      	cmp	r1, r4
 800c1b0:	d008      	beq.n	800c1c4 <memmove+0x28>
 800c1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ba:	e7f8      	b.n	800c1ae <memmove+0x12>
 800c1bc:	4402      	add	r2, r0
 800c1be:	4601      	mov	r1, r0
 800c1c0:	428a      	cmp	r2, r1
 800c1c2:	d100      	bne.n	800c1c6 <memmove+0x2a>
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1ce:	e7f7      	b.n	800c1c0 <memmove+0x24>

0800c1d0 <_sbrk_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d06      	ldr	r5, [pc, #24]	; (800c1ec <_sbrk_r+0x1c>)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	f7ff fb24 	bl	800b828 <_sbrk>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_sbrk_r+0x1a>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_sbrk_r+0x1a>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	24000c70 	.word	0x24000c70

0800c1f0 <_realloc_r>:
 800c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	460e      	mov	r6, r1
 800c1fa:	b921      	cbnz	r1, 800c206 <_realloc_r+0x16>
 800c1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c200:	4611      	mov	r1, r2
 800c202:	f7ff bc57 	b.w	800bab4 <_malloc_r>
 800c206:	b92a      	cbnz	r2, 800c214 <_realloc_r+0x24>
 800c208:	f7ff fbe8 	bl	800b9dc <_free_r>
 800c20c:	4625      	mov	r5, r4
 800c20e:	4628      	mov	r0, r5
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	f000 f81b 	bl	800c24e <_malloc_usable_size_r>
 800c218:	4284      	cmp	r4, r0
 800c21a:	4607      	mov	r7, r0
 800c21c:	d802      	bhi.n	800c224 <_realloc_r+0x34>
 800c21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c222:	d812      	bhi.n	800c24a <_realloc_r+0x5a>
 800c224:	4621      	mov	r1, r4
 800c226:	4640      	mov	r0, r8
 800c228:	f7ff fc44 	bl	800bab4 <_malloc_r>
 800c22c:	4605      	mov	r5, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0ed      	beq.n	800c20e <_realloc_r+0x1e>
 800c232:	42bc      	cmp	r4, r7
 800c234:	4622      	mov	r2, r4
 800c236:	4631      	mov	r1, r6
 800c238:	bf28      	it	cs
 800c23a:	463a      	movcs	r2, r7
 800c23c:	f7ff fbc0 	bl	800b9c0 <memcpy>
 800c240:	4631      	mov	r1, r6
 800c242:	4640      	mov	r0, r8
 800c244:	f7ff fbca 	bl	800b9dc <_free_r>
 800c248:	e7e1      	b.n	800c20e <_realloc_r+0x1e>
 800c24a:	4635      	mov	r5, r6
 800c24c:	e7df      	b.n	800c20e <_realloc_r+0x1e>

0800c24e <_malloc_usable_size_r>:
 800c24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c252:	1f18      	subs	r0, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfbc      	itt	lt
 800c258:	580b      	ldrlt	r3, [r1, r0]
 800c25a:	18c0      	addlt	r0, r0, r3
 800c25c:	4770      	bx	lr
	...

0800c260 <_init>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	bf00      	nop
 800c264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c266:	bc08      	pop	{r3}
 800c268:	469e      	mov	lr, r3
 800c26a:	4770      	bx	lr

0800c26c <_fini>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	bf00      	nop
 800c270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c272:	bc08      	pop	{r3}
 800c274:	469e      	mov	lr, r3
 800c276:	4770      	bx	lr
